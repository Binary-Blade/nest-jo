version: '3.9'

services:
  # SERVER - NESTJS
  server-prod:
    image: server-jo-prod
    container_name: server-jo-prod
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    environment:
      JWT_ACCESS_TOKEN_SECRET: ${JWT_ACCESS_TOKEN_SECRET}
      JWT_ACCESS_TOKEN_EXPIRATION: ${JWT_ACCESS_TOKEN_EXPIRATION}
      JWT_REFRESH_TOKEN_SECRET: ${JWT_REFRESH_TOKEN_SECRET}
      JWT_REFRESH_TOKEN_EXPIRATION: ${JWT_REFRESH_TOKEN_EXPIRATION}
    volumes:
      - type: volume
        source: pg-data-prod
        target: /var/lib/postgresql/data
    networks:
      - appnet

  # DATABASE - POSTGRESQL
  postgres:
    image: postgres:16-alpine
    container_name: postgres-jo-prod
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - type: volume
        source: pg-data-prod
        target: /var/lib/postgresql/data
    networks:
      - appnet

  # REDIS - CACHE
  redis:
    image: redis:alpine
    container_name: redis-jo-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - type: volume
        source: redis-data-prod
        target: /data
    networks:
      - appnet
networks: 
  appnet:

volumes:
  pg-data-prod:  # PERSISTENT VOLUME : db-postgres
  redis-data-prod: # PERSISTENT VOLUME : redis-cache
