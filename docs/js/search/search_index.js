var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.701,1,2.31]],["body/injectables/AccessTokenGuard.html",[0,1.226,1,4.04,2,2.065,3,0.112,4,0.127,5,0.112,6,5.501,7,5.003,8,0.175,9,4.635,10,7.482,11,6.579,12,4.217,13,4.217,14,3.731,15,3.879,16,0.801,17,4.635,18,7.482,19,5.746,20,7.482,21,0.011,22,6.579,23,5.539,24,5.539,25,4.322,26,8.005,27,0.249,28,1.025,29,6.257,30,5.003,31,0.229,32,0.143,33,0.009,34,0.009]],["title/injectables/AccessTokenStrategy.html",[0,0.701,35,2.796]],["body/injectables/AccessTokenStrategy.html",[0,1.049,2,1.611,3,0.087,4,0.099,5,0.087,8,0.2,13,4.71,14,3.782,15,3.319,16,0.685,21,0.011,25,3.857,27,0.278,28,0.8,30,3.902,31,0.196,32,0.112,33,0.007,34,0.007,35,4.182,36,6.282,37,3.902,38,6.282,39,5.119,40,6.402,41,0.405,42,1.305,43,1.897,44,6.065,45,2.055,46,3.902,47,3.819,48,4.382,49,0.685,50,4.88,51,1.34,52,0.936,53,0.511,54,0.909,55,5.713,56,1.514,57,1.656,58,1.842,59,3.076,60,4.027,61,6.402,62,5.456,63,4.88,64,4.555,65,0.817,66,2.001,67,6.402,68,2.968,69,2.968,70,1.34,71,1.753,72,5.629,73,5.119,74,2.635,75,6.402,76,2.345,77,1.566,78,4.88,79,3.902,80,4.29,81,2.113,82,1.166,83,1.495,84,3.612,85,1.705,86,4.88,87,4.88,88,4.88,89,3.902,90,4.29,91,4.88,92,4.88,93,3.563,94,4.88,95,4.88,96,3.612,97,1.92,98,4.29,99,4.88,100,3.023,101,2.878,102,3.381,103,4.88,104,1.981,105,1.92,106,6.402,107,4.29,108,1.482,109,4.29,110,3.612,111,4.29,112,1.92,113,1.367,114,4.88,115,1.7,116,1.367,117,2.635,118,4.29,119,4.88,120,3.381,121,4.88]],["title/classes/AddForeignKeyConstraints1712751780000.html",[31,0.131,122,3.422]],["body/classes/AddForeignKeyConstraints1712751780000.html",[3,0.084,4,0.096,5,0.084,8,0.196,16,0.8,21,0.01,27,0.156,31,0.191,32,0.107,33,0.007,34,0.007,41,0.39,42,1.272,43,2.124,49,0.668,51,1.307,52,0.913,53,0.498,54,0.886,66,2.322,70,1.564,71,1.962,82,1.122,83,1.307,97,3.362,108,1.897,122,4.992,123,1.316,124,6.165,125,3.756,126,4.392,127,6.135,128,4.876,129,7.031,130,3.474,131,4.671,132,6.57,133,2.796,134,3.786,135,4.318,136,3.236,137,3.236,138,3.371,139,4.56,140,4.698,141,3.371,142,5.489,143,4.992,144,2.894,145,6.243,146,2.27,147,3.132,148,3.874,149,3.874,150,3.371,151,4.698,152,5.489,153,5.489,154,6.243,155,5.489,156,4.034,157,7.472,158,3.726,159,8.288,160,6.243,161,4.211,162,2.343,163,3.236,164,3.346,165,3.874,166,6.243,167,3.867,168,2.647,169,6.243,170,3.867,171,6.243,172,3.113,173,4.032,174,4.698,175,3.254,176,4.13]],["title/modules/AppModule.html",[177,1.167,178,2.965]],["body/modules/AppModule.html",[3,0.085,4,0.096,5,0.085,8,0.133,21,0.011,27,0.298,28,0.776,31,0.145,32,0.108,33,0.007,34,0.007,56,0.82,59,3.015,60,3.536,74,2.556,117,2.556,177,2.264,178,6.231,179,1.863,180,1.922,181,2.12,182,2.12,183,1.984,184,2.05,185,2.05,186,4.162,187,4.162,188,5.665,189,4.823,190,4.608,191,5.665,192,4.608,193,5.665,194,5.342,195,4.415,196,5.665,197,4.608,198,4.823,199,5.665,200,2.81,201,2.12,202,1.922,203,4.734,204,5.517,205,2.717,206,3.786,207,4.734,208,4.162,209,4.734,210,4.734,211,3.504,212,3.28,213,2.556,214,2.792,215,3.786,216,4.734,217,3.504,218,3.504,219,4.734,220,3.504,221,5.018,222,3.504,223,4.877,224,3.536,225,4.734,226,4.734,227,4.162,228,3.786,229,3.504,230,4.734,231,2.454,232,3.786,233,4.734,234,2.275,235,4.162,236,2.12,237,5.517,238,2.932,239,3.28,240,7.189,241,1.257,242,1.959,243,2.275,244,1.362,245,2.556,246,3.093,247,2.275,248,1.984,249,4.162]],["title/controllers/AuthController.html",[250,1.984,251,2.965]],["body/controllers/AuthController.html",[1,1.64,3,0.054,4,0.062,5,0.054,8,0.207,12,2.581,14,2.284,15,2.858,16,0.868,17,3.415,21,0.011,27,0.256,28,0.498,31,0.14,32,0.069,33,0.005,34,0.005,41,0.252,42,0.933,43,2.172,45,1.47,49,0.769,51,1.504,52,1.051,53,0.573,54,1.02,56,1.505,58,1.318,65,0.347,66,1.845,68,3.209,70,1.697,71,2.078,81,1.315,83,1.725,85,1.6,93,3.959,108,2.299,113,1.939,115,1.839,116,2.272,117,4.335,146,0.923,163,2.852,202,2.238,239,3.819,250,2.555,251,3.819,252,1.408,253,2.67,254,1.984,255,3.037,256,1.719,257,3.39,258,3.172,259,1.647,260,4.579,261,4.01,262,3.662,263,2.472,264,4.847,265,3.037,266,4.582,267,2.244,268,4.579,269,3.037,270,3.662,271,5.428,272,4.579,273,3.172,274,3.959,275,4.543,276,2.581,277,3.172,278,2.581,279,2.374,280,2.047,281,3.662,282,1.674,283,1.696,284,3.037,285,1.355,286,5.253,287,3.037,288,3.037,289,2.837,290,5.125,291,4.579,292,2.238,293,5.023,294,3.037,295,6.101,296,3.037,297,3.037,298,2.837,299,2.374,300,4.579,301,5.746,302,3.037,303,5.603,304,4.579,305,3.037,306,4.252,307,4.579,308,2.67,309,1.507,310,3.037,311,3.037,312,4.579,313,2.67,314,3.037,315,3.037,316,3.662,317,3.314,318,4.579,319,2.67,320,5.603,321,3.037,322,3.037,323,2.284,324,4.08,325,4.579,326,3.662,327,4.026,328,3.662,329,4.579,330,3.662,331,4.026,332,3.172,333,1.984,334,3.037,335,2.429,336,4.08,337,2.67,338,3.037,339,2.67,340,2.429,341,2.429,342,3.885,343,2.429,344,1.984,345,3.037,346,2.248,347,3.037,348,1.881,349,3.037,350,0.851,351,1.283,352,3.107,353,4.579,354,2.67,355,3.037,356,3.037,357,3.037,358,3.037,359,3.037,360,3.037,361,3.037,362,4.579,363,3.037,364,3.037,365,3.037,366,3.037,367,3.037,368,3.037,369,3.037,370,3.037,371,3.037,372,1.574,373,2.429,374,2.429,375,3.037,376,3.037,377,3.037]],["title/modules/AuthModule.html",[177,1.167,188,2.965]],["body/modules/AuthModule.html",[3,0.095,4,0.109,5,0.095,8,0.149,21,0.011,27,0.294,28,0.875,31,0.163,32,0.122,33,0.008,34,0.008,56,1.175,57,1.38,77,1.713,81,2.311,177,2.258,179,2.1,180,2.166,181,2.39,182,2.39,183,2.236,184,3.397,185,2.311,188,6.19,190,4.74,200,3.037,201,2.39,202,2.166,205,2.937,211,3.95,239,4.699,251,5.435,252,3.144,256,1.9,336,5.21,337,4.692,342,4.961,343,4.267,378,4.692,379,4.692,380,4.692,381,5.495,382,5.21,383,5.21,384,5.495,385,5.336,386,3.382,387,6.556,388,4.267,389,5.336,390,5.336,391,4.692,392,4.267,393,4.692,394,4.267,395,5.336,396,3.95,397,4.001]],["title/injectables/AuthService.html",[0,0.701,336,2.651]],["body/injectables/AuthService.html",[0,0.723,2,0.954,3,0.052,4,0.059,5,0.052,8,0.198,15,3.102,16,0.815,21,0.011,27,0.264,28,0.474,31,0.135,32,0.066,33,0.005,34,0.005,41,0.24,42,0.899,43,2.152,45,1.716,46,2.31,47,3.275,49,0.727,51,1.421,52,0.993,53,0.542,54,0.964,55,4.276,56,1.521,57,1.14,58,2.259,65,0.927,66,2.408,68,2.044,70,1.594,71,1.988,73,4.276,76,1.388,77,0.927,81,1.251,82,0.69,83,1.734,84,2.139,85,2.373,104,2.757,105,1.735,108,2.313,110,2.139,112,2.78,113,2.27,115,0.767,116,1.902,146,1.34,147,1.211,163,1.909,202,2.171,232,3.526,239,3.055,256,2.199,257,3.264,258,3.055,261,2.881,262,3.526,263,2.381,264,3.877,266,4.512,270,3.526,273,2.002,274,4.104,275,2.139,280,1.304,281,3.526,282,1.203,283,1.633,285,1.803,286,4.914,289,2.731,292,2.008,293,4.207,295,6.092,299,2.286,306,4.145,308,3.877,309,1.6,317,4.111,319,3.877,323,2.199,326,5.649,328,5.431,330,2.31,336,3.706,342,4.402,343,2.31,348,1.79,350,1.235,352,4.291,374,3.526,382,4.623,383,4.623,392,2.31,393,2.54,394,2.31,398,2.54,399,3.877,400,5.261,401,3.631,402,4.623,403,2.889,404,2.731,405,3.264,406,3.264,407,4.409,408,2.889,409,4.409,410,4.409,411,2.889,412,2.889,413,4.409,414,4.409,415,2.846,416,3.213,417,2.889,418,4.409,419,0.902,420,1.039,421,3.526,422,2.889,423,4.409,424,3.264,425,2.875,426,4.145,427,2.889,428,2.889,429,2.889,430,2.31,431,1.628,432,1.628,433,2.31,434,2.889,435,1.339,436,6.443,437,2.889,438,4.409,439,5.665,440,2.889,441,2.889,442,2.889,443,2.889,444,2.889,445,2.889,446,2.889,447,2.889,448,2.889,449,5.261,450,2.889,451,2.889,452,2.889,453,2.31,454,2.54,455,1.251,456,2.199,457,2.889,458,2.139,459,3.526,460,2.889,461,2.889,462,2.31,463,2.889,464,5.983,465,4.409,466,2.54,467,4.701,468,2.889,469,2.881,470,2.889,471,2.54,472,2.889,473,2.31,474,2.889,475,2.889,476,2.889,477,2.889,478,2.54,479,2.889,480,2.889,481,3.877,482,0.927,483,3.877,484,3.264,485,2.889,486,2.889,487,2.889,488,2.31]],["title/entities/Cart.html",[57,1.107,242,1.336]],["body/entities/Cart.html",[3,0.085,4,0.097,5,0.085,8,0.133,16,0.89,21,0.011,27,0.234,31,0.193,32,0.109,33,0.007,34,0.007,41,0.586,49,0.836,52,0.696,53,0.688,56,1.493,57,1.943,65,0.951,81,2.061,82,1.137,108,1.913,213,2.57,242,2.72,243,3.609,267,2.439,279,3.265,283,2.333,309,1.439,419,2.506,455,3.383,456,4.003,489,1.873,490,4.185,491,2.727,492,3.901,493,1.354,494,3.811,495,3.803,496,3.754,497,3.901,498,4.76,499,3.026,500,2.557,501,3.298,502,5.538,503,4.76,504,6.298,505,3.715,506,3.6,507,3.721,508,4.76,509,6.298,510,4.76,511,3.141,512,6.298,513,3.807,514,4.76,515,4.76,516,3.026,517,6.298,518,5.538,519,2.949,520,3.549,521,4.89,522,4.372,523,4.89,524,4.403,525,4.76,526,4.185]],["title/entities/CartItem.html",[57,1.107,495,1.916]],["body/entities/CartItem.html",[3,0.069,4,0.079,5,0.069,8,0.108,16,0.915,21,0.011,27,0.241,31,0.167,32,0.088,33,0.006,34,0.006,41,0.525,49,0.861,52,0.797,53,0.693,57,1.778,65,0.978,82,0.921,130,3.244,241,2.244,242,2.789,244,2.228,267,2.511,279,2.826,283,2.019,309,1.639,419,2.351,455,3.141,456,3.755,489,1.517,491,2.361,492,3.377,493,1.172,494,2.943,495,2.441,496,3.485,499,2.619,500,2.213,501,2.671,502,4.793,505,3.216,506,3.424,507,3.491,511,2.719,516,3.303,520,3.874,522,4.493,523,4.382,524,4.594,527,5.05,528,3.39,529,4.029,530,3.918,531,3.046,532,3.141,533,4.363,534,2.854,535,3.855,536,3.855,537,3.855,538,3.855,539,5.452,540,3.39,541,3.855,542,2.019,543,3.855,544,4.359,545,6.875,546,3.855,547,4.359,548,3.712,549,3.855,550,2.826,551,2.826,552,4.359,553,3.855,554,4.793,555,4.793,556,3.855,557,4.793,558,3.855,559,5.452,560,5.025,561,3.39,562,2.173,563,2.081,564,2.274,565,2.274,566,3.855,567,3.855,568,3.39]],["title/controllers/CartItemsController.html",[250,1.984,569,3.168]],["body/controllers/CartItemsController.html",[1,1.857,3,0.061,4,0.07,5,0.061,8,0.203,16,0.851,17,2.131,21,0.011,27,0.249,28,0.564,31,0.154,32,0.079,33,0.006,34,0.006,41,0.286,42,1.024,49,0.743,51,1.452,52,1.014,53,0.554,54,0.985,56,1.377,58,0.99,68,3.024,70,1.664,71,2.049,83,1.76,108,2.614,115,1.843,143,4.016,146,1.045,163,2.569,214,4.274,242,2.792,243,3.595,250,2.75,252,1.595,254,2.247,256,1.662,259,2.134,267,2.166,271,4.11,280,1.929,285,1.936,292,2.568,309,1.747,323,2.505,324,4.392,332,4.11,333,2.247,340,2.751,341,2.751,344,2.247,346,2.546,350,0.964,351,0.964,404,2.131,482,1.612,494,4.629,495,1.54,511,3.253,527,4.488,529,4.027,530,5.175,532,2.175,533,4.322,542,1.861,569,4.392,570,2.751,571,2.831,572,3.343,573,4.392,574,3.675,575,3.44,576,4.924,577,5.023,578,3.44,579,2.505,580,5.023,581,5.023,582,2.413,583,1.755,584,2.383,585,5.023,586,3.44,587,3.382,588,4.751,589,5.023,590,3.024,591,5.023,592,3.44,593,7.246,594,3.44,595,5.023,596,3.44,597,3.718,598,4.016,599,3.024,600,5.791,601,5.023,602,3.44,603,3.281,604,2.383,605,4.016,606,4.298,607,2.751,608,2.751,609,3.44,610,2.131,611,3.44,612,3.44,613,5.736,614,3.024,615,5.933,616,3.44,617,3.44,618,3.44,619,3.44]],["title/modules/CartItemsModule.html",[177,1.167,189,2.524]],["body/modules/CartItemsModule.html",[3,0.096,4,0.109,5,0.096,8,0.15,21,0.011,27,0.295,28,0.878,31,0.164,32,0.156,33,0.008,34,0.008,77,1.719,177,2.26,179,2.108,180,2.174,181,2.399,182,2.399,183,2.245,184,3.402,185,3.234,189,5.194,190,4.744,192,4.744,195,4.033,200,3.044,201,2.399,202,2.174,205,2.944,211,3.965,212,3.711,214,3.159,217,3.965,241,1.984,242,2.453,243,3.267,252,3.152,256,1.905,386,3.39,397,4.01,489,2.108,495,3.044,527,3.318,563,2.892,569,5.816,606,5.475,607,4.283,608,4.283,620,4.709,621,5.356,622,4.709,623,4.709,624,4.545,625,4.709,626,4.441,627,5.356,628,3.463,629,4.01,630,3.159,631,3.159,632,3.159,633,3.711,634,5.356,635,4.283,636,3.965]],["title/injectables/CartItemsService.html",[0,0.701,606,2.651]],["body/injectables/CartItemsService.html",[0,0.614,2,0.775,3,0.042,4,0.048,5,0.042,8,0.201,16,0.822,21,0.011,27,0.226,28,0.385,31,0.115,32,0.054,33,0.004,34,0.004,41,0.195,42,0.764,43,2.199,45,1.203,47,3.602,49,0.749,51,1.465,52,1.023,53,0.558,54,0.994,56,1.293,57,1.382,58,1.792,65,0.943,66,2.385,68,2.477,70,1.643,71,2.031,76,1.128,77,0.753,82,0.561,83,1.733,85,2.372,104,2.371,105,3.089,108,2.333,112,2.572,113,1.961,115,1.803,130,0.984,131,2.113,143,2.998,146,1.139,164,1.679,214,4.233,241,2.039,242,2.789,243,3.448,256,1.745,280,1.58,283,1.389,292,2.524,309,1.817,323,1.869,350,1.497,351,1.497,401,3.944,404,2.322,425,3.141,433,1.877,482,2.52,492,2.322,494,4.609,495,3.629,511,1.869,527,4.446,529,4.041,530,4.863,531,2.103,532,1.016,533,4.131,542,1.734,547,1.877,551,1.217,552,1.877,554,2.064,563,1.267,576,5.051,579,1.869,583,1.867,597,3.956,598,2.998,604,1.626,605,1.877,606,3.31,608,1.877,637,1.877,638,3.749,639,3.749,640,3.749,641,4.68,642,3.749,643,4.68,644,3.956,645,4.68,646,2.347,647,3.702,648,3.944,649,2.347,650,4.68,651,2.775,652,3.749,653,2.347,654,3.749,655,3.749,656,2.347,657,3.152,658,4.315,659,3.749,660,3.749,661,2.347,662,3.749,663,2.347,664,6.228,665,2.347,666,2.597,667,3.749,668,3.749,669,2.347,670,3.749,671,2.347,672,2.347,673,3.749,674,3.749,675,3.749,676,2.347,677,2.998,678,3.749,679,3.749,680,2.998,681,2.347,682,2.347,683,3.749,684,3.749,685,2.998,686,2.064,687,1.737,688,2.347,689,1.626,690,3.296,691,3.702,692,2.347,693,1.877,694,4.68,695,2.064,696,3.749,697,1.877,698,2.064,699,3.749,700,2.347,701,2.347,702,3.749,703,2.347,704,2.347,705,2.347,706,3.749,707,3.749,708,3.31,709,2.347,710,2.347,711,2.347,712,2.347,713,3.749,714,4.68,715,1.737,716,3.749,717,3.296,718,3.749,719,3.749,720,2.347,721,2.064,722,2.347,723,2.347,724,2.347,725,1.088,726,2.347,727,2.347,728,2.347]],["title/modules/CartsModule.html",[177,1.167,190,2.412]],["body/modules/CartsModule.html",[3,0.109,4,0.124,5,0.109,8,0.17,21,0.011,27,0.279,28,0.995,31,0.186,32,0.168,33,0.008,34,0.008,57,1.57,77,1.949,177,2.331,179,2.389,180,2.464,181,2.718,182,2.718,183,2.544,184,3.421,185,3.421,190,4.873,200,3.29,201,2.718,202,2.464,205,2.629,242,2.294,256,2.058,386,3.664,397,3.581,401,5.051,404,4.551,729,5.337,730,5.337,731,5.337,732,6.071,733,5.337,734,6.071,735,6.071,736,4.854]],["title/injectables/CartsService.html",[0,0.701,401,2.412]],["body/injectables/CartsService.html",[0,0.814,2,1.118,3,0.061,4,0.069,5,0.061,8,0.214,16,0.869,21,0.011,27,0.215,28,0.555,31,0.152,32,0.078,33,0.006,34,0.006,41,0.281,42,1.012,43,2.252,45,1.595,47,3.612,49,0.797,51,1.559,52,1.089,53,0.594,54,1.057,56,1.35,57,1.285,58,1.429,65,0.946,66,2.397,70,1.7,71,2.08,76,1.628,77,1.088,82,0.809,83,1.631,85,1.184,104,2.629,105,3.16,108,2.262,112,2.314,113,1.932,115,1.831,146,1.509,163,2.151,222,3.677,229,3.677,242,2.833,256,1.392,283,1.84,285,1.429,289,3.077,292,2.564,309,1.768,350,1.814,351,0.949,401,3.65,404,3.077,425,3.313,482,1.595,494,4.5,495,1.517,644,4.794,657,2.93,658,3.441,666,3.441,677,3.972,680,3.972,708,5.081,715,3.677,717,2.979,733,2.979,737,2.979,738,4.967,739,4.967,740,4.967,741,4.967,742,4.967,743,3.388,744,3.388,745,5.881,746,4.967,747,3.388,748,4.967,749,4.967,750,3.388,751,4.967,752,4.967,753,3.388,754,3.677,755,4.967,756,4.967,757,2.477,758,4.967,759,4.967,760,4.967,761,3.388,762,4.967,763,4.967,764,4.967,765,3.388,766,4.231,767,2.9,768,4.967,769,5.695,770,4.967,771,3.388,772,4.967,773,3.972,774,3.388,775,5.881,776,3.388,777,4.967,778,3.388,779,4.967,780,3.388,781,3.388]],["title/modules/CommonModule.html",[177,1.167,381,2.796]],["body/modules/CommonModule.html",[3,0.093,4,0.106,5,0.093,8,0.146,21,0.011,27,0.29,28,0.854,31,0.159,32,0.169,33,0.008,34,0.008,56,0.903,59,3.21,77,1.673,147,3.26,177,2.282,179,2.051,180,2.116,181,2.334,182,2.334,183,2.185,184,3.193,185,3.193,194,5.375,200,2.992,201,2.334,202,2.116,205,2.893,208,4.583,221,5.343,381,5.878,386,2.599,396,3.859,402,5.41,430,4.168,782,4.583,783,5.213,784,4.583,785,4.583,786,4.922,787,5.151,788,5.151,789,4.527,790,3.814,791,5.213,792,6.22,793,6.22,794,5.875,795,5.213,796,4.583,797,5.213,798,4.168,799,3.859,800,3.859,801,2.938,802,2.938]],["title/injectables/ConvertUtilsService.html",[0,0.701,786,2.412]],["body/injectables/ConvertUtilsService.html",[0,1.093,2,1.714,3,0.093,4,0.106,5,0.093,8,0.206,16,0.831,21,0.011,27,0.173,28,0.851,31,0.204,32,0.119,33,0.008,34,0.008,41,0.431,42,1.359,49,0.714,51,1.395,52,0.975,53,0.532,54,0.947,58,1.918,65,0.94,70,1.626,83,1.395,113,1.455,115,1.77,116,2.176,285,1.957,309,1.5,456,4.374,482,1.667,786,3.757,803,6.473,804,4.153,805,4.355,806,3.456,807,5.861,808,6.666,809,6.666,810,6.666,811,6.666,812,5.194,813,7.767,814,6.666,815,5.861,816,5.861,817,5.331,818,6.666,819,7.767,820,7.767,821,6.666,822,7.767,823,5.861,824,6.666,825,6.666,826,5.194,827,8.467,828,6.829,829,5.37,830,6.666,831,5.861,832,5.194,833,3.064,834,5.194,835,2.59,836,5.194,837,5.194,838,6.666,839,6.666,840,5.194,841,5.194]],["title/injectables/CookieService.html",[0,0.701,382,2.651]],["body/injectables/CookieService.html",[0,1.012,2,1.526,3,0.083,4,0.094,5,0.083,8,0.208,16,0.852,21,0.011,27,0.257,28,0.757,31,0.189,32,0.106,33,0.007,34,0.007,41,0.384,42,1.259,45,1.982,48,4.126,49,0.795,51,1.554,52,1.085,53,0.592,54,1.054,58,1.777,65,0.885,70,1.554,74,2.495,83,1.554,85,2.158,93,4.213,104,1.876,112,1.819,113,1.295,115,1.227,116,2.23,117,4.515,234,2.22,256,1.73,263,4.515,285,1.794,286,5.091,293,5.116,295,5.495,299,4.379,301,4.938,348,2.863,382,3.825,406,5.495,483,4.063,484,4.571,786,4.58,799,3.421,800,3.421,842,4.063,843,6.176,844,6.176,845,6.176,846,4.063,847,4.621,848,6.176,849,4.621,850,6.176,851,5.936,852,6.176,853,5.495,854,6.176,855,4.621,856,4.938,857,6.176,858,6.176,859,4.621,860,5.43,861,6.176,862,5.148,863,4.063,864,7.424,865,4.621,866,2.305,867,4.621,868,5.43,869,5.43,870,3.696,871,4.621,872,6.176,873,4.621,874,4.621,875,3.421,876,6.176,877,4.621,878,4.621,879,4.621,880,4.621,881,4.621,882,4.621]],["title/classes/CreateCartItemDto.html",[31,0.131,576,2.651]],["body/classes/CreateCartItemDto.html",[3,0.077,4,0.088,5,0.077,8,0.121,16,0.87,21,0.011,27,0.196,31,0.205,32,0.099,33,0.007,34,0.007,41,0.358,49,0.772,53,0.649,54,0.837,56,1.021,65,0.93,108,2.558,116,1.651,123,1.208,241,1.565,242,2.629,267,2.253,280,2.466,282,1.608,309,1.68,351,2.377,420,2.12,482,2.702,493,1.267,500,2.93,527,4.681,529,3.616,532,3.646,533,4.815,542,3.119,548,4.211,550,3.056,551,3.056,564,2.545,565,2.545,576,5.166,582,3.906,603,5.311,883,6.643,884,3.193,885,2.471,886,3.652,887,3.45,888,4.314,889,3.906,890,3.89,891,5.096,892,4.832,893,4.601,894,6.5,895,4.314,896,4.314,897,3.183,898,2.64,899,4.314,900,4.314,901,5.895,902,4.314,903,4.314,904,3.851,905,4.714,906,5.532,907,4.5,908,4.971,909,5.904,910,4.363,911,2.073,912,4.314,913,3.793]],["title/classes/CreateEventDto.html",[31,0.131,914,2.651]],["body/classes/CreateEventDto.html",[3,0.049,4,0.056,5,0.049,8,0.245,16,0.866,21,0.011,27,0.141,31,0.158,32,0.063,33,0.005,34,0.005,41,0.227,49,0.766,53,0.655,65,0.925,116,1.186,123,0.767,131,2.385,241,2.181,267,2.236,280,2.428,282,1.154,285,1.874,309,1.53,351,2.37,420,1.522,456,2.901,493,0.91,531,1.666,533,2.385,685,4.136,691,2.932,817,4.653,885,1.774,886,2.622,889,3.888,890,4.035,897,2.285,898,1.895,907,4.596,911,1.316,914,5.086,915,6.46,916,2.028,917,5.724,918,5.724,919,5.724,920,6.607,921,6.116,922,4.656,923,5.118,924,4.165,925,3.721,926,2.739,927,3.385,928,8.092,929,8.092,930,8.092,931,6.078,932,7.219,933,5.606,934,7.264,935,8.656,936,8.656,937,8.092,938,8.092,939,8.092,940,4.922,941,3.829,942,2.739,943,3.133,944,2.739,945,3.133,946,5.818,947,5.818,948,2.739,949,2.739,950,5.116,951,5.317,952,5.317,953,2.739,954,2.739,955,2.739,956,5.173,957,2.739,958,3.133,959,2.739,960,2.739,961,2.932,962,3.133,963,2.409,964,2.409,965,5.03,966,4.867,967,4.653,968,3.385,969,2.739,970,2.739,971,2.739,972,2.739,973,2.739]],["title/classes/CreateReservationDetailsDto.html",[31,0.131,974,2.965]],["body/classes/CreateReservationDetailsDto.html",[3,0.063,4,0.072,5,0.063,8,0.168,16,0.876,21,0.011,27,0.17,31,0.184,32,0.081,33,0.006,34,0.006,41,0.292,49,0.782,53,0.653,54,1.096,65,0.936,116,1.431,123,0.986,172,4.182,241,2.211,244,2.464,267,2.28,280,2.462,282,1.393,285,1.764,309,1.65,351,2.388,420,1.837,482,2.627,493,1.098,500,2.677,531,3.339,532,3.631,542,3.106,548,3.943,550,2.647,551,2.647,564,2.076,565,2.076,582,3.932,583,2.552,835,2.997,885,2.14,886,3.163,887,4.084,889,3.932,890,3.849,891,5.042,892,4.781,893,3.89,894,6.544,897,2.757,898,2.287,904,4.308,905,4.084,906,4.851,907,4.562,910,3.78,911,1.691,913,4.49,922,4.726,924,4.231,931,3.78,941,3.78,965,4.806,966,4.337,974,5.769,975,4.922,976,6.625,977,2.605,978,3.519,979,8.708,980,7.195,981,8.183,982,3.519,983,3.519,984,3.519,985,3.519,986,3.519,987,3.519,988,3.094]],["title/classes/CreateReservationDto.html",[31,0.131,989,2.965]],["body/classes/CreateReservationDto.html",[3,0.079,4,0.09,5,0.079,8,0.124,16,0.876,21,0.011,27,0.2,31,0.208,32,0.102,33,0.007,34,0.007,41,0.369,49,0.782,53,0.653,56,1.549,65,0.936,81,1.922,113,2.292,116,2.046,123,1.244,242,1.877,244,2.355,245,3.245,267,2.28,280,2.479,282,1.639,309,1.725,482,2.627,493,1.292,500,2.965,529,2.786,530,5.241,531,2.365,725,2.786,885,2.519,886,3.723,887,4.806,889,3.932,890,4.081,891,5.14,892,4.873,893,4.308,897,3.245,906,5.287,907,4.674,911,2.133,925,3.903,941,3.286,965,5.45,966,4.221,989,5.809,990,6.71,991,3.286,992,5.241,993,8.461,994,4.439,995,6.011,996,6.011,997,7.195,998,6.544,999,4.439,1000,4.439,1001,4.439,1002,6.011]],["title/classes/CreateTableCartItems1712661230450.html",[31,0.131,1003,3.422]],["body/classes/CreateTableCartItems1712661230450.html",[3,0.081,4,0.092,5,0.081,8,0.193,21,0.01,27,0.202,31,0.138,32,0.104,33,0.007,34,0.007,41,0.376,42,1.241,43,2.101,49,0.652,51,1.274,52,0.89,53,0.613,54,0.864,59,2.925,65,0.517,66,2.062,69,2.822,70,1.274,71,1.805,82,1.081,83,1.274,97,2.708,101,2.668,123,1.267,126,4.26,128,3.431,133,2.726,134,3.715,135,4.271,136,3.156,137,3.426,138,3.287,139,4.506,141,3.287,144,3.667,146,2.236,147,3.085,148,3.815,149,3.815,150,3.287,156,2.442,158,4.368,161,4.148,163,1.959,164,2.726,165,3.982,173,2.345,236,3.44,241,1.617,242,2.6,243,3.536,259,2.647,317,3.287,350,1.705,419,1.901,435,3.19,455,1.959,494,3.715,496,2.174,506,2.636,507,2.822,529,2.822,530,2.802,531,1.78,532,1.959,533,2.549,542,2.549,550,3.156,579,3.036,583,2.127,757,2.256,767,3.44,806,3.156,893,4.341,898,2.026,1003,4.868,1004,6.05,1005,3.617,1006,6.788,1007,3.287,1008,3.287,1009,3.591,1010,3.287,1011,3.431,1012,3.431,1013,4.524,1014,3.287,1015,3.287,1016,3.431,1017,3.287,1018,3.036,1019,4.524,1020,3.287,1021,3.287,1022,3.156,1023,5.099,1024,3.287,1025,3.287,1026,3.134,1027,2.955,1028,1.959,1029,2.097,1030,4.524,1031,3.617,1032,2.549,1033,2.549,1034,3.134,1035,2.549,1036,2.549]],["title/classes/CreateTableCarts1712661221574.html",[31,0.131,1037,3.422]],["body/classes/CreateTableCarts1712661221574.html",[3,0.086,4,0.098,5,0.086,8,0.199,21,0.01,27,0.16,31,0.148,32,0.11,33,0.007,34,0.007,41,0.401,42,1.295,43,2.14,49,0.68,51,1.33,52,0.929,53,0.507,54,0.902,56,1.101,65,0.552,66,1.99,69,2.946,70,1.33,71,1.852,82,1.153,83,1.33,97,2.501,108,2.159,123,1.352,126,4.322,128,2.719,133,2.846,134,3.836,135,4.35,136,3.294,137,3.27,138,3.431,139,4.542,141,3.431,144,3.735,146,2.294,147,3.165,148,3.915,149,3.915,150,3.431,156,2.605,158,4.4,161,4.004,162,2.406,163,2.089,165,2.501,173,2.501,236,3.382,242,2.736,259,2.716,323,3.169,350,1.78,419,1.984,435,3.294,455,2.089,492,3.936,494,2.605,496,2.318,506,2.752,507,2.946,579,3.169,583,2.22,757,2.406,767,3.382,806,3.294,893,2.846,1007,3.431,1008,3.431,1014,3.431,1015,3.431,1016,3.581,1017,3.431,1018,3.169,1020,3.431,1021,3.431,1022,3.294,1024,3.431,1025,4.077,1028,2.089,1029,2.237,1032,2.719,1033,2.719,1034,3.342,1036,2.719,1037,5.081,1038,6.247,1039,3.858,1040,5.587,1041,4.825,1042,4.825,1043,4.825]],["title/classes/CreateTableEventPrices1712642603715.html",[31,0.131,1044,3.422]],["body/classes/CreateTableEventPrices1712642603715.html",[3,0.083,4,0.094,5,0.083,8,0.195,21,0.01,27,0.205,31,0.141,32,0.106,33,0.007,34,0.007,41,0.384,42,1.259,43,2.114,49,0.661,51,1.293,52,0.903,53,0.617,54,0.877,59,2.967,65,0.529,66,2.08,69,2.863,70,1.293,71,1.821,82,1.104,83,1.293,97,2.43,101,2.726,123,1.295,126,4.281,128,2.604,133,2.765,134,3.755,135,4.298,136,3.201,137,3.447,138,3.334,139,4.518,141,3.334,144,3.69,146,2.255,147,3.111,148,3.848,149,3.848,150,3.334,156,2.495,158,4.379,161,2.604,163,2.001,164,2.765,165,3.605,173,2.396,236,3.464,241,2.114,259,2.67,292,1.826,350,1.73,435,3.224,531,3.044,532,2.001,542,2.576,550,4.126,551,3.201,579,3.08,583,2.158,757,2.305,767,3.464,806,3.201,893,3.643,898,2.07,1007,3.334,1008,3.334,1009,3.643,1010,3.334,1011,3.48,1012,3.48,1014,3.334,1015,3.334,1016,3.48,1017,3.334,1018,3.08,1020,3.334,1021,3.334,1022,3.201,1023,5.143,1024,3.334,1025,3.334,1026,3.202,1027,3.019,1028,2.001,1029,2.142,1031,3.696,1032,2.604,1033,2.604,1034,3.202,1035,3.92,1036,2.604,1044,4.938,1045,6.115,1046,3.696,1047,7.491,1048,4.621,1049,4.621,1050,4.621,1051,4.063]],["title/classes/CreateTableEvents1712572717258.html",[31,0.131,1052,3.422]],["body/classes/CreateTableEvents1712572717258.html",[3,0.081,4,0.092,5,0.081,8,0.193,21,0.01,27,0.202,31,0.138,32,0.104,33,0.007,34,0.007,41,0.376,42,1.242,43,2.102,49,0.652,51,1.275,52,0.891,53,0.613,54,0.865,59,2.927,65,0.518,66,2.063,69,2.824,70,1.275,71,1.806,82,1.082,83,1.275,97,1.782,101,2.671,123,1.269,126,4.261,133,2.728,134,3.717,135,4.272,136,3.158,137,3.427,138,3.289,139,4.506,141,3.289,144,3.668,146,2.237,147,3.086,148,3.817,149,3.817,150,3.289,156,2.445,158,4.369,164,2.728,165,4.192,173,2.347,236,3.441,241,1.955,259,2.648,350,1.707,419,2.471,435,3.191,455,1.961,496,2.176,499,2.176,506,3.188,507,2.824,542,1.678,550,3.158,579,3.038,583,2.129,757,2.258,767,3.441,806,3.158,835,3.672,893,4.343,898,2.028,917,3.137,918,3.137,919,3.137,920,3.621,921,3.352,922,2.552,923,2.805,924,3.433,943,4.509,1007,3.289,1008,3.289,1009,3.593,1010,3.289,1011,3.433,1012,3.433,1014,3.289,1015,3.289,1016,3.433,1017,3.289,1018,3.038,1020,3.289,1021,3.289,1022,3.158,1024,3.289,1025,3.289,1027,2.958,1028,1.961,1029,2.099,1032,2.552,1033,2.552,1035,4.85,1036,2.552,1052,4.872,1053,6.053,1054,3.621,1055,5.356,1056,5.356,1057,4.528,1058,4.528,1059,5.888,1060,3.621,1061,4.528,1062,4.528,1063,2.958,1064,4.22,1065,3.621,1066,3.621]],["title/classes/CreateTableReservationDetails1712751776641.html",[31,0.131,1067,3.422]],["body/classes/CreateTableReservationDetails1712751776641.html",[3,0.081,4,0.092,5,0.081,8,0.192,21,0.01,27,0.202,31,0.138,32,0.103,33,0.007,34,0.007,41,0.374,42,1.238,43,2.099,49,0.65,51,1.271,52,0.888,53,0.612,54,0.863,59,2.919,65,0.516,66,2.059,69,3.664,70,1.271,71,1.803,82,1.077,83,1.271,97,2.703,101,2.66,123,1.263,126,4.257,128,3.423,130,2.879,133,2.72,134,3.709,135,4.267,136,3.149,137,3.422,138,3.28,139,4.504,141,3.28,144,3.664,146,2.233,147,3.081,148,3.81,149,3.81,150,3.28,156,2.435,158,4.367,161,4.142,163,1.953,164,2.72,165,4.097,172,3.426,173,2.338,236,3.436,241,1.613,244,2.115,259,2.644,350,1.702,419,2.145,435,3.185,455,1.953,496,2.167,506,2.63,507,2.816,531,1.775,532,1.953,542,2.545,550,3.149,579,3.029,583,2.123,757,2.249,767,3.436,806,3.149,835,2.249,898,2.019,922,2.541,924,2.249,1007,3.28,1008,3.28,1009,3.583,1010,3.28,1011,3.423,1012,3.423,1014,3.28,1015,3.28,1016,3.423,1017,3.28,1018,3.029,1020,3.28,1021,3.28,1022,3.149,1023,5.092,1024,3.28,1025,3.28,1026,3.124,1027,2.946,1028,1.953,1029,2.09,1031,3.606,1032,2.541,1033,2.541,1034,3.124,1035,2.541,1036,2.541,1063,2.946,1064,3.124,1067,4.858,1068,6.04,1069,3.606,1070,7.459,1071,3.969,1072,4.509,1073,4.509,1074,4.208,1075,4.509,1076,3.124,1077,4.488]],["title/classes/CreateTableReservations1712661230451.html",[31,0.131,1078,3.422]],["body/classes/CreateTableReservations1712661230451.html",[3,0.082,4,0.094,5,0.082,8,0.194,21,0.01,27,0.153,31,0.141,32,0.105,33,0.007,34,0.007,41,0.382,42,1.254,43,2.111,49,0.659,51,1.288,52,0.9,53,0.491,54,0.874,56,1.066,59,2.956,65,0.526,66,1.943,69,2.853,70,1.288,71,1.817,82,1.098,83,1.288,97,2.73,108,2.107,123,1.288,126,4.276,128,3.468,130,3.615,133,2.755,134,3.745,135,4.291,136,3.19,137,3.442,138,3.322,139,4.515,141,3.322,144,3.684,146,2.25,147,3.105,148,3.84,149,3.84,150,3.322,156,2.482,158,4.376,161,4.175,162,2.292,163,2.665,164,3.317,165,4.208,167,2.847,170,2.847,172,2.292,173,2.383,236,3.317,242,1.921,244,2.287,247,2.956,248,2.579,259,2.664,350,1.724,419,1.921,435,3.216,455,1.99,496,2.209,506,2.665,507,2.853,529,2.853,530,4.297,579,3.068,583,2.588,757,2.292,767,3.317,806,3.19,1006,3.676,1007,3.322,1008,3.322,1009,3.63,1010,3.322,1011,3.468,1012,3.468,1014,3.322,1015,3.322,1016,3.468,1017,3.322,1018,3.068,1020,3.322,1021,3.322,1022,3.19,1024,3.322,1025,3.322,1028,1.99,1029,2.131,1032,2.59,1033,2.59,1036,2.59,1076,3.184,1077,5.045,1078,4.921,1079,6.099,1080,3.676,1081,4.597,1082,4.597,1083,4.597]],["title/classes/CreateTableTickets1712717719010.html",[31,0.131,1084,3.422]],["body/classes/CreateTableTickets1712717719010.html",[3,0.084,4,0.096,5,0.084,8,0.197,21,0.01,27,0.157,31,0.144,32,0.108,33,0.007,34,0.007,41,0.392,42,1.277,43,2.127,49,0.671,51,1.312,52,0.916,53,0.5,54,0.89,59,3.011,65,0.54,66,1.97,69,2.905,70,1.312,71,1.837,82,1.128,83,1.312,97,2.466,120,4.341,123,1.323,126,4.302,128,2.662,130,1.98,131,4.88,133,2.806,134,3.796,135,4.324,136,3.248,137,3.468,138,3.383,139,4.53,141,3.383,144,3.713,146,2.275,147,3.139,148,3.882,149,3.882,150,3.383,156,2.55,158,4.389,161,3.963,163,2.045,164,2.806,165,3.882,170,2.926,172,3.506,173,2.449,236,3.353,244,1.803,247,3.848,259,2.694,350,1.755,435,3.26,579,3.125,583,2.617,757,2.355,767,3.353,806,3.248,1007,3.383,1008,3.383,1009,3.696,1010,3.383,1011,3.531,1012,3.531,1014,3.383,1015,3.383,1016,3.531,1017,3.383,1018,3.125,1020,3.383,1021,3.383,1022,3.248,1024,3.383,1025,3.383,1028,2.045,1029,2.19,1032,2.662,1033,2.662,1034,3.272,1036,2.662,1064,3.272,1077,3.086,1084,5.011,1085,6.182,1086,3.777,1087,5.509,1088,4.723,1089,4.723,1090,4.723,1091,3.272,1092,6.266,1093,3.272,1094,2.926]],["title/classes/CreateTableTransactions1712661230452.html",[31,0.131,1095,3.422]],["body/classes/CreateTableTransactions1712661230452.html",[3,0.082,4,0.093,5,0.082,8,0.194,21,0.01,27,0.204,31,0.14,32,0.105,33,0.007,34,0.007,41,0.381,42,1.252,43,2.109,49,0.658,51,1.286,52,0.898,53,0.616,54,0.872,56,1.065,59,2.952,65,0.525,66,2.073,69,2.848,70,1.286,71,1.815,82,1.096,83,1.286,97,2.418,101,2.706,108,2.105,123,1.285,126,4.274,128,2.585,133,2.752,134,3.741,135,4.288,136,3.185,137,3.439,138,3.317,139,4.514,141,3.317,144,3.682,146,2.248,147,3.102,148,3.837,149,3.837,150,3.317,156,2.476,158,4.375,161,3.905,162,2.287,163,1.986,164,3.103,165,3.837,167,2.841,168,4.859,173,2.378,236,3.456,245,3.996,248,3.102,259,2.662,350,1.721,419,1.919,435,3.212,455,1.986,496,2.204,506,2.661,507,2.848,579,3.064,583,2.586,757,2.287,767,3.456,806,3.185,898,2.054,992,2.841,1007,3.317,1008,3.317,1009,3.624,1010,3.317,1011,3.463,1012,3.463,1014,3.317,1015,3.317,1016,3.463,1017,3.317,1018,3.064,1020,3.317,1021,3.317,1022,3.185,1024,3.317,1025,3.317,1027,2.996,1028,1.986,1029,2.126,1032,2.585,1033,2.585,1036,2.585,1077,4.014,1095,4.913,1096,6.092,1097,3.668,1098,3.317,1099,4.587,1100,4.587,1101,6.507,1102,3.668,1103,4.587,1104,4.587,1105,3.395,1106,3.395,1107,3.395]],["title/classes/CreateTableUsers1711085051379.html",[31,0.131,1108,3.422]],["body/classes/CreateTableUsers1711085051379.html",[3,0.081,4,0.092,5,0.081,8,0.193,21,0.01,27,0.203,31,0.139,32,0.104,33,0.007,34,0.007,41,0.377,42,1.243,43,2.103,49,0.653,51,1.277,52,0.892,53,0.614,54,0.866,56,1.402,59,2.931,65,0.519,66,2.064,69,2.828,70,1.277,71,1.808,82,1.084,83,1.277,97,1.786,101,2.677,108,1.379,123,1.271,126,4.264,133,2.732,134,3.721,135,4.275,136,3.162,137,3.191,138,3.294,139,4.508,141,3.294,144,3.671,146,2.239,147,3.089,148,3.82,149,3.82,150,3.294,156,2.45,158,4.37,162,4.235,165,3.82,173,2.352,234,2.18,236,3.443,259,2.651,274,3.042,276,2.557,278,2.557,282,1.664,350,1.709,352,3.884,415,2.888,419,2.526,435,3.195,453,3.629,455,1.965,482,1.457,499,2.931,506,2.642,507,2.828,579,3.042,583,2.132,757,2.263,767,3.443,806,3.162,835,3.042,893,4.065,898,2.032,1007,3.294,1008,3.294,1009,3.599,1010,3.294,1011,3.438,1012,3.438,1014,3.294,1015,3.294,1016,3.438,1017,3.294,1018,3.042,1020,3.294,1021,3.294,1022,3.162,1024,3.294,1025,3.294,1027,2.965,1028,1.965,1029,2.104,1032,2.557,1033,2.557,1036,2.557,1063,5.023,1108,4.878,1109,6.059,1110,3.629,1111,6.101,1112,4.878,1113,4.538,1114,4.538,1115,6.479,1116,3.629,1117,4.538,1118,4.538,1119,3.99,1120,3.359,1121,3.144,1122,3.99,1123,3.629,1124,3.629,1125,3.99]],["title/classes/CreateTransactionDto.html",[31,0.131,1126,3.168]],["body/classes/CreateTransactionDto.html",[3,0.124,4,0.142,5,0.124,21,0.01,31,0.213,32,0.159,33,0.009,34,0.009,123,1.95,1126,5.894,1127,6.119,1128,5.152]],["title/classes/CreateUserDto.html",[31,0.131,266,2.651]],["body/classes/CreateUserDto.html",[3,0.075,4,0.086,5,0.075,8,0.118,16,0.888,21,0.011,27,0.193,31,0.203,32,0.096,33,0.007,34,0.007,41,0.35,49,0.802,52,1.045,53,0.662,54,1.2,56,1.465,65,0.857,116,1.624,123,1.18,266,4.915,267,2.339,273,5.191,274,4.215,276,4.555,277,4.017,278,4.555,279,3.006,280,2.346,282,1.582,285,1.909,351,2.412,352,4.764,415,3.246,416,3.862,420,2.086,431,2.374,432,2.374,493,1.246,603,5.059,885,2.43,886,3.592,889,3.988,890,3.563,897,3.857,898,2.597,907,4.223,908,5.289,911,2.024,951,6.192,952,6.192,961,4.95,962,5.732,966,4.641,967,5.303,968,5.713,1129,6.809,1130,3.118,1131,3.368,1132,4.212,1133,5.289,1134,5.098,1135,4.212,1136,4.212,1137,3.703,1138,4.212,1139,4.293,1140,5.098,1141,4.909,1142,4.212,1143,5.303,1144,5.303,1145,5.546,1146,6.588,1147,5.992,1148,6.588,1149,5.098,1150,5.098,1151,3.703,1152,3.368]],["title/modules/DatabaseModule.html",[177,1.167,191,2.965]],["body/modules/DatabaseModule.html",[3,0.098,4,0.111,5,0.098,8,0.153,12,4.462,16,0.586,21,0.011,27,0.251,28,0.897,31,0.167,32,0.125,33,0.008,34,0.008,43,1.453,48,4.319,52,0.8,53,0.55,60,3.884,74,2.955,77,1.757,82,1.802,100,4.673,137,2.984,164,3.086,177,2.226,179,2.154,191,4.775,205,3.267,206,6.032,223,3.791,224,3.084,236,3.917,274,3.762,386,2.729,484,4.051,489,2.969,773,4.376,1010,2.955,1153,5.473,1154,6.059,1155,6.059,1156,4.812,1157,5.473,1158,4.812,1159,4.812,1160,4.812,1161,6.892,1162,5.102,1163,6.059,1164,5.511,1165,6.892,1166,6.032,1167,6.892,1168,6.032,1169,6.892,1170,7.544,1171,6.892,1172,6.892,1173,6.892,1174,7.544,1175,6.892,1176,6.892,1177,3.39,1178,4.051,1179,4.051]],["title/injectables/EncryptionService.html",[0,0.701,402,2.651]],["body/injectables/EncryptionService.html",[0,0.931,2,1.35,3,0.073,4,0.083,5,0.073,8,0.208,12,3.977,16,0.883,21,0.011,27,0.246,28,0.671,31,0.174,32,0.094,33,0.007,34,0.007,41,0.34,42,1.158,43,2.278,49,0.794,51,1.477,52,1.032,53,0.563,54,1.002,56,1.445,57,1.47,58,1.635,65,0.954,66,2.356,70,1.727,71,2.104,81,1.772,83,1.552,97,3.248,113,1.592,115,1.969,274,4.374,275,4.207,282,1.55,285,1.902,298,4.754,317,3.068,402,3.521,405,4.207,449,4.997,766,3.713,805,3.713,875,5.941,897,3.068,1064,4.889,1091,3.937,1093,4.889,1094,4.371,1177,3.521,1180,3.597,1181,4.997,1182,7.056,1183,5.683,1184,5.683,1185,5.683,1186,5.683,1187,4.091,1188,7.166,1189,5.683,1190,5.681,1191,5.683,1192,4.091,1193,6.137,1194,5.681,1195,5.683,1196,4.997,1197,5.683,1198,5.683,1199,4.091,1200,5.683,1201,4.545,1202,5.683,1203,5.683,1204,4.091,1205,5.683,1206,6.137,1207,5.683,1208,7.056,1209,6.748,1210,7.056,1211,5.683,1212,4.091,1213,4.997,1214,4.997,1215,5.683,1216,4.207,1217,4.091,1218,5.683,1219,4.091,1220,4.091,1221,4.091,1222,3.597,1223,4.091]],["title/entities/Event.html",[57,1.107,241,1.136]],["body/entities/Event.html",[3,0.054,4,0.061,5,0.054,8,0.184,16,0.931,21,0.011,27,0.218,31,0.139,32,0.069,33,0.005,34,0.005,41,0.508,49,0.881,53,0.707,57,1.582,65,0.995,82,0.72,213,1.628,234,2.938,241,2.339,242,1.422,243,2.188,244,1.311,267,2.57,279,2.361,283,1.687,285,1.667,309,1.665,419,2.551,455,2.843,456,4.105,482,1.762,489,1.187,491,1.972,493,0.979,495,3.21,496,3.155,497,2.822,499,2.938,500,1.849,501,3.803,505,4.073,506,3.196,507,3.201,511,2.271,516,3.317,519,1.868,520,2.567,523,4.966,524,4.79,531,2.407,533,3.447,542,2.033,544,3.642,568,4.005,582,2.188,583,1.591,628,3.502,629,1.779,630,1.779,631,1.779,651,5.307,658,4.549,691,3.156,697,3.642,833,2.687,835,3.443,917,4.549,918,3.803,919,4.549,920,4.389,921,4.063,922,3.093,923,4.067,924,3.274,927,3.642,931,3.372,932,4.005,940,4.527,943,4.527,945,3.372,958,3.372,963,2.651,964,2.651,1063,2.976,1065,4.389,1066,4.389,1077,4.511,1107,3.372,1190,3.372,1224,2.651,1225,5.489,1226,3.642,1227,3.642,1228,3.016,1229,4.005,1230,3.016,1231,3.016,1232,4.555,1233,3.016,1234,4.555,1235,6.116,1236,3.016,1237,4.555,1238,3.016,1239,5.377,1240,3.016,1241,4.555,1242,4.555,1243,4.067,1244,4.555,1245,5.489,1246,3.016,1247,4.005,1248,3.016,1249,4.555,1250,3.016,1251,4.555,1252,4.555,1253,4.005,1254,3.642,1255,3.016,1256,4.005,1257,3.016,1258,4.527,1259,4.005,1260,3.016,1261,4.555,1262,4.005,1263,3.016,1264,4.555,1265,3.016,1266,3.016,1267,4.555,1268,3.642,1269,3.016,1270,4.555,1271,2.411,1272,3.016]],["title/entities/EventPrice.html",[57,1.107,1243,2.651]],["body/entities/EventPrice.html",[3,0.081,4,0.093,5,0.081,8,0.127,16,0.881,21,0.011,27,0.229,31,0.187,32,0.104,33,0.007,34,0.007,41,0.573,49,0.79,52,1.079,53,0.665,57,1.908,65,0.941,82,1.088,241,2.388,267,2.304,309,1.615,482,2.642,489,1.792,491,2.647,493,1.314,497,3.787,499,2.937,500,2.482,505,2.685,516,3.545,520,3.445,522,4.276,524,4.467,531,3.471,532,3.749,534,3.37,542,2.265,548,4.372,550,3.169,551,3.169,560,4.782,563,2.458,564,2.685,565,2.685,894,6.582,898,3.447,997,7.236,1051,7.472,1243,5.448,1247,4.003,1273,6.768,1274,3.641,1275,4.553,1276,4.553,1277,8.231,1278,4.553,1279,4.553,1280,4.553,1281,4.553]],["title/injectables/EventPricesService.html",[0,0.701,648,2.412]],["body/injectables/EventPricesService.html",[0,0.816,2,1.121,3,0.061,4,0.069,5,0.061,8,0.202,16,0.848,21,0.011,27,0.248,28,0.557,31,0.152,32,0.078,33,0.006,34,0.006,41,0.282,42,1.014,43,2.214,45,1.597,47,3.455,49,0.772,51,1.51,52,1.055,53,0.622,54,1.024,58,1.432,65,0.939,66,2.398,70,1.659,71,2.045,76,1.632,77,1.09,82,0.811,83,1.6,85,2.52,104,2.802,105,3.068,112,1.958,113,2.021,115,1.564,231,3.361,241,2.379,256,1.394,289,3.082,292,2.481,309,1.785,323,2.481,350,1.394,351,1.394,425,3.581,531,3.454,532,3.309,542,3.158,548,3.727,551,3.863,563,1.834,564,2.003,565,2.003,587,2.579,647,4.08,648,2.804,651,5.867,657,2.935,689,2.353,693,2.716,917,4.492,927,6.111,933,3.447,1243,2.104,1271,2.716,1282,5.959,1283,2.716,1284,4.976,1285,4.976,1286,4.375,1287,4.976,1288,4.976,1289,3.396,1290,3.396,1291,4.976,1292,4.976,1293,3.396,1294,5.701,1295,4.492,1296,4.976,1297,4.976,1298,3.396,1299,4.976,1300,4.375,1301,3.396,1302,4.976,1303,4.976,1304,3.396,1305,4.976,1306,4.976,1307,4.976,1308,6.484,1309,3.396,1310,4.976,1311,4.375,1312,2.986,1313,3.683,1314,2.986,1315,3.396,1316,5.889,1317,3.396,1318,3.396,1319,3.396,1320,4.976,1321,3.396,1322,3.396,1323,3.396,1324,3.396,1325,4.976,1326,3.396,1327,3.396,1328,3.396,1329,3.396,1330,3.396,1331,3.396,1332,3.396,1333,3.396,1334,3.396,1335,3.396,1336,2.986]],["title/injectables/EventSalesService.html",[0,0.701,1337,2.796]],["body/injectables/EventSalesService.html",[0,0.857,2,1.2,3,0.065,4,0.074,5,0.065,8,0.199,16,0.833,21,0.011,27,0.253,28,0.596,31,0.16,32,0.083,33,0.006,34,0.006,41,0.302,42,1.066,43,2.106,45,1.678,47,3.104,49,0.79,51,1.485,52,1.037,53,0.607,54,1.007,58,1.505,65,0.845,66,2.307,70,1.63,71,1.945,76,1.747,77,1.167,82,0.869,83,1.593,85,2.992,104,1.476,112,1.431,113,1.018,115,0.966,127,3.87,131,4.388,147,2.191,213,1.963,231,2.71,241,2.238,242,2.09,243,3.656,256,1.465,285,1.719,292,1.979,309,1.753,323,3.338,351,1.987,419,1.135,420,1.308,425,2.512,482,1.965,493,1.124,495,3.176,519,2.252,529,1.685,531,3.064,532,3.198,533,4.75,542,2.627,548,1.963,551,3.828,564,2.145,565,2.145,582,2.512,588,4.147,603,3.416,647,3.622,666,3.622,689,2.519,690,4.597,691,4.638,697,4.181,698,3.197,835,2.607,934,4.597,1253,3.197,1258,5.764,1259,3.197,1282,6.085,1295,3.622,1337,4,1338,2.907,1339,4.181,1340,6.122,1341,6.122,1342,5.228,1343,5.228,1344,5.228,1345,3.197,1346,4.714,1347,3.636,1348,3.636,1349,3.636,1350,5.228,1351,5.228,1352,5.886,1353,5.228,1354,5.228,1355,3.636,1356,3.87,1357,5.228,1358,2.71,1359,3.416,1360,5.228,1361,3.636,1362,7.385,1363,6.695,1364,5.228,1365,5.228,1366,5.228,1367,5.228,1368,7.093,1369,3.636,1370,5.228,1371,4.597,1372,5.383,1373,4.597,1374,4.597,1375,4.597,1376,3.636,1377,5.228,1378,5.228,1379,2.691,1380,2.907,1381,2.519,1382,6.122,1383,3.636,1384,3.636,1385,4.597,1386,3.197,1387,3.636,1388,3.636,1389,5.228,1390,4.597,1391,6.695,1392,3.636,1393,3.636]],["title/controllers/EventsController.html",[250,1.984,1394,3.168]],["body/controllers/EventsController.html",[1,1.713,3,0.057,4,0.065,5,0.057,8,0.231,16,0.875,17,3.505,21,0.011,27,0.263,28,0.52,31,0.145,32,0.073,33,0.005,34,0.005,41,0.263,42,0.964,43,1.503,45,1.018,49,0.78,51,1.568,52,1.029,53,0.598,54,0.999,65,0.363,66,0.889,68,3.262,70,1.711,71,2.09,83,1.603,85,1.653,105,1.862,113,1.325,115,1.936,163,2.906,231,2.453,241,2.351,247,2.273,250,2.623,252,1.47,254,2.072,256,1.325,259,1.702,267,2.276,271,3.92,280,2.08,282,1.29,283,1.753,285,1.769,289,2.931,290,5.209,292,2.579,309,1.278,323,2.359,324,4.188,332,3.278,333,2.072,344,2.072,346,2.348,350,1.325,351,1.325,354,2.789,372,2.453,415,1.329,416,1.582,431,1.788,432,1.788,511,3.737,531,3.153,532,3.047,542,1.175,548,3.623,551,3.648,564,1.871,565,1.871,571,3.535,572,2.666,573,3.502,574,3.886,583,2.192,587,3.885,604,2.198,648,3.189,687,2.348,725,2.193,754,3.502,823,6.588,914,4.642,917,4.346,919,4.346,923,3.886,924,3.737,933,3.278,1035,4.565,1311,4.16,1346,3.505,1379,2.348,1380,2.537,1394,3.502,1395,2.789,1396,4.975,1397,5.658,1398,2.789,1399,5.658,1400,3.172,1401,3.172,1402,5.627,1403,4.731,1404,7.797,1405,4.731,1406,5.515,1407,4.895,1408,3.172,1409,6.273,1410,4.16,1411,2.789,1412,3.346,1413,3.966,1414,3.172,1415,3.252,1416,3.252,1417,4.731,1418,3.505,1419,2.791,1420,2.198,1421,3.783,1422,3.172,1423,3.502,1424,7.037,1425,3.172,1426,4.731,1427,3.172,1428,4.731,1429,2.789,1430,3.172,1431,3.172,1432,3.783,1433,2.537,1434,5.094,1435,3.172,1436,3.172,1437,4.731,1438,4.731,1439,2.666,1440,2.348,1441,3.886,1442,3.783,1443,1.788,1444,3.172,1445,4.188,1446,3.172,1447,3.172,1448,3.172,1449,3.172,1450,3.172,1451,3.172,1452,3.172,1453,2.537,1454,3.172,1455,2.537,1456,2.789,1457,3.172,1458,3.172,1459,3.172,1460,3.172]],["title/modules/EventsModule.html",[177,1.167,192,2.412]],["body/modules/EventsModule.html",[3,0.096,4,0.109,5,0.096,8,0.15,21,0.011,27,0.29,28,0.878,31,0.164,32,0.156,33,0.008,34,0.008,77,1.719,177,2.26,179,2.108,180,2.174,181,2.399,182,2.399,183,2.245,184,3.402,185,3.234,192,4.998,200,3.044,201,2.399,202,2.174,205,2.319,241,2.087,252,3.152,256,1.905,386,3.39,397,4.01,489,2.108,628,3.463,629,3.159,630,3.159,631,3.159,648,4.981,687,3.965,790,3.902,801,3.019,802,3.019,1035,3.831,1243,4.627,1271,4.283,1312,4.709,1337,5.774,1346,5.475,1379,3.965,1380,4.283,1394,5.816,1461,4.709,1462,4.709,1463,4.709,1464,5.356,1465,5.356,1466,4.709,1467,4.709]],["title/injectables/EventsService.html",[0,0.701,1346,2.651]],["body/injectables/EventsService.html",[0,0.685,2,0.889,3,0.048,4,0.055,5,0.048,8,0.199,16,0.863,21,0.011,27,0.253,28,0.441,31,0.128,32,0.062,33,0.005,34,0.005,41,0.224,42,0.851,43,2.242,45,1.341,47,2.673,49,0.8,51,1.49,52,1.041,53,0.583,54,1.061,58,1.202,65,0.965,66,2.426,68,3.061,70,1.688,71,2.071,76,1.294,77,0.864,82,0.643,83,1.53,85,2.699,104,2.89,105,2.94,112,2.269,113,1.994,115,1.829,163,2.216,234,2.458,241,2.384,256,1.17,259,1.502,280,1.952,282,1.139,283,1.547,285,1.272,289,2.587,292,2.521,309,1.706,323,2.083,346,1.993,350,1.17,351,1.93,372,2.989,374,2.153,419,0.841,420,0.969,425,2.998,435,2.673,456,1.343,488,2.153,493,0.898,496,1.294,499,2.007,511,2.875,542,2.312,572,2.354,573,3.092,574,3.866,583,2.015,587,3.423,604,1.866,647,2.894,648,3.882,657,2.464,687,1.993,689,1.866,693,4.092,725,2.673,754,3.092,767,2.582,786,3.882,788,4.063,790,2.673,798,2.153,799,1.993,800,1.993,801,1.518,802,1.518,829,1.759,866,2.083,914,4.41,919,2.894,921,1.993,923,2.587,924,3.793,1028,1.166,1029,1.936,1035,4.461,1065,2.153,1066,2.153,1229,3.672,1268,2.153,1286,3.672,1300,3.672,1336,3.672,1345,2.368,1346,2.587,1379,1.993,1390,3.672,1396,4.499,1398,3.672,1407,3.767,1410,3.672,1411,2.368,1412,3.112,1413,2.354,1415,2.989,1418,3.17,1419,2.464,1420,2.894,1423,3.092,1429,3.672,1432,3.34,1433,3.34,1434,5.046,1442,3.34,1443,1.518,1468,2.368,1469,5.117,1470,5.117,1471,4.177,1472,4.61,1473,4.499,1474,4.177,1475,2.693,1476,4.177,1477,4.177,1478,6.24,1479,2.693,1480,3.672,1481,4.177,1482,2.153,1483,3.672,1484,4.177,1485,2.693,1486,3.113,1487,2.464,1488,4.177,1489,2.693,1490,4.177,1491,2.693,1492,4.177,1493,2.693,1494,4.177,1495,2.693,1496,4.177,1497,2.693,1498,4.177,1499,4.177,1500,5.117,1501,5.766,1502,2.894,1503,1.866,1504,3.672,1505,2.693,1506,2.693,1507,2.693,1508,2.693,1509,2.693,1510,2.693,1511,2.693,1512,1.866,1513,1.993,1514,1.759,1515,1.993,1516,2.368,1517,1.668,1518,2.693,1519,1.668,1520,1.993,1521,1.993,1522,2.693,1523,2.693,1524,2.693,1525,4.177,1526,4.177,1527,2.693,1528,5.117,1529,2.368,1530,2.693,1531,2.693,1532,4.177,1533,2.693,1534,2.693,1535,4.177,1536,2.693,1537,2.693]],["title/classes/HttpExceptionFilter.html",[31,0.131,1538,3.422]],["body/classes/HttpExceptionFilter.html",[3,0.085,4,0.097,5,0.085,8,0.176,16,0.674,21,0.011,27,0.249,28,0.779,31,0.192,32,0.109,33,0.007,34,0.007,41,0.395,42,1.283,45,1.526,48,4.16,49,0.755,51,1.317,52,0.92,53,0.563,54,0.894,65,0.918,69,2.204,70,0.995,74,2.567,83,1.317,85,2.465,89,3.802,112,2.477,113,2.188,116,1.332,117,3.398,120,3.294,123,1.332,133,3.159,144,2.918,286,4.161,293,5.071,348,2.945,351,1.976,372,3.657,419,1.485,420,1.71,424,5.781,493,1.353,506,2.059,583,1.661,610,2.945,805,4.905,846,4.181,853,3.52,862,4.659,863,4.181,866,2.371,891,3.106,1029,2.204,1071,3.106,1098,4.054,1166,6.004,1179,3.52,1371,4.181,1416,3.263,1519,4.838,1538,5.033,1539,6.602,1540,6.602,1541,6.646,1542,3.802,1543,6.845,1544,7.508,1545,4.522,1546,6.294,1547,6.294,1548,6.294,1549,7.81,1550,4.755,1551,6.294,1552,6.294,1553,7.508,1554,5.033,1555,7.055,1556,3.802,1557,4.755,1558,4.181,1559,4.755,1560,4.755,1561,4.755,1562,4.755,1563,7.055,1564,4.755,1565,7.508,1566,4.755,1567,7.055,1568,4.181,1569,4.755,1570,4.755,1571,3.52,1572,4.755,1573,4.755,1574,4.181,1575,4.755,1576,4.755,1577,4.181,1578,4.181,1579,4.181,1580,4.755,1581,4.755,1582,4.755,1583,4.755,1584,4.755,1585,4.755,1586,4.755,1587,4.755,1588,4.755,1589,4.755,1590,4.755]],["title/classes/IdDto.html",[31,0.131,1591,3.422]],["body/classes/IdDto.html",[3,0.11,4,0.125,5,0.11,8,0.172,16,0.793,21,0.01,27,0.205,31,0.243,32,0.141,33,0.009,34,0.009,39,5.926,41,0.511,49,0.659,53,0.591,65,0.848,72,6.516,113,2.076,116,2.076,123,1.725,267,1.923,280,2.191,282,2.021,292,2.564,309,1.62,351,2.311,482,2.379,493,1.593,885,3.106,906,5.134,909,6.516,911,2.959,1591,6.856,1592,5.414,1593,6.158,1594,6.158,1595,7.411]],["title/classes/InvalidCredentialsException.html",[31,0.131,426,2.965]],["body/classes/InvalidCredentialsException.html",[3,0.113,4,0.128,5,0.113,8,0.176,16,0.804,21,0.01,25,4.333,27,0.209,28,1.032,31,0.23,32,0.144,33,0.009,34,0.009,45,2.576,49,0.674,112,2.955,113,2.328,123,1.763,261,5.243,335,5.033,424,6.152,426,5.97,458,5.558,1517,3.899,1543,6.004,1596,6.602,1597,5.033,1598,6.004,1599,7.056,1600,6.294,1601,6.004,1602,6.294,1603,5.534,1604,5.534,1605,5.534]],["title/guards/IsCreatorGuard.html",[9,2.651,1606,2.965]],["body/guards/IsCreatorGuard.html",[0,1.088,3,0.092,4,0.105,5,0.092,8,0.186,9,4.113,14,2.574,16,0.711,19,5.369,21,0.011,23,4.915,24,4.915,27,0.221,28,0.846,31,0.203,32,0.118,33,0.008,34,0.008,41,0.429,42,1.353,45,1.657,49,0.711,51,1.39,52,0.971,53,0.53,54,0.943,56,1.492,65,0.886,70,1.39,83,1.081,104,2.096,105,2.031,112,2.031,113,1.446,115,1.371,116,1.446,117,3.585,127,3.821,133,2.974,144,3.078,232,6.411,234,2.48,285,1.466,292,2.291,332,4.6,425,3.191,473,4.128,574,4.113,610,3.198,1029,3.403,1121,5.086,1177,4.113,1178,3.821,1455,5.31,1554,6.197,1606,4.6,1607,3.821,1608,6.454,1609,4.128,1610,6.454,1611,7.216,1612,5.838,1613,6.64,1614,7.75,1615,7.049,1616,4.539,1617,6.563,1618,5.162,1619,5.838,1620,6.411,1621,5.162,1622,5.838,1623,6.814,1624,5.31,1625,4.128,1626,4.539,1627,5.162,1628,6.64,1629,5.162,1630,5.162,1631,5.162,1632,7.75,1633,5.162,1634,4.539,1635,5.162,1636,3.821,1637,5.162,1638,5.162]],["title/interfaces/JWTTokens.html",[1639,1.853,1640,2.965]],["body/interfaces/JWTTokens.html",[3,0.089,4,0.101,5,0.089,8,0.139,13,3.643,14,3.224,15,4.346,16,0.907,21,0.011,32,0.148,33,0.007,34,0.007,41,0.411,53,0.676,54,1.083,56,1.322,62,5.285,64,4.056,65,0.969,93,4.122,102,4.479,263,4.618,285,1.888,292,1.464,299,3.351,309,1.709,415,3.317,469,5.588,482,2.54,491,2.799,493,1.39,500,2.011,582,2.38,829,4.223,1639,3.427,1640,5.873,1641,2.791,1642,3.961,1643,5.623,1644,7.136,1645,7.136,1646,4.785,1647,5.17,1648,3.961,1649,3.961,1650,5.285,1651,4.902,1652,2.922]],["title/interfaces/JwtPayload.html",[62,2.965,1639,1.853]],["body/interfaces/JwtPayload.html",[3,0.088,4,0.101,5,0.088,8,0.138,13,3.638,14,2.464,15,3.951,16,0.907,21,0.011,32,0.148,33,0.007,34,0.007,41,0.41,53,0.676,54,0.702,56,1.452,62,5.805,64,4.656,65,0.969,93,3.944,102,3.424,263,4.115,285,1.849,292,1.908,299,2.562,309,1.742,415,3.632,469,4.979,482,2.744,491,2.795,493,1.387,500,2.621,582,3.101,829,3.228,1639,3.424,1640,5.479,1641,2.785,1642,3.952,1643,4.472,1644,6.321,1645,6.321,1646,3.658,1647,3.952,1648,5.162,1649,5.162,1650,5.923,1651,5.369,1652,3.808]],["title/interfaces/KeyValuePairs.html",[1639,1.853,1653,3.422]],["body/interfaces/KeyValuePairs.html",[3,0.109,4,0.124,5,0.109,8,0.17,16,0.847,21,0.01,32,0.139,33,0.008,34,0.008,49,0.652,53,0.631,65,0.905,97,3.405,282,2.158,285,1.814,420,3.112,491,2.636,1639,3.187,1641,3.431,1653,6.729,1654,6.471,1655,4.868,1656,5.353,1657,5.353,1658,7.911,1659,7.911,1660,7.911,1661,7.911,1662,7.911,1663,7.911,1664,7.911,1665,6.088,1666,6.088,1667,6.471]],["title/classes/LoginDTO.html",[31,0.131,303,3.168]],["body/classes/LoginDTO.html",[3,0.101,4,0.115,5,0.101,8,0.159,16,0.858,21,0.011,27,0.188,31,0.234,32,0.13,33,0.008,34,0.008,41,0.471,49,0.754,53,0.64,56,1.456,65,0.806,116,1.973,123,1.588,261,4.602,267,2.2,273,4.881,274,4.25,275,5.215,280,2.371,282,1.921,285,1.855,303,5.936,351,2.355,352,4.895,493,1.514,885,2.953,889,3.853,890,3.999,892,4.364,897,3.804,907,4.737,911,2.724,1131,4.533,1133,5.936,1143,6.13,1147,5.634,1668,4.984,1669,5.668,1670,5.668]],["title/classes/PaginationAndFilterDto.html",[31,0.131,1412,2.134]],["body/classes/PaginationAndFilterDto.html",[3,0.082,4,0.094,5,0.082,8,0.129,16,0.918,21,0.011,27,0.231,31,0.227,32,0.105,33,0.007,34,0.007,41,0.382,49,0.851,52,0.901,53,0.695,54,1.129,115,1.637,116,1.726,123,1.29,175,4.269,243,3.562,267,2.483,280,1.822,282,1.681,285,1.845,309,1.776,351,2.5,420,2.216,459,4.928,493,1.324,833,3.635,885,2.583,889,3.562,905,3.684,906,4.811,908,6.109,910,3.41,911,2.213,950,5.418,966,4.301,988,5.418,1098,3.327,1412,3.073,1415,3.194,1416,3.843,1486,3.327,1671,4.05,1672,6.105,1673,6.105,1674,4.536,1675,5.553,1676,6.105,1677,6.494,1678,6.162,1679,4.606,1680,6.162,1681,4.606,1682,6.162,1683,6.162,1684,4.606,1685,6.162,1686,4.606,1687,4.928,1688,6.162,1689,5.418,1690,4.606,1691,5.488,1692,6.162,1693,4.606,1694,4.606,1695,6.162,1696,5.418,1697,4.05,1698,4.05,1699,3.41,1700,4.606]],["title/interfaces/Payload.html",[64,2.412,1639,1.853]],["body/interfaces/Payload.html",[3,0.097,4,0.11,5,0.097,8,0.152,13,3.859,16,0.89,21,0.011,27,0.18,32,0.124,33,0.008,34,0.008,41,0.45,53,0.663,56,1.367,64,5.031,65,0.95,93,3.415,292,2.024,309,1.74,415,3.68,416,4.058,421,6.309,431,3.053,432,3.053,482,2.787,491,2.965,493,1.472,500,2.78,582,3.29,1152,5.476,1639,3.416,1641,3.053,1648,5.476,1649,5.476,1650,6.014,1651,5.438,1701,4.763]],["title/modules/PaymentModule.html",[177,1.167,193,2.965]],["body/modules/PaymentModule.html",[3,0.107,4,0.122,5,0.107,21,0.01,27,0.286,28,0.978,31,0.183,32,0.137,33,0.008,34,0.008,56,1.034,77,1.916,81,2.585,177,2.139,179,2.349,180,2.423,181,2.673,182,2.673,183,2.502,184,3.396,185,3.396,193,6.18,195,4.595,197,4.797,198,5.021,200,3.257,201,2.673,202,2.423,205,3.149,212,4.135,218,4.418,220,4.418,386,2.977,396,4.418,787,5.244,1702,5.969,1703,5.969,1704,5.969,1705,5.969,1706,5.969,1707,5.969]],["title/interfaces/PaymentResult.html",[1639,1.853,1708,2.651]],["body/interfaces/PaymentResult.html",[3,0.084,4,0.096,5,0.084,8,0.132,16,0.899,21,0.011,27,0.208,32,0.143,33,0.007,34,0.007,41,0.392,53,0.67,54,1.106,65,0.96,130,3.265,244,2.242,245,4.779,246,3.082,285,1.767,286,2.783,309,1.526,372,3.643,491,3.043,493,1.346,500,2.542,516,2.267,562,2.659,992,5.139,998,5.986,1018,2.353,1071,4.591,1074,6.027,1098,4.752,1358,2.446,1359,4.09,1487,4.595,1571,3.493,1639,3.538,1641,2.659,1708,5.413,1709,3.773,1710,6.179,1711,5.007,1712,5.505,1713,7.04,1714,6.403,1715,5.061,1716,3.082,1717,3.082,1718,5.766,1719,6.179,1720,4.148,1721,4.148]],["title/injectables/PaymentService.html",[0,0.701,787,2.524]],["body/injectables/PaymentService.html",[0,1.122,2,1.788,3,0.097,4,0.11,5,0.097,8,0.192,16,0.733,21,0.011,27,0.249,28,0.888,31,0.209,32,0.124,33,0.008,34,0.008,41,0.45,42,1.396,43,1.994,49,0.733,51,1.134,52,0.792,53,0.546,54,0.769,58,1.97,65,0.859,66,1.918,70,1.433,71,1.842,83,1.134,85,2.624,105,2.132,115,1.439,231,3.892,242,2.595,243,2.603,245,4.652,246,5.154,309,1.694,351,2.103,419,1.691,420,1.949,482,1.739,492,4.242,493,1.472,725,3.772,787,4.039,805,4.473,835,3.415,961,3.753,1074,3.753,1098,2.925,1356,5.069,1359,3.539,1487,4.039,1708,4.651,1715,3.356,1716,3.539,1717,3.539,1722,4.332,1723,7.508,1724,6.848,1725,6.848,1726,5.417,1727,5.466,1728,6.848,1729,7.508,1730,6.848,1731,5.417,1732,4.763,1733,5.417,1734,6.021,1735,7.508,1736,5.417,1737,4.01,1738,5.417,1739,6.848,1740,5.417,1741,5.417,1742,4.332]],["title/interfaces/ProcessPaymentResponse.html",[1639,1.853,1718,3.168]],["body/interfaces/ProcessPaymentResponse.html",[3,0.083,4,0.095,5,0.083,8,0.131,16,0.897,21,0.011,27,0.206,32,0.142,33,0.007,34,0.007,41,0.387,53,0.669,54,1.102,65,0.958,130,3.601,244,2.411,245,4.786,246,4.061,285,1.762,286,3.666,309,1.267,372,3.623,491,3.026,493,1.336,500,1.895,516,2.987,562,2.63,992,4.329,998,4.971,1018,3.1,1071,4.566,1074,6.019,1098,4.746,1358,3.222,1359,4.869,1487,4.396,1571,4.601,1639,3.528,1641,2.63,1708,5.127,1709,3.732,1710,6.145,1711,3.732,1712,4.103,1713,7.018,1714,6.383,1715,5.047,1716,3.049,1717,3.049,1718,6.203,1719,7.018,1720,5.465,1721,5.465]],["title/injectables/QueryHelperService.html",[0,0.701,790,1.984]],["body/injectables/QueryHelperService.html",[0,0.903,2,1.292,3,0.07,4,0.08,5,0.07,8,0.194,16,0.81,21,0.011,27,0.23,28,0.642,31,0.169,32,0.09,33,0.006,34,0.006,41,0.606,42,1.123,49,0.683,51,1.527,52,0.933,53,0.582,54,1.036,58,1.586,65,0.955,68,2.555,70,1.584,82,0.935,83,1.584,85,2.228,115,1.694,116,1.787,175,5.829,236,2.468,258,3.818,280,1.629,282,1.503,285,1.842,309,1.645,350,1.544,419,1.721,420,2.294,482,1.769,790,2.555,833,2.309,889,3.636,904,2.558,1145,4.08,1412,3.638,1415,3.588,1416,3.923,1418,4.288,1439,4.265,1443,2.206,1482,5.1,1486,4.086,1601,5.535,1672,6.415,1673,7.095,1674,4.766,1675,4.407,1676,6.086,1677,6.348,1687,4.407,1689,4.846,1691,5.124,1696,3.442,1697,3.442,1698,3.442,1743,6.086,1744,3.131,1745,4.08,1746,5.186,1747,6.378,1748,6.378,1749,5.511,1750,3.915,1751,7.296,1752,3.915,1753,5.511,1754,6.654,1755,5.511,1756,4.846,1757,6.922,1758,7.568,1759,3.915,1760,3.915,1761,7.568,1762,5.511,1763,7.296,1764,5.511,1765,5.602,1766,5.124,1767,3.915,1768,6.086,1769,4.846,1770,5.511,1771,5.511,1772,4.846,1773,4.846,1774,3.915,1775,7.296,1776,3.915,1777,5.511,1778,3.915,1779,3.442,1780,3.915,1781,3.915,1782,5.511,1783,3.915,1784,3.915,1785,6.378,1786,3.915,1787,3.915,1788,5.511,1789,3.915,1790,3.915,1791,6.378]],["title/modules/RedisModule.html",[177,1.167,194,2.796]],["body/modules/RedisModule.html",[3,0.097,4,0.11,5,0.097,8,0.152,12,3.053,16,0.58,21,0.011,27,0.262,28,0.888,31,0.166,32,0.124,33,0.008,34,0.008,43,1.819,48,4.426,58,1.97,74,2.925,113,1.918,137,2.965,146,1.646,164,3.066,177,2.267,179,2.132,180,2.199,181,2.426,182,2.426,183,2.27,184,3.251,185,3.251,194,5.578,200,3.066,201,2.426,202,2.199,205,2.346,206,5.476,223,3.753,224,3.053,238,5.438,274,3.744,788,5.179,868,4.763,1154,6.021,1159,4.763,1162,5.069,1163,6.021,1166,6.004,1168,6.004,1792,4.763,1793,4.763,1794,5.417,1795,7.507,1796,5.417,1797,6.309,1798,5.417,1799,4.332,1800,4.763,1801,5.417,1802,4.763,1803,6.021,1804,6.848,1805,6.848,1806,6.848,1807,6.602]],["title/injectables/RedisService.html",[0,0.701,788,2.524]],["body/injectables/RedisService.html",[0,0.746,2,0.995,3,0.054,4,0.061,5,0.054,8,0.207,16,0.824,21,0.011,27,0.151,28,0.494,31,0.139,32,0.069,33,0.005,34,0.005,41,0.25,42,0.928,43,2.169,45,0.967,49,0.79,51,1.581,52,1.104,53,0.624,54,1.138,58,1.31,65,0.844,66,2.371,70,1.659,71,2.033,83,1.637,85,2.578,97,3.492,104,2.482,105,2.716,112,2.583,113,2.008,115,1.96,116,1.275,146,1.857,163,2.647,164,3.382,165,2.844,238,5.284,241,1.624,282,2.245,285,1.906,292,1.346,309,1.634,351,1.839,372,3.169,419,1.421,420,3.03,488,2.41,493,0.979,516,2.187,542,2.032,588,3.787,788,3.236,829,3.994,853,2.231,866,3.574,890,2.736,904,3.584,980,5.375,1028,2.647,1035,2.566,1145,3.37,1162,2.231,1381,2.088,1432,4.889,1482,3.64,1487,3.606,1502,3.154,1503,5.658,1514,1.969,1517,2.82,1519,2.82,1545,4.256,1646,4.526,1647,4.889,1667,4.003,1797,3.64,1799,2.41,1808,2.649,1809,3.37,1810,4.003,1811,4.003,1812,4.552,1813,4.003,1814,4.552,1815,4.552,1816,3.013,1817,4.552,1818,5.486,1819,4.552,1820,4.003,1821,4.003,1822,4.003,1823,4.552,1824,3.013,1825,5.375,1826,6.475,1827,4.552,1828,4.552,1829,4.552,1830,3.013,1831,4.552,1832,3.64,1833,4.552,1834,6.564,1835,3.013,1836,7.379,1837,5.375,1838,6.114,1839,5.249,1840,4.552,1841,4.552,1842,6.114,1843,4.552,1844,4.552,1845,3.013,1846,4.552,1847,4.552,1848,3.013,1849,4.003,1850,5.375,1851,4.889,1852,4.552,1853,4.552,1854,4.552,1855,3.013,1856,4.552,1857,4.552,1858,3.37,1859,5.486,1860,3.154,1861,3.013,1862,5.486,1863,5.486,1864,4.552,1865,3.013,1866,4.552,1867,3.013,1868,3.013,1869,3.013,1870,3.013,1871,3.013,1872,4.552,1873,3.013,1874,3.013,1875,3.013,1876,3.013,1877,4.003,1878,3.013,1879,3.013,1880,3.013,1881,3.013,1882,3.013]],["title/classes/RefreshTokenDto.html",[31,0.131,1883,3.168]],["body/classes/RefreshTokenDto.html",[3,0.109,4,0.124,5,0.109,8,0.17,16,0.788,21,0.011,27,0.202,31,0.242,32,0.139,33,0.008,34,0.008,41,0.505,49,0.652,53,0.587,65,0.842,93,4.264,116,2.062,123,1.705,263,4.543,267,1.901,280,2.43,282,2.007,285,1.746,299,4.26,351,2.216,493,1.582,885,3.085,889,3.536,890,3.67,892,4.559,907,4.632,911,2.925,1883,6.084,1884,6.471,1885,4.868,1886,6.471,1887,6.088]],["title/injectables/RefreshTokenStoreService.html",[0,0.701,383,2.651]],["body/injectables/RefreshTokenStoreService.html",[0,0.932,2,1.352,3,0.073,4,0.083,5,0.073,8,0.208,14,2.836,15,2.948,16,0.822,21,0.011,27,0.235,28,0.671,31,0.174,32,0.094,33,0.007,34,0.007,41,0.34,42,1.159,43,2.165,45,2.097,48,4.226,49,0.794,51,1.478,52,1.032,53,0.613,54,1.002,56,1.391,58,2.31,60,3.205,65,0.807,66,2.284,70,1.607,71,2,74,2.211,83,1.68,85,2.751,93,4.406,108,2.439,113,1.83,115,1.088,146,2.145,224,3.205,238,5.166,256,1.593,263,3.811,285,1.772,292,2.27,299,4.361,309,1.715,350,1.593,351,2.206,383,4.595,419,1.776,420,1.473,493,1.222,597,4.21,598,3.275,766,3.715,786,4.594,788,4.735,798,3.275,799,3.031,800,3.031,870,3.275,897,3.07,1177,3.523,1214,5,1216,4.21,1381,2.837,1407,3.715,1503,4.891,1545,4.594,1809,4.21,1860,3.94,1888,6.75,1889,3.275,1890,5.225,1891,5.687,1892,5.687,1893,5.687,1894,4.095,1895,5.687,1896,5,1897,5.687,1898,4.095,1899,5.687,1900,5.687,1901,4.095,1902,5,1903,5.687,1904,5.687,1905,4.095,1906,5.687,1907,6.534,1908,4.095,1909,4.095,1910,5,1911,5.687,1912,4.095,1913,4.095]],["title/entities/Reservation.html",[57,1.107,244,1.231]],["body/entities/Reservation.html",[3,0.07,4,0.08,5,0.07,8,0.11,16,0.907,21,0.011,27,0.251,31,0.169,32,0.09,33,0.006,34,0.006,41,0.606,49,0.85,52,1.067,53,0.69,56,1.468,57,1.791,65,0.969,69,2.557,81,1.697,82,0.936,108,1.675,167,3.416,170,3.416,172,3.182,213,2.116,242,1.722,244,2.505,247,4.071,248,3.551,267,2.479,279,2.859,283,2.043,309,1.301,419,2.364,455,3.16,456,3.775,489,1.542,491,2.388,493,1.185,495,3.738,496,3.507,497,3.416,499,2.65,500,2.239,505,3.253,506,3.438,507,3.509,511,2.75,516,3.815,519,2.427,520,3.108,521,5.056,522,5.123,524,4.113,529,2.557,530,3.416,534,4.724,555,4.849,557,3.445,560,5.388,583,1.927,628,3.792,629,2.312,630,2.312,631,2.312,1071,3.603,1076,3.821,1914,3.445,1915,3.919,1916,3.919,1917,3.919,1918,5.515,1919,4.849,1920,3.919,1921,3.919,1922,4.41,1923,3.919,1924,3.919,1925,3.919,1926,4.082,1927,3.919,1928,3.919,1929,4.849,1930,3.919,1931,5.515,1932,3.919,1933,3.919,1934,4.849,1935,3.919,1936,2.715,1937,3.919,1938,3.445,1939,3.445,1940,3.919,1941,3.445]],["title/entities/ReservationDetails.html",[57,1.107,628,1.984]],["body/entities/ReservationDetails.html",[3,0.067,4,0.077,5,0.067,8,0.201,16,0.912,21,0.011,27,0.226,31,0.164,32,0.086,33,0.006,34,0.006,41,0.518,49,0.856,52,0.783,53,0.696,57,1.758,65,0.974,82,0.898,100,3.318,172,2.671,241,2.236,244,2.566,267,2.496,279,2.776,283,1.984,285,1.648,309,1.522,419,2.332,455,3.112,456,3.725,489,1.48,491,2.319,493,1.151,496,3.452,497,3.318,499,2.573,500,2.174,505,4.01,506,3.402,507,3.462,511,2.671,513,3.007,516,3.266,520,3.018,521,4.322,522,4.451,524,4.709,531,3.024,532,3.112,540,3.306,542,1.984,548,4.032,550,2.776,551,2.776,560,4.322,562,2.119,563,2.03,564,2.218,565,2.218,582,2.997,583,2.977,628,2.483,630,4.783,833,3.68,898,3.044,922,3.516,924,3.833,931,3.965,975,5.297,1076,4.322,1107,3.965,1226,4.989,1227,4.989,1239,4.709,1254,4.283,1256,4.709,1922,3.007,1939,4.709,1942,3.007,1943,3.76,1944,5.356,1945,5.485,1946,3.76,1947,3.76,1948,3.76,1949,5.356,1950,3.76,1951,5.356,1952,3.76,1953,3.76,1954,3.76,1955,3.76,1956,5.356,1957,3.76,1958,5.356,1959,3.76,1960,5.356,1961,3.76]],["title/modules/ReservationDetailsModule.html",[177,1.167,1962,2.965]],["body/modules/ReservationDetailsModule.html",[3,0.104,4,0.118,5,0.104,8,0.162,21,0.011,27,0.291,28,0.95,31,0.177,32,0.133,33,0.008,34,0.008,77,1.861,177,2.305,179,2.282,180,2.354,181,2.597,182,2.597,183,2.43,184,3.353,185,2.511,189,5.052,192,4.827,200,3.2,201,2.597,202,2.354,205,3.094,213,3.131,214,3.421,215,4.637,217,4.293,241,1.898,244,2.228,256,2.002,386,3.563,397,3.421,489,2.282,563,3.131,583,2.496,624,4.624,628,3.59,631,3.421,632,3.421,633,4.018,736,4.637,975,3.788,1467,5.099,1962,6.079,1963,5.099,1964,5.799,1965,5.799,1966,5.099,1967,5.099]],["title/injectables/ReservationDetailsService.html",[0,0.701,624,2.31]],["body/injectables/ReservationDetailsService.html",[0,0.954,2,1.399,3,0.076,4,0.086,5,0.076,8,0.201,16,0.767,21,0.011,27,0.269,28,0.694,31,0.178,32,0.097,33,0.007,34,0.007,41,0.352,42,1.187,43,2.06,45,2.135,47,3.974,49,0.712,51,1.392,52,0.973,53,0.531,54,0.945,57,2.093,58,1.675,65,0.926,66,2.226,70,1.499,71,1.903,76,2.036,77,1.36,82,1.012,83,1.572,85,2.034,104,2.364,105,3.127,112,2.618,113,1.864,115,1.546,146,1.769,172,2.113,213,2.288,241,2.15,242,2.344,244,2.568,256,1.631,283,2.157,292,2.457,309,1.46,350,2.006,425,3.196,495,3.789,519,2.625,529,3.481,531,1.667,532,1.835,542,2.157,544,3.388,547,3.388,552,3.388,562,2.388,563,2.288,572,3.281,583,2.777,604,2.935,624,3.867,628,3.853,631,2.499,632,4.225,647,4.962,657,3.434,689,2.935,695,5.119,708,2.625,721,5.119,922,2.388,924,2.113,974,4.962,975,4.679,1074,5.505,1076,2.935,1262,3.725,1268,3.388,1420,4.034,1967,3.725,1968,3.388,1969,6.652,1970,4.237,1971,4.237,1972,6.652,1973,4.237,1974,4.237,1975,5.823,1976,4.237,1977,5.823,1978,3.388,1979,4.237,1980,4.237,1981,4.237,1982,4.237,1983,3.725,1984,4.237,1985,4.237,1986,3.725]],["title/controllers/ReservationsController.html",[250,1.984,1987,3.168]],["body/controllers/ReservationsController.html",[1,2.089,3,0.069,4,0.079,5,0.069,8,0.211,16,0.873,17,2.397,21,0.011,27,0.263,28,0.634,31,0.167,32,0.089,33,0.006,34,0.006,41,0.321,42,1.114,43,1.683,45,1.242,49,0.777,51,1.52,52,1.062,53,0.58,54,1.031,56,1.465,58,1.113,68,3.192,70,1.708,71,2.087,83,1.708,105,2.151,108,2.611,115,1.929,130,3.644,146,1.175,231,2.833,242,2.15,244,2.23,250,2.938,252,1.794,254,2.528,256,1.775,267,2.268,271,4.39,280,2.036,282,1.878,283,2.025,285,1.52,292,2.541,309,1.772,317,2.951,333,2.528,340,3.094,341,3.094,344,2.528,350,1.775,351,1.084,415,1.622,416,1.929,431,2.18,432,2.18,494,3.922,571,3.571,572,3.08,584,2.68,587,4.103,610,2.397,613,3.402,725,2.534,1358,3.908,1412,4.013,1413,3.08,1415,4.103,1416,2.833,1419,3.224,1420,2.68,1421,4.371,1423,4.046,1439,3.08,1440,2.864,1441,2.397,1443,2.18,1445,2.864,1453,3.094,1486,2.951,1652,4.062,1987,4.691,1988,3.402,1989,6.337,1990,4.371,1991,4.805,1992,3.869,1993,5.466,1994,3.869,1995,6.886,1996,6.959,1997,4.805,1998,3.869,1999,5.466,2000,5.466,2001,3.869,2002,3.869,2003,3.869,2004,6.886,2005,5.466,2006,3.402,2007,6.337,2008,5.466,2009,3.869,2010,5.466,2011,3.869,2012,4.285,2013,3.402,2014,2.864,2015,3.869,2016,3.869,2017,3.402,2018,3.869,2019,3.094,2020,3.869,2021,3.869,2022,3.869,2023,3.869,2024,3.869]],["title/modules/ReservationsModule.html",[177,1.167,195,2.31]],["body/modules/ReservationsModule.html",[3,0.088,4,0.1,5,0.088,8,0.138,21,0.011,27,0.297,28,0.807,31,0.151,32,0.147,33,0.007,34,0.007,77,1.581,130,3.008,177,2.21,179,1.938,180,1.999,181,2.205,182,2.205,183,2.064,184,3.296,185,3.108,189,4.87,190,4.652,192,4.652,195,4.828,197,4.045,198,4.87,200,2.884,201,2.205,202,1.999,205,2.789,211,3.645,213,2.659,214,2.905,215,3.938,217,3.645,218,3.645,220,3.645,241,1.906,244,1.853,252,2.986,256,1.804,386,3.212,397,3.799,489,1.938,563,2.659,624,4.375,626,4.207,628,3.327,629,3.799,630,2.905,631,2.905,632,2.905,633,3.412,635,3.938,636,3.645,790,3.756,793,3.938,801,2.775,802,2.775,1987,5.635,2012,5.137,2013,4.33,2014,3.645,2025,4.33,2026,4.925,2027,4.33,2028,4.33,2029,5.689,2030,4.925,2031,4.925,2032,4.33,2033,4.925]],["title/injectables/ReservationsProcessorService.html",[0,0.701,2029,2.796]],["body/injectables/ReservationsProcessorService.html",[0,0.644,2,0.822,3,0.045,4,0.051,5,0.045,8,0.2,16,0.833,21,0.011,27,0.264,28,0.408,31,0.12,32,0.057,33,0.005,34,0.005,41,0.207,42,0.801,43,2.186,45,1.93,47,3.101,49,0.742,51,1.451,52,1.014,53,0.553,54,0.984,56,1.537,57,2.103,58,2.324,65,0.93,66,2.374,70,1.609,71,2.008,76,1.197,77,0.799,81,1.079,82,0.595,83,1.74,85,3.002,104,1.011,105,0.98,108,2.032,112,0.98,113,1.363,115,1.292,130,3.609,131,3.114,137,1.702,162,2.755,168,2.214,213,2.121,214,1.469,231,2.037,241,1.467,242,2.655,243,3.51,244,2.324,245,2.121,248,3.638,256,2.226,283,2.367,292,2.11,309,1.619,317,2.983,350,1.548,351,1.942,400,4.858,401,3.389,404,2.434,433,1.992,435,1.155,482,1.774,494,3.743,495,3.783,519,1.543,529,3.77,542,1.456,583,1.373,606,4.42,607,1.992,614,2.19,624,3.852,629,1.469,632,1.469,633,1.725,658,4.635,686,2.19,767,1.115,787,4.209,789,3.699,796,2.19,835,1.242,866,1.242,1258,2.909,1337,4.661,1339,3.142,1356,2.909,1358,3.928,1359,4.175,1466,2.19,1504,3.455,1708,2.434,1715,1.543,1716,1.627,1717,1.627,1832,3.142,1936,1.725,2014,1.844,2029,3.61,2034,6.274,2035,1.992,2036,3.929,2037,4.867,2038,4.867,2039,3.929,2040,4.867,2041,3.929,2042,3.929,2043,2.19,2044,5.525,2045,3.725,2046,4.418,2047,3.389,2048,2.491,2049,4.279,2050,3.455,2051,3.929,2052,2.491,2053,3.455,2054,3.455,2055,3.929,2056,2.491,2057,2.491,2058,3.929,2059,2.491,2060,2.491,2061,3.455,2062,3.929,2063,3.929,2064,2.491,2065,3.455,2066,3.455,2067,2.318,2068,3.929,2069,2.491,2070,2.491,2071,2.19,2072,3.929,2073,3.929,2074,3.929,2075,2.491,2076,3.455,2077,4.279,2078,3.929,2079,3.929,2080,2.491,2081,3.929,2082,1.992,2083,2.491,2084,2.19,2085,2.19,2086,1.992,2087,3.929,2088,2.491,2089,2.491,2090,2.491,2091,2.491,2092,2.19,2093,2.19,2094,2.491,2095,2.491,2096,2.491,2097,2.491,2098,2.491,2099,2.491,2100,2.19,2101,3.929,2102,2.491,2103,3.929,2104,2.491,2105,2.491,2106,2.491,2107,2.491,2108,3.929,2109,2.19,2110,2.491,2111,2.491,2112,2.491,2113,2.491,2114,2.491]],["title/injectables/ReservationsService.html",[0,0.701,2012,2.524]],["body/injectables/ReservationsService.html",[0,0.687,2,0.893,3,0.048,4,0.055,5,0.048,8,0.2,16,0.864,21,0.011,27,0.237,28,0.443,31,0.128,32,0.062,33,0.005,34,0.005,41,0.225,42,0.854,43,2.176,45,1.647,47,3.393,49,0.783,51,1.444,52,1.009,53,0.55,54,0.98,56,1.463,57,1.495,58,1.903,65,0.953,66,2.295,68,2.679,70,1.69,71,2.01,76,1.3,77,0.868,82,0.646,83,1.618,85,2.661,104,2.083,105,2.603,108,2.472,112,2.019,113,1.437,115,1.894,116,1.853,130,3.645,146,1.273,167,1.675,170,1.675,172,3.441,231,2.173,234,4.087,241,1.113,242,1.804,244,2.456,246,2.738,247,2.014,248,2.621,256,1.174,276,1.524,278,1.524,280,1.709,282,1.576,283,1.553,292,2.405,298,2.596,309,1.721,317,2.263,350,1.174,351,1.174,352,1.524,425,2.465,482,1.855,494,3.376,531,1.064,532,1.171,542,1.553,571,3.524,572,2.362,584,1.874,587,3.429,628,2.899,644,3.102,657,2.472,666,4.004,677,3.352,680,3.352,708,3.178,725,2.679,790,3.393,801,1.524,802,1.524,866,2.559,918,1.874,922,1.524,923,1.675,924,2.09,992,2.596,1028,1.171,1094,1.675,1105,3.102,1106,2.002,1254,4.103,1314,2.378,1358,3.429,1412,3.65,1413,2.362,1415,3.696,1416,2.173,1418,4.534,1419,2.472,1439,3.728,1443,1.524,1486,2.263,1487,2.472,1502,2.904,1512,5.276,1513,2.002,1514,1.767,1515,2.002,1517,1.675,1519,1.675,1520,2.002,1652,3.409,1674,2.738,1675,3.352,1687,2.163,1746,2.738,1779,2.378,1986,2.378,1990,4.621,1991,3.685,2006,3.685,2012,3.409,2014,2.002,2029,4.085,2032,2.378,2043,2.378,2049,4.511,2085,2.378,2100,2.378,2109,2.378,2115,2.378,2116,4.191,2117,5.081,2118,5.779,2119,3.685,2120,5.779,2121,2.705,2122,3.685,2123,2.705,2124,4.191,2125,4.191,2126,2.705,2127,4.191,2128,2.705,2129,4.191,2130,4.191,2131,2.705,2132,4.191,2133,4.191,2134,2.705,2135,4.191,2136,2.705,2137,5.701,2138,5.081,2139,4.191,2140,2.705,2141,4.191,2142,3.685,2143,4.191,2144,2.705,2145,4.191,2146,4.191,2147,2.002,2148,2.705,2149,2.705,2150,3.685,2151,2.378,2152,2.378,2153,3.685,2154,2.705,2155,4.191,2156,2.705,2157,2.705,2158,2.705,2159,2.705,2160,2.378]],["title/guards/RoleGuard.html",[9,2.651,1441,2.651]],["body/guards/RoleGuard.html",[0,1.056,3,0.088,4,0.1,5,0.088,8,0.201,9,3.993,14,3.581,16,0.815,19,5.868,21,0.011,23,4.771,24,4.771,27,0.263,28,0.808,31,0.197,32,0.113,33,0.007,34,0.007,41,0.409,42,1.314,45,2.069,49,0.69,51,1.349,52,0.942,53,0.514,54,0.915,56,1.451,65,0.871,70,1.349,71,1.761,83,1.349,115,1.712,116,1.381,117,2.662,133,2.886,144,2.988,146,1.958,231,3.341,234,2.369,350,1.806,415,3.397,416,2.459,431,2.779,432,2.779,588,3.054,610,3.054,890,3.798,1028,3.109,1029,2.988,1121,4.975,1177,3.993,1440,3.65,1441,4.717,1445,4.771,1554,6.09,1607,3.65,1615,7.26,1616,4.335,1617,6.834,1619,5.667,1620,6.319,1622,5.667,1623,6.696,1624,5.154,1625,3.943,1626,4.335,1652,3.802,2019,5.154,2161,4.335,2162,6.445,2163,6.445,2164,4.93,2165,5.316,2166,4.93,2167,6.445,2168,7.615,2169,4.335,2170,3.943,2171,7.181,2172,4.93,2173,4.93,2174,4.93,2175,4.93,2176,4.93,2177,3.943,2178,3.943]],["title/classes/SignUpDto.html",[31,0.131,2179,3.422]],["body/classes/SignUpDto.html",[3,0.076,4,0.086,5,0.076,8,0.118,16,0.889,21,0.011,27,0.193,31,0.203,32,0.097,33,0.007,34,0.007,41,0.351,49,0.803,52,1.046,53,0.663,54,1.201,56,1.465,65,0.858,116,1.629,123,1.185,137,2.518,267,2.343,273,5.198,274,4.218,276,4.559,277,4.028,278,4.559,279,3.014,280,2.348,282,1.586,285,1.91,351,2.413,352,4.767,415,3.249,416,3.866,420,2.091,431,2.383,432,2.383,493,1.25,603,5.065,885,2.437,889,3.991,890,3.569,897,3.864,898,2.604,907,4.228,908,5.298,911,2.032,951,6.2,952,6.2,961,4.958,962,5.739,966,4.648,967,5.314,968,5.723,1131,3.381,1133,5.298,1134,5.112,1137,3.718,1139,4.304,1140,5.112,1141,4.919,1143,5.314,1144,5.314,1145,5.554,1146,6.597,1147,6,1148,6.597,1149,5.112,1150,5.112,1151,3.718,1152,3.381,2179,6.351,2180,3.718,2181,4.65,2182,4.229,2183,4.229,2184,4.229,2185,4.229,2186,4.229]],["title/modules/ThrollerModule.html",[177,1.167,196,2.965]],["body/modules/ThrollerModule.html",[3,0.116,4,0.132,5,0.116,21,0.01,27,0.254,28,1.061,31,0.198,32,0.148,33,0.009,34,0.009,177,2.215,179,2.548,180,2.629,181,2.899,182,2.899,183,2.714,184,2.804,185,2.804,196,6.008,200,3.419,201,2.899,202,2.629,205,3.307,833,3.819,1503,4.486,1674,4.23,2187,5.693,2188,5.693,2189,7.523,2190,6.475,2191,5.693,2192,5.693,2193,6.475,2194,6.475]],["title/entities/Ticket.html",[57,1.107,247,2.056]],["body/entities/Ticket.html",[3,0.089,4,0.102,5,0.089,8,0.14,16,0.899,21,0.011,27,0.216,31,0.199,32,0.114,33,0.007,34,0.007,41,0.6,49,0.849,52,0.729,53,0.683,57,1.978,65,0.96,82,1.192,97,3.01,170,4.473,172,3.238,234,3.12,244,2.522,247,4.21,267,2.477,285,1.873,309,1.472,489,1.963,491,2.812,493,1.396,499,3.811,500,2.636,513,3.989,516,3.12,520,4.311,521,5.003,522,4.473,524,4.784,562,2.811,875,4.807,1091,5.495,1093,5.495,1094,4.913,1193,5.193,1194,4.807,1926,3.692,1941,5.71,2195,4.385,2196,4.385,2197,4.988,2198,5.71,2199,6.494,2200,4.988,2201,6.494,2202,4.988,2203,4.988,2204,4.988,2205,6.494,2206,4.988,2207,4.988]],["title/modules/TicketsModule.html",[177,1.167,197,2.412]],["body/modules/TicketsModule.html",[3,0.1,4,0.114,5,0.1,8,0.157,21,0.011,27,0.292,28,0.918,31,0.171,32,0.128,33,0.008,34,0.008,56,1.212,77,1.798,81,2.426,130,2.931,131,4.5,147,2.931,177,2.364,179,2.204,180,3.095,181,2.508,182,2.508,183,2.348,184,3.302,185,3.302,195,4.525,197,4.885,198,4.944,200,3.132,201,2.508,202,2.274,205,3.458,212,3.881,220,4.147,247,2.691,248,2.931,259,2.515,386,2.793,626,5.369,629,3.304,632,3.304,1936,3.881,1962,4.845,2045,5.463,2208,4.925,2209,5.602,2210,4.925,2211,4.925,2212,5.602,2213,6.148,2214,6.993,2215,6.148,2216,5.602,2217,4.925,2218,5.602,2219,5.602]],["title/injectables/TicketsService.html",[0,0.701,2045,2.651]],["body/injectables/TicketsService.html",[0,0.882,2,1.25,3,0.068,4,0.077,5,0.068,8,0.202,16,0.801,21,0.011,27,0.273,28,0.621,31,0.165,32,0.087,33,0.006,34,0.006,41,0.314,42,1.097,43,2.127,45,2.313,47,3.57,49,0.73,51,1.428,52,0.997,53,0.544,54,0.968,56,1.438,57,1.936,58,2.337,65,0.957,66,2.389,70,1.567,71,1.964,76,1.82,77,1.216,81,1.64,82,0.905,83,1.7,85,2.923,104,1.537,105,2.118,108,2.189,112,1.49,113,1.754,115,1.43,130,3.356,131,4.676,162,2.684,168,3.034,172,3.123,244,2.549,247,4.02,248,2.256,256,2.275,283,1.994,292,2.016,298,4.225,309,1.604,350,1.508,402,4.961,405,3.985,425,2.586,430,3.028,454,3.33,482,1.728,562,2.134,588,3.335,626,2.474,789,4.151,1091,3.729,1093,3.729,1094,3.335,1162,2.803,1190,3.985,1358,3.535,1715,2.346,1716,2.474,1717,2.474,1737,3.985,1926,2.803,1983,4.733,2012,4.416,2045,4.225,2046,5.454,2047,4.06,2082,3.028,2084,3.33,2086,3.028,2093,3.33,2160,3.33,2217,3.33,2220,3.33,2221,5.383,2222,5.383,2223,6.263,2224,3.787,2225,6.82,2226,3.787,2227,6.263,2228,5.383,2229,3.787,2230,5.383,2231,5.383,2232,3.787,2233,3.729,2234,5.383,2235,3.787,2236,3.787,2237,5.383,2238,3.787,2239,3.787,2240,3.787,2241,3.787,2242,3.33,2243,3.787,2244,3.787,2245,3.787,2246,3.787,2247,3.787,2248,3.787,2249,3.787,2250,3.787,2251,3.787]],["title/interfaces/TokenConfig.html",[1639,1.853,2252,3.168]],["body/interfaces/TokenConfig.html",[3,0.089,4,0.102,5,0.089,8,0.14,14,3.82,15,4.403,16,0.899,21,0.011,32,0.115,33,0.007,34,0.007,41,0.416,53,0.67,60,2.821,65,0.961,96,5.67,97,3.014,102,5.307,147,3.21,285,1.949,299,3.971,491,2.167,493,1.399,831,7.387,869,7.634,1164,6.719,1639,2.819,1641,2.821,1646,5.67,2181,6.125,2252,6.343,2253,4.401,2254,8.683,2255,8.683,2256,8.683,2257,8.402,2258,8.402,2259,8.402]],["title/injectables/TokenManagementService.html",[0,0.701,384,2.796]],["body/injectables/TokenManagementService.html",[0,0.971,2,1.434,3,0.078,4,0.088,5,0.078,8,0.212,13,4.405,14,4.06,15,3.071,16,0.837,21,0.011,27,0.24,28,0.712,31,0.181,32,0.099,33,0.007,34,0.007,41,0.361,42,1.207,45,2.163,48,4.28,49,0.775,51,1.515,52,1.058,53,0.578,54,1.028,56,1.254,58,2.249,60,3.338,64,4.973,65,0.915,66,1.659,70,1.636,71,1.653,74,2.346,83,1.636,85,2.07,93,4.429,96,4.989,100,3.669,108,2.199,115,1.79,146,1.799,224,3.338,234,2.846,256,1.659,263,3.198,283,2.681,285,1.843,299,3.752,350,2.19,384,4.729,387,7.159,388,3.474,415,3.034,419,1.357,420,1.563,469,3.87,482,2.324,766,3.87,870,3.474,1121,5.015,1177,3.669,1196,6.364,1216,4.385,1643,4.104,1809,4.385,2260,6.66,2261,3.474,2262,5.923,2263,5.923,2264,5.923,2265,4.345,2266,4.345,2267,5.923,2268,4.345,2269,5.923,2270,5.923,2271,4.345,2272,5.923,2273,5.923,2274,7.238,2275,4.345,2276,5.923,2277,5.923,2278,3.82,2279,5.923,2280,5.923,2281,3.82,2282,5.923,2283,4.345,2284,5.923,2285,4.345]],["title/injectables/TokenService.html",[0,0.701,342,2.524]],["body/injectables/TokenService.html",[0,0.673,2,0.87,3,0.047,4,0.054,5,0.047,8,0.198,12,3.212,13,4.185,14,3.772,15,4.229,16,0.823,21,0.011,27,0.247,28,0.432,31,0.126,32,0.06,33,0.005,34,0.005,41,0.219,42,0.837,43,2.041,44,4.037,45,1.621,48,3.765,49,0.757,51,1.431,52,0.999,53,0.58,54,0.97,56,1.464,57,1.474,58,2.211,60,2.315,64,4.655,65,0.963,66,2.269,70,1.608,71,1.885,73,3.286,74,1.423,80,2.318,81,1.142,83,1.667,85,2.782,93,4.242,104,1.07,108,2.256,109,2.318,110,1.952,111,2.318,112,1.617,113,2.119,115,1.972,116,2.08,117,4.205,120,1.827,146,1.732,162,2.049,224,2.315,238,3.127,256,2.08,257,3.041,258,2.846,261,3.298,263,4.255,283,1.522,285,1.56,286,5.128,292,1.215,293,4.76,295,5.995,298,3.531,299,4.257,301,4.558,313,3.612,316,3.286,335,4.941,342,3.645,348,1.633,350,1.597,351,2.035,372,3.85,382,4.499,383,4.499,384,4.745,391,2.318,392,2.108,394,2.108,406,3.041,415,1.722,419,1.283,420,0.948,458,1.952,469,4.037,471,2.318,473,4.037,481,2.318,493,0.883,789,3.665,856,3.286,866,3.832,904,4.276,1098,3.534,1190,3.041,1194,3.041,1381,1.827,1517,3.531,1519,3.127,1521,3.041,1545,4.093,1571,3.041,1574,3.612,1603,5.012,1604,5.012,1605,3.612,1640,1.827,1643,1.827,1650,2.846,1651,2.545,1737,1.952,1860,2.846,1890,2.108,1902,3.612,1910,2.318,2082,2.108,2086,2.108,2178,2.108,2278,2.318,2281,2.318,2286,2.318,2287,4.109,2288,4.109,2289,4.109,2290,5.048,2291,2.636,2292,4.109,2293,4.109,2294,2.636,2295,4.109,2296,4.109,2297,2.636,2298,4.109,2299,4.109,2300,4.109,2301,4.109,2302,2.636,2303,4.109,2304,4.109,2305,2.636,2306,4.109,2307,2.636,2308,4.109,2309,2.636,2310,2.636,2311,3.612,2312,4.109,2313,4.109,2314,5.048,2315,2.636,2316,2.636,2317,2.636,2318,2.636,2319,2.636,2320,4.109,2321,4.109,2322,5.048,2323,2.636,2324,2.636,2325,2.636,2326,2.636,2327,2.636,2328,4.109,2329,2.636,2330,4.109,2331,4.109,2332,2.636,2333,4.109,2334,2.636,2335,2.636,2336,2.636,2337,2.636,2338,2.636,2339,4.109,2340,2.636,2341,2.636,2342,2.636,2343,2.636,2344,2.636,2345,2.636,2346,2.636,2347,2.636]],["title/entities/Transaction.html",[57,1.107,248,1.793]],["body/entities/Transaction.html",[3,0.074,4,0.084,5,0.074,8,0.115,16,0.914,21,0.011,27,0.235,31,0.175,32,0.094,33,0.007,34,0.007,41,0.544,49,0.86,52,0.602,53,0.698,56,1.479,57,1.829,65,0.976,81,1.782,82,0.983,108,1.733,130,2.965,167,4.058,244,2.378,245,3.819,248,3.668,267,2.51,279,2.958,283,2.114,309,1.663,419,2.401,455,3.217,456,3.834,489,1.619,491,2.471,493,1.226,496,3.57,497,3.535,499,2.742,500,2.872,501,2.851,505,4.173,506,3.48,507,3.564,511,2.845,516,3.399,520,3.216,522,4.058,523,4.538,524,4.745,534,3.046,560,4.538,562,2.319,582,2.742,725,2.645,833,3.366,992,4.603,1063,3.728,1098,3.081,1105,5.5,1106,5.5,1107,4.224,1226,4.563,1227,4.563,1715,4.382,1716,2.688,1717,2.688,1727,3.953,1929,5.017,2242,5.017,2348,3.618,2349,4.115,2350,5.706,2351,4.115,2352,5.706,2353,4.115,2354,5.706,2355,4.115,2356,4.115,2357,5.706,2358,4.115,2359,4.115,2360,5.706,2361,4.115,2362,4.115,2363,5.017,2364,4.115,2365,3.618]],["title/controllers/TransactionsController.html",[250,1.984,2366,2.965]],["body/controllers/TransactionsController.html",[1,3.032,3,0.1,4,0.114,5,0.1,8,0.196,16,0.75,17,3.479,21,0.011,27,0.273,28,0.92,31,0.214,32,0.129,33,0.008,34,0.008,41,0.466,42,1.428,49,0.601,51,1.176,52,0.821,53,0.448,54,0.797,56,1.385,68,3.247,70,1.466,71,1.872,83,1.598,108,2.319,115,1.492,168,4.794,248,2.354,250,3.539,252,2.604,254,3.669,256,1.962,267,1.754,280,2.071,282,1.91,292,2.071,309,1.629,333,3.669,344,3.669,351,1.573,571,4.302,584,3.891,587,3.631,610,3.479,725,3.247,1412,4.101,1413,3.947,1415,4.143,1416,3.631,1419,4.132,1439,3.947,1443,3.165,1486,3.782,1996,7.231,1997,6.159,2017,4.938,2047,4.302,2366,4.853,2367,4.938,2368,5.616,2369,7.005,2370,6.159,2371,4.938,2372,4.491,2373,5.616,2374,5.616]],["title/modules/TransactionsModule.html",[177,1.167,198,2.524]],["body/modules/TransactionsModule.html",[3,0.096,4,0.109,5,0.096,8,0.15,21,0.011,27,0.295,28,0.877,31,0.164,32,0.155,33,0.008,34,0.008,56,1.293,77,1.717,81,2.316,168,3.828,177,2.259,179,2.105,180,2.172,181,2.396,182,2.396,183,2.242,184,3.401,185,3.232,195,4.03,197,4.207,198,5.143,200,3.042,201,2.396,202,2.172,205,2.316,212,3.706,218,3.96,241,1.982,248,2.847,252,3.149,256,1.903,386,3.388,397,4.007,489,2.105,563,2.888,624,4.544,626,4.877,628,3.46,629,4.007,630,3.155,631,3.155,632,3.155,633,3.706,635,5.432,636,5.029,790,3.901,801,3.015,802,3.015,2047,4.981,2366,5.44,2371,4.703,2372,4.278,2375,4.703,2376,4.703,2377,4.703,2378,5.35,2379,5.35,2380,5.35]],["title/injectables/TransactionsService.html",[0,0.701,2047,2.412]],["body/injectables/TransactionsService.html",[0,0.737,2,0.98,3,0.053,4,0.06,5,0.053,8,0.192,16,0.845,21,0.011,27,0.25,28,0.486,31,0.138,32,0.068,33,0.005,34,0.005,41,0.246,42,0.917,43,1.997,45,1.745,47,3.705,49,0.763,51,1.365,52,0.953,53,0.569,54,0.926,56,1.457,57,1.775,58,1.746,65,0.932,66,2.183,68,2.086,70,1.605,71,1.845,76,1.426,77,0.953,81,1.285,82,0.709,83,1.605,84,2.197,85,2.792,104,1.827,105,2.387,108,1.981,112,1.771,113,2.057,115,1.731,116,1.523,146,1.843,167,2.787,168,4.391,170,1.838,172,3.251,213,1.602,234,4.058,241,0.788,242,1.894,243,2.915,244,2.164,245,2.429,247,1.426,248,3.568,256,1.261,276,1.672,278,1.672,280,1.33,282,1.227,283,1.667,292,2.108,309,1.66,350,1.699,351,1.997,419,0.927,420,1.067,425,2.162,455,1.949,482,1.444,493,0.967,495,2.92,519,1.838,529,1.376,531,1.168,532,1.285,542,1.099,571,3.674,584,2.056,587,2.333,628,1.376,657,2.654,658,3.117,666,3.117,685,2.373,708,1.838,725,3.856,790,3.486,801,1.672,802,1.672,835,1.48,866,2.71,918,2.056,922,1.672,923,1.838,924,1.48,933,3.117,992,1.838,1028,1.949,1091,2.056,1093,2.056,1094,1.838,1105,4.023,1106,3.331,1123,3.598,1124,2.373,1358,2.333,1381,2.056,1385,2.609,1386,2.609,1412,3.251,1413,2.536,1415,3.144,1416,2.333,1418,4.416,1419,2.654,1439,3.419,1443,1.672,1486,2.429,1487,3.578,1502,3.117,1512,4.202,1513,2.197,1514,1.939,1515,2.197,1517,1.838,1519,1.838,1520,2.197,1521,3.331,1545,4.391,1708,4.827,1727,4.754,1732,2.609,1745,3.331,1746,2.94,1765,2.197,1766,3.331,1922,2.373,1926,2.197,2047,3.674,2092,3.956,2117,5.333,2137,4.851,2138,3.956,2150,3.956,2151,2.609,2152,2.609,2153,2.609,2233,2.056,2372,2.373,2381,2.609,2382,4.5,2383,5.435,2384,4.5,2385,2.967,2386,6.066,2387,4.5,2388,5.435,2389,4.5,2390,2.967,2391,3.956,2392,4.5,2393,2.967,2394,2.967,2395,4.5,2396,2.967,2397,4.5,2398,4.5,2399,2.967,2400,4.5,2401,2.967,2402,4.5,2403,6.066,2404,2.967,2405,2.967,2406,2.967,2407,2.967,2408,4.5,2409,2.967,2410,4.5,2411,3.956,2412,2.609,2413,2.967,2414,2.967,2415,2.967,2416,2.967,2417,4.5,2418,4.5,2419,2.967,2420,2.967,2421,2.967,2422,2.967,2423,2.967,2424,2.967]],["title/classes/UpdateCartItemDto.html",[31,0.131,600,3.168]],["body/classes/UpdateCartItemDto.html",[3,0.115,4,0.131,5,0.115,8,0.181,21,0.01,25,4.524,27,0.253,31,0.233,32,0.148,33,0.009,34,0.009,54,1.082,116,2.135,123,1.808,242,2.616,259,2.322,280,2.253,282,2.079,493,1.638,527,3.999,529,3.534,576,5.024,600,5.642,605,5.162,884,4.778,885,3.195,2067,4.496,2425,5.676,2426,7.622,2427,3.999,2428,4.217]],["title/classes/UpdateEventDto.html",[31,0.131,1434,2.796]],["body/classes/UpdateEventDto.html",[3,0.117,4,0.133,5,0.117,8,0.183,21,0.01,25,4.404,27,0.255,31,0.235,32,0.176,33,0.009,34,0.009,116,2.152,123,1.833,241,2.041,259,2.354,282,2.096,885,3.22,914,4.054,916,4.844,1434,5.499,1442,5.233,2067,4.532,2427,4.054,2428,4.275,2429,5.754,2430,8.157]],["title/classes/UpdatePasswordDTO.html",[31,0.131,320,3.168]],["body/classes/UpdatePasswordDTO.html",[3,0.097,4,0.111,5,0.097,8,0.152,16,0.846,21,0.011,27,0.181,31,0.23,32,0.125,33,0.008,34,0.008,41,0.452,49,0.735,53,0.631,65,0.904,113,1.924,116,1.924,123,1.525,267,2.145,274,4.262,280,2.46,282,1.874,285,1.886,317,4.493,320,6.16,326,6.756,327,6.949,328,6.756,330,5.493,351,2.331,493,1.477,885,2.879,889,3.798,890,3.941,891,4.488,892,4.255,907,4.592,911,2.616,941,4.03,966,4.662,1139,5.085,1144,6.018,2067,4.052,2431,6.617,2432,4.354,2433,5.445,2434,5.445,2435,7.904,2436,5.445]],["title/classes/UpdateReservationDetailsDto.html",[31,0.131,2437,3.422]],["body/classes/UpdateReservationDetailsDto.html",[3,0.115,4,0.131,5,0.115,8,0.181,21,0.01,25,4.524,27,0.253,31,0.233,32,0.148,33,0.009,34,0.009,54,1.082,116,2.135,123,1.808,244,2.411,259,2.322,280,2.253,282,2.079,493,1.638,583,2.663,885,3.195,974,5.619,975,4.217,977,4.778,1978,5.162,2067,4.496,2427,3.999,2428,4.217,2437,6.095,2438,5.676,2439,7.622]],["title/classes/UpdateReservationDto.html",[31,0.131,2440,3.168]],["body/classes/UpdateReservationDto.html",[3,0.116,4,0.132,5,0.116,8,0.182,21,0.01,25,4.535,27,0.254,31,0.234,32,0.149,33,0.009,34,0.009,54,1.087,116,2.145,123,1.822,244,2.203,259,2.34,280,2.264,282,2.088,493,1.646,885,3.209,989,5.637,991,4.815,2067,4.516,2427,4.029,2428,4.249,2440,5.668,2441,5.719,2442,7.656,2443,6.504]],["title/classes/UpdateTransactionDto.html",[31,0.131,2444,3.422]],["body/classes/UpdateTransactionDto.html",[3,0.121,4,0.138,5,0.121,21,0.01,25,4.24,27,0.261,31,0.208,32,0.155,33,0.009,34,0.009,123,1.903,259,2.444,1126,5.029,1128,5.029,2427,4.208,2428,4.438,2444,6.28,2445,5.973,2446,7.853,2447,6.794]],["title/classes/UpdateUserDto.html",[31,0.131,2448,2.796]],["body/classes/UpdateUserDto.html",[3,0.116,4,0.132,5,0.116,8,0.182,21,0.01,25,4.533,27,0.254,31,0.234,32,0.149,33,0.009,34,0.009,54,1.086,56,1.325,116,2.143,123,1.819,259,2.336,266,5.037,280,2.262,282,2.086,339,5.71,493,1.644,885,3.206,1130,4.807,2067,4.512,2427,4.023,2448,4.997,2449,5.71,2450,7.65,2451,5.71,2452,4.499]],["title/entities/User.html",[56,0.741,57,1.107]],["body/entities/User.html",[3,0.053,4,0.061,5,0.053,8,0.083,16,0.93,21,0.011,27,0.228,31,0.166,32,0.068,33,0.005,34,0.005,41,0.247,49,0.879,52,1.004,53,0.705,56,1.522,57,1.57,65,0.994,82,0.71,93,2.247,97,1.774,100,3.762,108,1.653,110,3.336,130,2.99,168,4.24,234,2.918,242,2.522,244,2.053,248,2.99,267,2.564,274,3.558,276,3.678,277,3.122,278,3.678,279,3.148,283,1.67,285,1.798,309,1.646,352,4.021,373,3.604,415,2.99,416,3.028,419,2.467,421,3.604,431,1.676,432,1.676,453,5.218,455,2.826,456,3.425,459,3.604,462,3.604,466,3.963,478,3.963,482,1.747,489,1.17,491,1.952,492,2.792,493,0.969,497,2.792,499,3.428,500,1.83,501,3.122,505,4.051,506,3.182,507,3.184,516,2.165,518,3.963,520,2.54,521,3.77,523,4.521,524,4.873,526,3.963,561,2.614,562,1.676,725,2.089,889,2.918,1018,3.425,1063,5.012,1077,2.944,1119,3.963,1120,4.831,1121,3.77,1122,5.738,1123,5.218,1124,5.218,1125,5.738,1133,3.336,1177,2.792,1201,3.604,1209,3.963,1222,3.963,1483,5.738,1529,2.614,1651,2.792,1699,2.201,1727,3.122,1919,2.614,1934,3.963,1936,2.06,1938,3.963,1945,5.339,2178,3.604,2196,2.614,2363,3.963,2365,3.963,2411,3.963,2412,3.963,2453,2.614,2454,2.974,2455,2.974,2456,2.974,2457,4.507,2458,2.974,2459,4.507,2460,2.974,2461,4.507,2462,2.974,2463,4.507,2464,2.974,2465,2.974,2466,4.507,2467,4.507,2468,2.974,2469,6.072,2470,5.339,2471,2.974,2472,2.974,2473,2.974,2474,2.974,2475,4.507,2476,2.974,2477,2.974,2478,2.974,2479,2.974]],["title/controllers/UsersController.html",[250,1.984,2480,3.168]],["body/controllers/UsersController.html",[1,2.112,3,0.07,4,0.08,5,0.07,8,0.204,16,0.875,17,2.423,21,0.011,27,0.264,28,0.641,31,0.168,32,0.089,33,0.006,34,0.006,41,0.325,42,1.123,45,1.256,49,0.781,51,1.448,52,1.012,53,0.552,54,0.982,56,1.528,58,1.126,68,3.208,69,3.208,70,1.712,71,2.09,83,1.627,100,3.412,105,2.167,115,1.937,146,1.188,162,4.162,250,2.955,252,1.813,254,2.555,256,1.786,267,2.277,276,3.104,278,3.104,280,2.156,282,1.502,285,1.842,290,6.053,292,2.544,317,2.974,323,2.747,324,5.399,332,3.816,333,2.555,344,2.555,350,1.096,351,1.096,415,1.639,416,1.951,431,2.204,432,2.204,511,3.773,571,3.593,572,3.104,574,4.286,587,3.922,610,2.423,725,2.553,789,3.781,1120,4.077,1358,2.855,1402,6.539,1406,4.842,1407,4.52,1412,3.637,1413,3.104,1415,3.587,1416,2.855,1418,3.949,1419,3.249,1420,2.71,1421,3.128,1423,4.077,1433,3.128,1439,3.104,1440,2.895,1441,2.423,1443,2.204,1445,4.077,1453,3.128,1455,3.128,1456,3.439,1472,5.533,1486,2.974,1606,2.71,1612,5.605,1636,4.077,1858,4.077,2019,4.404,2370,4.842,2448,5.342,2480,4.719,2481,3.439,2482,5.508,2483,3.439,2484,5.508,2485,3.912,2486,6.919,2487,3.912,2488,3.912,2489,3.912,2490,6.919,2491,3.912,2492,3.912,2493,5.508,2494,3.912,2495,4.842,2496,5.508,2497,5.508,2498,4.842,2499,3.912,2500,3.912,2501,3.439,2502,3.128,2503,3.912,2504,3.912,2505,3.912,2506,3.912,2507,3.912,2508,3.912,2509,3.912,2510,3.912]],["title/modules/UsersModule.html",[177,1.167,199,2.965]],["body/modules/UsersModule.html",[3,0.103,4,0.118,5,0.103,8,0.162,21,0.011,27,0.289,28,0.948,31,0.177,32,0.132,33,0.008,34,0.008,35,5.592,56,1.236,77,1.856,162,3.557,177,2.304,179,2.276,180,2.348,181,2.59,182,2.59,183,2.424,184,3.497,185,2.504,199,6.076,200,3.194,201,2.59,202,2.348,205,2.504,248,3.242,252,3.307,256,1.998,386,3.557,396,4.281,397,4.207,489,2.276,789,4.437,790,3.968,801,3.259,802,3.259,1936,4.007,2480,5.978,2501,5.085,2502,4.625,2511,5.085,2512,5.085,2513,5.783,2514,5.783,2515,5.783,2516,5.783]],["title/injectables/UsersService.html",[0,0.701,789,2.218]],["body/injectables/UsersService.html",[0,0.768,2,1.034,3,0.056,4,0.064,5,0.056,8,0.209,16,0.873,21,0.011,27,0.241,28,0.513,31,0.143,32,0.072,33,0.005,34,0.005,41,0.26,42,0.955,43,2.259,45,1.803,46,2.505,47,3.366,49,0.799,51,1.52,52,1.062,53,0.579,54,1.031,55,4.491,56,1.553,57,1.212,58,1.794,65,0.964,66,2.383,68,2.89,69,2.89,70,1.707,71,2.087,76,1.505,77,1.006,82,0.748,83,1.627,84,2.319,85,1.638,100,3.479,104,2.844,105,3.004,107,2.754,108,2.478,112,2.21,113,1.573,115,1.86,146,1.424,162,4.131,222,3.47,229,3.47,256,1.313,280,1.973,282,1.278,285,1.376,292,2.479,309,1.726,317,2.531,323,2.337,350,1.313,351,0.878,425,3.365,439,2.754,462,2.505,467,4.121,511,3.109,571,3.165,572,2.641,574,3.862,587,3.232,590,4.121,599,4.121,657,2.765,708,4.951,715,3.47,725,2.89,766,4.073,767,2.792,769,5.481,773,3.748,789,3.232,790,3.094,801,1.765,802,1.765,866,2.337,1028,1.356,1120,3.47,1358,2.43,1412,3.328,1413,2.641,1415,3.232,1416,2.43,1418,3.479,1419,2.765,1439,2.641,1443,1.765,1472,4.985,1473,5.481,1486,2.531,1487,2.765,1502,3.247,1513,2.319,1514,2.046,1515,2.319,1516,2.754,1517,1.94,1519,1.94,1520,2.319,1521,2.319,1636,3.47,1745,3.47,1746,3.062,1858,3.47,2448,5.221,2483,2.754,2495,4.121,2498,4.121,2502,2.505,2517,2.754,2518,4.687,2519,4.687,2520,4.687,2521,3.133,2522,3.133,2523,4.687,2524,3.133,2525,4.687,2526,3.133,2527,4.687,2528,4.687,2529,3.133,2530,4.687,2531,3.133,2532,4.687,2533,4.687,2534,4.687,2535,3.133,2536,4.687,2537,4.687,2538,3.133,2539,4.687,2540,4.687,2541,3.133,2542,3.133,2543,5.616,2544,3.133,2545,4.687]],["title/injectables/WinstonLoggerService.html",[0,0.701,2546,3.168]],["body/injectables/WinstonLoggerService.html",[0,0.999,2,1.496,3,0.137,4,0.092,5,0.081,8,0.222,12,3.436,16,0.901,21,0.011,27,0.229,28,0.743,31,0.186,32,0.104,33,0.007,34,0.007,41,0.376,42,1.242,49,0.823,51,1.609,52,1.124,53,0.613,54,1.091,58,1.754,70,1.609,83,1.657,133,2.73,285,1.967,306,5.832,372,4.7,805,3.983,853,5.69,866,4.1,1112,3.625,1545,3.436,2546,4.513,2547,3.986,2548,4.875,2549,5.099,2550,6.96,2551,6.84,2552,7.916,2553,6.477,2554,6.096,2555,4.533,2556,6.732,2557,6.096,2558,6.096,2559,7.324,2560,4.533,2561,6.096,2562,6.477,2563,6.096,2564,4.533,2565,6.096,2566,6.096,2567,4.533,2568,6.096,2569,6.096,2570,4.533,2571,6.096,2572,6.096,2573,6.888,2574,4.533,2575,4.533,2576,4.533,2577,4.533,2578,4.533,2579,4.533]],["title/coverage.html",[2580,4.688]],["body/coverage.html",[0,1.42,1,1.813,5,0.06,6,2.953,7,2.686,9,3.058,21,0.011,31,0.269,33,0.006,34,0.006,35,2.194,36,2.953,37,2.686,48,1.741,53,0.268,56,0.582,57,2.011,62,2.327,64,1.893,108,1.02,113,0.941,122,2.686,124,2.953,125,2.686,158,1.675,183,1.408,214,2.911,241,0.892,242,1.827,244,1.684,247,1.614,248,1.408,250,3.331,251,2.327,253,2.953,266,2.081,303,2.486,320,2.486,336,2.081,342,1.981,382,2.081,383,2.081,384,2.194,398,2.953,401,1.893,402,2.081,415,1.408,420,1.208,426,2.327,490,2.953,495,1.504,500,1.364,527,4.257,528,2.953,569,2.486,570,2.686,576,2.081,600,2.486,606,2.081,624,1.813,628,1.557,630,1.981,632,1.981,637,2.686,648,1.893,737,2.953,786,1.893,787,1.981,788,1.981,789,1.741,790,1.557,803,2.953,804,2.686,835,2.918,842,2.953,862,2.486,883,2.953,884,3.654,914,2.081,915,2.953,916,3.654,933,6.319,962,2.486,974,2.327,975,4.214,976,2.953,977,3.654,989,2.327,990,2.953,991,3.654,1003,2.686,1004,2.953,1005,2.686,1026,2.327,1037,2.686,1038,2.953,1039,2.686,1044,2.686,1045,2.953,1046,2.686,1052,2.686,1053,2.953,1054,2.686,1060,2.686,1067,2.686,1068,2.953,1069,2.686,1078,2.686,1079,2.953,1080,2.686,1084,2.686,1085,2.953,1086,2.686,1095,2.686,1096,2.953,1097,2.686,1102,2.686,1108,2.686,1109,2.953,1110,2.686,1116,2.686,1126,2.486,1127,2.953,1128,3.654,1129,2.953,1130,3.654,1180,2.953,1224,2.953,1243,2.081,1273,2.953,1274,2.686,1282,3.947,1283,2.686,1313,2.486,1337,2.194,1338,2.686,1346,2.081,1394,2.486,1395,2.953,1412,1.675,1434,2.194,1441,2.081,1468,2.953,1538,2.686,1539,2.953,1540,2.953,1541,2.686,1542,2.686,1545,1.893,1556,2.686,1591,2.686,1592,2.953,1596,2.953,1597,2.686,1606,2.327,1608,2.953,1609,2.686,1639,3.216,1640,2.327,1642,3.947,1653,2.686,1654,2.953,1655,2.686,1668,2.953,1671,2.953,1701,2.953,1708,2.081,1709,3.947,1718,2.486,1722,2.686,1743,2.953,1744,2.686,1808,2.953,1839,3.947,1883,2.486,1884,2.953,1885,2.686,1888,2.953,1889,2.686,1914,2.953,1942,2.686,1968,2.686,1987,2.486,1988,2.953,2012,1.981,2029,2.194,2034,2.953,2035,2.686,2045,2.081,2047,1.893,2115,2.953,2147,2.486,2161,2.953,2170,2.686,2179,2.686,2180,2.953,2195,2.953,2220,2.953,2252,2.486,2253,2.953,2260,2.953,2261,2.686,2286,2.953,2348,2.953,2366,2.327,2367,2.953,2381,2.953,2425,2.953,2429,2.953,2431,2.953,2432,2.686,2437,2.686,2438,2.953,2440,2.486,2441,2.953,2444,2.686,2445,2.953,2448,2.194,2449,2.953,2453,2.953,2480,2.486,2481,2.953,2517,2.953,2546,2.486,2547,2.953,2556,2.686,2580,2.686,2581,2.953,2582,2.953,2583,4.34,2584,7.515,2585,8.88,2586,2.953,2587,2.686,2588,6.45,2589,5.852,2590,3.359,2591,7.426,2592,6.872,2593,6.042,2594,2.953,2595,2.953,2596,2.686,2597,7.619,2598,2.953,2599,2.686,2600,2.953,2601,8.26,2602,3.359,2603,3.359,2604,2.953,2605,2.686,2606,5.852,2607,5.852,2608,5.852,2609,2.953,2610,4.936,2611,6.45,2612,6.45,2613,4.936,2614,4.936,2615,3.359,2616,3.359,2617,3.359,2618,3.359,2619,4.34,2620,5.145,2621,2.953,2622,6.317,2623,2.953,2624,2.953,2625,3.359]],["title/dependencies.html",[180,2.092,2626,3.133]],["body/dependencies.html",[13,3.369,21,0.011,28,0.98,30,4.78,31,0.223,33,0.008,34,0.008,74,3.227,77,1.919,79,6.276,82,1.428,180,2.427,238,3.703,348,4.509,388,4.78,851,4.78,911,2.872,1022,3.099,1094,3.703,1188,5.255,1206,4.78,1625,4.78,1674,3.905,1699,4.425,1742,4.78,1799,4.78,1826,4.78,2165,4.425,2169,5.255,2192,5.255,2428,3.905,2451,5.255,2452,4.141,2549,4.425,2627,7.848,2628,5.977,2629,5.977,2630,5.977,2631,5.977,2632,5.977,2633,5.977,2634,5.977,2635,5.977,2636,5.977,2637,5.977,2638,5.977,2639,5.977,2640,5.977,2641,5.977,2642,5.977,2643,5.977,2644,5.977,2645,5.977,2646,5.255,2647,5.977,2648,7.279,2649,5.977,2650,5.977,2651,5.977,2652,5.977,2653,5.255,2654,5.977,2655,5.977,2656,5.977,2657,5.977,2658,5.255,2659,5.977,2660,5.977,2661,5.977,2662,5.977,2663,5.977,2664,5.977,2665,5.977,2666,5.977,2667,5.977,2668,5.977]],["title/miscellaneous/enumerations.html",[2669,2.328,2670,4.53]],["body/miscellaneous/enumerations.html",[21,0.01,33,0.008,34,0.008,41,0.46,56,1.314,175,3.836,241,1.47,244,1.593,416,3.462,420,3.27,548,3.748,550,2.87,940,5.139,1098,2.989,1295,3.836,1652,4.095,1677,5.551,1691,4.098,1715,4.3,1746,4.535,1765,5.139,1766,5.139,2177,4.427,2233,4.809,2452,3.836,2669,3.617,2670,4.868,2671,5.536,2672,6.104,2673,5.536,2674,6.104,2675,5.536,2676,6.104,2677,5.536,2678,6.104,2679,4.868,2680,6.104,2681,5.536,2682,8.19,2683,5.551,2684,4.868,2685,5.551,2686,5.551,2687,6.104,2688,5.551,2689,6.104,2690,6.104,2691,6.104,2692,6.104,2693,6.104,2694,6.104,2695,6.104,2696,6.104,2697,6.104,2698,6.104,2699,6.104,2700,6.104,2701,6.104,2702,6.104,2703,6.104,2704,6.104,2705,5.536,2706,6.104,2707,6.104,2708,6.104,2709,5.536,2710,5.536,2711,6.104,2712,5.536]],["title/miscellaneous/functions.html",[2669,2.328,2713,4.12]],["body/miscellaneous/functions.html",[12,3.822,21,0.009,33,0.009,34,0.009,41,0.563,59,3.259,82,1.62,137,2.937,152,5.964,164,3.037,183,3.568,236,3.037,958,5.021,1839,5.424,1860,4.699,2598,5.964,2599,6.274,2600,7.279,2609,5.964,2669,4.431,2713,5.424,2714,6.783,2715,6.783,2716,5.964]],["title/index.html",[41,0.296,2717,3.133,2718,3.133]],["body/index.html",[1,0.462,3,0.048,4,0.064,5,0.141,7,0.684,8,0.024,9,0.971,11,2.359,12,3.619,13,2.98,14,3.397,15,2.741,16,0.376,19,1.859,21,0.009,22,1.378,23,3.083,24,1.16,25,1.171,27,0.028,28,0.14,31,0.143,33,0.003,34,0.002,35,0.559,37,0.684,38,0.752,39,1.253,42,0.717,44,0.684,47,3.218,48,1.124,49,0.092,52,0.229,53,0.25,54,0.548,56,1.451,57,1.411,58,1.411,59,3.041,60,2.347,64,1.512,79,0.684,82,1.534,90,3.394,93,3.106,96,1.605,97,2.409,98,3.092,101,2.457,102,1.859,104,0.88,105,0.853,113,1.081,115,0.227,116,0.876,117,2.084,118,1.378,120,2.674,125,0.684,126,3.174,127,1.16,128,1.222,129,1.378,130,3.022,131,2.98,132,1.378,133,3.342,136,0.812,137,2.027,139,0.444,142,2.359,144,1.005,146,0.26,147,0.359,148,1.124,149,0.812,153,0.752,155,2.359,158,3.887,161,1.222,162,3.053,163,0.939,164,1.575,168,3.451,173,0.812,175,0.593,176,1.906,177,1.876,178,0.593,179,1.93,180,1.901,184,0.679,185,1.162,189,0.505,190,0.482,192,0.482,195,0.462,197,0.482,202,0.347,204,1.378,205,1.354,221,1.253,222,0.633,223,3.986,224,1.982,228,0.684,229,0.633,231,3.762,235,0.752,236,3.389,237,1.378,238,4.084,239,4.163,240,5.283,241,1.972,242,2.426,243,2.765,244,2.061,245,2.946,246,2.899,247,2.622,248,1.86,249,0.752,250,0.727,251,0.593,252,1.005,256,0.752,257,3.63,258,4.449,259,2.474,261,2.298,262,1.253,263,1.448,266,0.53,267,0.267,270,2.145,271,1.086,274,2.445,276,0.482,277,0.593,278,0.482,279,0.444,280,1.509,281,0.684,282,2.089,285,0.189,286,0.924,289,0.53,290,0.633,292,1.509,293,2.179,298,0.53,299,2.646,306,0.593,316,0.684,323,2.798,331,2.75,336,0.53,342,0.505,348,1.343,350,1.374,352,1.763,372,0.812,373,0.684,381,0.559,399,0.752,401,0.482,404,1.662,405,1.986,406,1.605,415,2.652,416,0.782,419,0.677,420,0.78,424,0.633,425,0.411,426,0.593,435,0.397,456,1.338,458,1.605,469,0.559,482,0.275,484,0.633,489,2.147,492,2.391,493,0.577,495,0.383,499,0.411,516,0.411,529,1.789,531,2.081,533,1.222,548,0.462,550,2.542,551,1.124,570,0.684,571,1.222,572,0.883,573,0.633,574,3.276,576,0.53,579,1.081,582,0.753,583,2.275,587,1.391,588,2.58,597,0.633,624,1.448,625,0.752,626,0.559,628,0.397,636,0.633,637,0.684,644,1.16,648,0.482,651,1.16,708,0.53,715,1.986,725,1.45,736,1.253,754,2.603,757,0.427,766,2.721,767,0.971,786,0.482,787,0.505,789,0.444,790,0.397,792,3.087,793,5.206,794,1.378,804,0.684,805,1.753,806,2.001,807,1.378,828,1.378,829,1.024,833,0.505,851,1.734,856,1.253,860,3.092,866,2.545,875,3.914,884,1.16,885,0.909,886,3.476,889,1.042,890,1.56,891,1.753,892,0.971,897,1.171,898,1.729,904,0.559,910,0.633,911,1.289,914,0.53,916,1.16,924,1.081,940,0.633,943,1.16,945,1.16,958,0.633,961,0.593,977,1.16,989,0.593,991,1.16,1005,0.684,1006,0.684,1007,1.689,1008,0.846,1010,2.528,1011,3.075,1012,4.481,1014,0.462,1015,0.462,1017,2.084,1020,0.462,1021,1.171,1023,0.593,1024,0.462,1025,3.81,1028,0.371,1035,3.567,1039,0.684,1040,3.662,1046,0.684,1047,1.906,1054,0.684,1055,1.906,1056,1.906,1059,0.684,1064,0.593,1069,0.684,1070,1.378,1071,1.417,1080,0.684,1086,0.684,1087,5.647,1097,0.684,1098,2.395,1110,0.684,1112,3.33,1128,1.16,1130,1.16,1139,0.633,1141,0.633,1155,2.359,1156,0.752,1158,3.662,1160,2.359,1164,0.684,1168,1.734,1178,0.633,1179,3.083,1181,0.752,1193,1.734,1194,3.083,1201,0.684,1206,1.734,1213,2.359,1216,1.605,1243,0.53,1258,2.315,1274,0.684,1283,0.684,1294,0.752,1295,1.859,1313,0.633,1338,0.684,1339,1.734,1356,1.16,1358,0.444,1359,1.753,1402,1.253,1407,1.417,1413,0.883,1415,2.427,1416,0.812,1434,0.559,1439,2.347,1441,0.971,1480,4.649,1486,2.395,1503,0.593,1512,0.593,1514,1.024,1541,3.087,1542,0.684,1543,0.684,1545,0.883,1568,0.752,1577,3.901,1578,0.752,1579,1.906,1597,0.684,1598,0.684,1599,0.752,1601,1.253,1606,0.593,1607,1.986,1609,0.684,1610,3.092,1611,2.359,1617,1.253,1624,1.253,1634,1.906,1636,0.633,1639,0.371,1641,1.512,1643,0.593,1650,0.593,1651,1.343,1652,1.582,1655,0.684,1656,0.752,1657,0.752,1674,0.559,1691,0.633,1699,0.633,1711,0.684,1714,2.145,1722,0.684,1727,1.086,1734,0.752,1737,1.16,1742,2.501,1744,0.684,1745,2.603,1746,2.043,1754,2.75,1756,0.752,1765,0.633,1766,0.633,1768,1.378,1769,1.378,1772,0.752,1773,0.752,1797,1.253,1800,1.378,1802,1.378,1803,1.378,1807,2.359,1809,0.633,1810,3.394,1811,0.752,1813,0.752,1820,1.378,1821,0.752,1822,1.378,1825,1.378,1826,2.501,1832,0.684,1837,1.378,1849,0.752,1850,0.752,1851,0.684,1858,1.986,1860,5.242,1877,0.752,1883,0.633,1885,0.684,1886,0.752,1889,0.684,1890,1.253,1896,2.359,1942,0.684,1966,0.752,1968,0.684,1978,0.684,1990,0.684,2012,0.505,2035,0.684,2045,0.53,2046,1.253,2047,0.482,2050,1.906,2053,0.752,2054,1.906,2061,0.752,2065,0.752,2066,1.906,2067,3.119,2071,0.752,2076,0.752,2077,1.906,2119,0.752,2122,1.906,2137,2.812,2142,0.752,2147,0.633,2165,0.633,2177,2.812,2181,0.684,2191,0.752,2198,0.752,2213,6.048,2215,0.752,2233,1.859,2252,0.633,2261,0.684,2311,4.933,2366,1.086,2391,0.752,2427,0.53,2432,0.684,2440,0.633,2448,0.559,2452,1.502,2470,3.092,2546,0.633,2548,3.548,2549,1.605,2551,1.734,2580,0.684,2581,1.906,2582,0.752,2587,0.684,2596,1.734,2599,0.684,2605,0.684,2646,1.378,2653,0.752,2658,0.752,2672,0.752,2674,0.752,2676,0.752,2678,0.752,2680,0.752,2683,2.812,2684,0.752,2685,0.684,2686,0.684,2688,0.684,2713,3.744,2716,3.662,2717,1.378,2718,1.378,2719,7.162,2720,7,2721,2.168,2722,3.128,2723,1.567,2724,0.856,2725,1.253,2726,3.517,2727,5.886,2728,1.567,2729,3.128,2730,6.422,2731,6.67,2732,1.567,2733,2.683,2734,2.75,2735,1.567,2736,0.856,2737,1.567,2738,0.856,2739,0.856,2740,1.567,2741,4.311,2742,5.105,2743,3.128,2744,5.754,2745,2.683,2746,1.567,2747,0.856,2748,5.611,2749,1.567,2750,3.901,2751,1.567,2752,0.856,2753,2.683,2754,4.437,2755,0.856,2756,0.856,2757,3.517,2758,2.168,2759,2.683,2760,4.682,2761,4.165,2762,2.683,2763,1.567,2764,3.517,2765,0.856,2766,2.683,2767,0.856,2768,1.567,2769,2.683,2770,0.856,2771,0.856,2772,1.567,2773,0.856,2774,3.128,2775,2.168,2776,0.856,2777,1.567,2778,0.856,2779,0.856,2780,0.856,2781,3.86,2782,3.517,2783,1.567,2784,1.567,2785,0.856,2786,0.856,2787,0.856,2788,0.856,2789,0.856,2790,0.856,2791,0.856,2792,0.856,2793,3.128,2794,7.931,2795,5.288,2796,4.165,2797,1.567,2798,1.567,2799,1.567,2800,2.168,2801,0.856,2802,0.856,2803,2.168,2804,1.906,2805,0.856,2806,0.856,2807,2.168,2808,0.856,2809,0.856,2810,5.611,2811,0.856,2812,0.856,2813,1.567,2814,1.567,2815,0.856,2816,3.128,2817,1.567,2818,1.567,2819,2.683,2820,2.168,2821,0.856,2822,4.903,2823,1.567,2824,0.856,2825,0.856,2826,0.856,2827,3.86,2828,3.86,2829,1.567,2830,1.567,2831,4.903,2832,0.856,2833,0.856,2834,0.856,2835,0.856,2836,2.168,2837,3.128,2838,0.856,2839,0.856,2840,4.903,2841,0.856,2842,0.856,2843,1.567,2844,0.856,2845,2.683,2846,0.856,2847,1.567,2848,1.567,2849,0.856,2850,1.567,2851,1.567,2852,1.567,2853,1.567,2854,1.567,2855,1.567,2856,0.856,2857,1.567,2858,1.567,2859,0.856,2860,1.567,2861,1.567,2862,1.567,2863,1.567,2864,7.744,2865,0.856,2866,0.856,2867,0.856,2868,0.856,2869,7.689,2870,2.683,2871,0.856,2872,0.856,2873,0.856,2874,7.162,2875,6.67,2876,0.856,2877,0.856,2878,0.856,2879,2.683,2880,3.517,2881,2.168,2882,0.856,2883,1.567,2884,3.86,2885,0.856,2886,0.856,2887,0.856,2888,1.567,2889,0.856,2890,0.856,2891,0.856,2892,2.683,2893,0.856,2894,0.856,2895,1.567,2896,0.856,2897,0.856,2898,0.856,2899,0.856,2900,0.856,2901,3.517,2902,0.856,2903,0.752,2904,0.856,2905,0.856,2906,0.856,2907,0.856,2908,0.856,2909,0.856,2910,0.856,2911,0.856,2912,0.856,2913,0.856,2914,0.856,2915,0.856,2916,0.856,2917,0.856,2918,1.567,2919,2.683,2920,0.856,2921,1.567,2922,0.856,2923,0.856,2924,2.683,2925,3.128,2926,0.856,2927,3.517,2928,0.856,2929,0.856,2930,0.856,2931,6.009,2932,6.422,2933,0.856,2934,0.856,2935,0.856,2936,0.856,2937,4.903,2938,0.856,2939,0.856,2940,1.567,2941,2.168,2942,0.856,2943,2.168,2944,0.856,2945,0.856,2946,0.856,2947,0.856,2948,0.856,2949,1.378,2950,4.903,2951,1.567,2952,0.856,2953,0.856,2954,2.683,2955,0.856,2956,0.856,2957,0.856,2958,0.856,2959,0.856,2960,2.168,2961,0.856,2962,0.856,2963,2.168,2964,0.856,2965,0.856,2966,0.856,2967,2.168,2968,0.856,2969,2.168,2970,1.567,2971,0.856,2972,3.517,2973,0.856,2974,0.856,2975,0.856,2976,0.856,2977,0.856,2978,1.567,2979,0.856,2980,0.856,2981,0.856,2982,0.856,2983,1.567,2984,2.168,2985,0.856,2986,0.856,2987,1.567,2988,0.856,2989,0.856,2990,0.856,2991,0.856,2992,1.567,2993,1.567,2994,0.856,2995,0.856,2996,0.856,2997,0.856,2998,0.752,2999,0.752,3000,0.856,3001,0.856,3002,0.856,3003,0.856,3004,0.856,3005,1.567,3006,0.856,3007,2.168,3008,1.567,3009,0.856,3010,0.856,3011,5.456,3012,6.229,3013,3.128,3014,0.856,3015,0.856,3016,0.856,3017,2.168,3018,0.856,3019,5.105,3020,2.683,3021,0.856,3022,0.856,3023,2.168,3024,0.856,3025,0.856,3026,1.567,3027,0.856,3028,2.168,3029,0.856,3030,2.683,3031,0.856,3032,0.856,3033,1.567,3034,0.856,3035,0.856,3036,2.168,3037,3.517,3038,2.683,3039,1.567,3040,0.856,3041,2.683,3042,1.567,3043,0.856,3044,0.856,3045,0.856,3046,0.856,3047,0.856,3048,0.856,3049,3.517,3050,0.856,3051,0.856,3052,0.856,3053,0.856,3054,1.567,3055,0.856,3056,1.567,3057,4.437,3058,0.856,3059,1.567,3060,3.128,3061,2.168,3062,0.856,3063,1.567,3064,0.856,3065,0.856,3066,0.856,3067,2.168,3068,1.567,3069,2.683,3070,1.567,3071,2.683,3072,0.856,3073,4.165,3074,0.856,3075,0.856,3076,0.856,3077,0.856,3078,2.168,3079,1.567,3080,2.683,3081,1.567,3082,1.567,3083,0.856,3084,0.856,3085,0.856,3086,0.856,3087,0.856,3088,0.856,3089,1.567,3090,3.517,3091,0.856,3092,0.856,3093,0.856,3094,0.856,3095,0.856,3096,0.856,3097,0.856,3098,3.128,3099,0.856,3100,0.856,3101,0.856,3102,0.856,3103,1.567,3104,0.856,3105,0.856,3106,0.856,3107,0.856,3108,0.856,3109,0.856,3110,0.856,3111,1.567,3112,0.856,3113,0.856,3114,0.856,3115,0.856,3116,1.567,3117,0.856,3118,0.856,3119,1.567,3120,0.856,3121,1.567,3122,0.856,3123,0.856,3124,1.567,3125,0.856,3126,2.168,3127,0.856,3128,0.856,3129,1.567,3130,0.856,3131,0.856,3132,0.856,3133,0.856,3134,0.856,3135,0.856,3136,0.856,3137,0.856,3138,0.856,3139,0.856,3140,0.856,3141,1.567,3142,0.856,3143,0.856,3144,0.856,3145,0.856,3146,0.856,3147,0.856,3148,0.856,3149,0.856,3150,2.168,3151,0.856,3152,0.856,3153,0.856,3154,2.683,3155,0.856,3156,0.856,3157,0.856,3158,3.517,3159,0.856,3160,0.856,3161,0.856,3162,0.856,3163,0.856,3164,0.856,3165,0.856,3166,0.856,3167,0.856,3168,0.856,3169,0.856,3170,2.168,3171,0.856,3172,0.856,3173,0.856,3174,0.856,3175,0.856,3176,0.856,3177,0.856,3178,0.856,3179,0.856,3180,0.856,3181,0.856,3182,0.856,3183,0.856,3184,0.856,3185,0.856,3186,0.856,3187,0.856,3188,0.856,3189,0.856,3190,1.567,3191,0.856,3192,0.856,3193,0.856,3194,0.856,3195,0.856,3196,0.856,3197,0.856,3198,0.856,3199,0.856,3200,0.856,3201,0.856,3202,0.856,3203,0.856,3204,1.567,3205,0.856,3206,0.856,3207,0.856,3208,1.567,3209,0.856,3210,0.856,3211,0.856,3212,0.856,3213,0.856,3214,3.517,3215,0.856,3216,0.856,3217,0.856,3218,1.567,3219,0.856,3220,0.856,3221,2.683,3222,0.856,3223,2.683,3224,0.856,3225,0.856,3226,0.856,3227,0.856,3228,0.856,3229,1.567,3230,0.856,3231,0.856,3232,0.856,3233,0.856,3234,0.856,3235,0.856,3236,0.856,3237,0.856,3238,0.856,3239,0.856,3240,1.567,3241,0.856,3242,0.856,3243,0.856,3244,0.856,3245,2.168,3246,0.856,3247,1.906,3248,0.856,3249,0.856,3250,0.856,3251,0.856,3252,0.856,3253,0.856,3254,0.856,3255,0.856,3256,0.856,3257,0.856,3258,0.856,3259,0.856,3260,0.856,3261,0.856,3262,1.378,3263,0.856,3264,0.856,3265,0.856,3266,1.378,3267,1.567,3268,0.856,3269,0.752,3270,0.856,3271,0.752,3272,0.752,3273,0.752,3274,0.752,3275,0.856,3276,0.752,3277,0.856,3278,0.856,3279,1.567,3280,1.567,3281,0.856,3282,0.856,3283,0.856,3284,2.168,3285,0.856,3286,0.856,3287,0.856,3288,0.856,3289,0.856,3290,1.567,3291,0.856,3292,0.856,3293,0.856,3294,1.567,3295,0.856,3296,0.856,3297,0.856,3298,1.567,3299,0.856,3300,1.567,3301,0.856,3302,0.856,3303,0.856,3304,0.856,3305,0.856,3306,1.567,3307,0.856,3308,0.856,3309,0.856,3310,0.856,3311,0.856,3312,0.856,3313,0.856,3314,0.856,3315,0.856,3316,0.856,3317,1.567,3318,0.856,3319,1.567,3320,0.856,3321,0.856,3322,0.856,3323,0.856,3324,0.856,3325,0.856,3326,0.856,3327,1.567,3328,0.856,3329,0.856,3330,0.856,3331,0.856,3332,0.856,3333,0.856,3334,0.856,3335,0.856,3336,0.856,3337,0.856,3338,0.856,3339,0.856,3340,0.856,3341,0.856,3342,0.856,3343,0.856,3344,0.856,3345,0.856,3346,0.856,3347,0.856,3348,0.856,3349,0.856,3350,0.856,3351,0.856,3352,0.856,3353,0.856,3354,0.856,3355,0.856,3356,0.856,3357,0.856,3358,0.856,3359,0.856,3360,0.856,3361,0.856,3362,0.856,3363,0.856,3364,0.856,3365,0.856,3366,0.856,3367,0.856,3368,0.856,3369,0.856,3370,0.856,3371,0.856,3372,0.856,3373,3.128,3374,3.517,3375,1.567,3376,1.567,3377,0.856,3378,0.856,3379,1.567,3380,2.168,3381,1.378,3382,1.567,3383,0.856,3384,0.856,3385,1.567,3386,1.567,3387,0.856,3388,0.856,3389,0.856,3390,0.856,3391,0.856,3392,0.856,3393,2.683,3394,0.856,3395,1.567,3396,1.567,3397,1.567,3398,0.856,3399,0.856,3400,0.856,3401,0.856,3402,0.856,3403,0.856,3404,0.856,3405,0.856,3406,0.856,3407,0.856,3408,1.567,3409,1.567,3410,1.567,3411,0.856,3412,0.856,3413,2.168,3414,0.856,3415,0.856,3416,0.856,3417,0.856,3418,0.856,3419,0.856,3420,0.856,3421,2.168,3422,0.856,3423,2.168,3424,0.856,3425,0.856,3426,0.856,3427,2.168,3428,0.856,3429,0.856,3430,1.567,3431,0.856,3432,0.856,3433,0.856,3434,0.856,3435,0.856,3436,0.856,3437,0.856,3438,0.856,3439,0.856,3440,0.856,3441,0.856,3442,0.752,3443,0.856,3444,0.856,3445,0.856,3446,0.856,3447,0.856,3448,0.856]],["title/modules.html",[179,2.307]],["body/modules.html",[21,0.009,33,0.009,34,0.009,178,4.367,179,2.48,188,4.367,189,3.718,190,3.552,191,4.367,192,3.552,193,4.367,194,4.118,195,3.403,196,4.367,197,3.552,198,3.718,199,4.367,381,4.118,691,4.367,1962,4.367,2903,7.911,3442,5.542,3449,8.998,3450,8.998,3451,9.018]],["title/overview.html",[2725,4.688]],["body/overview.html",[2,1.312,21,0.011,33,0.006,34,0.006,35,4.2,123,1.113,177,1.084,178,6.13,179,1.564,180,1.613,181,1.779,182,1.779,183,1.665,184,1.721,185,1.721,186,3.493,187,3.493,188,5.974,189,5.008,190,4.563,191,4.454,192,4.86,193,5.798,194,5.205,195,4.735,196,5.082,197,4.563,198,4.975,199,5.61,200,2.494,201,1.779,202,1.613,252,1.842,336,3.983,342,3.792,378,3.493,379,3.493,380,3.493,381,5.729,382,3.983,383,3.983,384,4.2,401,4.4,402,4.837,489,1.564,582,1.909,606,4.837,620,3.493,622,3.493,623,3.493,624,4.105,648,4.4,729,3.493,730,3.493,731,3.493,782,3.493,784,3.493,785,3.493,786,4.4,787,4.839,788,4.839,789,4.131,790,3.62,1141,2.941,1337,5.101,1346,4.837,1461,3.493,1462,3.493,1463,3.493,1607,2.941,1641,2.239,1792,3.493,1793,3.493,1795,6.126,1962,5.52,1963,3.493,2012,4.606,2025,3.493,2027,3.493,2028,3.493,2029,5.101,2045,4.837,2047,4.4,2187,3.493,2188,3.493,2189,5.653,2208,3.493,2210,3.493,2211,3.493,2375,3.493,2376,3.493,2377,3.493,2511,3.493,2512,3.493,2725,3.177,3452,3.973,3453,3.973,3454,3.973,3455,3.973,3456,3.973]],["title/properties.html",[493,1.108,2626,3.133]],["body/properties.html",[8,0.195,21,0.01,33,0.009,34,0.009,493,1.496,1651,4.311,2734,6.119,3457,6.959,3458,6.959,3459,6.959]],["title/miscellaneous/variables.html",[224,2.904,2669,2.328]],["body/miscellaneous/variables.html",[3,0.068,19,2.631,21,0.011,33,0.006,34,0.006,41,0.315,48,3.251,53,0.69,56,1.183,58,1.552,60,2.14,65,0.825,89,3.036,97,1.494,108,1.638,113,1.757,115,1.666,116,1.511,117,2.912,147,1.591,164,1.7,223,4.997,224,2.14,227,3.338,228,4.313,231,1.968,234,1.824,236,1.7,241,1.008,244,1.093,259,2.594,285,1.832,292,1.123,293,2.352,298,2.352,306,2.631,309,0.774,351,1.064,372,3.251,415,3.23,416,1.893,419,2.718,420,3.14,435,1.76,482,2.013,489,1.494,506,2.335,531,1.494,582,1.824,588,2.352,603,2.481,757,3.597,767,1.7,792,3.036,815,3.338,816,3.338,817,6.163,835,1.893,862,3.992,866,3.128,886,2.352,898,2.415,945,3.992,1022,1.968,1023,3.736,1026,3.736,1029,3.165,1059,4.313,1060,4.313,1101,4.742,1102,4.313,1115,4.742,1116,4.313,1178,2.811,1179,3.992,1295,2.631,1313,3.992,1352,3.338,1372,4.742,1373,3.338,1374,3.338,1375,3.338,1407,3.523,1512,2.631,1545,3.535,1556,5.015,1558,3.338,1598,3.036,1620,3.036,1652,2.24,1851,3.036,2147,3.992,2165,3.992,2170,4.313,2233,2.631,2452,3.736,2548,4.313,2549,2.811,2550,4.742,2551,4.313,2553,4.742,2556,6.298,2559,3.338,2562,4.742,2583,3.338,2584,3.338,2586,3.338,2587,4.313,2593,3.338,2594,5.514,2595,4.742,2596,5.46,2604,3.338,2605,4.313,2619,3.338,2620,3.338,2621,6.004,2622,3.338,2623,6.588,2624,4.742,2669,2.481,2679,3.338,2683,4.313,2685,3.036,2686,3.036,2687,3.338,2688,3.036,2689,3.338,2690,3.338,2691,3.338,2692,3.338,2693,3.338,2694,3.338,2695,3.338,2696,3.338,2697,3.338,2698,3.338,2699,3.338,2700,3.338,2701,3.338,2702,3.338,2703,3.338,2704,3.338,2706,3.338,2707,3.338,2708,3.338,2711,3.338,2741,4.742,2750,3.338,2804,3.338,2949,4.742,2998,3.338,2999,3.338,3247,3.338,3262,3.338,3266,3.338,3269,3.338,3271,3.338,3272,3.338,3273,3.338,3274,3.338,3276,6.341,3381,6.004,3460,7.212,3461,3.797,3462,7.493,3463,5.393,3464,6.272,3465,5.393,3466,5.393,3467,5.393,3468,3.797,3469,3.797,3470,3.797,3471,3.797,3472,3.797,3473,3.797,3474,3.797,3475,3.797,3476,3.797,3477,3.797,3478,5.393,3479,3.797,3480,3.797,3481,3.797,3482,3.797,3483,5.393,3484,5.393,3485,3.797,3486,5.393,3487,5.393,3488,3.797,3489,6.272,3490,3.797,3491,3.797,3492,3.797,3493,3.797,3494,3.797,3495,3.797,3496,3.797,3497,3.797,3498,3.797,3499,3.797,3500,3.797,3501,5.393,3502,3.797,3503,3.797,3504,3.797,3505,3.797,3506,6.272,3507,3.797,3508,3.797,3509,3.797,3510,3.797,3511,3.797,3512,3.797,3513,3.797,3514,3.797,3515,3.797,3516,3.797,3517,3.797]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":835,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"injectables/PaymentService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":3457,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2643,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2664,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":2666,"title":{},"body":{"dependencies.html":{}}}],["0.40.1",{"_index":2639,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2642,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":1730,"title":{},"body":{"injectables/PaymentService.html":{}}}],["0.7.0",{"_index":2656,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2606,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1404,"title":{},"body":{"controllers/EventsController.html":{}}}],["01t10:00:00z",{"_index":937,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["01t18:00:00z",{"_index":938,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["02",{"_index":1405,"title":{},"body":{"controllers/EventsController.html":{}}}],["03",{"_index":1437,"title":{},"body":{"controllers/EventsController.html":{}}}],["04",{"_index":1438,"title":{},"body":{"controllers/EventsController.html":{}}}],["05",{"_index":819,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["06",{"_index":936,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["1",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventSalesService.html":{},"classes/IdDto.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2659,"title":{},"body":{"dependencies.html":{}}}],["1.3",{"_index":3507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.4.6",{"_index":2645,"title":{},"body":{"dependencies.html":{}}}],["1.5.3",{"_index":2662,"title":{},"body":{"dependencies.html":{}}}],["1.8",{"_index":3508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1/1",{"_index":2585,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":833,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"entities/Event.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"entities/ReservationDetails.html":{},"modules/ThrollerModule.html":{},"entities/Transaction.html":{},"index.html":{}}}],["10.0.2",{"_index":2638,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":2634,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":2632,"title":{},"body":{"dependencies.html":{}}}],["10.3.7",{"_index":2627,"title":{},"body":{"dependencies.html":{}}}],["10/10",{"_index":2610,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":933,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["100.00",{"_index":997,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/EventPrice.html":{}}}],["1000",{"_index":878,"title":{},"body":{"injectables/CookieService.html":{}}}],["1000000",{"_index":2407,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["12",{"_index":3502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12345",{"_index":998,"title":{},"body":{"classes/CreateReservationDto.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["15",{"_index":3452,"title":{},"body":{"overview.html":{}}}],["150",{"_index":1311,"title":{},"body":{"injectables/EventPricesService.html":{},"controllers/EventsController.html":{}}}],["16.4.5",{"_index":2651,"title":{},"body":{"dependencies.html":{}}}],["1711085051379",{"_index":3231,"title":{},"body":{"index.html":{}}}],["1712572717258",{"_index":3228,"title":{},"body":{"index.html":{}}}],["1712642603000",{"_index":3234,"title":{},"body":{"index.html":{}}}],["1712661221574",{"_index":3233,"title":{},"body":{"index.html":{}}}],["1712661230450",{"_index":3222,"title":{},"body":{"index.html":{}}}],["1712661230451",{"_index":3224,"title":{},"body":{"index.html":{}}}],["1712661230452",{"_index":3232,"title":{},"body":{"index.html":{}}}],["1712717719010",{"_index":3225,"title":{},"body":{"index.html":{}}}],["1712751776641",{"_index":3219,"title":{},"body":{"index.html":{}}}],["1712751780000",{"_index":3235,"title":{},"body":{"index.html":{}}}],["1h",{"_index":2258,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["2",{"_index":582,"title":{},"body":{"controllers/CartItemsController.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.4",{"_index":2631,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":2633,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":2647,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":2588,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":2608,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":2590,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1689,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["2023",{"_index":823,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"controllers/EventsController.html":{}}}],["2024",{"_index":935,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["22",{"_index":820,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["24",{"_index":3454,"title":{},"body":{"overview.html":{}}}],["25",{"_index":969,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["255",{"_index":956,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["3",{"_index":603,"title":{},"body":{"controllers/CartItemsController.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateUserDto.html":{},"injectables/EventSalesService.html":{},"classes/SignUpDto.html":{},"miscellaneous/variables.html":{}}}],["3.0.1",{"_index":2641,"title":{},"body":{"dependencies.html":{}}}],["3.0.4",{"_index":2649,"title":{},"body":{"dependencies.html":{}}}],["3.13.0",{"_index":2668,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":2628,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2601,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":3455,"title":{},"body":{"overview.html":{}}}],["3000",{"_index":2878,"title":{},"body":{"index.html":{}}}],["360",{"_index":1500,"title":{},"body":{"injectables/EventsService.html":{}}}],["3600",{"_index":1647,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/RedisService.html":{}}}],["4",{"_index":1375,"title":{},"body":{"injectables/EventSalesService.html":{},"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":2657,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":2591,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":2618,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["42",{"_index":1661,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["5",{"_index":685,"title":{},"body":{"injectables/CartItemsService.html":{},"classes/CreateEventDto.html":{},"injectables/TransactionsService.html":{}}}],["5.1.2",{"_index":2637,"title":{},"body":{"dependencies.html":{}}}],["5.3.2",{"_index":2655,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":2592,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":962,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["50.00",{"_index":981,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["500",{"_index":934,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventSalesService.html":{}}}],["6",{"_index":1141,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{},"index.html":{},"overview.html":{}}}],["6/6",{"_index":2597,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":2614,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":2194,"title":{},"body":{"modules/ThrollerModule.html":{}}}],["66",{"_index":2607,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":3456,"title":{},"body":{"overview.html":{}}}],["7.1.0",{"_index":2654,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2652,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":2636,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2665,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":2589,"title":{},"body":{"coverage.html":{}}}],["7d",{"_index":831,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"interfaces/TokenConfig.html":{}}}],["8",{"_index":3501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.11.5",{"_index":2661,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":2611,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":2603,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":2617,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":2615,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":2613,"title":{},"body":{"coverage.html":{}}}],["8601",{"_index":947,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["86400",{"_index":836,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["88",{"_index":2602,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":3453,"title":{},"body":{"overview.html":{}}}],["9.0.1",{"_index":2667,"title":{},"body":{"dependencies.html":{}}}],["9/11",{"_index":2616,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":2612,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":1175,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["abc123",{"_index":1644,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{}}}],["access",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStoreService.html":{},"guards/RoleGuard.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["accessed",{"_index":1801,"title":{},"body":{"modules/RedisModule.html":{}}}],["accessible",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["accesstoken",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["accesstokenexpiration",{"_index":2254,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["accesstokensecret",{"_index":2255,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["accesstokenstrategy",{"_index":35,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["account",{"_index":1201,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/User.html":{},"index.html":{}}}],["accountkey",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/User.html":{}}}],["accuracy",{"_index":3144,"title":{},"body":{"index.html":{}}}],["accurate",{"_index":3080,"title":{},"body":{"index.html":{}}}],["acknowledgments",{"_index":2735,"title":{},"body":{"index.html":{}}}],["acting",{"_index":3251,"title":{},"body":{"index.html":{}}}],["actionrequired",{"_index":2347,"title":{},"body":{"injectables/TokenService.html":{}}}],["actions",{"_index":3030,"title":{},"body":{"index.html":{}}}],["activate",{"_index":1623,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["active",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{},"classes/PaginationAndFilterDto.html":{},"entities/User.html":{}}}],["activity",{"_index":3052,"title":{},"body":{"index.html":{}}}],["add",{"_index":127,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"injectables/EventSalesService.html":{},"guards/IsCreatorGuard.html":{},"index.html":{}}}],["added",{"_index":143,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{}}}],["addforeignkey.ts",{"_index":125,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"coverage.html":{},"index.html":{}}}],["addforeignkey.ts:18",{"_index":151,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["addforeignkey.ts:43",{"_index":140,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["addforeignkeyconstraints1712751780000",{"_index":122,"title":{"classes/AddForeignKeyConstraints1712751780000.html":{}},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"coverage.html":{}}}],["adding",{"_index":153,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["additemtocart",{"_index":638,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["additemtocart(userid",{"_index":652,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["addition",{"_index":176,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["additional",{"_index":1371,"title":{},"body":{"injectables/EventSalesService.html":{},"classes/HttpExceptionFilter.html":{}}}],["additionalrevenue",{"_index":1368,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["address",{"_index":1133,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDTO.html":{},"classes/SignUpDto.html":{},"entities/User.html":{}}}],["adds",{"_index":579,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["admin",{"_index":1652,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["admin?page=1&limit=10",{"_index":2005,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["admins",{"_index":1402,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["again",{"_index":1604,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"injectables/TokenService.html":{}}}],["against",{"_index":1213,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["aids",{"_index":3359,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":2898,"title":{},"body":{"index.html":{}}}],["aligns",{"_index":3141,"title":{},"body":{"index.html":{}}}],["all?page=1&limit=10&sortby=createdat&sortorder=asc",{"_index":2370,"title":{},"body":{"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["all?page=1&limit=10&sortby=date&sortorder=asc",{"_index":2000,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["allow",{"_index":2175,"title":{},"body":{"guards/RoleGuard.html":{}}}],["allowing",{"_index":3065,"title":{},"body":{"index.html":{}}}],["allowing/denying",{"_index":3302,"title":{},"body":{"index.html":{}}}],["already",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventsService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["alter",{"_index":157,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["always",{"_index":3414,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1727,"title":{},"body":{"injectables/PaymentService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"index.html":{}}}],["annual",{"_index":928,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["another",{"_index":3183,"title":{},"body":{"index.html":{}}}],["any).message",{"_index":1570,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["api",{"_index":2819,"title":{},"body":{"index.html":{}}}],["app",{"_index":2884,"title":{},"body":{"index.html":{}}}],["app.e2e",{"_index":2860,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":2855,"title":{},"body":{"index.html":{}}}],["application",{"_index":59,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/CommonModule.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applications",{"_index":2745,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1020,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["appmodule",{"_index":178,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["appropriately",{"_index":2970,"title":{},"body":{"index.html":{}}}],["approval",{"_index":2933,"title":{},"body":{"index.html":{}}}],["approve",{"_index":1741,"title":{},"body":{"injectables/PaymentService.html":{}}}],["approved",{"_index":2233,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["apps",{"_index":2925,"title":{},"body":{"index.html":{}}}],["archery",{"_index":2685,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["architectural",{"_index":3191,"title":{},"body":{"index.html":{}}}],["architecture",{"_index":2794,"title":{},"body":{"index.html":{}}}],["architecture.extends",{"_index":3309,"title":{},"body":{"index.html":{}}}],["argon2",{"_index":1206,"title":{},"body":{"injectables/EncryptionService.html":{},"dependencies.html":{},"index.html":{}}}],["argon2.hash(password",{"_index":1219,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["argon2.verify(hash",{"_index":1220,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["argumentshost",{"_index":1549,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":3509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asc",{"_index":1765,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/TransactionsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["ascending",{"_index":1772,"title":{},"body":{"injectables/QueryHelperService.html":{},"index.html":{}}}],["ask",{"_index":3403,"title":{},"body":{"index.html":{}}}],["assignment",{"_index":2959,"title":{},"body":{"index.html":{}}}],["assistance",{"_index":3034,"title":{},"body":{"index.html":{}}}],["associated",{"_index":516,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/RedisService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{},"index.html":{}}}],["association",{"_index":3198,"title":{},"body":{"index.html":{}}}],["associations",{"_index":3076,"title":{},"body":{"index.html":{}}}],["async",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["athletics",{"_index":2686,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["attaching",{"_index":2917,"title":{},"body":{"index.html":{}}}],["attachment",{"_index":119,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["attempts",{"_index":2962,"title":{},"body":{"index.html":{}}}],["attributes",{"_index":3149,"title":{},"body":{"index.html":{}}}],["auth",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.controller.spec.ts",{"_index":3339,"title":{},"body":{"index.html":{}}}],["auth.controller.ts",{"_index":3338,"title":{},"body":{"index.html":{}}}],["auth.module.ts",{"_index":3352,"title":{},"body":{"index.html":{}}}],["auth.service",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.service.spec.ts",{"_index":3343,"title":{},"body":{"index.html":{}}}],["auth.service.ts",{"_index":3346,"title":{},"body":{"index.html":{}}}],["auth/access",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/change",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/delete/1",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/login",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/logout",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/refresh",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/signup",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller",{"_index":251,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{},"index.html":{}}}],["authentication",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["authenticity",{"_index":3329,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":29,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["authguard('jwt",{"_index":26,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["authguard(jwt",{"_index":3310,"title":{},"body":{"index.html":{}}}],["authmodule",{"_index":188,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":3459,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":90,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"index.html":{}}}],["authorization.mocks",{"_index":3340,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":336,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["authservice.delete(1",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.login('user@example.com",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.logout(1",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.signup(createuserdto",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.updatepassword(1",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["autre",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["availability",{"_index":3143,"title":{},"body":{"index.html":{}}}],["available",{"_index":691,"title":{},"body":{"injectables/CartItemsService.html":{},"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"modules.html":{}}}],["availableqty",{"_index":1249,"title":{},"body":{"entities/Event.html":{}}}],["avoid",{"_index":3244,"title":{},"body":{"index.html":{}}}],["await",{"_index":66,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["b",{"_index":3420,"title":{},"body":{"index.html":{}}}],["backend",{"_index":2943,"title":{},"body":{"index.html":{}}}],["badminton",{"_index":2687,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":1555,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["base",{"_index":927,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventPricesService.html":{}}}],["based",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/PaymentService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["baseprice",{"_index":917,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{}}}],["basketball",{"_index":2688,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["bearer",{"_index":92,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["before",{"_index":3126,"title":{},"body":{"index.html":{}}}],["begin",{"_index":3490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behavior",{"_index":3306,"title":{},"body":{"index.html":{}}}],["behaviors",{"_index":3097,"title":{},"body":{"index.html":{}}}],["being",{"_index":995,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["below",{"_index":3382,"title":{},"body":{"index.html":{}}}],["better",{"_index":3263,"title":{},"body":{"index.html":{}}}],["between",{"_index":961,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"injectables/PaymentService.html":{},"classes/SignUpDto.html":{},"index.html":{}}}],["blade/nest",{"_index":3376,"title":{},"body":{"index.html":{}}}],["body",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"guards/IsCreatorGuard.html":{},"controllers/UsersController.html":{}}}],["booking",{"_index":2066,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["bookings",{"_index":3089,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":1121,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"injectables/TokenManagementService.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["boxing",{"_index":2689,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["branch",{"_index":3413,"title":{},"body":{"index.html":{}}}],["browse",{"_index":3451,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3449,"title":{},"body":{"modules.html":{}}}],["browsing",{"_index":3174,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":3394,"title":{},"body":{"index.html":{}}}],["build",{"_index":1745,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["building",{"_index":2122,"title":{},"body":{"injectables/ReservationsService.html":{},"index.html":{}}}],["buildqueryoptions",{"_index":1747,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["buildqueryoptions(paginationfilterdto",{"_index":1750,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["builds",{"_index":2883,"title":{},"body":{"index.html":{}}}],["buildwherecondition",{"_index":1748,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["buildwherecondition(filterby",{"_index":1759,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["built",{"_index":2841,"title":{},"body":{"index.html":{}}}],["bundling",{"_index":2780,"title":{},"body":{"index.html":{}}}],["cache",{"_index":1826,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{},"index.html":{}}}],["cache_ttl_one_hour",{"_index":1470,"title":{},"body":{"injectables/EventsService.html":{}}}],["cached",{"_index":1842,"title":{},"body":{"injectables/RedisService.html":{}}}],["caching",{"_index":1810,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["calculatecarttotal",{"_index":2382,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["calculatecarttotal(cartitems",{"_index":2389,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["calculates",{"_index":2391,"title":{},"body":{"injectables/TransactionsService.html":{},"index.html":{}}}],["calculation",{"_index":3177,"title":{},"body":{"index.html":{}}}],["calls",{"_index":3140,"title":{},"body":{"index.html":{}}}],["calls.validates",{"_index":3342,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":1615,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":1619,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["cancelled",{"_index":3499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canoe_kayak",{"_index":2690,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["capabilities",{"_index":2954,"title":{},"body":{"index.html":{}}}],["capture",{"_index":3182,"title":{},"body":{"index.html":{}}}],["captures",{"_index":3050,"title":{},"body":{"index.html":{}}}],["cart",{"_index":242,"title":{"entities/Cart.html":{}},"body":{"modules/AppModule.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableReservations1712661230451.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"injectables/PaymentService.html":{},"entities/Reservation.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["cart.cartid",{"_index":567,"title":{},"body":{"entities/CartItem.html":{}}}],["cart.cartid)@joincolumn({name",{"_index":535,"title":{},"body":{"entities/CartItem.html":{}}}],["cart.cartitem",{"_index":504,"title":{},"body":{"entities/Cart.html":{}}}],["cart.createdat",{"_index":509,"title":{},"body":{"entities/Cart.html":{}}}],["cart.entity.ts",{"_index":3197,"title":{},"body":{"index.html":{}}}],["cart.updatedat",{"_index":512,"title":{},"body":{"entities/Cart.html":{}}}],["cart.user",{"_index":518,"title":{},"body":{"entities/Cart.html":{},"entities/User.html":{}}}],["cart_items",{"_index":1006,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableReservations1712661230451.html":{},"index.html":{}}}],["cartid",{"_index":494,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["cartitem",{"_index":495,"title":{"entities/CartItem.html":{}},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"entities/Reservation.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["cartitem.cart",{"_index":502,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{}}}],["cartitem.createdat",{"_index":539,"title":{},"body":{"entities/CartItem.html":{}}}],["cartitem.event",{"_index":544,"title":{},"body":{"entities/CartItem.html":{},"entities/Event.html":{},"injectables/ReservationDetailsService.html":{}}}],["cartitem.event.eventid",{"_index":721,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["cartitem.event.quantityavailable",{"_index":722,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitem.price",{"_index":547,"title":{},"body":{"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["cartitem.priceformula",{"_index":552,"title":{},"body":{"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["cartitem.quantity",{"_index":554,"title":{},"body":{"entities/CartItem.html":{},"injectables/CartItemsService.html":{}}}],["cartitem.reservations",{"_index":557,"title":{},"body":{"entities/CartItem.html":{},"entities/Reservation.html":{}}}],["cartitem.reservations)@joincolumn({name",{"_index":1915,"title":{},"body":{"entities/Reservation.html":{}}}],["cartitem.updatedat",{"_index":559,"title":{},"body":{"entities/CartItem.html":{}}}],["cartitemid",{"_index":530,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableReservations1712661230451.html":{},"entities/Reservation.html":{}}}],["cartitemrepository",{"_index":650,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitems",{"_index":658,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"entities/Event.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{}}}],["cartitems.entity.ts",{"_index":3075,"title":{},"body":{"index.html":{}}}],["cartitems.filter(item",{"_index":2105,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["cartitems.reduce((sum",{"_index":2423,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["cartitemscontroller",{"_index":569,"title":{"controllers/CartItemsController.html":{}},"body":{"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"coverage.html":{}}}],["cartitemsmodule",{"_index":189,"title":{"modules/CartItemsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartItemsModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["cartitemsservice",{"_index":606,"title":{"injectables/CartItemsService.html":{}},"body":{"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"injectables/ReservationsProcessorService.html":{},"coverage.html":{},"overview.html":{}}}],["cartitemsservice.additemtocart(1",{"_index":654,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.findallitemsincart(1",{"_index":659,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.findoneitemincart(1",{"_index":662,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.removeallitemfromcart(1",{"_index":670,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.removeoneitemfromcart(1",{"_index":674,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.save(cartitem",{"_index":679,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.updatequantityincart(1",{"_index":684,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartrepository",{"_index":745,"title":{},"body":{"injectables/CartsService.html":{}}}],["carts",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["carts.migration.spec.ts",{"_index":3254,"title":{},"body":{"index.html":{}}}],["carts.module.ts",{"_index":3193,"title":{},"body":{"index.html":{}}}],["carts.service",{"_index":734,"title":{},"body":{"modules/CartsModule.html":{}}}],["carts.service.spec.ts",{"_index":3188,"title":{},"body":{"index.html":{}}}],["carts.service.ts",{"_index":3186,"title":{},"body":{"index.html":{}}}],["carts/1/items",{"_index":589,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["carts/1/items/1",{"_index":593,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["carts/items",{"_index":580,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["cartservice",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ReservationsProcessorService.html":{}}}],["cartsmodule",{"_index":190,"title":{"modules/CartsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/ReservationsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["cartsservice",{"_index":401,"title":{"injectables/CartsService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"injectables/ReservationsProcessorService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["cartsservice.deletecart(1",{"_index":748,"title":{},"body":{"injectables/CartsService.html":{}}}],["cartsservice.findcart(1",{"_index":751,"title":{},"body":{"injectables/CartsService.html":{}}}],["cartsservice.getorcreatecart(1",{"_index":758,"title":{},"body":{"injectables/CartsService.html":{}}}],["cartsservice.save(cart",{"_index":763,"title":{},"body":{"injectables/CartsService.html":{}}}],["cartsservice.verifycartoneby(1",{"_index":768,"title":{},"body":{"injectables/CartsService.html":{}}}],["cartsservice.verifycartrelation(1",{"_index":772,"title":{},"body":{"injectables/CartsService.html":{}}}],["carttotal",{"_index":1729,"title":{},"body":{"injectables/PaymentService.html":{}}}],["carttotalprice",{"_index":2087,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["cascade",{"_index":1034,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableTickets1712717719010.html":{}}}],["cases",{"_index":3163,"title":{},"body":{"index.html":{}}}],["catch",{"_index":1519,"title":{},"body":{"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":1548,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1557,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["categories",{"_index":2684,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["categorization",{"_index":3155,"title":{},"body":{"index.html":{}}}],["categorizes",{"_index":2944,"title":{},"body":{"index.html":{}}}],["category",{"_index":943,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"index.html":{}}}],["category_type",{"_index":3274,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["category_type_enum",{"_index":1059,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["categoryeventtypeenum",{"_index":940,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["categoryeventtypeenum.conference",{"_index":939,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["categorytype",{"_index":918,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["caught",{"_index":1553,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cd",{"_index":3378,"title":{},"body":{"index.html":{}}}],["centralizes",{"_index":2963,"title":{},"body":{"index.html":{}}}],["change",{"_index":3377,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1017,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["changing",{"_index":3345,"title":{},"body":{"index.html":{}}}],["characters",{"_index":952,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["chars",{"_index":3355,"title":{},"body":{"index.html":{}}}],["check",{"_index":1029,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["checking",{"_index":3304,"title":{},"body":{"index.html":{}}}],["checkout",{"_index":3419,"title":{},"body":{"index.html":{}}}],["checks",{"_index":3223,"title":{},"body":{"index.html":{}}}],["choisir",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["circular",{"_index":2215,"title":{},"body":{"modules/TicketsModule.html":{},"index.html":{}}}],["clarity",{"_index":2992,"title":{},"body":{"index.html":{}}}],["class",{"_index":31,"title":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":123,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cleans",{"_index":2053,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["cleanup",{"_index":3093,"title":{},"body":{"index.html":{}}}],["cleanupafterpayment",{"_index":2036,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["cleanupafterpayment(cartid",{"_index":2051,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["clear",{"_index":1825,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["clearcacheevent",{"_index":1812,"title":{},"body":{"injectables/RedisService.html":{}}}],["clearcacheevent(eventid",{"_index":1823,"title":{},"body":{"injectables/RedisService.html":{}}}],["clearing",{"_index":3318,"title":{},"body":{"index.html":{}}}],["clearly",{"_index":3432,"title":{},"body":{"index.html":{}}}],["clearrefreshtokencookie",{"_index":843,"title":{},"body":{"injectables/CookieService.html":{}}}],["clearrefreshtokencookie(res",{"_index":848,"title":{},"body":{"injectables/CookieService.html":{}}}],["clears",{"_index":850,"title":{},"body":{"injectables/CookieService.html":{}}}],["cli.config.ts",{"_index":2605,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["cli.json",{"_index":2769,"title":{},"body":{"index.html":{}}}],["client",{"_index":1797,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["client.example",{"_index":3412,"title":{},"body":{"index.html":{}}}],["clone",{"_index":3373,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cartitemsmodule",{"_index":620,"title":{},"body":{"modules/CartItemsModule.html":{},"overview.html":{}}}],["cluster_cartitemsmodule_exports",{"_index":622,"title":{},"body":{"modules/CartItemsModule.html":{},"overview.html":{}}}],["cluster_cartitemsmodule_imports",{"_index":621,"title":{},"body":{"modules/CartItemsModule.html":{}}}],["cluster_cartitemsmodule_providers",{"_index":623,"title":{},"body":{"modules/CartItemsModule.html":{},"overview.html":{}}}],["cluster_cartsmodule",{"_index":729,"title":{},"body":{"modules/CartsModule.html":{},"overview.html":{}}}],["cluster_cartsmodule_exports",{"_index":731,"title":{},"body":{"modules/CartsModule.html":{},"overview.html":{}}}],["cluster_cartsmodule_providers",{"_index":730,"title":{},"body":{"modules/CartsModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":782,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":785,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_imports",{"_index":783,"title":{},"body":{"modules/CommonModule.html":{}}}],["cluster_commonmodule_providers",{"_index":784,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":1461,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_exports",{"_index":1462,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_providers",{"_index":1463,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_paymentmodule",{"_index":1702,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_exports",{"_index":1703,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_imports",{"_index":1704,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_providers",{"_index":1705,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_redismodule",{"_index":1792,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":1793,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":1794,"title":{},"body":{"modules/RedisModule.html":{}}}],["cluster_reservationdetailsmodule",{"_index":1963,"title":{},"body":{"modules/ReservationDetailsModule.html":{},"overview.html":{}}}],["cluster_reservationdetailsmodule_imports",{"_index":1965,"title":{},"body":{"modules/ReservationDetailsModule.html":{}}}],["cluster_reservationdetailsmodule_providers",{"_index":1964,"title":{},"body":{"modules/ReservationDetailsModule.html":{}}}],["cluster_reservationsmodule",{"_index":2025,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule_exports",{"_index":2028,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule_imports",{"_index":2026,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["cluster_reservationsmodule_providers",{"_index":2027,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_throllermodule",{"_index":2187,"title":{},"body":{"modules/ThrollerModule.html":{},"overview.html":{}}}],["cluster_throllermodule_imports",{"_index":2188,"title":{},"body":{"modules/ThrollerModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule",{"_index":2208,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_exports",{"_index":2210,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_imports",{"_index":2209,"title":{},"body":{"modules/TicketsModule.html":{}}}],["cluster_ticketsmodule_providers",{"_index":2211,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":2375,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":2376,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_providers",{"_index":2377,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2511,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":2512,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1194,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/Ticket.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["codebase",{"_index":2807,"title":{},"body":{"index.html":{}}}],["codes",{"_index":3287,"title":{},"body":{"index.html":{}}}],["collaborates",{"_index":3079,"title":{},"body":{"index.html":{}}}],["collection",{"_index":1656,"title":{},"body":{"interfaces/KeyValuePairs.html":{},"index.html":{}}}],["colorize",{"_index":3475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":524,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["column('date",{"_index":1235,"title":{},"body":{"entities/Event.html":{}}}],["column('int",{"_index":545,"title":{},"body":{"entities/CartItem.html":{}}}],["column('text",{"_index":1239,"title":{},"body":{"entities/Event.html":{},"entities/ReservationDetails.html":{}}}],["column({type",{"_index":505,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["column({unique",{"_index":2196,"title":{},"body":{"entities/Ticket.html":{},"entities/User.html":{}}}],["columns",{"_index":1021,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["combined.log",{"_index":3488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["combining",{"_index":1200,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["command",{"_index":3381,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["commerce",{"_index":3082,"title":{},"body":{"index.html":{}}}],["commit",{"_index":3423,"title":{},"body":{"index.html":{}}}],["commom.module.ts",{"_index":3003,"title":{},"body":{"index.html":{}}}],["common",{"_index":792,"title":{},"body":{"modules/CommonModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["common/decorators/role.decorator",{"_index":1440,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["common/decorators/user",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/ReservationsController.html":{}}}],["common/dto/pagination.dto",{"_index":1443,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["common/enums/category",{"_index":963,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["common/enums/price",{"_index":564,"title":{},"body":{"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{}}}],["common/enums/sort",{"_index":1697,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["common/enums/status",{"_index":1716,"title":{},"body":{"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{}}}],["common/enums/user",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/EventsController.html":{},"interfaces/Payload.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["common/exceptions",{"_index":2964,"title":{},"body":{"index.html":{}}}],["common/exceptions/invalid",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["common/interfaces/jwt.interface",{"_index":80,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/TokenService.html":{}}}],["common/interfaces/payload.interface",{"_index":2278,"title":{},"body":{"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{}}}],["common/interfaces/payment.interface",{"_index":1732,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/TransactionsService.html":{}}}],["commonformat",{"_index":2594,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["commonmodule",{"_index":381,"title":{"modules/CommonModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["compare",{"_index":2176,"title":{},"body":{"guards/RoleGuard.html":{}}}],["compilation",{"_index":2766,"title":{},"body":{"index.html":{}}}],["compiler",{"_index":2772,"title":{},"body":{"index.html":{}}}],["complements",{"_index":3296,"title":{},"body":{"index.html":{}}}],["components",{"_index":2920,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2749,"title":{},"body":{"index.html":{}}}],["compose.override.yml",{"_index":2850,"title":{},"body":{"index.html":{}}}],["compose.prod.yml",{"_index":2851,"title":{},"body":{"index.html":{}}}],["compose.yml",{"_index":2852,"title":{},"body":{"index.html":{}}}],["comprehensive",{"_index":2747,"title":{},"body":{"index.html":{}}}],["concerns",{"_index":2826,"title":{},"body":{"index.html":{}}}],["concert",{"_index":979,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["condition",{"_index":1761,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["conditionally",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["conditions",{"_index":1769,"title":{},"body":{"injectables/QueryHelperService.html":{},"index.html":{}}}],["conference",{"_index":930,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["config",{"_index":1164,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/TokenConfig.html":{},"index.html":{}}}],["config.get('pgdatabase",{"_index":1173,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('pghost",{"_index":1167,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('pgpassowrd",{"_index":1172,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('pgport",{"_index":1169,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('pguser",{"_index":1171,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configmodule",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["configmodule.forroot",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/CookieService.html":{},"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":95,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["configservice.get('redis_host",{"_index":1804,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_password",{"_index":1806,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_port",{"_index":1805,"title":{},"body":{"modules/RedisModule.html":{}}}],["configurable",{"_index":2915,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":60,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/RefreshTokenStoreService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":2757,"title":{},"body":{"index.html":{}}}],["configure",{"_index":1154,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["configured",{"_index":868,"title":{},"body":{"injectables/CookieService.html":{},"modules/RedisModule.html":{}}}],["configures",{"_index":1156,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["configuring",{"_index":3211,"title":{},"body":{"index.html":{}}}],["confirmation",{"_index":1432,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{}}}],["conflictexception",{"_index":1501,"title":{},"body":{"injectables/EventsService.html":{}}}],["conflictexception('an",{"_index":1537,"title":{},"body":{"injectables/EventsService.html":{}}}],["conflicts",{"_index":3130,"title":{},"body":{"index.html":{}}}],["conforming",{"_index":3096,"title":{},"body":{"index.html":{}}}],["congratulations",{"_index":3439,"title":{},"body":{"index.html":{}}}],["connect",{"_index":1157,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["connected",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["connecting",{"_index":2911,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1155,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["connections",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["connects",{"_index":3062,"title":{},"body":{"index.html":{}}}],["consistency",{"_index":2941,"title":{},"body":{"index.html":{}}}],["consistent",{"_index":2804,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["console",{"_index":2998,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["consoleformat",{"_index":2595,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["consolidating",{"_index":3004,"title":{},"body":{"index.html":{}}}],["const",{"_index":65,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":3247,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["constants.common.ts",{"_index":3265,"title":{},"body":{"index.html":{}}}],["constants.env.ts",{"_index":3260,"title":{},"body":{"index.html":{}}}],["constants.migrationdb.ts",{"_index":3270,"title":{},"body":{"index.html":{}}}],["constraint",{"_index":159,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["constraints",{"_index":129,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["constraints.migration.spec.ts",{"_index":3237,"title":{},"body":{"index.html":{}}}],["construct",{"_index":1573,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructed",{"_index":1758,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["constructor",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/CookieService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject('redis_client",{"_index":1861,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(@injectrepository(cart",{"_index":774,"title":{},"body":{"injectables/CartsService.html":{}}}],["constructor(cartitemrepository",{"_index":646,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["constructor(cartrepository",{"_index":743,"title":{},"body":{"injectables/CartsService.html":{}}}],["constructor(configservice",{"_index":846,"title":{},"body":{"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{}}}],["constructor(eventpricerepository",{"_index":1289,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["constructor(eventrepository",{"_index":1345,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/EventsService.html":{}}}],["constructor(jwtservice",{"_index":2265,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["constructor(private",{"_index":610,"title":{},"body":{"controllers/CartItemsController.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["constructor(redisclient",{"_index":1816,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(redisservice",{"_index":1894,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["constructor(reflector",{"_index":1616,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["constructor(reservationdetailsrepository",{"_index":1970,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["constructor(reservationrepository",{"_index":2043,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["constructor(ticketrepository",{"_index":2224,"title":{},"body":{"injectables/TicketsService.html":{}}}],["constructor(transactionrepository",{"_index":2385,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["constructor(usersrepository",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":2291,"title":{},"body":{"injectables/TokenService.html":{}}}],["constructs",{"_index":1601,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"injectables/QueryHelperService.html":{},"index.html":{}}}],["container",{"_index":2876,"title":{},"body":{"index.html":{}}}],["containers",{"_index":2751,"title":{},"body":{"index.html":{}}}],["containing",{"_index":68,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["contains",{"_index":3215,"title":{},"body":{"index.html":{}}}],["content",{"_index":1611,"title":{},"body":{"guards/IsCreatorGuard.html":{},"index.html":{}}}],["contentownerid",{"_index":1628,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["contents",{"_index":2724,"title":{},"body":{"index.html":{}}}],["context",{"_index":1554,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["context.getclass",{"_index":2174,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":2173,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1626,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["contribute",{"_index":2813,"title":{},"body":{"index.html":{}}}],["contributes",{"_index":3054,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":2733,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":3440,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":3387,"title":{},"body":{"index.html":{}}}],["contributor",{"_index":3441,"title":{},"body":{"index.html":{}}}],["contributors",{"_index":3447,"title":{},"body":{"index.html":{}}}],["control",{"_index":2837,"title":{},"body":{"index.html":{}}}],["controller",{"_index":250,"title":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('carts",{"_index":609,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["controller('events",{"_index":1444,"title":{},"body":{"controllers/EventsController.html":{}}}],["controller('reservations",{"_index":2015,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["controller('transactions",{"_index":2373,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["controller('users",{"_index":2503,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["controls",{"_index":3044,"title":{},"body":{"index.html":{}}}],["conversion",{"_index":3279,"title":{},"body":{"index.html":{}}}],["conversions",{"_index":808,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["convert",{"_index":1896,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"index.html":{}}}],["convertdatestringtodate",{"_index":809,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["convertdatestringtodate(datestr",{"_index":811,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["convertdaystoseconds",{"_index":810,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["convertdaystoseconds(duration",{"_index":825,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["converted",{"_index":824,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["converts",{"_index":813,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["convertutilsservice",{"_index":786,"title":{"injectables/ConvertUtilsService.html":{}},"body":{"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["convertutilsservice.convertdatestringtodate('2023",{"_index":818,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["convertutilsservice.convertdaystoseconds('7d",{"_index":830,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["cookie",{"_index":851,"title":{},"body":{"injectables/CookieService.html":{},"dependencies.html":{},"index.html":{}}}],["cookie.service.spec.ts",{"_index":3313,"title":{},"body":{"index.html":{}}}],["cookie.service.ts",{"_index":3315,"title":{},"body":{"index.html":{}}}],["cookieoptions",{"_index":864,"title":{},"body":{"injectables/CookieService.html":{}}}],["cookies",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CookieService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["cookieservice",{"_index":382,"title":{"injectables/CookieService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"overview.html":{}}}],["cookieservice.clearrefreshtokencookie(res",{"_index":852,"title":{},"body":{"injectables/CookieService.html":{}}}],["cookieservice.extractrefreshtokencookie(req",{"_index":857,"title":{},"body":{"injectables/CookieService.html":{}}}],["cookieservice.setrefreshtokencookie(res",{"_index":861,"title":{},"body":{"injectables/CookieService.html":{}}}],["copies",{"_index":2887,"title":{},"body":{"index.html":{}}}],["correct",{"_index":3170,"title":{},"body":{"index.html":{}}}],["correctly",{"_index":3289,"title":{},"body":{"index.html":{}}}],["cors",{"_index":2646,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["count",{"_index":1419,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["cover",{"_index":2907,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2580,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["covering",{"_index":3220,"title":{},"body":{"index.html":{}}}],["covers",{"_index":3027,"title":{},"body":{"index.html":{}}}],["create",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"modules/TicketsModule.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{}}}],["create(createeventdto",{"_index":1398,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["create(createuserdto",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["create(userid",{"_index":575,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["createaccesstoken",{"_index":2262,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["createaccesstoken(payload",{"_index":2267,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["createcartitemdto",{"_index":576,"title":{"classes/CreateCartItemDto.html":{}},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{},"index.html":{}}}],["createcartitemdto.eventid",{"_index":694,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["createcartitemdto.priceformula",{"_index":702,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["createcartitemdto.quantity",{"_index":696,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["created",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["createdat",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["createenumtype",{"_index":2623,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createeventdto",{"_index":914,"title":{"classes/CreateEventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{},"index.html":{}}}],["createeventprices",{"_index":1284,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["createeventprices(eventid",{"_index":1292,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["createnestedorder",{"_index":1749,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["createnestedorder(sortby",{"_index":1764,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["createnewticket",{"_index":2221,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createnewticket(user",{"_index":2228,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createparamdecorator((_",{"_index":3514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpayload",{"_index":2287,"title":{},"body":{"injectables/TokenService.html":{}}}],["createpayload(user",{"_index":2293,"title":{},"body":{"injectables/TokenService.html":{}}}],["createrefreshtoken",{"_index":2263,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["createrefreshtoken(payload",{"_index":2270,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["createreservationdetailsdto",{"_index":974,"title":{"classes/CreateReservationDetailsDto.html":{}},"body":{"classes/CreateReservationDetailsDto.html":{},"injectables/ReservationDetailsService.html":{},"classes/UpdateReservationDetailsDto.html":{},"coverage.html":{}}}],["createreservationdetailsfromreservation",{"_index":1969,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["createreservationdetailsfromreservation(reservation",{"_index":1973,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["createreservationdto",{"_index":989,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{},"index.html":{}}}],["createreservations",{"_index":1989,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["createreservations(userid",{"_index":1992,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["createreservationsforallcartitems",{"_index":2037,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["createreservationsforallcartitems(cartitems",{"_index":2056,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["createreservationsforeachcartitem",{"_index":2038,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["createreservationsforeachcartitem(item",{"_index":2059,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["creates",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createtablecartitems",{"_index":3239,"title":{},"body":{"index.html":{}}}],["createtablecartitems.ts",{"_index":1005,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"coverage.html":{},"index.html":{}}}],["createtablecartitems.ts:21",{"_index":1019,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{}}}],["createtablecartitems.ts:55",{"_index":1013,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{}}}],["createtablecartitems1712661230450",{"_index":1003,"title":{"classes/CreateTableCartItems1712661230450.html":{}},"body":{"classes/CreateTableCartItems1712661230450.html":{},"coverage.html":{}}}],["createtablecarts.ts",{"_index":1039,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{},"coverage.html":{},"index.html":{}}}],["createtablecarts.ts:18",{"_index":1042,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{}}}],["createtablecarts.ts:43",{"_index":1041,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{}}}],["createtablecarts1712661221574",{"_index":1037,"title":{"classes/CreateTableCarts1712661221574.html":{}},"body":{"classes/CreateTableCarts1712661221574.html":{},"coverage.html":{}}}],["createtableeventprices.ts",{"_index":1046,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{},"coverage.html":{},"index.html":{}}}],["createtableeventprices.ts:21",{"_index":1049,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{}}}],["createtableeventprices.ts:50",{"_index":1048,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{}}}],["createtableeventprices1712642603715",{"_index":1044,"title":{"classes/CreateTableEventPrices1712642603715.html":{}},"body":{"classes/CreateTableEventPrices1712642603715.html":{},"coverage.html":{}}}],["createtableevents.ts",{"_index":1054,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"coverage.html":{},"index.html":{}}}],["createtableevents.ts:20",{"_index":1058,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{}}}],["createtableevents.ts:56",{"_index":1057,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{}}}],["createtableevents1712572717258",{"_index":1052,"title":{"classes/CreateTableEvents1712572717258.html":{}},"body":{"classes/CreateTableEvents1712572717258.html":{},"coverage.html":{}}}],["createtablereservationdetails.ts",{"_index":1069,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"coverage.html":{},"index.html":{}}}],["createtablereservationdetails.ts:21",{"_index":1073,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{}}}],["createtablereservationdetails.ts:56",{"_index":1072,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{}}}],["createtablereservationdetails1712751776641",{"_index":1067,"title":{"classes/CreateTableReservationDetails1712751776641.html":{}},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"coverage.html":{}}}],["createtablereservations.ts",{"_index":1080,"title":{},"body":{"classes/CreateTableReservations1712661230451.html":{},"coverage.html":{},"index.html":{}}}],["createtablereservations.ts:19",{"_index":1082,"title":{},"body":{"classes/CreateTableReservations1712661230451.html":{}}}],["createtablereservations.ts:50",{"_index":1081,"title":{},"body":{"classes/CreateTableReservations1712661230451.html":{}}}],["createtablereservations1712661230451",{"_index":1078,"title":{"classes/CreateTableReservations1712661230451.html":{}},"body":{"classes/CreateTableReservations1712661230451.html":{},"coverage.html":{}}}],["createtabletickets.ts",{"_index":1086,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"coverage.html":{},"index.html":{}}}],["createtabletickets.ts:19",{"_index":1089,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{}}}],["createtabletickets.ts:46",{"_index":1088,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{}}}],["createtabletickets1712717719010",{"_index":1084,"title":{"classes/CreateTableTickets1712717719010.html":{}},"body":{"classes/CreateTableTickets1712717719010.html":{},"coverage.html":{}}}],["createtabletransactions.ts",{"_index":1097,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"coverage.html":{},"index.html":{}}}],["createtabletransactions.ts:21",{"_index":1100,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{}}}],["createtabletransactions.ts:53",{"_index":1099,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{}}}],["createtabletransactions1712661230452",{"_index":1095,"title":{"classes/CreateTableTransactions1712661230452.html":{}},"body":{"classes/CreateTableTransactions1712661230452.html":{},"coverage.html":{}}}],["createtableusers.ts",{"_index":1110,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"coverage.html":{},"index.html":{}}}],["createtableusers.ts:20",{"_index":1114,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{}}}],["createtableusers.ts:56",{"_index":1113,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{}}}],["createtableusers1711085051379",{"_index":1108,"title":{"classes/CreateTableUsers1711085051379.html":{}},"body":{"classes/CreateTableUsers1711085051379.html":{},"coverage.html":{}}}],["createtransaction",{"_index":2383,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtransaction(user",{"_index":2393,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtransactiondto",{"_index":1126,"title":{"classes/CreateTransactionDto.html":{}},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":266,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"index.html":{}}}],["createuserdto.email.tolowercase",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":886,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["creating/dropping",{"_index":3256,"title":{},"body":{"index.html":{}}}],["creation",{"_index":1025,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["creation/update",{"_index":3199,"title":{},"body":{"index.html":{}}}],["creator",{"_index":1610,"title":{},"body":{"guards/IsCreatorGuard.html":{},"index.html":{}}}],["creator.guard.spec.ts",{"_index":3305,"title":{},"body":{"index.html":{}}}],["creator.guard.ts",{"_index":1609,"title":{},"body":{"guards/IsCreatorGuard.html":{},"coverage.html":{},"index.html":{}}}],["creator.guard.ts:17",{"_index":1618,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["creator.guard.ts:28",{"_index":1621,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["credentials",{"_index":1599,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"index.html":{}}}],["credentials.exception",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials.exception.ts",{"_index":1597,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"coverage.html":{},"index.html":{}}}],["credentials.exception.ts:8",{"_index":1600,"title":{},"body":{"classes/InvalidCredentialsException.html":{}}}],["criteria",{"_index":3098,"title":{},"body":{"index.html":{}}}],["critical",{"_index":3135,"title":{},"body":{"index.html":{}}}],["crucial",{"_index":2937,"title":{},"body":{"index.html":{}}}],["crud",{"_index":3023,"title":{},"body":{"index.html":{}}}],["csrf",{"_index":2648,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":1558,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1561,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":1560,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["culminating",{"_index":3091,"title":{},"body":{"index.html":{}}}],["current",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/IsCreatorGuard.html":{}}}],["current_timestamp",{"_index":507,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["currentfield",{"_index":1782,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["currentfield[field",{"_index":1785,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["currentpart",{"_index":1788,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["currentpart[part",{"_index":1791,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["custom",{"_index":1598,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["customer",{"_index":2946,"title":{},"body":{"index.html":{}}}],["customization",{"_index":2893,"title":{},"body":{"index.html":{}}}],["customized",{"_index":3322,"title":{},"body":{"index.html":{}}}],["customizes",{"_index":2971,"title":{},"body":{"index.html":{}}}],["customizing",{"_index":2770,"title":{},"body":{"index.html":{}}}],["cycling",{"_index":2691,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/IdDto.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["data/1",{"_index":2010,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["data/:userid",{"_index":2008,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["database",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"injectables/QueryHelperService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database.module.ts",{"_index":3209,"title":{},"body":{"index.html":{}}}],["database/database.module",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["database/query/query",{"_index":801,"title":{},"body":{"modules/CommonModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["database/redis/redis.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{}}}],["database/redis/redis.service",{"_index":798,"title":{},"body":{"modules/CommonModule.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{}}}],["databasemodule",{"_index":191,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datasource",{"_index":3201,"title":{},"body":{"index.html":{}}}],["date",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/ConvertUtilsService.html":{},"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"entities/User.html":{},"index.html":{}}}],["date().toisostring",{"_index":1576,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date(date.utc(+year",{"_index":841,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["dates",{"_index":1056,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"index.html":{}}}],["datestr",{"_index":821,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["datestr.split",{"_index":840,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["day",{"_index":839,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["days",{"_index":828,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"index.html":{}}}],["db",{"_index":3202,"title":{},"body":{"index.html":{}}}],["dd",{"_index":816,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"miscellaneous/variables.html":{}}}],["deactivate",{"_index":2498,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deactivates",{"_index":2495,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deactivating",{"_index":3039,"title":{},"body":{"index.html":{}}}],["deactivation",{"_index":3045,"title":{},"body":{"index.html":{}}}],["debug",{"_index":2550,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":2554,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["debugging",{"_index":1578,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["decimal",{"_index":1107,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"entities/Event.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{}}}],["declarations",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoded",{"_index":2277,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["decorator",{"_index":2949,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"controllers/EventsController.html":{},"classes/IdDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"classes/RefreshTokenDto.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"controllers/ReservationsController.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"classes/UpdatePasswordDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["deduct",{"_index":1353,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deducteventquantity",{"_index":1341,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deducteventquantity(eventid",{"_index":1348,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deducting",{"_index":3134,"title":{},"body":{"index.html":{}}}],["deduction",{"_index":1362,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deductionfactor",{"_index":1365,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deductionmap",{"_index":1340,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deducts",{"_index":1350,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["def456",{"_index":1645,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{}}}],["default",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_page_size",{"_index":2147,"title":{},"body":{"injectables/ReservationsService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_page_size.user",{"_index":2156,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["defaultmeta",{"_index":3482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["define",{"_index":3261,"title":{},"body":{"index.html":{}}}],["defined",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["defines",{"_index":2869,"title":{},"body":{"index.html":{}}}],["defining",{"_index":3194,"title":{},"body":{"index.html":{}}}],["del",{"_index":1813,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["del(key",{"_index":1829,"title":{},"body":{"injectables/RedisService.html":{}}}],["delete",{"_index":163,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["delete('/delete/:id",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(':cartid/items/:cartitemid",{"_index":595,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["delete(':id",{"_index":1458,"title":{},"body":{"controllers/EventsController.html":{}}}],["delete(@param('id",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(id",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(userid",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["deletecart",{"_index":738,"title":{},"body":{"injectables/CartsService.html":{}}}],["deletecart(cartid",{"_index":746,"title":{},"body":{"injectables/CartsService.html":{}}}],["deleted",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{}}}],["deleteeventprices",{"_index":1285,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["deleteeventprices(eventid",{"_index":1297,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["deletes",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"index.html":{}}}],["deleting",{"_index":1832,"title":{},"body":{"injectables/RedisService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["deletion",{"_index":3073,"title":{},"body":{"index.html":{}}}],["deletions",{"_index":3350,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":180,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1821,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["deployment",{"_index":2743,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1766,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/TransactionsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["descending",{"_index":1773,"title":{},"body":{"injectables/QueryHelperService.html":{},"index.html":{}}}],["describe",{"_index":3433,"title":{},"body":{"index.html":{}}}],["describing",{"_index":3424,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"properties.html":{}}}],["descriptions",{"_index":1055,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"index.html":{}}}],["descriptive",{"_index":3417,"title":{},"body":{"index.html":{}}}],["design",{"_index":3192,"title":{},"body":{"index.html":{}}}],["designed",{"_index":2738,"title":{},"body":{"index.html":{}}}],["detail",{"_index":1074,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationDetailsService.html":{}}}],["detailed",{"_index":1071,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/Reservation.html":{},"index.html":{}}}],["detailederrors",{"_index":1567,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["details",{"_index":583,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"classes/UpdateReservationDetailsDto.html":{},"index.html":{}}}],["details.dto",{"_index":1978,"title":{},"body":{"injectables/ReservationDetailsService.html":{},"classes/UpdateReservationDetailsDto.html":{},"index.html":{}}}],["details.dto.ts",{"_index":977,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"coverage.html":{},"index.html":{}}}],["details.dto.ts:22",{"_index":985,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.dto.ts:36",{"_index":978,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.dto.ts:50",{"_index":987,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.dto.ts:64",{"_index":986,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.dto.ts:80",{"_index":983,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.dto.ts:92",{"_index":984,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.entities",{"_index":3015,"title":{},"body":{"index.html":{}}}],["details.entity",{"_index":631,"title":{},"body":{"modules/CartItemsModule.html":{},"entities/Event.html":{},"modules/EventsModule.html":{},"entities/Reservation.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{}}}],["details.entity.ts",{"_index":1942,"title":{},"body":{"entities/ReservationDetails.html":{},"coverage.html":{},"index.html":{}}}],["details.entity.ts:102",{"_index":1955,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:114",{"_index":1943,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:126",{"_index":1959,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:28",{"_index":1954,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:42",{"_index":1953,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:56",{"_index":1947,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:67",{"_index":1950,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:78",{"_index":1957,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:91",{"_index":1948,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.migration.spec.ts",{"_index":3241,"title":{},"body":{"index.html":{}}}],["details.module",{"_index":2218,"title":{},"body":{"modules/TicketsModule.html":{}}}],["details.module.ts",{"_index":1966,"title":{},"body":{"modules/ReservationDetailsModule.html":{},"index.html":{}}}],["details.service",{"_index":633,"title":{},"body":{"modules/CartItemsModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TransactionsModule.html":{}}}],["details.service.spec.ts",{"_index":3010,"title":{},"body":{"index.html":{}}}],["details.service.ts",{"_index":1968,"title":{},"body":{"injectables/ReservationDetailsService.html":{},"coverage.html":{},"index.html":{}}}],["details.service.ts:15",{"_index":1971,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["details.service.ts:42",{"_index":1974,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["details.service.ts:85",{"_index":1976,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["details/dto/create",{"_index":976,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{},"coverage.html":{}}}],["details/dto/update",{"_index":2438,"title":{},"body":{"classes/UpdateReservationDetailsDto.html":{},"coverage.html":{}}}],["details/entities/reservation",{"_index":630,"title":{},"body":{"modules/CartItemsModule.html":{},"entities/Event.html":{},"modules/EventsModule.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{},"coverage.html":{}}}],["details/reservation",{"_index":632,"title":{},"body":{"modules/CartItemsModule.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"coverage.html":{}}}],["determine",{"_index":1622,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["determines",{"_index":3479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":2886,"title":{},"body":{"index.html":{}}}],["dev_env",{"_index":2621,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["develop",{"_index":3422,"title":{},"body":{"index.html":{}}}],["developers",{"_index":2811,"title":{},"body":{"index.html":{}}}],["development",{"_index":2741,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":2683,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["direction",{"_index":1771,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["directories",{"_index":2868,"title":{},"body":{"index.html":{}}}],["directory",{"_index":3300,"title":{},"body":{"index.html":{}}}],["discussions",{"_index":3399,"title":{},"body":{"index.html":{}}}],["dist/main.js",{"_index":3383,"title":{},"body":{"index.html":{}}}],["distribution",{"_index":2867,"title":{},"body":{"index.html":{}}}],["diving",{"_index":2692,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["docker",{"_index":2748,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":2847,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":2581,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":1146,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["does_enum_category_type_exist",{"_index":1060,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["does_enum_price_formule_type_exist",{"_index":1026,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["does_enum_status_reservation_exist",{"_index":1102,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["does_enum_user_role_exist",{"_index":1116,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["doesn't",{"_index":756,"title":{},"body":{"injectables/CartsService.html":{}}}],["domain",{"_index":2955,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":2650,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":136,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["down(queryrunner",{"_index":138,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["downs",{"_index":3230,"title":{},"body":{"index.html":{}}}],["drop",{"_index":173,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["dropping",{"_index":142,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["drops",{"_index":1014,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["dto",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/IdDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"classes/RefreshTokenDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["dto/create",{"_index":604,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["dto/login.dto",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["dtos",{"_index":3067,"title":{},"body":{"index.html":{}}}],["due",{"_index":2336,"title":{},"body":{"injectables/TokenService.html":{}}}],["duo",{"_index":2707,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["duplicate",{"_index":2077,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["duration",{"_index":827,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["dynamic",{"_index":3085,"title":{},"body":{"index.html":{}}}],["dynamically",{"_index":1160,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["déj",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["e",{"_index":3081,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":822,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["e2e.json",{"_index":2862,"title":{},"body":{"index.html":{}}}],["each",{"_index":2061,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["eager",{"_index":1245,"title":{},"body":{"entities/Event.html":{}}}],["ease",{"_index":2958,"title":{},"body":{"index.html":{}}}],["easy",{"_index":2845,"title":{},"body":{"index.html":{}}}],["ecosystem",{"_index":3187,"title":{},"body":{"index.html":{}}}],["effective",{"_index":3129,"title":{},"body":{"index.html":{}}}],["effectively",{"_index":1015,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["efficiency",{"_index":2723,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":2754,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2814,"title":{},"body":{"index.html":{}}}],["effortlessly",{"_index":2952,"title":{},"body":{"index.html":{}}}],["element",{"_index":3291,"title":{},"body":{"index.html":{}}}],["email",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"classes/LoginDTO.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"index.html":{}}}],["email.tolowercase",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["emitter",{"_index":2630,"title":{},"body":{"dependencies.html":{}}}],["employs",{"_index":3101,"title":{},"body":{"index.html":{}}}],["empty",{"_index":892,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/LoginDTO.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdatePasswordDTO.html":{},"index.html":{}}}],["en",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["enables",{"_index":2810,"title":{},"body":{"index.html":{}}}],["enabling",{"_index":2764,"title":{},"body":{"index.html":{}}}],["encode",{"_index":1196,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/TokenManagementService.html":{}}}],["encrypted",{"_index":3351,"title":{},"body":{"index.html":{}}}],["encryption",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EncryptionService.html":{},"injectables/TicketsService.html":{},"index.html":{}}}],["encryption.service.spec.ts",{"_index":3288,"title":{},"body":{"index.html":{}}}],["encryption.service.ts",{"_index":3283,"title":{},"body":{"index.html":{}}}],["encryptionservice",{"_index":402,"title":{"injectables/EncryptionService.html":{}},"body":{"injectables/AuthService.html":{},"modules/CommonModule.html":{},"injectables/EncryptionService.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["encryptionservice.generatedkeyuuid",{"_index":1189,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice.generatedqrcode(securekey",{"_index":1195,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice.generatedsecurekey(user",{"_index":1202,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice.hashpassword('password123",{"_index":1207,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice.verifypassword(hashedpassword",{"_index":1215,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["end",{"_index":945,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enddate",{"_index":919,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["endpoints",{"_index":3095,"title":{},"body":{"index.html":{}}}],["enforces",{"_index":3154,"title":{},"body":{"index.html":{}}}],["enforcing",{"_index":3078,"title":{},"body":{"index.html":{}}}],["engineers",{"_index":2778,"title":{},"body":{"index.html":{}}}],["enhance",{"_index":3107,"title":{},"body":{"index.html":{}}}],["enhances",{"_index":2950,"title":{},"body":{"index.html":{}}}],["enhancing",{"_index":2760,"title":{},"body":{"index.html":{}}}],["enough",{"_index":690,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/EventSalesService.html":{}}}],["ensure",{"_index":101,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["ensures",{"_index":1480,"title":{},"body":{"injectables/EventsService.html":{},"index.html":{}}}],["ensuretitleunique",{"_index":1471,"title":{},"body":{"injectables/EventsService.html":{}}}],["ensuretitleunique(title",{"_index":1477,"title":{},"body":{"injectables/EventsService.html":{}}}],["ensuring",{"_index":2932,"title":{},"body":{"index.html":{}}}],["entities",{"_index":489,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"modules/CartItemsModule.html":{},"modules/DatabaseModule.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"modules/EventsModule.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"modules/TransactionsModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/cart.entity",{"_index":733,"title":{},"body":{"modules/CartsModule.html":{},"injectables/CartsService.html":{}}}],["entities/cartitems.entity",{"_index":608,"title":{},"body":{"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{}}}],["entities/event",{"_index":1312,"title":{},"body":{"injectables/EventPricesService.html":{},"modules/EventsModule.html":{}}}],["entities/event.entity",{"_index":1379,"title":{},"body":{"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["entities/reservation",{"_index":1967,"title":{},"body":{"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{}}}],["entities/reservation.entity",{"_index":2014,"title":{},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["entities/ticket.entity",{"_index":2217,"title":{},"body":{"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["entities/transaction.entity",{"_index":2372,"title":{},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{}}}],["entities/user.entity",{"_index":2502,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":57,"title":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["entity('cart",{"_index":525,"title":{},"body":{"entities/Cart.html":{}}}],["entity('cart_items",{"_index":566,"title":{},"body":{"entities/CartItem.html":{}}}],["entity('event_prices",{"_index":1281,"title":{},"body":{"entities/EventPrice.html":{}}}],["entity('events",{"_index":1272,"title":{},"body":{"entities/Event.html":{}}}],["entity('reservation_details",{"_index":1961,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["entity('reservations",{"_index":1937,"title":{},"body":{"entities/Reservation.html":{}}}],["entity('tickets",{"_index":2207,"title":{},"body":{"entities/Ticket.html":{}}}],["entity('transactions",{"_index":2364,"title":{},"body":{"entities/Transaction.html":{}}}],["entity('users",{"_index":2479,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":1176,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["entries",{"_index":3009,"title":{},"body":{"index.html":{}}}],["entry",{"_index":2890,"title":{},"body":{"index.html":{}}}],["enum",{"_index":898,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"entities/EventPrice.html":{},"entities/ReservationDetails.html":{},"classes/SignUpDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enum(${values.map(value",{"_index":3493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum_types_db",{"_index":2624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enum_types_db.category_type",{"_index":3495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum_types_db.status_reservation",{"_index":3497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum_types_db.type_price_formule",{"_index":3496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum_types_db.user_role",{"_index":3498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumeration",{"_index":2682,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":2670,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":2945,"title":{},"body":{"index.html":{}}}],["env",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":1579,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["error",{"_index":866,"title":{},"body":{"injectables/CookieService.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/RedisService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error('jwt_refresh_token_expiration",{"_index":871,"title":{},"body":{"injectables/CookieService.html":{}}}],["error('key",{"_index":1862,"title":{},"body":{"injectables/RedisService.html":{}}}],["error(`reservation",{"_index":2110,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["error(message",{"_index":2558,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["error.log",{"_index":3485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error.message",{"_index":1521,"title":{},"body":{"injectables/EventsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["error.stack",{"_index":2422,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["errorresponse",{"_index":1574,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TokenService.html":{}}}],["errorresponse(res",{"_index":2296,"title":{},"body":{"injectables/TokenService.html":{}}}],["errorresponse['errordetails",{"_index":1586,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errorresponse['method",{"_index":1582,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errorresponse['path",{"_index":1580,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errorresponse['stack",{"_index":1584,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errors",{"_index":1568,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["eslint",{"_index":2801,"title":{},"body":{"index.html":{}}}],["essential",{"_index":2781,"title":{},"body":{"index.html":{}}}],["est",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["establishes",{"_index":3210,"title":{},"body":{"index.html":{}}}],["etc",{"_index":3229,"title":{},"body":{"index.html":{}}}],["event",{"_index":241,"title":{"entities/Event.html":{}},"body":{"modules/AppModule.html":{},"entities/CartItem.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["event.baseprice",{"_index":1229,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{}}}],["event.cartitems",{"_index":568,"title":{},"body":{"entities/CartItem.html":{},"entities/Event.html":{}}}],["event.cartitems)@joincolumn({name",{"_index":541,"title":{},"body":{"entities/CartItem.html":{}}}],["event.categorytype",{"_index":1232,"title":{},"body":{"entities/Event.html":{}}}],["event.createdat",{"_index":1234,"title":{},"body":{"entities/Event.html":{}}}],["event.dto",{"_index":1442,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{}}}],["event.dto.ts",{"_index":916,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{},"index.html":{}}}],["event.dto.ts:100",{"_index":957,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:114",{"_index":944,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:128",{"_index":942,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:26",{"_index":960,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:42",{"_index":955,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:58",{"_index":949,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:72",{"_index":926,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:86",{"_index":953,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.enddate",{"_index":1237,"title":{},"body":{"entities/Event.html":{}}}],["event.entity.ts",{"_index":3151,"title":{},"body":{"index.html":{}}}],["event.longdescription",{"_index":1242,"title":{},"body":{"entities/Event.html":{}}}],["event.prices",{"_index":1247,"title":{},"body":{"entities/Event.html":{},"entities/EventPrice.html":{}}}],["event.prices)@joincolumn({name",{"_index":1275,"title":{},"body":{"entities/EventPrice.html":{}}}],["event.prices.find(p",{"_index":700,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["event.quantityavailable",{"_index":697,"title":{},"body":{"injectables/CartItemsService.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{}}}],["event.quantitysold",{"_index":1253,"title":{},"body":{"entities/Event.html":{},"injectables/EventSalesService.html":{}}}],["event.reservationsdetails",{"_index":1256,"title":{},"body":{"entities/Event.html":{},"entities/ReservationDetails.html":{}}}],["event.revenuegenerated",{"_index":1259,"title":{},"body":{"entities/Event.html":{},"injectables/EventSalesService.html":{}}}],["event.shortdescription",{"_index":1262,"title":{},"body":{"entities/Event.html":{},"injectables/ReservationDetailsService.html":{}}}],["event.startdate",{"_index":1264,"title":{},"body":{"entities/Event.html":{}}}],["event.title",{"_index":1268,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["event.updatedat",{"_index":1270,"title":{},"body":{"entities/Event.html":{}}}],["event_${id",{"_index":1523,"title":{},"body":{"injectables/EventsService.html":{}}}],["event_prices",{"_index":1047,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{},"index.html":{}}}],["eventid",{"_index":542,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["eventids",{"_index":2101,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["eventinstance",{"_index":1277,"title":{},"body":{"entities/EventPrice.html":{}}}],["eventprice",{"_index":1243,"title":{"entities/EventPrice.html":{}},"body":{"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"modules/EventsModule.html":{},"coverage.html":{},"index.html":{}}}],["eventpriceid",{"_index":1051,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{},"entities/EventPrice.html":{}}}],["eventpricerepository",{"_index":1291,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventprices",{"_index":1324,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventprices.map(pricerecord",{"_index":1327,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventpricesservice",{"_index":648,"title":{"injectables/EventPricesService.html":{}},"body":{"injectables/CartItemsService.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["eventpricesservice.createeventprices(1",{"_index":1296,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventpricesservice.deleteeventprices(1",{"_index":1299,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventpricesservice.findeventbyid(1",{"_index":1302,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventpricesservice.getpricebyeventandtype(1",{"_index":1305,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventpricesservice.updateeventprices(1",{"_index":1310,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventrepository",{"_index":647,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["events",{"_index":1035,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["events.controller",{"_index":1465,"title":{},"body":{"modules/EventsModule.html":{}}}],["events.controller.spec.ts",{"_index":3138,"title":{},"body":{"index.html":{}}}],["events.controller.ts",{"_index":3123,"title":{},"body":{"index.html":{}}}],["events.migration.spec.ts",{"_index":3243,"title":{},"body":{"index.html":{}}}],["events.module.ts",{"_index":3133,"title":{},"body":{"index.html":{}}}],["events.service",{"_index":1380,"title":{},"body":{"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{}}}],["events.service.spec.ts",{"_index":3128,"title":{},"body":{"index.html":{}}}],["events.service.ts",{"_index":3131,"title":{},"body":{"index.html":{}}}],["events/1",{"_index":1424,"title":{},"body":{"controllers/EventsController.html":{}}}],["events/1/price/standard",{"_index":1428,"title":{},"body":{"controllers/EventsController.html":{}}}],["events/create",{"_index":1403,"title":{},"body":{"controllers/EventsController.html":{}}}],["events/get",{"_index":1409,"title":{},"body":{"controllers/EventsController.html":{}}}],["eventsalesservice",{"_index":1337,"title":{"injectables/EventSalesService.html":{}},"body":{"injectables/EventSalesService.html":{},"modules/EventsModule.html":{},"injectables/ReservationsProcessorService.html":{},"coverage.html":{},"overview.html":{}}}],["eventsalesservice.deducteventquantity(1",{"_index":1351,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["eventsalesservice.processeventticketsandrevenue(cartitems",{"_index":1357,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["eventsalesservice.quantityperformula(priceformulaenum.solo",{"_index":1366,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["eventsalesservice.updaterevenue(1",{"_index":1370,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["eventscontroller",{"_index":1394,"title":{"controllers/EventsController.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventscontrollers",{"_index":3139,"title":{},"body":{"index.html":{}}}],["eventsmodule",{"_index":192,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartItemsModule.html":{},"modules/EventsModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["eventsservice",{"_index":1346,"title":{"injectables/EventsService.html":{}},"body":{"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{},"overview.html":{}}}],["eventsservice.cache_ttl_one_hour",{"_index":1524,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.create(createeventdto",{"_index":1476,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.ensuretitleunique('new",{"_index":1481,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.findallfiltered(paginationfilterdto",{"_index":1488,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.findallvalues",{"_index":1490,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.findeventbyid(1",{"_index":1492,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.findone(1",{"_index":1494,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.remove(1",{"_index":1496,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.update(1",{"_index":1499,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventtitle",{"_index":1267,"title":{},"body":{"entities/Event.html":{}}}],["evolution",{"_index":3240,"title":{},"body":{"index.html":{}}}],["ex",{"_index":1867,"title":{},"body":{"injectables/RedisService.html":{}}}],["examining",{"_index":3112,"title":{},"body":{"index.html":{}}}],["example",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["exception",{"_index":1543,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/InvalidCredentialsException.html":{},"index.html":{}}}],["exception.getresponse",{"_index":1566,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":1562,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":1588,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":1585,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1544,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptions",{"_index":1541,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{},"index.html":{}}}],["exclude",{"_index":1483,"title":{},"body":{"injectables/EventsService.html":{},"entities/User.html":{}}}],["exclude()@column({type",{"_index":2467,"title":{},"body":{"entities/User.html":{}}}],["excluded",{"_index":2469,"title":{},"body":{"entities/User.html":{}}}],["excludeid",{"_index":1478,"title":{},"body":{"injectables/EventsService.html":{}}}],["excluding",{"_index":2762,"title":{},"body":{"index.html":{}}}],["execute",{"_index":1838,"title":{},"body":{"injectables/RedisService.html":{}}}],["executes",{"_index":3204,"title":{},"body":{"index.html":{}}}],["execution",{"_index":1624,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["executioncontext",{"_index":1620,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":757,"title":{},"body":{"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["existence",{"_index":3011,"title":{},"body":{"index.html":{}}}],["existent",{"_index":3070,"title":{},"body":{"index.html":{}}}],["existing",{"_index":754,"title":{},"body":{"injectables/CartsService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"index.html":{}}}],["existingcartitem",{"_index":706,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["existingcartitem.price",{"_index":710,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["existingcartitem.quantity",{"_index":709,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["existingevent",{"_index":1535,"title":{},"body":{"injectables/EventsService.html":{}}}],["existingevent.eventid",{"_index":1536,"title":{},"body":{"injectables/EventsService.html":{}}}],["existingreservation",{"_index":2108,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["existinguser",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":767,"title":{},"body":{"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["expected",{"_index":3025,"title":{},"body":{"index.html":{}}}],["experience",{"_index":2777,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":102,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenConfig.html":{},"index.html":{}}}],["expired",{"_index":2339,"title":{},"body":{"injectables/TokenService.html":{}}}],["expiresin",{"_index":1643,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["export",{"_index":32,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{}}}],["exported",{"_index":3172,"title":{},"body":{"index.html":{}}}],["exports",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["exposes",{"_index":2889,"title":{},"body":{"index.html":{}}}],["exposing",{"_index":2877,"title":{},"body":{"index.html":{}}}],["express",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"index.html":{}}}],["extending",{"_index":3020,"title":{},"body":{"index.html":{}}}],["extends",{"_index":25,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/InvalidCredentialsException.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["extensions",{"_index":3366,"title":{},"body":{"index.html":{}}}],["extensive",{"_index":2808,"title":{},"body":{"index.html":{}}}],["extract",{"_index":89,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["extracted",{"_index":2313,"title":{},"body":{"injectables/TokenService.html":{}}}],["extraction",{"_index":3317,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":78,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":88,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["extractrefreshtokencookie",{"_index":844,"title":{},"body":{"injectables/CookieService.html":{}}}],["extractrefreshtokencookie(req",{"_index":854,"title":{},"body":{"injectables/CookieService.html":{}}}],["extracts",{"_index":856,"title":{},"body":{"injectables/CookieService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["f.type",{"_index":1329,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["facilitate",{"_index":3068,"title":{},"body":{"index.html":{}}}],["facilitates",{"_index":2796,"title":{},"body":{"index.html":{}}}],["facilitating",{"_index":3017,"title":{},"body":{"index.html":{}}}],["factor",{"_index":1363,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["factors",{"_index":1378,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["failed",{"_index":1571,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/TokenService.html":{}}}],["fails",{"_index":1878,"title":{},"body":{"injectables/RedisService.html":{}}}],["false",{"_index":100,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/DatabaseModule.html":{},"entities/ReservationDetails.html":{},"injectables/TokenManagementService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false})@joincolumn({name",{"_index":1946,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["family",{"_index":2708,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":2834,"title":{},"body":{"index.html":{}}}],["faster",{"_index":2765,"title":{},"body":{"index.html":{}}}],["feature",{"_index":2793,"title":{},"body":{"index.html":{}}}],["features",{"_index":2726,"title":{},"body":{"index.html":{}}}],["feedback",{"_index":3402,"title":{},"body":{"index.html":{}}}],["fencing",{"_index":2693,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":1837,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["fetchcacheddata",{"_index":1814,"title":{},"body":{"injectables/RedisService.html":{}}}],["fetchcacheddata(key",{"_index":1833,"title":{},"body":{"injectables/RedisService.html":{}}}],["fetched",{"_index":1843,"title":{},"body":{"injectables/RedisService.html":{}}}],["fetchfn",{"_index":1834,"title":{},"body":{"injectables/RedisService.html":{}}}],["fetching",{"_index":3125,"title":{},"body":{"index.html":{}}}],["fetchuserfromdb",{"_index":1841,"title":{},"body":{"injectables/RedisService.html":{}}}],["field",{"_index":889,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"entities/User.html":{},"index.html":{}}}],["fields",{"_index":2137,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":3484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":2750,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["filter",{"_index":1416,"title":{},"body":{"controllers/EventsController.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["filter.spec.ts",{"_index":2966,"title":{},"body":{"index.html":{}}}],["filter.ts",{"_index":1542,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{},"index.html":{}}}],["filter.ts:20",{"_index":1546,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["filter.ts:33",{"_index":1550,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["filter/http",{"_index":1540,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["filterby",{"_index":1672,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["filterby.split",{"_index":1781,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["filtered",{"_index":1413,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["filtered?page=1&limit=10&sortby=title&sortorder=asc",{"_index":1417,"title":{},"body":{"controllers/EventsController.html":{}}}],["filtering",{"_index":1486,"title":{},"body":{"injectables/EventsService.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["filters",{"_index":3036,"title":{},"body":{"index.html":{}}}],["filtervalue",{"_index":1673,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["finalization",{"_index":3092,"title":{},"body":{"index.html":{}}}],["finalizebooking",{"_index":2039,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["finalizebooking(cartitems",{"_index":2063,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["finalizes",{"_index":2065,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["finances",{"_index":3137,"title":{},"body":{"index.html":{}}}],["find",{"_index":3028,"title":{},"body":{"index.html":{}}}],["findall",{"_index":571,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["findall(@userid",{"_index":612,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["findall(paginationfilterdto",{"_index":2483,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(userid",{"_index":584,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["findalladmin",{"_index":1990,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"index.html":{}}}],["findalladmin(@query",{"_index":2020,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findalladmin(paginationdto",{"_index":2001,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findalladmin(paginationfilterdto",{"_index":2125,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["findalldata",{"_index":1991,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["findalldata(@param('userid",{"_index":2022,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findalldata(userid",{"_index":2006,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["findallfiltered",{"_index":1396,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["findallfiltered(paginationfilterdto",{"_index":1411,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["findallitemsincart",{"_index":639,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["findallitemsincart(userid",{"_index":655,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["findallvalues",{"_index":1472,"title":{},"body":{"injectables/EventsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findcart",{"_index":739,"title":{},"body":{"injectables/CartsService.html":{}}}],["findcart(userid",{"_index":749,"title":{},"body":{"injectables/CartsService.html":{}}}],["findeventbyid",{"_index":1286,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/EventsService.html":{}}}],["findeventbyid(eventid",{"_index":1300,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/EventsService.html":{}}}],["finding",{"_index":3038,"title":{},"body":{"index.html":{}}}],["findmanyoptions",{"_index":1757,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["findone",{"_index":572,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["findone(@param('id",{"_index":1453,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":1420,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["findone(reservationid",{"_index":2130,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["findone(userid",{"_index":590,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/UsersService.html":{}}}],["findoneitemincart",{"_index":640,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["findoneitemincart(userid",{"_index":660,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["findoptionswhere",{"_index":1763,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["finds",{"_index":657,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["findtransactionbyreservationid",{"_index":2384,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["findtransactionbyreservationid(reservationid",{"_index":2398,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["first",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"index.html":{}}}],["firstname",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["fk_reservations_tickets",{"_index":169,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["fk_reservations_transactions",{"_index":166,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["fk_reservations_users",{"_index":160,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["fk_tickets_reservations",{"_index":171,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["flag",{"_index":1636,"title":{},"body":{"guards/IsCreatorGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["flexibility",{"_index":2775,"title":{},"body":{"index.html":{}}}],["flexible",{"_index":3058,"title":{},"body":{"index.html":{}}}],["flexibly",{"_index":3084,"title":{},"body":{"index.html":{}}}],["flow",{"_index":2938,"title":{},"body":{"index.html":{}}}],["flows",{"_index":3316,"title":{},"body":{"index.html":{}}}],["focusing",{"_index":2866,"title":{},"body":{"index.html":{}}}],["follows",{"_index":2798,"title":{},"body":{"index.html":{}}}],["football",{"_index":2694,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["foreign",{"_index":128,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"index.html":{}}}],["fork",{"_index":3406,"title":{},"body":{"index.html":{}}}],["forked",{"_index":3410,"title":{},"body":{"index.html":{}}}],["forking",{"_index":3407,"title":{},"body":{"index.html":{}}}],["format",{"_index":817,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"classes/CreateEventDto.html":{},"miscellaneous/variables.html":{}}}],["formats",{"_index":2967,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":2905,"title":{},"body":{"index.html":{}}}],["formula",{"_index":551,"title":{},"body":{"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{},"index.html":{}}}],["formula.enum",{"_index":565,"title":{},"body":{"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{}}}],["formula.enum.ts",{"_index":2674,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["formula.multiplier",{"_index":1320,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["formula.type",{"_index":1318,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["formulas",{"_index":1295,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["forward",{"_index":635,"title":{},"body":{"modules/CartItemsModule.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{}}}],["forwardref",{"_index":626,"title":{},"body":{"modules/CartItemsModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["found",{"_index":105,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["framework",{"_index":3292,"title":{},"body":{"index.html":{}}}],["function",{"_index":1839,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functionalities",{"_index":2782,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":2840,"title":{},"body":{"index.html":{}}}],["functions",{"_index":2713,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["funds",{"_index":1712,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["further",{"_index":1637,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["general",{"_index":1572,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["generate",{"_index":1737,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["generateaccesstokenfromrefreshtoken",{"_index":2288,"title":{},"body":{"injectables/TokenService.html":{}}}],["generateaccesstokenfromrefreshtoken(req",{"_index":2301,"title":{},"body":{"injectables/TokenService.html":{}}}],["generated",{"_index":1190,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/Event.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{}}}],["generatedkeyuuid",{"_index":1182,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generatedqrcode",{"_index":1183,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generatedqrcode(securekey",{"_index":1191,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generatedsecurekey",{"_index":1184,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generatedsecurekey(user",{"_index":1198,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generatereservation",{"_index":2116,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["generatereservation(userid",{"_index":2133,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["generatereservations",{"_index":3100,"title":{},"body":{"index.html":{}}}],["generates",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EncryptionService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["generateticketsforapprovedreservations",{"_index":2222,"title":{},"body":{"injectables/TicketsService.html":{}}}],["generateticketsforapprovedreservations(reservations",{"_index":2231,"title":{},"body":{"injectables/TicketsService.html":{}}}],["generateticketsforreservation",{"_index":2223,"title":{},"body":{"injectables/TicketsService.html":{}}}],["generateticketsforreservation(reservationid",{"_index":2235,"title":{},"body":{"injectables/TicketsService.html":{}}}],["generating",{"_index":3285,"title":{},"body":{"index.html":{}}}],["generation",{"_index":3158,"title":{},"body":{"index.html":{}}}],["get(':cartid/items",{"_index":585,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["get(':cartid/items/:cartitemid",{"_index":591,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["get(':id",{"_index":1421,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["get(':id/price/:priceformula",{"_index":1426,"title":{},"body":{"controllers/EventsController.html":{}}}],["get(':userid/find",{"_index":1997,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{}}}],["get('admin",{"_index":2162,"title":{},"body":{"guards/RoleGuard.html":{}}}],["get('find",{"_index":2007,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["get('get",{"_index":1406,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["get('protected",{"_index":18,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["get(key",{"_index":1844,"title":{},"body":{"injectables/RedisService.html":{}}}],["getadmindata",{"_index":2163,"title":{},"body":{"guards/RoleGuard.html":{}}}],["getorcreatecart",{"_index":740,"title":{},"body":{"injectables/CartsService.html":{}}}],["getorcreatecart(userid",{"_index":752,"title":{},"body":{"injectables/CartsService.html":{}}}],["getorcreatecartitem",{"_index":641,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["getorcreatecartitem(cartid",{"_index":663,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["getpricebyeventandtype",{"_index":1287,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["getpricebyeventandtype(eventid",{"_index":1303,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["getprotecteddata",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["getrefreshtoken",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["getrefreshtoken(@req",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["getrefreshtoken(req",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["gets",{"_index":666,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventSalesService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["getselectfieldsfindall",{"_index":2117,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["getselectfieldsfindalladmin",{"_index":2118,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["getticketprice",{"_index":1397,"title":{},"body":{"controllers/EventsController.html":{}}}],["getticketprice(id",{"_index":1425,"title":{},"body":{"controllers/EventsController.html":{}}}],["getting",{"_index":2717,"title":{"index.html":{}},"body":{"index.html":{}}}],["gettokens",{"_index":2289,"title":{},"body":{"injectables/TokenService.html":{}}}],["gettokens(user",{"_index":2304,"title":{},"body":{"injectables/TokenService.html":{}}}],["git",{"_index":3374,"title":{},"body":{"index.html":{}}}],["github",{"_index":3408,"title":{},"body":{"index.html":{}}}],["given",{"_index":1364,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["giving",{"_index":3416,"title":{},"body":{"index.html":{}}}],["global",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"index.html":{}}}],["graph",{"_index":3442,"title":{},"body":{"index.html":{},"modules.html":{}}}],["groups",{"_index":2947,"title":{},"body":{"index.html":{}}}],["guard",{"_index":9,"title":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":1607,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{},"overview.html":{}}}],["guidelines",{"_index":3405,"title":{},"body":{"index.html":{}}}],["gymnastics",{"_index":2695,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["handball",{"_index":2696,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["handle",{"_index":805,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"injectables/EncryptionService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaymentService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["handler",{"_index":3513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handlers",{"_index":2951,"title":{},"body":{"index.html":{}}}],["handles",{"_index":2931,"title":{},"body":{"index.html":{}}}],["handling",{"_index":2213,"title":{},"body":{"modules/TicketsModule.html":{},"index.html":{}}}],["hash",{"_index":1209,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/User.html":{}}}],["hashed",{"_index":1210,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashedpassword",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EncryptionService.html":{}}}],["hashes",{"_index":1205,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashing",{"_index":3284,"title":{},"body":{"index.html":{}}}],["hashpassword",{"_index":1185,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashpassword(password",{"_index":1203,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["header",{"_index":91,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["headers",{"_index":2912,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":2653,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helper.service",{"_index":802,"title":{},"body":{"modules/CommonModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["helper.service.spec.ts",{"_index":3258,"title":{},"body":{"index.html":{}}}],["helper.service.ts",{"_index":1744,"title":{},"body":{"injectables/QueryHelperService.html":{},"coverage.html":{},"index.html":{}}}],["helper.service.ts:22",{"_index":1752,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["helper.service.ts:56",{"_index":1760,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["helper.service.ts:87",{"_index":1767,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["here",{"_index":24,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["hh:mm:ss",{"_index":3470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["high",{"_index":3127,"title":{},"body":{"index.html":{}}}],["highly",{"_index":2821,"title":{},"body":{"index.html":{}}}],["host",{"_index":1166,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{}}}],["host.switchtohttp",{"_index":1559,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["hot",{"_index":2783,"title":{},"body":{"index.html":{}}}],["html",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDTO.html":{},"classes/SignUpDto.html":{}}}],["http",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["httpcode",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('access",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('refresh",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"classes/InvalidCredentialsException.html":{},"index.html":{}}}],["httpexception('forbidden",{"_index":1551,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception('invalid",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexceptionfilter",{"_index":1538,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httponly",{"_index":874,"title":{},"body":{"injectables/CookieService.html":{}}}],["https://github.com/binary",{"_index":3375,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"classes/InvalidCredentialsException.html":{},"injectables/TokenService.html":{}}}],["httpstatus.bad_request",{"_index":2300,"title":{},"body":{"injectables/TokenService.html":{}}}],["httpstatus.forbidden",{"_index":1552,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":2330,"title":{},"body":{"injectables/TokenService.html":{}}}],["httpstatus.unauthorized",{"_index":1605,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"injectables/TokenService.html":{}}}],["id",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/IdDto.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id.decorator",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/ReservationsController.html":{}}}],["id.decorator.ts",{"_index":2587,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id.dto.ts",{"_index":2981,"title":{},"body":{"index.html":{}}}],["iddto",{"_index":1591,"title":{"classes/IdDto.html":{}},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["iddto.id",{"_index":1595,"title":{},"body":{"classes/IdDto.html":{}}}],["identifier",{"_index":500,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{},"coverage.html":{}}}],["identity",{"_index":3294,"title":{},"body":{"index.html":{}}}],["ignored",{"_index":103,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["ignoreexpiration",{"_index":99,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["implementation",{"_index":3226,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":3290,"title":{},"body":{"index.html":{}}}],["implements",{"_index":133,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["import",{"_index":27,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["importing",{"_index":3008,"title":{},"body":{"index.html":{}}}],["imports",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["improved",{"_index":2767,"title":{},"body":{"index.html":{}}}],["improves",{"_index":2865,"title":{},"body":{"index.html":{}}}],["inactive",{"_index":3029,"title":{},"body":{"index.html":{}}}],["inactive/1",{"_index":2497,"title":{},"body":{"controllers/UsersController.html":{}}}],["inactive/:id",{"_index":2493,"title":{},"body":{"controllers/UsersController.html":{}}}],["include",{"_index":1577,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["includes",{"_index":2756,"title":{},"body":{"index.html":{}}}],["including",{"_index":1008,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["incorporating",{"_index":3033,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["increased",{"_index":2843,"title":{},"body":{"index.html":{}}}],["index",{"_index":41,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index()@column({unique",{"_index":1265,"title":{},"body":{"entities/Event.html":{}}}],["index()@manytoone(undefined",{"_index":534,"title":{},"body":{"entities/CartItem.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/Transaction.html":{}}}],["index()@onetoone(undefined",{"_index":513,"title":{},"body":{"entities/Cart.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{}}}],["index.ts",{"_index":3059,"title":{},"body":{"index.html":{}}}],["indexable",{"_index":1665,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["indicates",{"_index":2463,"title":{},"body":{"entities/User.html":{}}}],["inestapplication",{"_index":3364,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":69,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/HttpExceptionFilter.html":{},"entities/Reservation.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inheriting",{"_index":3056,"title":{},"body":{"index.html":{}}}],["initial",{"_index":1111,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{}}}],["initialization",{"_index":3207,"title":{},"body":{"index.html":{}}}],["initiated",{"_index":2073,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["initiatereservation",{"_index":2040,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["initiatereservation(user",{"_index":2069,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["initiates",{"_index":2071,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["inject",{"_index":1162,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/TicketsService.html":{}}}],["inject(forwardref",{"_index":2240,"title":{},"body":{"injectables/TicketsService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"overview.html":{}}}],["injected",{"_index":1819,"title":{},"body":{"injectables/RedisService.html":{}}}],["injection",{"_index":1822,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["injectrepository",{"_index":76,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(cartitem",{"_index":688,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["injectrepository(event",{"_index":689,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["injectrepository(eventprice",{"_index":1315,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["injectrepository(reservation",{"_index":2085,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["injectrepository(reservationdetails",{"_index":1979,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["injectrepository(ticket",{"_index":2239,"title":{},"body":{"injectables/TicketsService.html":{}}}],["injectrepository(transaction",{"_index":2404,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["injectrepository(user",{"_index":84,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":2978,"title":{},"body":{"index.html":{}}}],["inputs",{"_index":2983,"title":{},"body":{"index.html":{}}}],["insert",{"_index":3385,"title":{},"body":{"index.html":{}}}],["insights",{"_index":3401,"title":{},"body":{"index.html":{}}}],["inspiration",{"_index":3448,"title":{},"body":{"index.html":{}}}],["install",{"_index":3379,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2728,"title":{},"body":{"index.html":{}}}],["installs",{"_index":2882,"title":{},"body":{"index.html":{}}}],["instance",{"_index":146,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["instanceof",{"_index":1569,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["insufficient",{"_index":1711,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"index.html":{}}}],["int",{"_index":1077,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"entities/Event.html":{},"entities/User.html":{}}}],["integer",{"_index":893,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["integrated",{"_index":3336,"title":{},"body":{"index.html":{}}}],["integrates",{"_index":2816,"title":{},"body":{"index.html":{}}}],["integrating",{"_index":2924,"title":{},"body":{"index.html":{}}}],["integration",{"_index":2830,"title":{},"body":{"index.html":{}}}],["integrations",{"_index":2815,"title":{},"body":{"index.html":{}}}],["integrity",{"_index":3019,"title":{},"body":{"index.html":{}}}],["intended",{"_index":1009,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["interact",{"_index":1809,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"index.html":{}}}],["interaction",{"_index":3069,"title":{},"body":{"index.html":{}}}],["interactions",{"_index":3041,"title":{},"body":{"index.html":{}}}],["interface",{"_index":1639,"title":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"interfaces/TokenConfig.html":{}},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"interfaces/TokenConfig.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":1641,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"interfaces/TokenConfig.html":{},"index.html":{},"overview.html":{}}}],["internal",{"_index":2337,"title":{},"body":{"injectables/TokenService.html":{}}}],["internalservererrorexception",{"_index":1502,"title":{},"body":{"injectables/EventsService.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception('error",{"_index":1880,"title":{},"body":{"injectables/RedisService.html":{}}}],["internalservererrorexception('failed",{"_index":1520,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["invalid",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"classes/InvalidCredentialsException.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["invalidated",{"_index":106,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["invalidcredentialsexception",{"_index":426,"title":{"classes/InvalidCredentialsException.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidCredentialsException.html":{},"coverage.html":{},"index.html":{}}}],["ioredis",{"_index":1799,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{}}}],["isaccesstoken",{"_index":2274,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["isaccesstoken=false",{"_index":2283,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["isactive",{"_index":1120,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iscreator",{"_index":1632,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["iscreatorguard",{"_index":1606,"title":{"guards/IsCreatorGuard.html":{}},"body":{"guards/IsCreatorGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["isdevelopment",{"_index":3478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isemail",{"_index":1143,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDTO.html":{},"classes/SignUpDto.html":{}}}],["isenum",{"_index":905,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/PaginationAndFilterDto.html":{}}}],["isenum(priceformulaenum",{"_index":913,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{}}}],["isenum(sortorder",{"_index":1700,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["isglobal",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":906,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/IdDto.html":{},"classes/PaginationAndFilterDto.html":{}}}],["isint()@isoptional",{"_index":902,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["isint()@ispositive",{"_index":1593,"title":{},"body":{"classes/IdDto.html":{}}}],["isnan(days",{"_index":834,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["isnotempty",{"_index":907,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDTO.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{}}}],["isnotempty()@isemail",{"_index":1131,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDTO.html":{},"classes/SignUpDto.html":{}}}],["isnotempty()@isenum(priceformulaenum",{"_index":895,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["isnotempty()@isint",{"_index":887,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{}}}],["isnotempty()@isint()@ispositive()@min(1",{"_index":899,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["isnotempty()@isnumber",{"_index":925,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDto.html":{}}}],["isnotempty()@isnumber()@min(0",{"_index":982,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["isnotempty()@isstring",{"_index":941,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/UpdatePasswordDTO.html":{}}}],["isnotempty()@isstring()@maxlength(255",{"_index":954,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isnotempty()@isstring()@maxlength(500",{"_index":948,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isnotempty()@isstring()@minlength(5)@maxlength(25",{"_index":959,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isnotempty()@isstrongpassword",{"_index":2433,"title":{},"body":{"classes/UpdatePasswordDTO.html":{}}}],["isnotempty()@isstrongpassword()@minlength(6",{"_index":1137,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["isnotprod",{"_index":1563,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["isnt",{"_index":3307,"title":{},"body":{"index.html":{}}}],["isnumber",{"_index":965,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{}}}],["iso",{"_index":946,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isoptional",{"_index":908,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateUserDto.html":{},"classes/PaginationAndFilterDto.html":{},"classes/SignUpDto.html":{}}}],["isoptional()@isenum(sortorder",{"_index":1693,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["isoptional()@isint()@type(undefined)@min(0",{"_index":1683,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["isoptional()@isstring",{"_index":1678,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["ispositive",{"_index":909,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/IdDto.html":{}}}],["isstring",{"_index":966,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/PaginationAndFilterDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{}}}],["isstring()@minlength(3)@maxlength(50",{"_index":1134,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["isstrongpassword",{"_index":1144,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{}}}],["issues",{"_index":3392,"title":{},"body":{"index.html":{}}}],["isvalid",{"_index":1214,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RefreshTokenStoreService.html":{}}}],["item",{"_index":529,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableReservations1712661230451.html":{},"injectables/EventSalesService.html":{},"entities/Reservation.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"index.html":{}}}],["item.cartitemid",{"_index":2111,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["item.dto",{"_index":605,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/UpdateCartItemDto.html":{}}}],["item.dto.ts",{"_index":884,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{},"index.html":{}}}],["item.dto.ts:22",{"_index":903,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.dto.ts:36",{"_index":888,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.dto.ts:54",{"_index":900,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.dto.ts:68",{"_index":896,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.event.eventid",{"_index":2103,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["item.price",{"_index":1386,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/TransactionsService.html":{}}}],["item.priceformula",{"_index":1384,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["item.quantity",{"_index":1385,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/TransactionsService.html":{}}}],["items",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"entities/Cart.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["items.controller",{"_index":627,"title":{},"body":{"modules/CartItemsModule.html":{}}}],["items.controller.spec.ts",{"_index":3072,"title":{},"body":{"index.html":{}}}],["items.controller.ts",{"_index":570,"title":{},"body":{"controllers/CartItemsController.html":{},"coverage.html":{},"index.html":{}}}],["items.controller.ts:123",{"_index":596,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["items.controller.ts:39",{"_index":578,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["items.controller.ts:57",{"_index":586,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["items.controller.ts:73",{"_index":592,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["items.controller.ts:97",{"_index":602,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["items.dto",{"_index":3077,"title":{},"body":{"index.html":{}}}],["items.entities",{"_index":3074,"title":{},"body":{"index.html":{}}}],["items.length",{"_index":1387,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["items.migration.spec.ts",{"_index":3238,"title":{},"body":{"index.html":{}}}],["items.module",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{}}}],["items.module.ts",{"_index":625,"title":{},"body":{"modules/CartItemsModule.html":{},"index.html":{}}}],["items.service",{"_index":607,"title":{},"body":{"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/ReservationsProcessorService.html":{}}}],["items.service.spec.ts",{"_index":3066,"title":{},"body":{"index.html":{}}}],["items.service.ts",{"_index":637,"title":{},"body":{"injectables/CartItemsService.html":{},"coverage.html":{},"index.html":{}}}],["items.service.ts:111",{"_index":661,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:140",{"_index":656,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:15",{"_index":649,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:166",{"_index":682,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:202",{"_index":672,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:222",{"_index":669,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:240",{"_index":676,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:43",{"_index":653,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:69",{"_index":665,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items/cart",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"coverage.html":{}}}],["items/dto/create",{"_index":883,"title":{},"body":{"classes/CreateCartItemDto.html":{},"coverage.html":{}}}],["items/dto/update",{"_index":2425,"title":{},"body":{"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["items/entities/cartitems.entity",{"_index":519,"title":{},"body":{"entities/Cart.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"entities/Reservation.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{}}}],["items/entities/cartitems.entity.ts",{"_index":528,"title":{},"body":{"entities/CartItem.html":{},"coverage.html":{}}}],["items/entities/cartitems.entity.ts:100",{"_index":553,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:112",{"_index":538,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:124",{"_index":558,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:29",{"_index":537,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:43",{"_index":536,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:56",{"_index":543,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:67",{"_index":556,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:78",{"_index":549,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:89",{"_index":546,"title":{},"body":{"entities/CartItem.html":{}}}],["itemsforevent",{"_index":2104,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["jest",{"_index":2828,"title":{},"body":{"index.html":{}}}],["jo",{"_index":2720,"title":{},"body":{"index.html":{}}}],["john",{"_index":1145,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/SignUpDto.html":{}}}],["john.doe@example.com",{"_index":1147,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDTO.html":{},"classes/SignUpDto.html":{}}}],["join",{"_index":3398,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":522,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{}}}],["jos",{"_index":2990,"title":{},"body":{"index.html":{}}}],["json",{"_index":1851,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["json.parse(jsonstring",{"_index":1879,"title":{},"body":{"injectables/RedisService.html":{}}}],["json.stringify(detailederrors",{"_index":1589,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["json.stringify(result",{"_index":1875,"title":{},"body":{"injectables/RedisService.html":{}}}],["json.stringify(value",{"_index":1865,"title":{},"body":{"injectables/RedisService.html":{}}}],["jsonstring",{"_index":1852,"title":{},"body":{"injectables/RedisService.html":{}}}],["jwt",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.interface.ts",{"_index":2995,"title":{},"body":{"index.html":{}}}],["jwt_refresh_token_expiration",{"_index":867,"title":{},"body":{"injectables/CookieService.html":{}}}],["jwtfromrequest",{"_index":87,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["jwtpayload",{"_index":62,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["jwtservice",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TokenManagementService.html":{}}}],["jwttokens",{"_index":1640,"title":{"interfaces/JWTTokens.html":{}},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["karate",{"_index":2704,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["key",{"_index":97,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"interfaces/KeyValuePairs.html":{},"injectables/RedisService.html":{},"entities/Ticket.html":{},"interfaces/TokenConfig.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["key1",{"_index":1658,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["key2",{"_index":1660,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["key3",{"_index":1662,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["keys",{"_index":155,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["keyvaluepairs",{"_index":1653,"title":{"interfaces/KeyValuePairs.html":{}},"body":{"interfaces/KeyValuePairs.html":{},"coverage.html":{}}}],["last",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateUserDto.html":{},"entities/Event.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"classes/SignUpDto.html":{},"entities/Transaction.html":{},"entities/User.html":{},"index.html":{}}}],["lastlogin",{"_index":1125,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"entities/User.html":{}}}],["lastname",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["later",{"_index":2338,"title":{},"body":{"injectables/TokenService.html":{}}}],["layer",{"_index":3298,"title":{},"body":{"index.html":{}}}],["layouts",{"_index":2771,"title":{},"body":{"index.html":{}}}],["legend",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":951,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["level",{"_index":2556,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["levels",{"_index":2596,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["leveraging",{"_index":2746,"title":{},"body":{"index.html":{}}}],["libraries",{"_index":2817,"title":{},"body":{"index.html":{}}}],["library",{"_index":2902,"title":{},"body":{"index.html":{}}}],["libs",{"_index":2856,"title":{},"body":{"index.html":{}}}],["libs/payment/payment.module",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["libs/payment/payment.service",{"_index":796,"title":{},"body":{"modules/CommonModule.html":{},"injectables/ReservationsProcessorService.html":{}}}],["license",{"_index":2734,"title":{},"body":{"index.html":{},"properties.html":{}}}],["lifecycle",{"_index":2788,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1674,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{},"modules/ThrollerModule.html":{},"dependencies.html":{},"index.html":{}}}],["limiting",{"_index":2836,"title":{},"body":{"index.html":{}}}],["limitput",{"_index":1751,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["linked",{"_index":3150,"title":{},"body":{"index.html":{}}}],["linking",{"_index":2879,"title":{},"body":{"index.html":{}}}],["links",{"_index":3159,"title":{},"body":{"index.html":{}}}],["linting",{"_index":2799,"title":{},"body":{"index.html":{}}}],["list",{"_index":1358,"title":{},"body":{"injectables/EventSalesService.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["listens",{"_index":2914,"title":{},"body":{"index.html":{}}}],["live",{"_index":980,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{},"injectables/RedisService.html":{}}}],["load",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"injectables/CartsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["loaded",{"_index":773,"title":{},"body":{"injectables/CartsService.html":{},"modules/DatabaseModule.html":{},"injectables/UsersService.html":{}}}],["loads",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"injectables/CartsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["local",{"_index":2658,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["locally",{"_index":3409,"title":{},"body":{"index.html":{}}}],["located",{"_index":2935,"title":{},"body":{"index.html":{}}}],["log",{"_index":2551,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["log(message",{"_index":2563,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logged",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"entities/User.html":{},"index.html":{}}}],["logger",{"_index":1545,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logger(httpexceptionfilter.name",{"_index":1547,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["logger(redisservice.name",{"_index":1859,"title":{},"body":{"injectables/RedisService.html":{}}}],["logger(refreshtokenstoreservice.name",{"_index":1907,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["logger(tokenservice.name",{"_index":2314,"title":{},"body":{"injectables/TokenService.html":{}}}],["logger(transactionsservice.name",{"_index":2403,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["logger.debug(message",{"_index":2578,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logger.error(message",{"_index":2576,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logger.info(message",{"_index":2575,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logger.verbose(message",{"_index":2579,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logger.warn(message",{"_index":2577,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["loggerservice",{"_index":2573,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logging",{"_index":2548,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logic",{"_index":23,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["login",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/InvalidCredentialsException.html":{},"classes/LoginDTO.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["login(@body",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(logindto",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["login.dto.ts",{"_index":3357,"title":{},"body":{"index.html":{}}}],["logindto",{"_index":303,"title":{"classes/LoginDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDTO.html":{},"coverage.html":{}}}],["logins",{"_index":3348,"title":{},"body":{"index.html":{}}}],["logout",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["logout(@userid",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logouts",{"_index":3349,"title":{},"body":{"index.html":{}}}],["logs",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["long",{"_index":932,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["longdesc",{"_index":1241,"title":{},"body":{"entities/Event.html":{}}}],["longdescription",{"_index":920,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{}}}],["m",{"_index":3426,"title":{},"body":{"index.html":{}}}],["machine",{"_index":3411,"title":{},"body":{"index.html":{}}}],["made",{"_index":1018,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/User.html":{}}}],["main",{"_index":3438,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":2857,"title":{},"body":{"index.html":{}}}],["maintainability",{"_index":3264,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":3356,"title":{},"body":{"index.html":{}}}],["maintains",{"_index":2803,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":3275,"title":{},"body":{"index.html":{}}}],["make",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["makefile",{"_index":2848,"title":{},"body":{"index.html":{}}}],["makeinactive",{"_index":2482,"title":{},"body":{"controllers/UsersController.html":{}}}],["makeinactive(@param('id",{"_index":2509,"title":{},"body":{"controllers/UsersController.html":{}}}],["makeinactive(id",{"_index":2491,"title":{},"body":{"controllers/UsersController.html":{}}}],["making",{"_index":1002,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["manage",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"injectables/CookieService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["management",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["management.service",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TokenService.html":{}}}],["management.service.spec.ts",{"_index":3321,"title":{},"body":{"index.html":{}}}],["management.service.ts",{"_index":2261,"title":{},"body":{"injectables/TokenManagementService.html":{},"coverage.html":{},"index.html":{}}}],["management.service.ts:11",{"_index":2266,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["management.service.ts:33",{"_index":2268,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["management.service.ts:49",{"_index":2271,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["management.service.ts:66",{"_index":2275,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["manager",{"_index":2640,"title":{},"body":{"dependencies.html":{}}}],["manages",{"_index":2875,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1011,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["manipulation",{"_index":3121,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":560,"title":{},"body":{"entities/CartItem.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{}}}],["manytoone(undefined",{"_index":540,"title":{},"body":{"entities/CartItem.html":{},"entities/ReservationDetails.html":{}}}],["map",{"_index":1377,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["maps",{"_index":3268,"title":{},"body":{"index.html":{}}}],["matches",{"_index":1630,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["matching",{"_index":34,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":2406,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["math.random",{"_index":1736,"title":{},"body":{"injectables/PaymentService.html":{}}}],["math.round(baseprice",{"_index":1319,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["math.round(newbaseprice",{"_index":1332,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["maxage",{"_index":877,"title":{},"body":{"injectables/CookieService.html":{}}}],["maximum",{"_index":950,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/PaginationAndFilterDto.html":{}}}],["maxlength",{"_index":967,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["maxlength(25",{"_index":971,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["maxlength(255",{"_index":972,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["maxlength(50",{"_index":1150,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["maxlength(500",{"_index":973,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["measures",{"_index":2835,"title":{},"body":{"index.html":{}}}],["memberof",{"_index":1381,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{}}}],["merged",{"_index":3437,"title":{},"body":{"index.html":{}}}],["message",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/RedisService.html":{},"injectables/TokenService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":3480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":2165,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":144,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["methoddecorator",{"_index":3511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["migration",{"_index":126,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["migrationinterface",{"_index":134,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["migrations",{"_index":2716,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["min",{"_index":910,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/PaginationAndFilterDto.html":{},"index.html":{}}}],["min(0",{"_index":988,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{},"classes/PaginationAndFilterDto.html":{}}}],["min(1",{"_index":912,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["mind",{"_index":2842,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":1140,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["minlength",{"_index":968,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["minlength(3",{"_index":1149,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["minlength(5",{"_index":970,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["minlength(6",{"_index":1151,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["minute",{"_index":3335,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":2669,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misconfigured",{"_index":3314,"title":{},"body":{"index.html":{}}}],["mm",{"_index":815,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":3102,"title":{},"body":{"index.html":{}}}],["mocked",{"_index":3026,"title":{},"body":{"index.html":{}}}],["mocks",{"_index":3327,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2916,"title":{},"body":{"index.html":{}}}],["modifications",{"_index":3153,"title":{},"body":{"index.html":{}}}],["modify",{"_index":3083,"title":{},"body":{"index.html":{}}}],["modular",{"_index":2822,"title":{},"body":{"index.html":{}}}],["modularity",{"_index":2774,"title":{},"body":{"index.html":{}}}],["module",{"_index":177,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":179,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modules/cart",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"entities/Cart.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"entities/Reservation.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{}}}],["modules/carts/carts.module",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/ReservationsModule.html":{}}}],["modules/carts/carts.service",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/ReservationsProcessorService.html":{}}}],["modules/carts/entities/cart.entity",{"_index":561,"title":{},"body":{"entities/CartItem.html":{},"entities/User.html":{}}}],["modules/commom.module",{"_index":395,"title":{},"body":{"modules/AuthModule.html":{}}}],["modules/entities",{"_index":3109,"title":{},"body":{"index.html":{}}}],["modules/events/entities/event.entity",{"_index":563,"title":{},"body":{"entities/CartItem.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{}}}],["modules/events/event",{"_index":686,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/ReservationsProcessorService.html":{}}}],["modules/events/events.module",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"modules/CartItemsModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{}}}],["modules/reservation",{"_index":629,"title":{},"body":{"modules/CartItemsModule.html":{},"entities/Event.html":{},"modules/EventsModule.html":{},"entities/Reservation.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{}}}],["modules/reservations/entities/reservation.entity",{"_index":562,"title":{},"body":{"entities/CartItem.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["modules/reservations/reservations.module",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"modules/CartItemsModule.html":{},"modules/PaymentModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{}}}],["modules/reservations/reservations.service",{"_index":2238,"title":{},"body":{"injectables/TicketsService.html":{}}}],["modules/tickets/entities/ticket.entity",{"_index":1935,"title":{},"body":{"entities/Reservation.html":{}}}],["modules/tickets/tickets.module",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{}}}],["modules/tickets/tickets.service",{"_index":2083,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["modules/transactions/entities/transaction.entity",{"_index":1936,"title":{},"body":{"entities/Reservation.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["modules/transactions/transactions.module",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{}}}],["modules/transactions/transactions.service",{"_index":2084,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{}}}],["modules/users/dto",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["modules/users/dto/create",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["modules/users/entities/user.entity",{"_index":81,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"classes/CreateReservationDto.html":{},"injectables/EncryptionService.html":{},"modules/PaymentModule.html":{},"entities/Reservation.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{}}}],["modules/users/users.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.service",{"_index":2082,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{}}}],["month",{"_index":838,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["more",{"_index":3444,"title":{},"body":{"index.html":{}}}],["motivations",{"_index":3434,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":3105,"title":{},"body":{"index.html":{}}}],["multiplier",{"_index":3506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multipliers",{"_index":3269,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["myaccesstokensecret",{"_index":2257,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["myrefreshtokensecret",{"_index":2259,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["name",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["name.example",{"_index":3418,"title":{},"body":{"index.html":{}}}],["names",{"_index":3051,"title":{},"body":{"index.html":{}}}],["nature",{"_index":3358,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":2888,"title":{},"body":{"index.html":{}}}],["needed",{"_index":3190,"title":{},"body":{"index.html":{}}}],["needs",{"_index":3248,"title":{},"body":{"index.html":{}}}],["nest",{"_index":2719,"title":{},"body":{"index.html":{}}}],["nest.js",{"_index":2744,"title":{},"body":{"index.html":{}}}],["nested",{"_index":1768,"title":{},"body":{"injectables/QueryHelperService.html":{},"index.html":{}}}],["nestedfields",{"_index":1780,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["nestedfields.foreach((field",{"_index":1783,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["nestedfields.length",{"_index":1784,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["nestedkey",{"_index":1663,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["nestedvalue",{"_index":1664,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["nestjs",{"_index":1860,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":74,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/CookieService.html":{},"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1625,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":2629,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TokenManagementService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2451,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":30,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2635,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":2428,"title":{},"body":{"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"dependencies.html":{}}}],["nestjs/testing",{"_index":3365,"title":{},"body":{"index.html":{}}}],["nestjs/throttler",{"_index":2192,"title":{},"body":{"modules/ThrollerModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":77,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PaymentModule.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["network",{"_index":2897,"title":{},"body":{"index.html":{}}}],["networking",{"_index":2871,"title":{},"body":{"index.html":{}}}],["new",{"_index":113,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateReservationDto.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newaccesstoken",{"_index":2333,"title":{},"body":{"injectables/TokenService.html":{}}}],["newbaseprice",{"_index":1308,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["newly",{"_index":759,"title":{},"body":{"injectables/CartsService.html":{}}}],["newpassword",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDTO.html":{}}}],["newpassword123",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["newreservationdetails",{"_index":1981,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["newstrongpassword123",{"_index":2435,"title":{},"body":{"classes/UpdatePasswordDTO.html":{}}}],["newuser",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["node",{"_index":3262,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["node_env",{"_index":1556,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["non",{"_index":891,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/UpdatePasswordDTO.html":{},"index.html":{}}}],["none",{"_index":880,"title":{},"body":{"injectables/CookieService.html":{}}}],["normalizedemail",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["notfoundexception('cart",{"_index":717,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{}}}],["notfoundexception('event",{"_index":695,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["notfoundexception('no",{"_index":2159,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["notfoundexception('not",{"_index":698,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/EventSalesService.html":{}}}],["notfoundexception('price",{"_index":703,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["notfoundexception('quantity",{"_index":723,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["notfoundexception('reservation",{"_index":2245,"title":{},"body":{"injectables/TicketsService.html":{}}}],["notfoundexception('user",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(`cart",{"_index":779,"title":{},"body":{"injectables/CartsService.html":{}}}],["notfoundexception(`content",{"_index":1633,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["notfoundexception(`event",{"_index":1336,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/EventsService.html":{}}}],["notfoundexception(`reservation",{"_index":1986,"title":{},"body":{"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{}}}],["notfoundexception(`transaction",{"_index":2414,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["notfoundexception(`user",{"_index":2545,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexceptions",{"_index":3147,"title":{},"body":{"index.html":{}}}],["npm",{"_index":3380,"title":{},"body":{"index.html":{}}}],["null",{"_index":165,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/RedisService.html":{}}}],["nullable",{"_index":1945,"title":{},"body":{"entities/ReservationDetails.html":{},"entities/User.html":{}}}],["number",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/IdDto.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":116,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"guards/IsCreatorGuard.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.assign(event",{"_index":1531,"title":{},"body":{"injectables/EventsService.html":{}}}],["object.assign(user",{"_index":2544,"title":{},"body":{"injectables/UsersService.html":{}}}],["objects",{"_index":2969,"title":{},"body":{"index.html":{}}}],["observable",{"_index":2168,"title":{},"body":{"guards/RoleGuard.html":{}}}],["occurs",{"_index":1513,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["offers",{"_index":2773,"title":{},"body":{"index.html":{}}}],["offset",{"_index":1675,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{}}}],["old",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDTO.html":{}}}],["oldpassword",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDTO.html":{}}}],["oldpassword123",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdatePasswordDTO.html":{}}}],["oldrefreshtoken",{"_index":2320,"title":{},"body":{"injectables/TokenService.html":{}}}],["once",{"_index":3435,"title":{},"body":{"index.html":{}}}],["one",{"_index":755,"title":{},"body":{"injectables/CartsService.html":{}}}],["onetomany",{"_index":523,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":501,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["onetoone",{"_index":521,"title":{},"body":{"entities/Cart.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":1919,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["open",{"_index":2737,"title":{},"body":{"index.html":{}}}],["operations",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueryHelperService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["optimize",{"_index":2740,"title":{},"body":{"index.html":{}}}],["optimized",{"_index":2721,"title":{},"body":{"index.html":{}}}],["optional",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["optionally",{"_index":1635,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["options",{"_index":1746,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["orchestrates",{"_index":2918,"title":{},"body":{"index.html":{}}}],["order",{"_index":175,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["order.enum",{"_index":1698,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["order.enum.ts",{"_index":2676,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["ordercondition",{"_index":1777,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["ordering",{"_index":2940,"title":{},"body":{"index.html":{}}}],["orderparts",{"_index":1786,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["orderparts.foreach((part",{"_index":1789,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["orderparts.length",{"_index":1790,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["organized",{"_index":3116,"title":{},"body":{"index.html":{}}}],["organizes",{"_index":2900,"title":{},"body":{"index.html":{}}}],["origin",{"_index":3429,"title":{},"body":{"index.html":{}}}],["original",{"_index":3431,"title":{},"body":{"index.html":{}}}],["out",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overall",{"_index":2789,"title":{},"body":{"index.html":{}}}],["override",{"_index":1756,"title":{},"body":{"injectables/QueryHelperService.html":{},"index.html":{}}}],["overview",{"_index":2725,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner's",{"_index":1631,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["p.priceformula",{"_index":701,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["package",{"_index":2626,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":2853,"title":{},"body":{"index.html":{}}}],["packages",{"_index":2909,"title":{},"body":{"index.html":{}}}],["page",{"_index":3266,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["paginating",{"_index":2976,"title":{},"body":{"index.html":{}}}],["pagination",{"_index":1415,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["pagination.dto.ts",{"_index":2974,"title":{},"body":{"index.html":{}}}],["paginationandfilter",{"_index":2975,"title":{},"body":{"index.html":{}}}],["paginationandfilterdto",{"_index":1412,"title":{"classes/PaginationAndFilterDto.html":{}},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paginationandfilterdto.filterby",{"_index":1680,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationandfilterdto.filtervalue",{"_index":1682,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationandfilterdto.limit",{"_index":1685,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationandfilterdto.offset",{"_index":1688,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationandfilterdto.sortby",{"_index":1692,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationandfilterdto.sortorder",{"_index":1695,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationdto",{"_index":1996,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{}}}],["paginationfilterdto",{"_index":1418,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["paginationfilterdto.sortby",{"_index":2417,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["paginationfilterdto.sortorder.touppercase",{"_index":2419,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["pair",{"_index":1667,"title":{},"body":{"interfaces/KeyValuePairs.html":{},"injectables/RedisService.html":{}}}],["pairs",{"_index":1657,"title":{},"body":{"interfaces/KeyValuePairs.html":{},"index.html":{}}}],["param",{"_index":83,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{}}}],["param('cartid",{"_index":613,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/ReservationsController.html":{}}}],["param('cartitemid",{"_index":615,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["param('id",{"_index":1450,"title":{},"body":{"controllers/EventsController.html":{}}}],["param('priceformula",{"_index":1451,"title":{},"body":{"controllers/EventsController.html":{}}}],["param('userid",{"_index":2017,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{}}}],["parameter",{"_index":3341,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{}}}],["parent",{"_index":2984,"title":{},"body":{"index.html":{}}}],["parse",{"_index":1850,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["parsed",{"_index":1853,"title":{},"body":{"injectables/RedisService.html":{}}}],["parseint(duration.replace('d",{"_index":832,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["parser",{"_index":2644,"title":{},"body":{"dependencies.html":{}}}],["parsing",{"_index":1877,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["part",{"_index":3476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":3184,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":2427,"title":{},"body":{"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["partialtype(createcartitemdto",{"_index":2426,"title":{},"body":{"classes/UpdateCartItemDto.html":{}}}],["partialtype(createeventdto",{"_index":2430,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["partialtype(createreservationdetailsdto",{"_index":2439,"title":{},"body":{"classes/UpdateReservationDetailsDto.html":{}}}],["partialtype(createreservationdto",{"_index":2442,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["partialtype(createtransactiondto",{"_index":2446,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["partialtype(createuserdto",{"_index":2450,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passes",{"_index":121,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passport",{"_index":79,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":75,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["password",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"classes/LoginDTO.html":{},"modules/RedisModule.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"entities/User.html":{},"index.html":{}}}],["password.dto",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto.ts",{"_index":2432,"title":{},"body":{"classes/UpdatePasswordDTO.html":{},"coverage.html":{},"index.html":{}}}],["password.dto.ts:21",{"_index":2436,"title":{},"body":{"classes/UpdatePasswordDTO.html":{}}}],["password.dto.ts:35",{"_index":2434,"title":{},"body":{"classes/UpdatePasswordDTO.html":{}}}],["password123",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EncryptionService.html":{},"classes/LoginDTO.html":{}}}],["passwordhash",{"_index":1119,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"entities/User.html":{}}}],["passwords",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["patch",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["patch(':cartid/items/:cartitemid",{"_index":601,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["patch(':id",{"_index":1455,"title":{},"body":{"controllers/EventsController.html":{},"guards/IsCreatorGuard.html":{},"controllers/UsersController.html":{}}}],["patch('change",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('make",{"_index":2508,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CookieService.html":{},"modules/DatabaseModule.html":{},"index.html":{}}}],["paths",{"_index":3203,"title":{},"body":{"index.html":{}}}],["payload",{"_index":64,"title":{"interfaces/Payload.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"index.html":{}}}],["payload.interface.ts",{"_index":2994,"title":{},"body":{"index.html":{}}}],["payload.role",{"_index":2335,"title":{},"body":{"injectables/TokenService.html":{}}}],["payload.sub",{"_index":109,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/TokenService.html":{}}}],["payload.version",{"_index":111,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/TokenService.html":{}}}],["payloads",{"_index":3324,"title":{},"body":{"index.html":{}}}],["payment",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableTransactions1712661230452.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["payment.interface.ts",{"_index":2991,"title":{},"body":{"index.html":{}}}],["payment.module.ts",{"_index":2923,"title":{},"body":{"index.html":{}}}],["payment.service",{"_index":1707,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.service.spec.ts",{"_index":2926,"title":{},"body":{"index.html":{}}}],["payment.service.ts",{"_index":2930,"title":{},"body":{"index.html":{}}}],["paymentid",{"_index":992,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateTableTransactions1712661230452.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{}}}],["paymentmodule",{"_index":193,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentresponse",{"_index":1719,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["paymentresult",{"_index":1708,"title":{"interfaces/PaymentResult.html":{}},"body":{"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["paymentresult.status",{"_index":2092,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{}}}],["payments",{"_index":2050,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["paymentservice",{"_index":787,"title":{"injectables/PaymentService.html":{}},"body":{"modules/CommonModule.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"injectables/ReservationsProcessorService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["paymentservice.processpayment(100",{"_index":1728,"title":{},"body":{"injectables/PaymentService.html":{}}}],["per",{"_index":3334,"title":{},"body":{"index.html":{}}}],["perform",{"_index":3024,"title":{},"body":{"index.html":{}}}],["performance",{"_index":2722,"title":{},"body":{"index.html":{}}}],["performs",{"_index":3046,"title":{},"body":{"index.html":{}}}],["periods",{"_index":3323,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":2960,"title":{},"body":{"index.html":{}}}],["persistent",{"_index":2872,"title":{},"body":{"index.html":{}}}],["pg",{"_index":2660,"title":{},"body":{"dependencies.html":{}}}],["pg_type",{"_index":3491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pipes/interceptors/filters",{"_index":2913,"title":{},"body":{"index.html":{}}}],["plain",{"_index":1208,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["platform",{"_index":3086,"title":{},"body":{"index.html":{}}}],["plays",{"_index":2936,"title":{},"body":{"index.html":{}}}],["please",{"_index":1603,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"injectables/TokenService.html":{}}}],["plus",{"_index":3328,"title":{},"body":{"index.html":{}}}],["point",{"_index":2891,"title":{},"body":{"index.html":{}}}],["policies",{"_index":3297,"title":{},"body":{"index.html":{}}}],["port",{"_index":1168,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"index.html":{}}}],["positive",{"_index":901,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["possible",{"_index":3500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"index.html":{}}}],["post('/:cartid",{"_index":1993,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["post('/items",{"_index":577,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["post('access",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('create",{"_index":1446,"title":{},"body":{"controllers/EventsController.html":{}}}],["post('login",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":1165,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgresql",{"_index":1158,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["powerful",{"_index":2736,"title":{},"body":{"index.html":{}}}],["pr",{"_index":3430,"title":{},"body":{"index.html":{}}}],["precision",{"_index":1226,"title":{},"body":{"entities/Event.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{}}}],["predefined",{"_index":1294,"title":{},"body":{"injectables/EventPricesService.html":{},"index.html":{}}}],["prefix",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["presenting",{"_index":2980,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":2802,"title":{},"body":{"index.html":{}}}],["preventduplicatereservation",{"_index":2041,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["preventduplicatereservation(item",{"_index":2074,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["prevents",{"_index":2076,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["price",{"_index":531,"title":{},"body":{"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["price.entity",{"_index":1271,"title":{},"body":{"entities/Event.html":{},"injectables/EventPricesService.html":{},"modules/EventsModule.html":{}}}],["price.entity.ts",{"_index":1274,"title":{},"body":{"entities/EventPrice.html":{},"coverage.html":{},"index.html":{}}}],["price.entity.ts:22",{"_index":1278,"title":{},"body":{"entities/EventPrice.html":{}}}],["price.entity.ts:36",{"_index":1276,"title":{},"body":{"entities/EventPrice.html":{}}}],["price.entity.ts:53",{"_index":1280,"title":{},"body":{"entities/EventPrice.html":{}}}],["price.entity.ts:64",{"_index":1279,"title":{},"body":{"entities/EventPrice.html":{}}}],["price.event",{"_index":1244,"title":{},"body":{"entities/Event.html":{}}}],["price.price",{"_index":1323,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["pricedetail",{"_index":699,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["pricedetail.price",{"_index":705,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["priceformula",{"_index":532,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["priceformulaenum",{"_index":548,"title":{},"body":{"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["priceformulaenum.duo",{"_index":1373,"title":{},"body":{"injectables/EventSalesService.html":{},"miscellaneous/variables.html":{}}}],["priceformulaenum.family",{"_index":1374,"title":{},"body":{"injectables/EventSalesService.html":{},"miscellaneous/variables.html":{}}}],["priceformulaenum.fixed",{"_index":894,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/EventPrice.html":{}}}],["priceformulaenum.solo",{"_index":1352,"title":{},"body":{"injectables/EventSalesService.html":{},"miscellaneous/variables.html":{}}}],["priceformulaenum.standard",{"_index":1306,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["pricerecord",{"_index":1333,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["pricerecord.price",{"_index":1331,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["pricerecord.priceformula",{"_index":1330,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices",{"_index":651,"title":{},"body":{"injectables/CartItemsService.html":{},"entities/Event.html":{},"injectables/EventPricesService.html":{},"index.html":{}}}],["prices.migration.spec.ts",{"_index":3246,"title":{},"body":{"index.html":{}}}],["prices.service",{"_index":687,"title":{},"body":{"injectables/CartItemsService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["prices.service.spec.ts",{"_index":3145,"title":{},"body":{"index.html":{}}}],["prices.service.ts",{"_index":1283,"title":{},"body":{"injectables/EventPricesService.html":{},"coverage.html":{},"index.html":{}}}],["prices.service.ts:114",{"_index":1298,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices.service.ts:138",{"_index":1301,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices.service.ts:14",{"_index":1290,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices.service.ts:34",{"_index":1293,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices.service.ts:59",{"_index":1304,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices.service.ts:86",{"_index":1309,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices_formula",{"_index":1313,"title":{},"body":{"injectables/EventPricesService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prices_formula.find(f",{"_index":1328,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["pricing",{"_index":550,"title":{},"body":{"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/EventPrice.html":{},"entities/ReservationDetails.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["primary",{"_index":1033,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["primarygeneratedcolumn",{"_index":520,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('increment",{"_index":497,"title":{},"body":{"entities/Cart.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["print",{"_index":3472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":85,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/CookieService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["probability",{"_index":1733,"title":{},"body":{"injectables/PaymentService.html":{}}}],["process",{"_index":1359,"title":{},"body":{"injectables/EventSalesService.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["process.env.node_env",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["processes",{"_index":1356,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/PaymentService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["processeventticketsandrevenue",{"_index":1342,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["processeventticketsandrevenue(items",{"_index":1354,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["processing",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsService.html":{},"index.html":{}}}],["processor.service",{"_index":2032,"title":{},"body":{"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{}}}],["processor.service.spec.ts",{"_index":3088,"title":{},"body":{"index.html":{}}}],["processor.service.ts",{"_index":2035,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"coverage.html":{},"index.html":{}}}],["processor.service.ts:120",{"_index":2060,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:154",{"_index":2070,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:179",{"_index":2064,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:202",{"_index":2075,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:223",{"_index":2052,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:23",{"_index":2048,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:60",{"_index":2080,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:94",{"_index":2057,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processpayment",{"_index":1724,"title":{},"body":{"injectables/PaymentService.html":{}}}],["processpayment(carttotal",{"_index":1725,"title":{},"body":{"injectables/PaymentService.html":{}}}],["processpaymentresponse",{"_index":1718,"title":{"interfaces/ProcessPaymentResponse.html":{}},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"coverage.html":{}}}],["processuserreservation",{"_index":2042,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processuserreservation(userid",{"_index":2079,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["prod_env",{"_index":862,"title":{},"body":{"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1179,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["productivity",{"_index":2790,"title":{},"body":{"index.html":{}}}],["profile",{"_index":2540,"title":{},"body":{"injectables/UsersService.html":{}}}],["progress",{"_index":3206,"title":{},"body":{"index.html":{}}}],["project",{"_index":2731,"title":{},"body":{"index.html":{}}}],["project's",{"_index":3245,"title":{},"body":{"index.html":{}}}],["projects",{"_index":2881,"title":{},"body":{"index.html":{}}}],["promise",{"_index":71,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promotes",{"_index":2823,"title":{},"body":{"index.html":{}}}],["proper",{"_index":3060,"title":{},"body":{"index.html":{}}}],["properties",{"_index":493,"title":{"properties.html":{}},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"index.html":{},"properties.html":{}}}],["property",{"_index":118,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"index.html":{}}}],["protect",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["protected",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"index.html":{}}}],["provide",{"_index":1803,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["provided",{"_index":904,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["provider",{"_index":736,"title":{},"body":{"modules/CartsModule.html":{},"modules/ReservationDetailsModule.html":{},"index.html":{}}}],["providers",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":1800,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["providing",{"_index":2901,"title":{},"body":{"index.html":{}}}],["prs",{"_index":3397,"title":{},"body":{"index.html":{}}}],["prunes",{"_index":2885,"title":{},"body":{"index.html":{}}}],["public",{"_index":135,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["pull",{"_index":3395,"title":{},"body":{"index.html":{}}}],["purchase",{"_index":2198,"title":{},"body":{"entities/Ticket.html":{},"index.html":{}}}],["purchasekey",{"_index":1091,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"injectables/EncryptionService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{}}}],["purposes",{"_index":1811,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["push",{"_index":3427,"title":{},"body":{"index.html":{}}}],["qr",{"_index":1193,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/Ticket.html":{},"index.html":{}}}],["qrcode",{"_index":1094,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"injectables/EncryptionService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{}}}],["qrcode.todataurl(securekey",{"_index":1223,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["quality",{"_index":2797,"title":{},"body":{"index.html":{}}}],["quantities",{"_index":3071,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":533,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"index.html":{}}}],["quantityavailable",{"_index":921,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"injectables/EventsService.html":{}}}],["quantityperformula",{"_index":1343,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["quantityperformula(priceformula",{"_index":1360,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["quantitysold",{"_index":1065,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"injectables/EventsService.html":{}}}],["quantitytodeduct",{"_index":1391,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["queries",{"_index":149,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["query",{"_index":1439,"title":{},"body":{"controllers/EventsController.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["queryhelper",{"_index":1473,"title":{},"body":{"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["queryhelperservice",{"_index":790,"title":{"injectables/QueryHelperService.html":{}},"body":{"modules/CommonModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["queryhelperservice.buildqueryoptions(paginationdto",{"_index":1755,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["queryhelperservice.buildwherecondition('name",{"_index":1762,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["queryhelperservice.createnestedorder('address.city",{"_index":1770,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["querying",{"_index":2979,"title":{},"body":{"index.html":{}}}],["queryoptions",{"_index":1515,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["queryoptions.order",{"_index":2418,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["queryoptions.relations",{"_index":2151,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["queryoptions.select",{"_index":2152,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["queryoptions.where",{"_index":2150,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["queryrunner",{"_index":139,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["queryrunner.down(queryrunner",{"_index":145,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["queryrunner.gettable('cart",{"_index":1043,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{}}}],["queryrunner.gettable('cart_items",{"_index":1030,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{}}}],["queryrunner.gettable('event_prices",{"_index":1050,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{}}}],["queryrunner.gettable('events",{"_index":1061,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{}}}],["queryrunner.gettable('reservation_details",{"_index":1075,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{}}}],["queryrunner.gettable('reservations",{"_index":1083,"title":{},"body":{"classes/CreateTableReservations1712661230451.html":{}}}],["queryrunner.gettable('tickets",{"_index":1090,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{}}}],["queryrunner.gettable('transactions",{"_index":1103,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{}}}],["queryrunner.gettable('users",{"_index":1117,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{}}}],["queryrunner.query",{"_index":156,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["queryrunner.query(`drop",{"_index":1036,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["queryrunner.query(does_enum_category_type_exist",{"_index":1062,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{}}}],["queryrunner.query(does_enum_price_formule_type_exist",{"_index":1031,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{}}}],["queryrunner.query(does_enum_status_reservation_exist",{"_index":1104,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{}}}],["queryrunner.query(does_enum_user_role_exist",{"_index":1118,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{}}}],["queryrunner.up(queryrunner",{"_index":154,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["questions",{"_index":3404,"title":{},"body":{"index.html":{}}}],["random",{"_index":1735,"title":{},"body":{"injectables/PaymentService.html":{}}}],["rate",{"_index":1742,"title":{},"body":{"injectables/PaymentService.html":{},"dependencies.html":{},"index.html":{}}}],["readability",{"_index":2806,"title":{},"body":{"index.html":{}}}],["readme.md",{"_index":2849,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateUserDto.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["readonlyarray",{"_index":3505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recalculate",{"_index":724,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["record",{"_index":1372,"title":{},"body":{"injectables/EventSalesService.html":{},"miscellaneous/variables.html":{}}}],["records",{"_index":1774,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["redis",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"index.html":{}}}],["redis.interface.ts",{"_index":1655,"title":{},"body":{"interfaces/KeyValuePairs.html":{},"coverage.html":{},"index.html":{}}}],["redis.interface.ts:8",{"_index":1666,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["redis.module.ts",{"_index":3216,"title":{},"body":{"index.html":{}}}],["redis.service",{"_index":1798,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis.service.spec.ts",{"_index":3217,"title":{},"body":{"index.html":{}}}],["redis.service.ts",{"_index":3213,"title":{},"body":{"index.html":{}}}],["redis_client",{"_index":1795,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["redisclient",{"_index":1818,"title":{},"body":{"injectables/RedisService.html":{}}}],["redismodule",{"_index":194,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisservice",{"_index":788,"title":{"injectables/RedisService.html":{}},"body":{"modules/CommonModule.html":{},"injectables/EventsService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"coverage.html":{},"overview.html":{}}}],["redisservice.clearcacheevent",{"_index":1828,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisservice.clearcacheevent(123",{"_index":1827,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisservice.del('user:1",{"_index":1831,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisservice.fetchcacheddata('user:1",{"_index":1840,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisservice.get('user:1",{"_index":1846,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisservice.set('user:1",{"_index":1856,"title":{},"body":{"injectables/RedisService.html":{}}}],["refer",{"_index":3445,"title":{},"body":{"index.html":{}}}],["reference",{"_index":636,"title":{},"body":{"modules/CartItemsModule.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["references",{"_index":161,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"index.html":{}}}],["referential",{"_index":3236,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":2663,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1617,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["refresh",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["refreshed",{"_index":2327,"title":{},"body":{"injectables/TokenService.html":{}}}],["refreshes",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["refreshing",{"_index":1886,"title":{},"body":{"classes/RefreshTokenDto.html":{},"index.html":{}}}],["refreshtoken",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["refreshtoken(@req",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(req",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["refreshtokendto",{"_index":1883,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{},"index.html":{}}}],["refreshtokenexpiration",{"_index":869,"title":{},"body":{"injectables/CookieService.html":{},"interfaces/TokenConfig.html":{}}}],["refreshtokenfromcookie",{"_index":2331,"title":{},"body":{"injectables/TokenService.html":{}}}],["refreshtokensecret",{"_index":2256,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["refreshtokenstoreservice",{"_index":383,"title":{"injectables/RefreshTokenStoreService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtokenstoreservice.removerefreshtokenredis(1",{"_index":1899,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["refreshtokenstoreservice.storerefreshtokeninredis(1",{"_index":1903,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["refreshtokenstoreservice.verifyrefreshtokeninredis(1",{"_index":1906,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["refreshtokenttl",{"_index":872,"title":{},"body":{"injectables/CookieService.html":{}}}],["regex",{"_index":3367,"title":{},"body":{"index.html":{}}}],["register",{"_index":397,"title":{},"body":{"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/EventsModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["registering",{"_index":3195,"title":{},"body":{"index.html":{}}}],["registers",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["registration",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["registrations",{"_index":3347,"title":{},"body":{"index.html":{}}}],["reinforcing",{"_index":2953,"title":{},"body":{"index.html":{}}}],["reject",{"_index":1739,"title":{},"body":{"injectables/PaymentService.html":{}}}],["rejected",{"_index":2711,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rejection",{"_index":2934,"title":{},"body":{"index.html":{}}}],["related",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["relations",{"_index":708,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["relationships",{"_index":3049,"title":{},"body":{"index.html":{}}}],["reliability",{"_index":3042,"title":{},"body":{"index.html":{}}}],["reliable",{"_index":2832,"title":{},"body":{"index.html":{}}}],["relies",{"_index":2838,"title":{},"body":{"index.html":{}}}],["reload",{"_index":2784,"title":{},"body":{"index.html":{}}}],["remarks",{"_index":1159,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["removal",{"_index":3063,"title":{},"body":{"index.html":{}}}],["remove",{"_index":573,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"index.html":{}}}],["remove(@param('id",{"_index":1459,"title":{},"body":{"controllers/EventsController.html":{}}}],["remove(id",{"_index":1429,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["remove(userid",{"_index":594,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["removeallitemfromcart",{"_index":642,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["removeallitemfromcart(userid",{"_index":668,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["removed",{"_index":598,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/RefreshTokenStoreService.html":{}}}],["removeditem",{"_index":673,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["removeoneitemfromcart",{"_index":643,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["removeoneitemfromcart(userid",{"_index":671,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["removerefreshtokenredis",{"_index":1891,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["removerefreshtokenredis(userid",{"_index":1897,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["removes",{"_index":597,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/RefreshTokenStoreService.html":{},"index.html":{}}}],["removeuseractive",{"_index":2518,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeuseractive(userid",{"_index":2528,"title":{},"body":{"injectables/UsersService.html":{}}}],["removing",{"_index":2054,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["report",{"_index":3391,"title":{},"body":{"index.html":{}}}],["repositories",{"_index":3013,"title":{},"body":{"index.html":{}}}],["repository",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository's",{"_index":2895,"title":{},"body":{"index.html":{}}}],["repository.example",{"_index":3428,"title":{},"body":{"index.html":{}}}],["repository.specifies",{"_index":3167,"title":{},"body":{"index.html":{}}}],["repositorys",{"_index":2874,"title":{},"body":{"index.html":{}}}],["represent",{"_index":2993,"title":{},"body":{"index.html":{}}}],["representing",{"_index":491,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"interfaces/TokenConfig.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["req",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CookieService.html":{},"injectables/TokenService.html":{}}}],["req.cookies['refreshtoken",{"_index":865,"title":{},"body":{"injectables/CookieService.html":{}}}],["request",{"_index":117,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"injectables/TokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.iscreator",{"_index":1638,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["request.method",{"_index":1583,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.params.id",{"_index":1629,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["request.url",{"_index":1581,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1627,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["request.user?.userid",{"_index":3517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":2972,"title":{},"body":{"index.html":{}}}],["required",{"_index":890,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDTO.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"index.html":{}}}],["requiredrole",{"_index":2171,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requirements",{"_index":3371,"title":{},"body":{"index.html":{}}}],["res",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"injectables/TokenService.html":{}}}],["res.clearcookie('refreshtoken",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CookieService.html":{}}}],["res.cookie('refreshtoken",{"_index":882,"title":{},"body":{"injectables/CookieService.html":{}}}],["res.json",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.status(200).send('logged",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.status(200).send('user",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.status(httpstatus.ok).json",{"_index":2328,"title":{},"body":{"injectables/TokenService.html":{}}}],["res.status(status).json",{"_index":2346,"title":{},"body":{"injectables/TokenService.html":{}}}],["reservation",{"_index":244,"title":{"entities/Reservation.html":{}},"body":{"modules/AppModule.html":{},"entities/CartItem.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"entities/Event.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["reservation.cartitem",{"_index":555,"title":{},"body":{"entities/CartItem.html":{},"entities/Reservation.html":{}}}],["reservation.createdat",{"_index":1918,"title":{},"body":{"entities/Reservation.html":{}}}],["reservation.dto",{"_index":2443,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["reservation.dto.ts",{"_index":991,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{},"index.html":{}}}],["reservation.dto.ts:22",{"_index":1001,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:36",{"_index":994,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:50",{"_index":1000,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:64",{"_index":999,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.entity.ts",{"_index":3114,"title":{},"body":{"index.html":{}}}],["reservation.enum",{"_index":1717,"title":{},"body":{"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{}}}],["reservation.enum.ts",{"_index":2678,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["reservation.reservationdetails",{"_index":1922,"title":{},"body":{"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/TransactionsService.html":{}}}],["reservation.reservationdetails)@joincolumn({name",{"_index":1952,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservation.reservationdetails.event",{"_index":2416,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["reservation.reservationid",{"_index":1983,"title":{},"body":{"injectables/ReservationDetailsService.html":{},"injectables/TicketsService.html":{}}}],["reservation.ticket",{"_index":1926,"title":{},"body":{"entities/Reservation.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{}}}],["reservation.ticket)@joincolumn({name",{"_index":2202,"title":{},"body":{"entities/Ticket.html":{}}}],["reservation.transaction",{"_index":1929,"title":{},"body":{"entities/Reservation.html":{},"entities/Transaction.html":{}}}],["reservation.updatedat",{"_index":1931,"title":{},"body":{"entities/Reservation.html":{}}}],["reservation.user",{"_index":1934,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["reservation.user.userid",{"_index":2160,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{}}}],["reservation1",{"_index":1720,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["reservation2",{"_index":1721,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["reservation_details",{"_index":1070,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"index.html":{}}}],["reservationdetails",{"_index":628,"title":{"entities/ReservationDetails.html":{}},"body":{"modules/CartItemsModule.html":{},"entities/Event.html":{},"modules/EventsModule.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["reservationdetails.createdat",{"_index":1944,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetails.event",{"_index":1254,"title":{},"body":{"entities/Event.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationsService.html":{}}}],["reservationdetails.price",{"_index":1949,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetails.priceformula",{"_index":1951,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetails.reservation",{"_index":1939,"title":{},"body":{"entities/Reservation.html":{},"entities/ReservationDetails.html":{}}}],["reservationdetails.reservation)@joincolumn({name",{"_index":1920,"title":{},"body":{"entities/Reservation.html":{}}}],["reservationdetails.shortdescription",{"_index":1956,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetails.title",{"_index":1958,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetails.updatedat",{"_index":1960,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetailsid",{"_index":1076,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{}}}],["reservationdetailsmodule",{"_index":1962,"title":{"modules/ReservationDetailsModule.html":{}},"body":{"modules/ReservationDetailsModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["reservationdetailsrepository",{"_index":1972,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["reservationdetailsservice",{"_index":624,"title":{"injectables/ReservationDetailsService.html":{}},"body":{"modules/CartItemsModule.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TransactionsModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["reservationdetailsservice.createreservationdetailsfromreservation(reservation",{"_index":1975,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["reservationdetailsservice.findone(1",{"_index":1977,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["reservationid",{"_index":172,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{}}}],["reservationprocessorservice",{"_index":2120,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationrepository",{"_index":2049,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["reservations",{"_index":130,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"entities/User.html":{},"index.html":{}}}],["reservations.controller",{"_index":2031,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["reservations.controller.spec.ts",{"_index":3094,"title":{},"body":{"index.html":{}}}],["reservations.controller.ts",{"_index":3110,"title":{},"body":{"index.html":{}}}],["reservations.length",{"_index":2158,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservations.migration.spec.ts",{"_index":3242,"title":{},"body":{"index.html":{}}}],["reservations.module.ts",{"_index":3108,"title":{},"body":{"index.html":{}}}],["reservations.push(...(await",{"_index":2096,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservations.service",{"_index":2013,"title":{},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{}}}],["reservations.service.spec.ts",{"_index":3099,"title":{},"body":{"index.html":{}}}],["reservations.service.ts",{"_index":3106,"title":{},"body":{"index.html":{}}}],["reservations/1",{"_index":1995,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["reservations/1/find",{"_index":1999,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["reservations/find",{"_index":2004,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["reservationscontroller",{"_index":1987,"title":{"controllers/ReservationsController.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"coverage.html":{}}}],["reservationsdetails",{"_index":1225,"title":{},"body":{"entities/Event.html":{}}}],["reservationservice",{"_index":2225,"title":{},"body":{"injectables/TicketsService.html":{}}}],["reservationsmodule",{"_index":195,"title":{"modules/ReservationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartItemsModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["reservationsprocessorservice",{"_index":2029,"title":{"injectables/ReservationsProcessorService.html":{}},"body":{"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"coverage.html":{},"overview.html":{}}}],["reservationsprocessorservice.cleanupafterpayment(1",{"_index":2055,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.createreservationsforallcartitems(cartitems",{"_index":2058,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.createreservationsforeachcartitem(cartitem",{"_index":2062,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.finalizebooking(cartitems",{"_index":2068,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.initiatereservation(user",{"_index":2072,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.preventduplicatereservation(cartitem",{"_index":2078,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.processuserreservation(1",{"_index":2081,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsservice",{"_index":2012,"title":{"injectables/ReservationsService.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["reservationsservice.findall(1",{"_index":2124,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.findalladmin(paginationfilterdto",{"_index":2127,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.findalldata(1",{"_index":2129,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.findone(1",{"_index":2132,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.generatereservation(1",{"_index":2135,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.getselectfieldsfindall",{"_index":2139,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.getselectfieldsfindalladmin",{"_index":2141,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.savereservation(reservation",{"_index":2146,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reserved",{"_index":996,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reset",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":2214,"title":{},"body":{"modules/TicketsModule.html":{}}}],["resolves",{"_index":3161,"title":{},"body":{"index.html":{}}}],["resource",{"_index":2833,"title":{},"body":{"index.html":{}}}],["resources",{"_index":3446,"title":{},"body":{"index.html":{}}}],["respective",{"_index":3510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["responding",{"_index":3031,"title":{},"body":{"index.html":{}}}],["response",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["response.status(status).json(errorresponse",{"_index":1590,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsemessage",{"_index":1565,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responses",{"_index":2470,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["restricting",{"_index":3124,"title":{},"body":{"index.html":{}}}],["result",{"_index":1487,"title":{},"body":{"injectables/EventsService.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":33,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":3012,"title":{},"body":{"index.html":{}}}],["retrievals",{"_index":3189,"title":{},"body":{"index.html":{}}}],["retrieve",{"_index":1028,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["retrieves",{"_index":587,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["retrieving",{"_index":1514,"title":{},"body":{"injectables/EventsService.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["return",{"_index":115,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returning",{"_index":2928,"title":{},"body":{"index.html":{}}}],["returns",{"_index":70,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{}}}],["reuse",{"_index":2824,"title":{},"body":{"index.html":{}}}],["revenue",{"_index":1258,"title":{},"body":{"entities/Event.html":{},"injectables/EventSalesService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["revenuegenerated",{"_index":1066,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"injectables/EventsService.html":{}}}],["reverse",{"_index":174,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["revert",{"_index":3221,"title":{},"body":{"index.html":{}}}],["reverting",{"_index":2910,"title":{},"body":{"index.html":{}}}],["reverts",{"_index":141,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["review",{"_index":3396,"title":{},"body":{"index.html":{}}}],["reviewed",{"_index":3436,"title":{},"body":{"index.html":{}}}],["roadmap",{"_index":2732,"title":{},"body":{"index.html":{}}}],["robust",{"_index":2753,"title":{},"body":{"index.html":{}}}],["robustness",{"_index":3104,"title":{},"body":{"index.html":{}}}],["role",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"controllers/EventsController.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["role(userrole.admin",{"_index":1445,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["role(userrole.admin)@useguards(accesstokenguard",{"_index":1399,"title":{},"body":{"controllers/EventsController.html":{}}}],["role(userrole.admin)@useguards(roleguard)@get('get",{"_index":2484,"title":{},"body":{"controllers/UsersController.html":{}}}],["role.decorator.ts",{"_index":2956,"title":{},"body":{"index.html":{}}}],["role.enum",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/EventsController.html":{},"interfaces/Payload.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["role.enum.ts",{"_index":2680,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["role.guard.spec.ts",{"_index":3301,"title":{},"body":{"index.html":{}}}],["role.guard.ts",{"_index":3303,"title":{},"body":{"index.html":{}}}],["role=userrole.user",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["role_key",{"_index":2170,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguard",{"_index":1441,"title":{"guards/RoleGuard.html":{}},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["roleguard)@delete(':id",{"_index":1430,"title":{},"body":{"controllers/EventsController.html":{}}}],["roleguard)@patch(':id",{"_index":1435,"title":{},"body":{"controllers/EventsController.html":{}}}],["roleguard)@post('create",{"_index":1400,"title":{},"body":{"controllers/EventsController.html":{}}}],["roleguard.canactivate(context",{"_index":2167,"title":{},"body":{"guards/RoleGuard.html":{}}}],["roles",{"_index":2177,"title":{},"body":{"guards/RoleGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["root",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["route",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"index.html":{}}}],["rowing",{"_index":2697,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rules",{"_index":2800,"title":{},"body":{"index.html":{}}}],["run",{"_index":148,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["runmigrations",{"_index":2600,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["runner.ts",{"_index":2599,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["running",{"_index":2892,"title":{},"body":{"index.html":{}}}],["runs",{"_index":152,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"miscellaneous/functions.html":{}}}],["rxjs",{"_index":2169,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{}}}],["safeguarding",{"_index":3308,"title":{},"body":{"index.html":{}}}],["safely",{"_index":1849,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["safeparse",{"_index":1815,"title":{},"body":{"injectables/RedisService.html":{}}}],["safeparse(jsonstring",{"_index":1847,"title":{},"body":{"injectables/RedisService.html":{}}}],["sailing",{"_index":2698,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sales",{"_index":1339,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["sales.service",{"_index":1466,"title":{},"body":{"modules/EventsModule.html":{},"injectables/ReservationsProcessorService.html":{}}}],["sales.service.spec.ts",{"_index":3142,"title":{},"body":{"index.html":{}}}],["sales.service.ts",{"_index":1338,"title":{},"body":{"injectables/EventSalesService.html":{},"coverage.html":{},"index.html":{}}}],["sales.service.ts:114",{"_index":1361,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["sales.service.ts:23",{"_index":1376,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["sales.service.ts:27",{"_index":1347,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["sales.service.ts:44",{"_index":1355,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["sales.service.ts:67",{"_index":1369,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["sales.service.ts:88",{"_index":1349,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["same",{"_index":1504,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ReservationsProcessorService.html":{}}}],["samesite",{"_index":879,"title":{},"body":{"injectables/CookieService.html":{}}}],["sanitizes",{"_index":2982,"title":{},"body":{"index.html":{}}}],["satisfies",{"_index":3503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["save",{"_index":644,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ReservationsService.html":{},"index.html":{}}}],["save(cart",{"_index":760,"title":{},"body":{"injectables/CartsService.html":{}}}],["save(item",{"_index":675,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["saved",{"_index":680,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ReservationsService.html":{}}}],["savedcart",{"_index":762,"title":{},"body":{"injectables/CartsService.html":{}}}],["saveditem",{"_index":678,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["savedreservation",{"_index":2145,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["savedtransaction",{"_index":2408,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["savereservation",{"_index":2119,"title":{},"body":{"injectables/ReservationsService.html":{},"index.html":{}}}],["savereservation(reservation",{"_index":2143,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["saves",{"_index":677,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ReservationsService.html":{}}}],["saving",{"_index":3103,"title":{},"body":{"index.html":{}}}],["scalability",{"_index":2820,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":2921,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1227,"title":{},"body":{"entities/Event.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{}}}],["scaling",{"_index":2846,"title":{},"body":{"index.html":{}}}],["scenarios",{"_index":2927,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1010,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"index.html":{}}}],["seamless",{"_index":2880,"title":{},"body":{"index.html":{}}}],["seamlessly",{"_index":3064,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":829,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"injectables/EventsService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["secret",{"_index":96,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"index.html":{}}}],["secretkey",{"_index":2284,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["secretorkey",{"_index":94,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["secrets",{"_index":2988,"title":{},"body":{"index.html":{}}}],["secure",{"_index":875,"title":{},"body":{"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"entities/Ticket.html":{},"index.html":{}}}],["securekey",{"_index":1093,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"injectables/EncryptionService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{}}}],["securely",{"_index":3037,"title":{},"body":{"index.html":{}}}],["securing",{"_index":3311,"title":{},"body":{"index.html":{}}}],["security",{"_index":1087,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"index.html":{}}}],["security/auth/auth.module",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["security/auth/strategies/access",{"_index":2515,"title":{},"body":{"modules/UsersModule.html":{}}}],["security/cookie/cookie.service",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["security/encryption/encryption.service",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{},"modules/CommonModule.html":{},"injectables/TicketsService.html":{}}}],["security/guards",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["security/throttler/throttler.module",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["security/token/refreshtoken",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["security/token/token",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{}}}],["security/token/token.service",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["select",{"_index":1512,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["selected",{"_index":1410,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["selectfields",{"_index":2138,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["selection",{"_index":3368,"title":{},"body":{"index.html":{}}}],["selects",{"_index":3175,"title":{},"body":{"index.html":{}}}],["sends",{"_index":2298,"title":{},"body":{"injectables/TokenService.html":{}}}],["sensitive",{"_index":3053,"title":{},"body":{"index.html":{}}}],["separation",{"_index":2825,"title":{},"body":{"index.html":{}}}],["serial",{"_index":1032,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["server",{"_index":1807,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["servers",{"_index":2785,"title":{},"body":{"index.html":{}}}],["service",{"_index":58,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["services",{"_index":793,"title":{},"body":{"modules/CommonModule.html":{},"modules/ReservationsModule.html":{},"index.html":{}}}],["session",{"_index":3331,"title":{},"body":{"index.html":{}}}],["set",{"_index":164,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["set(cartitems.map(item",{"_index":2102,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["set(key",{"_index":1854,"title":{},"body":{"injectables/RedisService.html":{}}}],["setmetadata",{"_index":2957,"title":{},"body":{"index.html":{}}}],["setmetadata(role_key",{"_index":3512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setrefreshtokencookie",{"_index":845,"title":{},"body":{"injectables/CookieService.html":{}}}],["setrefreshtokencookie(res",{"_index":858,"title":{},"body":{"injectables/CookieService.html":{}}}],["sets",{"_index":860,"title":{},"body":{"injectables/CookieService.html":{},"index.html":{}}}],["setting",{"_index":1858,"title":{},"body":{"injectables/RedisService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["settings",{"_index":3319,"title":{},"body":{"index.html":{}}}],["setup",{"_index":1112,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["setups",{"_index":2786,"title":{},"body":{"index.html":{}}}],["several",{"_index":3389,"title":{},"body":{"index.html":{}}}],["share",{"_index":3400,"title":{},"body":{"index.html":{}}}],["shared",{"_index":3006,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":492,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableCarts1712661221574.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"index.html":{}}}],["short",{"_index":931,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/Event.html":{},"entities/ReservationDetails.html":{}}}],["shortdesc",{"_index":1261,"title":{},"body":{"entities/Event.html":{}}}],["shortdescription",{"_index":922,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/Event.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["sign",{"_index":2181,"title":{},"body":{"classes/SignUpDto.html":{},"interfaces/TokenConfig.html":{},"index.html":{}}}],["signing",{"_index":3344,"title":{},"body":{"index.html":{}}}],["signup",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["signup(createuserdto",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup.dto.ts",{"_index":3354,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":2179,"title":{"classes/SignUpDto.html":{}},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["simplifies",{"_index":2752,"title":{},"body":{"index.html":{}}}],["simulate",{"_index":3014,"title":{},"body":{"index.html":{}}}],["single",{"_index":1423,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["size",{"_index":3504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sizes",{"_index":3267,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1687,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{}}}],["skips",{"_index":1024,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["software",{"_index":2791,"title":{},"body":{"index.html":{}}}],["sold",{"_index":1251,"title":{},"body":{"entities/Event.html":{}}}],["soldqty",{"_index":1252,"title":{},"body":{"entities/Event.html":{}}}],["solo",{"_index":2706,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sort",{"_index":1691,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["sortby",{"_index":1676,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["sortby.split",{"_index":1787,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["sorting",{"_index":1754,"title":{},"body":{"injectables/QueryHelperService.html":{},"index.html":{}}}],["sortorder",{"_index":1677,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"miscellaneous/enumerations.html":{}}}],["sortorder.asc",{"_index":1696,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["spans",{"_index":3146,"title":{},"body":{"index.html":{}}}],["spec.ts",{"_index":2861,"title":{},"body":{"index.html":{}}}],["specific",{"_index":588,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/EventSalesService.html":{},"injectables/RedisService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["specifics",{"_index":3016,"title":{},"body":{"index.html":{}}}],["specified",{"_index":715,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specifies",{"_index":2870,"title":{},"body":{"index.html":{}}}],["specifying",{"_index":2987,"title":{},"body":{"index.html":{}}}],["spent",{"_index":2475,"title":{},"body":{"entities/User.html":{}}}],["sports",{"_index":2942,"title":{},"body":{"index.html":{}}}],["sql",{"_index":3276,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["src",{"_index":2854,"title":{},"body":{"index.html":{}}}],["src.common.decorators",{"_index":2948,"title":{},"body":{"index.html":{}}}],["src.common.dto",{"_index":2973,"title":{},"body":{"index.html":{}}}],["src.common.enums",{"_index":2939,"title":{},"body":{"index.html":{}}}],["src.common.exceptions",{"_index":2961,"title":{},"body":{"index.html":{}}}],["src.common.globals",{"_index":2965,"title":{},"body":{"index.html":{}}}],["src.common.interfaces",{"_index":2985,"title":{},"body":{"index.html":{}}}],["src.common.logger",{"_index":2996,"title":{},"body":{"index.html":{}}}],["src.database",{"_index":3200,"title":{},"body":{"index.html":{}}}],["src.database.migrations",{"_index":3218,"title":{},"body":{"index.html":{}}}],["src.database.query",{"_index":3257,"title":{},"body":{"index.html":{}}}],["src.database.redis",{"_index":3212,"title":{},"body":{"index.html":{}}}],["src.libs.payment",{"_index":2922,"title":{},"body":{"index.html":{}}}],["src.modules",{"_index":3002,"title":{},"body":{"index.html":{}}}],["src.modules.cart",{"_index":3061,"title":{},"body":{"index.html":{}}}],["src.modules.carts",{"_index":3185,"title":{},"body":{"index.html":{}}}],["src.modules.carts.entities",{"_index":3196,"title":{},"body":{"index.html":{}}}],["src.modules.events",{"_index":3122,"title":{},"body":{"index.html":{}}}],["src.modules.events.dto",{"_index":3152,"title":{},"body":{"index.html":{}}}],["src.modules.events.entities",{"_index":3148,"title":{},"body":{"index.html":{}}}],["src.modules.reservation",{"_index":3007,"title":{},"body":{"index.html":{}}}],["src.modules.reservations",{"_index":3087,"title":{},"body":{"index.html":{}}}],["src.modules.reservations.dto",{"_index":3118,"title":{},"body":{"index.html":{}}}],["src.modules.reservations.entities",{"_index":3113,"title":{},"body":{"index.html":{}}}],["src.modules.tickets",{"_index":3156,"title":{},"body":{"index.html":{}}}],["src.modules.tickets.entities",{"_index":3165,"title":{},"body":{"index.html":{}}}],["src.modules.transactions",{"_index":3168,"title":{},"body":{"index.html":{}}}],["src.modules.transactions.dto",{"_index":3181,"title":{},"body":{"index.html":{}}}],["src.modules.transactions.entities",{"_index":3179,"title":{},"body":{"index.html":{}}}],["src.modules.users",{"_index":3021,"title":{},"body":{"index.html":{}}}],["src.modules.users.dto",{"_index":3055,"title":{},"body":{"index.html":{}}}],["src.modules.users.entities",{"_index":3047,"title":{},"body":{"index.html":{}}}],["src.security.auth",{"_index":3337,"title":{},"body":{"index.html":{}}}],["src.security.auth.dto",{"_index":3353,"title":{},"body":{"index.html":{}}}],["src.security.auth.strategies",{"_index":3360,"title":{},"body":{"index.html":{}}}],["src.security.cookie",{"_index":3312,"title":{},"body":{"index.html":{}}}],["src.security.encryption",{"_index":3282,"title":{},"body":{"index.html":{}}}],["src.security.guards",{"_index":3293,"title":{},"body":{"index.html":{}}}],["src.security.throttler",{"_index":3332,"title":{},"body":{"index.html":{}}}],["src.security.token",{"_index":3320,"title":{},"body":{"index.html":{}}}],["src.utils.constants",{"_index":3259,"title":{},"body":{"index.html":{}}}],["src.utils.services",{"_index":3277,"title":{},"body":{"index.html":{}}}],["src/.../category",{"_index":2671,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../constants.common.ts",{"_index":3463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.env.ts",{"_index":3464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.migrationdb.ts",{"_index":3462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2714,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../migration",{"_index":2715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../price",{"_index":2673,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.decorator.ts",{"_index":3465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sort",{"_index":2675,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status",{"_index":2677,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../typeorm",{"_index":3461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":2679,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../winston.config.ts",{"_index":3460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/decorators/role.decorator.ts",{"_index":2583,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/user",{"_index":2586,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dto/id.dto.ts",{"_index":1592,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["src/common/dto/id.dto.ts:20",{"_index":1594,"title":{},"body":{"classes/IdDto.html":{}}}],["src/common/dto/pagination.dto.ts",{"_index":1671,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"coverage.html":{}}}],["src/common/dto/pagination.dto.ts:23",{"_index":1684,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/dto/pagination.dto.ts:38",{"_index":1686,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/dto/pagination.dto.ts:51",{"_index":1690,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/dto/pagination.dto.ts:64",{"_index":1694,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/dto/pagination.dto.ts:77",{"_index":1679,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/dto/pagination.dto.ts:89",{"_index":1681,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/enums/category",{"_index":2681,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/price",{"_index":2705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/sort",{"_index":2709,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/status",{"_index":2710,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/user",{"_index":2712,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/exceptions/invalid",{"_index":1596,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"coverage.html":{}}}],["src/common/globals",{"_index":1539,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interfaces/jwt.interface.ts",{"_index":1642,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/common/interfaces/key",{"_index":1654,"title":{},"body":{"interfaces/KeyValuePairs.html":{},"coverage.html":{}}}],["src/common/interfaces/payload.interface.ts",{"_index":1701,"title":{},"body":{"interfaces/Payload.html":{},"coverage.html":{}}}],["src/common/interfaces/payment.interface.ts",{"_index":1709,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"coverage.html":{}}}],["src/common/interfaces/token.interface.ts",{"_index":2253,"title":{},"body":{"interfaces/TokenConfig.html":{},"coverage.html":{}}}],["src/common/logger/winston.config.ts",{"_index":2593,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/logger/winston.service.ts",{"_index":2547,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"coverage.html":{}}}],["src/common/logger/winston.service.ts:19",{"_index":2564,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["src/common/logger/winston.service.ts:32",{"_index":2560,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["src/common/logger/winston.service.ts:44",{"_index":2570,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["src/common/logger/winston.service.ts:56",{"_index":2555,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["src/common/logger/winston.service.ts:68",{"_index":2567,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["src/database/database.module.ts",{"_index":1153,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/migration",{"_index":2598,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/migrations/1711085051379",{"_index":1109,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"coverage.html":{}}}],["src/database/migrations/1712572717258",{"_index":1053,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"coverage.html":{}}}],["src/database/migrations/1712642603000",{"_index":1045,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{},"coverage.html":{}}}],["src/database/migrations/1712661221574",{"_index":1038,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{},"coverage.html":{}}}],["src/database/migrations/1712661230450",{"_index":1004,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"coverage.html":{}}}],["src/database/migrations/1712661230451",{"_index":1079,"title":{},"body":{"classes/CreateTableReservations1712661230451.html":{},"coverage.html":{}}}],["src/database/migrations/1712661230452",{"_index":1096,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"coverage.html":{}}}],["src/database/migrations/1712717719010",{"_index":1085,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"coverage.html":{}}}],["src/database/migrations/1712751776641",{"_index":1068,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"coverage.html":{}}}],["src/database/migrations/1712751780000",{"_index":124,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"coverage.html":{}}}],["src/database/query/query",{"_index":1743,"title":{},"body":{"injectables/QueryHelperService.html":{},"coverage.html":{}}}],["src/database/redis/redis.module.ts",{"_index":1796,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/database/redis/redis.service.ts",{"_index":1808,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/database/redis/redis.service.ts:109",{"_index":1835,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:129",{"_index":1848,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:147",{"_index":1824,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:19",{"_index":1817,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:39",{"_index":1855,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:61",{"_index":1845,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:85",{"_index":1830,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/typeorm",{"_index":2604,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/libs/payment/payment.module.ts",{"_index":1706,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/libs/payment/payment.service.ts",{"_index":1722,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{},"index.html":{}}}],["src/libs/payment/payment.service.ts:11",{"_index":1731,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/libs/payment/payment.service.ts:22",{"_index":1726,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/main.ts",{"_index":2609,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/cart",{"_index":527,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["src/modules/carts/carts.module.ts",{"_index":732,"title":{},"body":{"modules/CartsModule.html":{}}}],["src/modules/carts/carts.service.ts",{"_index":737,"title":{},"body":{"injectables/CartsService.html":{},"coverage.html":{}}}],["src/modules/carts/carts.service.ts:11",{"_index":744,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:112",{"_index":761,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:127",{"_index":747,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:32",{"_index":750,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:49",{"_index":753,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:72",{"_index":765,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:92",{"_index":771,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/entities/cart.entity.ts",{"_index":490,"title":{},"body":{"entities/Cart.html":{},"coverage.html":{}}}],["src/modules/carts/entities/cart.entity.ts:27",{"_index":498,"title":{},"body":{"entities/Cart.html":{}}}],["src/modules/carts/entities/cart.entity.ts:41",{"_index":515,"title":{},"body":{"entities/Cart.html":{}}}],["src/modules/carts/entities/cart.entity.ts:52",{"_index":503,"title":{},"body":{"entities/Cart.html":{}}}],["src/modules/carts/entities/cart.entity.ts:64",{"_index":508,"title":{},"body":{"entities/Cart.html":{}}}],["src/modules/carts/entities/cart.entity.ts:76",{"_index":510,"title":{},"body":{"entities/Cart.html":{}}}],["src/modules/commom.module.ts",{"_index":791,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/modules/events/dto/create",{"_index":915,"title":{},"body":{"classes/CreateEventDto.html":{},"coverage.html":{}}}],["src/modules/events/dto/update",{"_index":2429,"title":{},"body":{"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["src/modules/events/entities/event",{"_index":1273,"title":{},"body":{"entities/EventPrice.html":{},"coverage.html":{}}}],["src/modules/events/entities/event.entity.ts",{"_index":1224,"title":{},"body":{"entities/Event.html":{},"coverage.html":{}}}],["src/modules/events/entities/event.entity.ts:101",{"_index":1236,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:113",{"_index":1248,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:125",{"_index":1250,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:137",{"_index":1257,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:149",{"_index":1246,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:160",{"_index":1255,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:171",{"_index":1230,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:183",{"_index":1233,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:195",{"_index":1269,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:21",{"_index":1238,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:35",{"_index":1266,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:46",{"_index":1260,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:57",{"_index":1240,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:68",{"_index":1231,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:79",{"_index":1228,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:90",{"_index":1263,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/event",{"_index":1282,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"coverage.html":{}}}],["src/modules/events/events.controller.ts",{"_index":1395,"title":{},"body":{"controllers/EventsController.html":{},"coverage.html":{}}}],["src/modules/events/events.controller.ts:115",{"_index":1422,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:139",{"_index":1436,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:155",{"_index":1431,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:53",{"_index":1401,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:67",{"_index":1414,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:82",{"_index":1408,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:97",{"_index":1427,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.module.ts",{"_index":1464,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/modules/events/events.service.ts",{"_index":1468,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{}}}],["src/modules/events/events.service.ts:113",{"_index":1493,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:136",{"_index":1497,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:163",{"_index":1495,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:185",{"_index":1479,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:203",{"_index":1491,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:24",{"_index":1474,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:45",{"_index":1475,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:68",{"_index":1489,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:89",{"_index":1485,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/reservation",{"_index":975,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"classes/UpdateReservationDetailsDto.html":{},"coverage.html":{}}}],["src/modules/reservations/dto/create",{"_index":990,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["src/modules/reservations/dto/update",{"_index":2441,"title":{},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts",{"_index":1914,"title":{},"body":{"entities/Reservation.html":{},"coverage.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:110",{"_index":1917,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:122",{"_index":1930,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:30",{"_index":1923,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:44",{"_index":1933,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:57",{"_index":1921,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:71",{"_index":1928,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:85",{"_index":1916,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:98",{"_index":1925,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/reservations",{"_index":2034,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"coverage.html":{}}}],["src/modules/reservations/reservations.controller.ts",{"_index":1988,"title":{},"body":{"controllers/ReservationsController.html":{},"coverage.html":{}}}],["src/modules/reservations/reservations.controller.ts:102",{"_index":2011,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/modules/reservations/reservations.controller.ts:36",{"_index":1994,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/modules/reservations/reservations.controller.ts:54",{"_index":1998,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/modules/reservations/reservations.controller.ts:73",{"_index":2003,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/modules/reservations/reservations.controller.ts:87",{"_index":2009,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/modules/reservations/reservations.module.ts",{"_index":2030,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["src/modules/reservations/reservations.service.ts",{"_index":2115,"title":{},"body":{"injectables/ReservationsService.html":{},"coverage.html":{}}}],["src/modules/reservations/reservations.service.ts:108",{"_index":2126,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:136",{"_index":2131,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:15",{"_index":2121,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:166",{"_index":2144,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:180",{"_index":2136,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:216",{"_index":2140,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:40",{"_index":2134,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:56",{"_index":2123,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:89",{"_index":2128,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts",{"_index":2195,"title":{},"body":{"entities/Ticket.html":{},"coverage.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts:18",{"_index":2206,"title":{},"body":{"entities/Ticket.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts:32",{"_index":2203,"title":{},"body":{"entities/Ticket.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts:43",{"_index":2197,"title":{},"body":{"entities/Ticket.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts:54",{"_index":2204,"title":{},"body":{"entities/Ticket.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts:65",{"_index":2200,"title":{},"body":{"entities/Ticket.html":{}}}],["src/modules/tickets/tickets.module.ts",{"_index":2212,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/modules/tickets/tickets.service.ts",{"_index":2220,"title":{},"body":{"injectables/TicketsService.html":{},"coverage.html":{}}}],["src/modules/tickets/tickets.service.ts:103",{"_index":2229,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:18",{"_index":2226,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:47",{"_index":2232,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:75",{"_index":2236,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/transactions/dto/create",{"_index":1127,"title":{},"body":{"classes/CreateTransactionDto.html":{},"coverage.html":{}}}],["src/modules/transactions/dto/update",{"_index":2445,"title":{},"body":{"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts",{"_index":2348,"title":{},"body":{"entities/Transaction.html":{},"coverage.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:110",{"_index":2359,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:28",{"_index":2358,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:42",{"_index":2362,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:53",{"_index":2353,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:64",{"_index":2355,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:75",{"_index":2351,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:86",{"_index":2356,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:98",{"_index":2349,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/transactions.controller.ts",{"_index":2367,"title":{},"body":{"controllers/TransactionsController.html":{},"coverage.html":{}}}],["src/modules/transactions/transactions.controller.ts:27",{"_index":2368,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/modules/transactions/transactions.module.ts",{"_index":2378,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/modules/transactions/transactions.service.ts",{"_index":2381,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/modules/transactions/transactions.service.ts:121",{"_index":2396,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/transactions/transactions.service.ts:167",{"_index":2390,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/transactions/transactions.service.ts:181",{"_index":2401,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/transactions/transactions.service.ts:32",{"_index":2387,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/transactions/transactions.service.ts:59",{"_index":2394,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/transactions/transactions.service.ts:96",{"_index":2399,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/users/dto/create",{"_index":1129,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/update",{"_index":2449,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":2453,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:102",{"_index":2468,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:113",{"_index":2454,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:125",{"_index":2472,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:140",{"_index":2473,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:151",{"_index":2462,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:162",{"_index":2477,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:173",{"_index":2474,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:185",{"_index":2456,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:197",{"_index":2464,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:22",{"_index":2478,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:33",{"_index":2455,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:44",{"_index":2471,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:55",{"_index":2476,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:66",{"_index":2458,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:77",{"_index":2460,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:88",{"_index":2465,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/users.controller.ts",{"_index":2481,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:104",{"_index":2494,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:37",{"_index":2485,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:54",{"_index":2487,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:69",{"_index":2489,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:89",{"_index":2500,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":2513,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service.ts",{"_index":2517,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:109",{"_index":2529,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:126",{"_index":2535,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:14",{"_index":2521,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:146",{"_index":2538,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:39",{"_index":2522,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:60",{"_index":2524,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:75",{"_index":2526,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:92",{"_index":2531,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/security/auth/auth.controller.ts",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/security/auth/auth.controller.ts:121",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/security/auth/auth.controller.ts:137",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/security/auth/auth.controller.ts:153",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/security/auth/auth.controller.ts:170",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/security/auth/auth.controller.ts:58",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/security/auth/auth.controller.ts:77",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/security/auth/auth.controller.ts:98",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/security/auth/auth.module.ts",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/security/auth/auth.service.ts",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/security/auth/auth.service.ts:126",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/security/auth/auth.service.ts:153",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/security/auth/auth.service.ts:176",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/security/auth/auth.service.ts:25",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/security/auth/auth.service.ts:58",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/security/auth/auth.service.ts:90",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/security/auth/dto/login.dto.ts",{"_index":1668,"title":{},"body":{"classes/LoginDTO.html":{},"coverage.html":{}}}],["src/security/auth/dto/login.dto.ts:21",{"_index":1669,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/security/auth/dto/login.dto.ts:33",{"_index":1670,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/security/auth/dto/refresh",{"_index":1884,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/security/auth/dto/signup.dto.ts",{"_index":2180,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["src/security/auth/dto/signup.dto.ts:32",{"_index":2183,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/security/auth/dto/signup.dto.ts:48",{"_index":2184,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/security/auth/dto/signup.dto.ts:62",{"_index":2182,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/security/auth/dto/signup.dto.ts:78",{"_index":2185,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/security/auth/dto/signup.dto.ts:90",{"_index":2186,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/security/auth/dto/update",{"_index":2431,"title":{},"body":{"classes/UpdatePasswordDTO.html":{},"coverage.html":{}}}],["src/security/auth/strategies/access",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{}}}],["src/security/cookie/cookie.service.ts",{"_index":842,"title":{},"body":{"injectables/CookieService.html":{},"coverage.html":{}}}],["src/security/cookie/cookie.service.ts:12",{"_index":847,"title":{},"body":{"injectables/CookieService.html":{}}}],["src/security/cookie/cookie.service.ts:27",{"_index":855,"title":{},"body":{"injectables/CookieService.html":{}}}],["src/security/cookie/cookie.service.ts:41",{"_index":859,"title":{},"body":{"injectables/CookieService.html":{}}}],["src/security/cookie/cookie.service.ts:66",{"_index":849,"title":{},"body":{"injectables/CookieService.html":{}}}],["src/security/encryption/encryption.service.ts",{"_index":1180,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/security/encryption/encryption.service.ts:22",{"_index":1204,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/security/encryption/encryption.service.ts:36",{"_index":1212,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/security/encryption/encryption.service.ts:48",{"_index":1187,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/security/encryption/encryption.service.ts:61",{"_index":1199,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/security/encryption/encryption.service.ts:75",{"_index":1192,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/security/guards",{"_index":3299,"title":{},"body":{"index.html":{}}}],["src/security/guards/access",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/security/guards/is",{"_index":1608,"title":{},"body":{"guards/IsCreatorGuard.html":{},"coverage.html":{}}}],["src/security/guards/role.guard.ts",{"_index":2161,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/security/guards/role.guard.ts:21",{"_index":2164,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/security/guards/role.guard.ts:39",{"_index":2166,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/security/throttler/throttler.module.ts",{"_index":2190,"title":{},"body":{"modules/ThrollerModule.html":{}}}],["src/security/token/refreshtoken",{"_index":1888,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"coverage.html":{}}}],["src/security/token/token",{"_index":2260,"title":{},"body":{"injectables/TokenManagementService.html":{},"coverage.html":{}}}],["src/security/token/token.service.ts",{"_index":2286,"title":{},"body":{"injectables/TokenService.html":{},"coverage.html":{}}}],["src/security/token/token.service.ts:128",{"_index":2302,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:172",{"_index":2310,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:199",{"_index":2297,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:27",{"_index":2292,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:56",{"_index":2305,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:78",{"_index":2294,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:92",{"_index":2307,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/utils/constants/constants.common.ts",{"_index":2619,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/constants/constants.env.ts",{"_index":2620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/constants/constants.migrationdb.ts",{"_index":2622,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/services/convert",{"_index":803,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"coverage.html":{}}}],["stability",{"_index":3208,"title":{},"body":{"index.html":{}}}],["stack",{"_index":2562,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"miscellaneous/variables.html":{}}}],["standard",{"_index":581,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["standardized",{"_index":2977,"title":{},"body":{"index.html":{}}}],["start",{"_index":958,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["startdate",{"_index":923,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["started",{"_index":2718,"title":{"index.html":{}},"body":{"index.html":{}}}],["starting",{"_index":2906,"title":{},"body":{"index.html":{}}}],["state",{"_index":3227,"title":{},"body":{"index.html":{}}}],["statements",{"_index":2582,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["static",{"_index":1469,"title":{},"body":{"injectables/EventsService.html":{}}}],["status",{"_index":1098,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["status_reservation",{"_index":3273,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["status_reservation_enum",{"_index":1101,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":1575,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuses",{"_index":2929,"title":{},"body":{"index.html":{}}}],["statuspayment",{"_index":1105,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"injectables/ReservationsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{}}}],["statusreservation",{"_index":1715,"title":{},"body":{"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"miscellaneous/enumerations.html":{}}}],["statusreservation.approved",{"_index":2093,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{}}}],["statusreservation.failed",{"_index":1710,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["statusreservation.paid",{"_index":1713,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["statusreservation.rejected",{"_index":1740,"title":{},"body":{"injectables/PaymentService.html":{}}}],["storage",{"_index":3214,"title":{},"body":{"index.html":{}}}],["store",{"_index":1022,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["store.service",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["store.service.spec.ts",{"_index":3326,"title":{},"body":{"index.html":{}}}],["store.service.ts",{"_index":1889,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"coverage.html":{},"index.html":{}}}],["store.service.ts:21",{"_index":1895,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["store.service.ts:47",{"_index":1901,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["store.service.ts:65",{"_index":1905,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["store.service.ts:79",{"_index":1898,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["stored",{"_index":1890,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["storedtoken",{"_index":1911,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["storerefreshtokeninredis",{"_index":1892,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["storerefreshtokeninredis(userid",{"_index":1900,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["stores",{"_index":1902,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{}}}],["storing",{"_index":1007,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["strategy",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"index.html":{}}}],["streamline",{"_index":2739,"title":{},"body":{"index.html":{}}}],["streamlined",{"_index":2899,"title":{},"body":{"index.html":{}}}],["streamlines",{"_index":3120,"title":{},"body":{"index.html":{}}}],["streamlining",{"_index":2787,"title":{},"body":{"index.html":{}}}],["strict",{"_index":881,"title":{},"body":{"injectables/CookieService.html":{}}}],["string",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/ReservationDetails.html":{},"controllers/ReservationsController.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"classes/UpdatePasswordDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["stringified",{"_index":1857,"title":{},"body":{"injectables/RedisService.html":{}}}],["strings",{"_index":3280,"title":{},"body":{"index.html":{}}}],["stringvalue",{"_index":1863,"title":{},"body":{"injectables/RedisService.html":{}}}],["strong",{"_index":1139,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"index.html":{}}}],["strongpassword123",{"_index":1148,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["structure",{"_index":2727,"title":{},"body":{"index.html":{}}}],["structured",{"_index":3001,"title":{},"body":{"index.html":{}}}],["structures",{"_index":2768,"title":{},"body":{"index.html":{}}}],["structuring",{"_index":2894,"title":{},"body":{"index.html":{}}}],["style",{"_index":2805,"title":{},"body":{"index.html":{}}}],["sub",{"_index":1650,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["subject",{"_index":1648,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{}}}],["submit",{"_index":3393,"title":{},"body":{"index.html":{}}}],["success",{"_index":1734,"title":{},"body":{"injectables/PaymentService.html":{},"index.html":{}}}],["success_rate",{"_index":1723,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successful",{"_index":1714,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"index.html":{}}}],["successfully",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EventsService.html":{}}}],["such",{"_index":2758,"title":{},"body":{"index.html":{}}}],["suite",{"_index":3384,"title":{},"body":{"index.html":{}}}],["sum",{"_index":2424,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["summary",{"_index":2864,"title":{},"body":{"index.html":{}}}],["super",{"_index":86,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["super('invalid",{"_index":1602,"title":{},"body":{"classes/InvalidCredentialsException.html":{}}}],["supertest",{"_index":2829,"title":{},"body":{"index.html":{}}}],["support",{"_index":2903,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supporting",{"_index":3111,"title":{},"body":{"index.html":{}}}],["supports",{"_index":3057,"title":{},"body":{"index.html":{}}}],["svg",{"_index":3450,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2818,"title":{},"body":{"index.html":{}}}],["swimming",{"_index":2699,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":1174,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":2919,"title":{},"body":{"index.html":{}}}],["systems",{"_index":3117,"title":{},"body":{"index.html":{}}}],["t",{"_index":1836,"title":{},"body":{"injectables/RedisService.html":{}}}],["table",{"_index":158,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"coverage.html":{},"index.html":{}}}],["table_tennis",{"_index":2700,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tables",{"_index":132,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2625,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1779,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{}}}],["task",{"_index":3386,"title":{},"body":{"index.html":{}}}],["tasks",{"_index":1181,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["teams",{"_index":2792,"title":{},"body":{"index.html":{}}}],["tech",{"_index":929,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["template",{"_index":1872,"title":{},"body":{"injectables/RedisService.html":{}}}],["tennis",{"_index":2701,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":2831,"title":{},"body":{"index.html":{}}}],["testing",{"_index":2742,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2730,"title":{},"body":{"index.html":{}}}],["text",{"_index":1064,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableTickets1712717719010.html":{},"injectables/EncryptionService.html":{},"index.html":{}}}],["this.authservice.delete(+id",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(email",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.buildwherecondition(filterby",{"_index":1776,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["this.cartitemrepository.create",{"_index":712,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.find",{"_index":716,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.findone",{"_index":707,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.remove(cartitem",{"_index":726,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.remove(cartitems",{"_index":727,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.save(cartitem",{"_index":713,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.save(existingcartitem",{"_index":711,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.save(item",{"_index":728,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemsservice.additemtocart(userid",{"_index":611,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["this.cartitemsservice.findallitemsincart(userid",{"_index":614,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/ReservationsProcessorService.html":{}}}],["this.cartitemsservice.findoneitemincart(userid",{"_index":616,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["this.cartitemsservice.removeallitemfromcart(userid",{"_index":2112,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.cartitemsservice.removeoneitemfromcart(userid",{"_index":619,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["this.cartitemsservice.updatequantityincart",{"_index":617,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["this.cartrepository.create",{"_index":776,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.cartrepository.findone",{"_index":775,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.cartrepository.findoneby",{"_index":778,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.cartrepository.remove(cart",{"_index":781,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.cartrepository.save(cart",{"_index":777,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.cartservice.deletecart(cartid",{"_index":2113,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.cartservice.getorcreatecart(user.userid",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cartservice.getorcreatecart(userid",{"_index":2114,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.cartsservice.findcart(userid",{"_index":714,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartsservice.getorcreatecart(userid",{"_index":692,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cleanupafterpayment(cartid",{"_index":2095,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.configservice.get('jwt_access_token_expiration",{"_index":2281,"title":{},"body":{"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":2280,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["this.configservice.get('jwt_refresh_token_expiration",{"_index":870,"title":{},"body":{"injectables/CookieService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":2282,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["this.configservice.get('node_env",{"_index":876,"title":{},"body":{"injectables/CookieService.html":{}}}],["this.configservice.get(node_env",{"_index":1564,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.convertutilsservice.convertdatestringtodate(createeventdto.enddate",{"_index":1506,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.convertutilsservice.convertdatestringtodate(createeventdto.startdate",{"_index":1505,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.convertutilsservice.convertdaystoseconds",{"_index":1908,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["this.convertutilsservice.convertdaystoseconds(refreshtokenexpiration",{"_index":873,"title":{},"body":{"injectables/CookieService.html":{}}}],["this.cookieservice.extractrefreshtokencookie(req",{"_index":2321,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.cookieservice.setrefreshtokencookie(res",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["this.createnestedorder(sortby",{"_index":1778,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["this.createnewticket(user",{"_index":2246,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.createpayload(user",{"_index":2315,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.createreservationsforallcartitems(cartitems",{"_index":2091,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.createreservationsforeachcartitem(item",{"_index":2097,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.deducteventquantity(item.event.eventid",{"_index":1383,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["this.deductionmap[priceformula",{"_index":1393,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["this.del('events_all",{"_index":1882,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.del(`event_${eventid",{"_index":1881,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.encryptionservice.generatedkeyuuid",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TicketsService.html":{}}}],["this.encryptionservice.generatedqrcode(securekey",{"_index":2249,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.encryptionservice.generatedsecurekey(user",{"_index":2248,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.encryptionservice.hashpassword(createuserdto.password",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.encryptionservice.hashpassword(newpassword",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.encryptionservice.verifypassword(user.password",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ensuretitleunique(createeventdto.title",{"_index":1507,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.ensuretitleunique(updateeventdto.title",{"_index":1527,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.errorresponse",{"_index":2322,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.errorresponse(res",{"_index":2329,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.eventpricerepository.create",{"_index":1317,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricerepository.find",{"_index":1325,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricerepository.findone",{"_index":1322,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricerepository.remove(price",{"_index":1335,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricerepository.save(price",{"_index":1321,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricerepository.save(updatedprices",{"_index":1334,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricesservice.createeventprices(event.eventid",{"_index":1509,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventpricesservice.deleteeventprices(id",{"_index":1533,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventpricesservice.getpricebyeventandtype",{"_index":720,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.eventpricesservice.getpricebyeventandtype(+id",{"_index":1452,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventpricesservice.updateeventprices(event.eventid",{"_index":1530,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.create",{"_index":1508,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.find",{"_index":1511,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.findandcount(queryoptions",{"_index":1518,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.findone",{"_index":1980,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["this.eventrepository.findoneby",{"_index":693,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventsService.html":{}}}],["this.eventrepository.remove(event",{"_index":1534,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.save(event",{"_index":1390,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/EventsService.html":{}}}],["this.eventsalesservice.processeventticketsandrevenue(itemsforevent",{"_index":2106,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.eventsservice.create(createeventdto",{"_index":1447,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findallfiltered(paginationfilterdto",{"_index":1448,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findallvalues",{"_index":1449,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findeventbyid(eventid",{"_index":1389,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["this.eventsservice.findone(+id",{"_index":1454,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.remove(+id",{"_index":1460,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.update(+id",{"_index":1457,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.finalizebooking(cartitems",{"_index":2094,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.findeventbyid(eventid",{"_index":1316,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.findone(id",{"_index":1525,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.findoneitemincart(userid",{"_index":718,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.generatedkeyuuid",{"_index":1221,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.generateticketsforreservation",{"_index":2243,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.get(key",{"_index":1873,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.getorcreatecartitem(cart.cartid",{"_index":704,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.getselectfieldsfindall",{"_index":2153,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["this.getselectfieldsfindalladmin",{"_index":2157,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.gettokens(user",{"_index":2324,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.jwtservice.sign(payload",{"_index":2279,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":2285,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["this.logger.error",{"_index":1587,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.logger.error(`error",{"_index":1869,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.logger.error(`failed",{"_index":2421,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.logger.error(`token",{"_index":2343,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.logger.error(message",{"_index":2345,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.logger.log(`access",{"_index":2319,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.logger.log(`refresh",{"_index":1910,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{}}}],["this.logger.log(`tokens",{"_index":2326,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.logger.warn(`key",{"_index":1871,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.paymentservice.processpayment(carttotalprice",{"_index":2089,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.preventduplicatereservation(item",{"_index":2098,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.quantityperformula(priceformula",{"_index":1392,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["this.queryhelper.buildqueryoptions(paginationfilterdto",{"_index":1516,"title":{},"body":{"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["this.queryhelperservice.buildqueryoptions",{"_index":2415,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.queryhelperservice.buildqueryoptions(paginationfilterdto",{"_index":2149,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.redisclient.del(key",{"_index":1870,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisclient.get(key",{"_index":1868,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisclient.set(key",{"_index":1866,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisservice.clearcacheevent",{"_index":1510,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.redisservice.clearcacheevent(id",{"_index":1532,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.redisservice.del(`refresh_token_${userid",{"_index":1913,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["this.redisservice.fetchcacheddata",{"_index":1522,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.redisservice.get(`refresh_token_${userid",{"_index":1912,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["this.redisservice.set(`refresh_token_${userid",{"_index":1909,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["this.reflector.getallandoverride(role_key",{"_index":2172,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.refreshtokenstoreservice.removerefreshtokenredis(userid",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["this.refreshtokenstoreservice.storerefreshtokeninredis(user.userid",{"_index":2318,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.refreshtokenstoreservice.storerefreshtokeninredis(userid",{"_index":2325,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.refreshtokenstoreservice.verifyrefreshtokeninredis(userid",{"_index":2341,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.reservationdetailsrepository.create",{"_index":1982,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["this.reservationdetailsrepository.findone",{"_index":1985,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["this.reservationdetailsrepository.save(newreservationdetails",{"_index":1984,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["this.reservationprocessorservice.processuserreservation(userid",{"_index":2148,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.create",{"_index":2099,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.reservationrepository.find",{"_index":2155,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.findandcount(queryoptions",{"_index":2154,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.findone",{"_index":2109,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["this.reservationrepository.save(reservation",{"_index":2100,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["this.reservationservice.findone(reservationid",{"_index":2244,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.reservationservice.savereservation(reservation",{"_index":2247,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.reservationsservice.findall(userid",{"_index":2018,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.findalladmin(paginationdto",{"_index":2021,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.findalldata(userid",{"_index":2023,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.findone(+id",{"_index":2024,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.generatereservation(userid",{"_index":2016,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.safeparse(data",{"_index":1876,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.set(key",{"_index":1874,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.ticketrepository.create",{"_index":2250,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketrepository.save(ticket",{"_index":2251,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketservice.generateticketsforapprovedreservations(reservations",{"_index":2107,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.tokenmanagementservice.createaccesstoken",{"_index":2334,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.tokenmanagementservice.createaccesstoken(payload",{"_index":2316,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.tokenmanagementservice.createrefreshtoken(payload",{"_index":2317,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.tokenmanagementservice.verifytoken(refreshtoken",{"_index":2340,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.tokenservice.generateaccesstokenfromrefreshtoken(req",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.tokenservice.gettokens(user",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tokenservice.refreshtoken(req",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.transactionrepository.create",{"_index":2405,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionrepository.findandcount(queryoptions",{"_index":2420,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionrepository.findone",{"_index":2413,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionrepository.save(transaction",{"_index":2409,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionservice.calculatecarttotal(cartitems",{"_index":2088,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.transactionservice.createtransaction",{"_index":2090,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.transactionservice.findtransactionbyreservationid",{"_index":2241,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.transactionsservice.findall(userid",{"_index":2374,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.updaterevenue(items[0].event.eventid",{"_index":1388,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["this.userrepository.update(user.userid",{"_index":2410,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.usersrepository.create",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.find",{"_index":2542,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findandcount(queryoptions",{"_index":2541,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":107,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.remove(user",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.save(newuser",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.save(user",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.usersservice.findall(paginationfilterdto",{"_index":2504,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findallvalues",{"_index":2505,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":2506,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.removeuseractive(+id",{"_index":2510,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":2507,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.verifyuseroneby(userid",{"_index":2086,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{}}}],["this.validate(payload",{"_index":67,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["this.validateandextractfromrefreshtoken(oldrefreshtoken",{"_index":2323,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.validateandextractfromrefreshtoken(refreshtokenfromcookie",{"_index":2332,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.verifycartoneby(cartid",{"_index":780,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.verifyuseroneby(userid",{"_index":2543,"title":{},"body":{"injectables/UsersService.html":{}}}],["throllermodule",{"_index":196,"title":{"modules/ThrollerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ThrollerModule.html":{},"modules.html":{},"overview.html":{}}}],["throttler",{"_index":2189,"title":{},"body":{"modules/ThrollerModule.html":{},"overview.html":{}}}],["throttler.forroot",{"_index":2193,"title":{},"body":{"modules/ThrollerModule.html":{}}}],["throttler.module.ts",{"_index":3333,"title":{},"body":{"index.html":{}}}],["throttlermodule",{"_index":2191,"title":{},"body":{"modules/ThrollerModule.html":{},"index.html":{}}}],["throttling",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["through",{"_index":1802,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["throughout",{"_index":794,"title":{},"body":{"modules/CommonModule.html":{},"index.html":{}}}],["throw",{"_index":112,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/CookieService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"injectables/RedisService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["throwing",{"_index":3295,"title":{},"body":{"index.html":{}}}],["throws",{"_index":104,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/CookieService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"injectables/RedisService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["ticket",{"_index":247,"title":{"entities/Ticket.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"controllers/EventsController.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["ticket.entity.ts",{"_index":3166,"title":{},"body":{"index.html":{}}}],["ticket.purchasekey",{"_index":2199,"title":{},"body":{"entities/Ticket.html":{}}}],["ticket.qrcode",{"_index":2201,"title":{},"body":{"entities/Ticket.html":{}}}],["ticket.reservation",{"_index":1941,"title":{},"body":{"entities/Reservation.html":{},"entities/Ticket.html":{}}}],["ticket.reservation)@joincolumn({name",{"_index":1924,"title":{},"body":{"entities/Reservation.html":{}}}],["ticket.securekey",{"_index":2205,"title":{},"body":{"entities/Ticket.html":{}}}],["ticketid",{"_index":170,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TransactionsService.html":{}}}],["ticketing",{"_index":3164,"title":{},"body":{"index.html":{}}}],["ticketprice",{"_index":719,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["ticketrepository",{"_index":2227,"title":{},"body":{"injectables/TicketsService.html":{}}}],["tickets",{"_index":131,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"injectables/CartItemsService.html":{},"classes/CreateEventDto.html":{},"classes/CreateTableTickets1712717719010.html":{},"injectables/EventSalesService.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"index.html":{}}}],["tickets.migration.spec.ts",{"_index":3250,"title":{},"body":{"index.html":{}}}],["tickets.module.ts",{"_index":3160,"title":{},"body":{"index.html":{}}}],["tickets.service",{"_index":2216,"title":{},"body":{"modules/TicketsModule.html":{}}}],["tickets.service.spec.ts",{"_index":3162,"title":{},"body":{"index.html":{}}}],["tickets.service.ts",{"_index":3157,"title":{},"body":{"index.html":{}}}],["ticketservice",{"_index":2044,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["ticketsmodule",{"_index":197,"title":{"modules/TicketsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["ticketsservice",{"_index":2045,"title":{"injectables/TicketsService.html":{}},"body":{"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["ticketsservice.createnewticket(user",{"_index":2230,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketsservice.generateticketsforapprovedreservations(reservations",{"_index":2234,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketsservice.generateticketsforreservation(1",{"_index":2237,"title":{},"body":{"injectables/TicketsService.html":{}}}],["time",{"_index":1646,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/RedisService.html":{},"interfaces/TokenConfig.html":{}}}],["times",{"_index":2989,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":506,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"classes/HttpExceptionFilter.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["timestamps",{"_index":1040,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{},"index.html":{}}}],["title",{"_index":924,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["titles",{"_index":3132,"title":{},"body":{"index.html":{}}}],["token",{"_index":93,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/CookieService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"index.html":{}}}],["token.dto.ts",{"_index":1885,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{},"index.html":{}}}],["token.dto.ts:19",{"_index":1887,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{},"index.html":{}}}],["token.interface.ts",{"_index":2986,"title":{},"body":{"index.html":{}}}],["token.service.spec.ts",{"_index":3330,"title":{},"body":{"index.html":{}}}],["token.service.ts",{"_index":3325,"title":{},"body":{"index.html":{}}}],["token.strategy",{"_index":2516,"title":{},"body":{"modules/UsersModule.html":{}}}],["token.strategy.spec.ts",{"_index":3361,"title":{},"body":{"index.html":{}}}],["token.strategy.ts",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"index.html":{}}}],["token.strategy.ts:17",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:44",{"_index":63,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["tokenconfig",{"_index":2252,"title":{"interfaces/TokenConfig.html":{}},"body":{"interfaces/TokenConfig.html":{},"coverage.html":{},"index.html":{}}}],["tokenmanagementservice",{"_index":384,"title":{"injectables/TokenManagementService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"overview.html":{}}}],["tokenmanagementservice.createaccesstoken",{"_index":2269,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["tokenmanagementservice.createrefreshtoken",{"_index":2272,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["tokenmanagementservice.verifytoken(token",{"_index":2276,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["tokens",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStoreService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["tokenservice",{"_index":342,"title":{"injectables/TokenService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["tokenservice.createpayload(user",{"_index":2295,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenservice.errorresponse(res",{"_index":2299,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenservice.generateaccesstokenfromrefreshtoken(req",{"_index":2303,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenservice.gettokens(user",{"_index":2306,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenservice.refreshtoken(req",{"_index":2308,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenservice.validateandextractfromrefreshtoken(refreshtoken",{"_index":2312,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenversion",{"_index":1122,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"entities/User.html":{}}}],["total",{"_index":725,"title":{},"body":{"injectables/CartItemsService.html":{},"classes/CreateReservationDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["totalamount",{"_index":1106,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"injectables/ReservationsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{}}}],["totalnewrevenue",{"_index":1382,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["totalprice",{"_index":993,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["totalspent",{"_index":1124,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["trace",{"_index":2559,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"miscellaneous/variables.html":{}}}],["track",{"_index":3115,"title":{},"body":{"index.html":{}}}],["tracking",{"_index":3136,"title":{},"body":{"index.html":{}}}],["tracks",{"_index":3205,"title":{},"body":{"index.html":{}}}],["traffic",{"_index":2844,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":248,"title":{"entities/Transaction.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"entities/Reservation.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{}}}],["transaction.createdat",{"_index":2350,"title":{},"body":{"entities/Transaction.html":{}}}],["transaction.dto",{"_index":2447,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["transaction.dto.ts",{"_index":1128,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{},"coverage.html":{},"index.html":{}}}],["transaction.entity.ts",{"_index":3180,"title":{},"body":{"index.html":{}}}],["transaction.paymentid",{"_index":2352,"title":{},"body":{"entities/Transaction.html":{}}}],["transaction.reservation",{"_index":1940,"title":{},"body":{"entities/Reservation.html":{}}}],["transaction.reservation)@joincolumn({name",{"_index":1927,"title":{},"body":{"entities/Reservation.html":{}}}],["transaction.reservations",{"_index":2354,"title":{},"body":{"entities/Transaction.html":{}}}],["transaction.statuspayment",{"_index":2242,"title":{},"body":{"injectables/TicketsService.html":{},"entities/Transaction.html":{}}}],["transaction.totalamount",{"_index":2357,"title":{},"body":{"entities/Transaction.html":{}}}],["transaction.updatedat",{"_index":2360,"title":{},"body":{"entities/Transaction.html":{}}}],["transaction.user",{"_index":2363,"title":{},"body":{"entities/Transaction.html":{},"entities/User.html":{}}}],["transactionid",{"_index":167,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{}}}],["transactionrepository",{"_index":2388,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":168,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableTransactions1712661230452.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"index.html":{}}}],["transactions.controller",{"_index":2379,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions.controller.spec.ts",{"_index":3169,"title":{},"body":{"index.html":{}}}],["transactions.controller.ts",{"_index":3178,"title":{},"body":{"index.html":{}}}],["transactions.migration.spec.ts",{"_index":3252,"title":{},"body":{"index.html":{}}}],["transactions.module.ts",{"_index":3171,"title":{},"body":{"index.html":{}}}],["transactions.service",{"_index":2371,"title":{},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{}}}],["transactions.service.spec.ts",{"_index":3176,"title":{},"body":{"index.html":{}}}],["transactions.service.ts",{"_index":3173,"title":{},"body":{"index.html":{}}}],["transactions/1/find",{"_index":2369,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["transactionscontroller",{"_index":2366,"title":{"controllers/TransactionsController.html":{}},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"coverage.html":{},"index.html":{}}}],["transactionscount",{"_index":1123,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["transactionservice",{"_index":2046,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"index.html":{}}}],["transactionsmodule",{"_index":198,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsservice",{"_index":2047,"title":{"injectables/TransactionsService.html":{}},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactionsservice.calculatecarttotal(cartitems",{"_index":2392,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionsservice.createtransaction(user",{"_index":2395,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionsservice.findall(1",{"_index":2397,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionsservice.findtransactionbyreservationid(1",{"_index":2400,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionsservice.getselectfieldsfindall",{"_index":2402,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transfer",{"_index":885,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["transformer",{"_index":1699,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["transforms",{"_index":3369,"title":{},"body":{"index.html":{}}}],["transports",{"_index":2999,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"injectables/CookieService.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"entities/Ticket.html":{},"injectables/TokenManagementService.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":1517,"title":{},"body":{"injectables/EventsService.html":{},"classes/InvalidCredentialsException.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["ts",{"_index":3370,"title":{},"body":{"index.html":{}}}],["tsconfig",{"_index":2809,"title":{},"body":{"index.html":{}}}],["tsconfig.build.json",{"_index":2759,"title":{},"body":{"index.html":{}}}],["tsconfig.json",{"_index":2863,"title":{},"body":{"index.html":{}}}],["ttl",{"_index":1503,"title":{},"body":{"injectables/EventsService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"modules/ThrollerModule.html":{},"index.html":{}}}],["type",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["type.d.ts",{"_index":2858,"title":{},"body":{"index.html":{}}}],["type.enum",{"_index":964,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["type.enum.ts",{"_index":2672,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["type_price_formule",{"_index":3271,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["type_price_formule_enum",{"_index":1023,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typeentity",{"_index":1753,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["typename",{"_index":3489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeof",{"_index":1864,"title":{},"body":{"injectables/RedisService.html":{}}}],["typeorm",{"_index":82,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["typeormmodule",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([cart",{"_index":735,"title":{},"body":{"modules/CartsModule.html":{}}}],["typeormmodule.forfeature([cartitem",{"_index":634,"title":{},"body":{"modules/CartItemsModule.html":{}}}],["typeormmodule.forfeature([event",{"_index":1467,"title":{},"body":{"modules/EventsModule.html":{},"modules/ReservationDetailsModule.html":{}}}],["typeormmodule.forfeature([reservation",{"_index":2033,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["typeormmodule.forfeature([ticket",{"_index":2219,"title":{},"body":{"modules/TicketsModule.html":{}}}],["typeormmodule.forfeature([transaction",{"_index":2380,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/PaymentModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1161,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":2452,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":2761,"title":{},"body":{"index.html":{}}}],["typings",{"_index":2839,"title":{},"body":{"index.html":{}}}],["typname",{"_index":3492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ultimately",{"_index":2776,"title":{},"body":{"index.html":{}}}],["un",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorized",{"_index":1634,"title":{},"body":{"guards/IsCreatorGuard.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":73,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["unauthorizedexception('cet",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('failed",{"_index":2344,"title":{},"body":{"injectables/TokenService.html":{}}}],["unauthorizedexception('invalid",{"_index":2342,"title":{},"body":{"injectables/TokenService.html":{}}}],["unauthorizedexception('token",{"_index":114,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["unauthorizedexception('user",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":1529,"title":{},"body":{"injectables/EventsService.html":{},"entities/User.html":{}}}],["under",{"_index":3443,"title":{},"body":{"index.html":{}}}],["understand",{"_index":2812,"title":{},"body":{"index.html":{}}}],["undoing",{"_index":1016,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["unique",{"_index":499,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventsService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{},"index.html":{}}}],["uniqueness",{"_index":1484,"title":{},"body":{"injectables/EventsService.html":{}}}],["unit",{"_index":667,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["unitprice",{"_index":664,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["unknown",{"_index":3515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":3458,"title":{},"body":{"properties.html":{}}}],["unnecessary",{"_index":2763,"title":{},"body":{"index.html":{}}}],["up",{"_index":137,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"injectables/ReservationsProcessorService.html":{},"classes/SignUpDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["up(queryrunner",{"_index":150,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["update",{"_index":574,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["update(@param('id",{"_index":1456,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":1433,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/UsersController.html":{}}}],["update(userid",{"_index":599,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/UsersService.html":{}}}],["updatecartitemdto",{"_index":600,"title":{"classes/UpdateCartItemDto.html":{}},"body":{"controllers/CartItemsController.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["updatecartitemdto.quantity",{"_index":618,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["updatecontent(@param('id",{"_index":1613,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["updatecontentdto",{"_index":1614,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["updated",{"_index":511,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatedat",{"_index":496,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{}}}],["updatedevent",{"_index":1498,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateditem",{"_index":683,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["updatedprices",{"_index":1326,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["updateduser",{"_index":2532,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateeventdto",{"_index":1434,"title":{"classes/UpdateEventDto.html":{}},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{},"index.html":{}}}],["updateeventdto.baseprice",{"_index":1528,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventdto.title",{"_index":1526,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventprices",{"_index":1288,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["updateeventprices(eventid",{"_index":1307,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["updatepassword",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(userid",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":320,"title":{"classes/UpdatePasswordDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdatePasswordDTO.html":{},"coverage.html":{}}}],["updatepassworddto.newpassword",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassworddto.oldpassword",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatequantityincart",{"_index":645,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["updatequantityincart(userid",{"_index":681,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["updatereservationdetailsdto",{"_index":2437,"title":{"classes/UpdateReservationDetailsDto.html":{}},"body":{"classes/UpdateReservationDetailsDto.html":{},"coverage.html":{}}}],["updatereservationdto",{"_index":2440,"title":{"classes/UpdateReservationDto.html":{}},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{},"index.html":{}}}],["updaterevenue",{"_index":1344,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["updaterevenue(eventid",{"_index":1367,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["updates",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableCarts1712661221574.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["updates.example",{"_index":3425,"title":{},"body":{"index.html":{}}}],["updatetransactiondto",{"_index":2444,"title":{"classes/UpdateTransactionDto.html":{}},"body":{"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":2448,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["updating",{"_index":2067,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["url",{"_index":1197,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["usage",{"_index":2729,"title":{},"body":{"index.html":{}}}],["use",{"_index":1178,"title":{},"body":{"modules/DatabaseModule.html":{},"guards/IsCreatorGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":147,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventSalesService.html":{},"modules/TicketsModule.html":{},"interfaces/TokenConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":1163,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["useguards",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@delete('/delete/:id",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@patch('change",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@post('logout",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(iscreatorguard",{"_index":1612,"title":{},"body":{"guards/IsCreatorGuard.html":{},"controllers/UsersController.html":{}}}],["useguards(iscreatorguard)@get(':id",{"_index":2488,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(iscreatorguard)@patch(':id",{"_index":2499,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(iscreatorguard)@patch('make",{"_index":2492,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(roleguard",{"_index":2019,"title":{},"body":{"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["useguards(roleguard)@role(userrole.admin)@get('find",{"_index":2002,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["user",{"_index":56,"title":{"entities/User.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionService.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDTO.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"injectables/EncryptionService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"classes/UpdatePasswordDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.accountkey",{"_index":1222,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/User.html":{}}}],["user.cart",{"_index":526,"title":{},"body":{"entities/Cart.html":{},"entities/User.html":{}}}],["user.cart)@joincolumn({name",{"_index":514,"title":{},"body":{"entities/Cart.html":{}}}],["user.createdat",{"_index":2457,"title":{},"body":{"entities/User.html":{}}}],["user.dto",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts",{"_index":1130,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"index.html":{}}}],["user.dto.ts:32",{"_index":1135,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":1136,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:62",{"_index":1132,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":1138,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:90",{"_index":1142,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":2459,"title":{},"body":{"entities/User.html":{}}}],["user.entity.ts",{"_index":3048,"title":{},"body":{"index.html":{}}}],["user.firstname",{"_index":2461,"title":{},"body":{"entities/User.html":{}}}],["user.isactive",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["user.lastlogin",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["user.lastname",{"_index":2466,"title":{},"body":{"entities/User.html":{}}}],["user.password",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["user.reservations",{"_index":1938,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["user.reservations)@joincolumn({name",{"_index":1932,"title":{},"body":{"entities/Reservation.html":{}}}],["user.role",{"_index":2178,"title":{},"body":{"guards/RoleGuard.html":{},"injectables/TokenService.html":{},"entities/User.html":{}}}],["user.tokenversion",{"_index":110,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{},"entities/User.html":{}}}],["user.totalspent",{"_index":2412,"title":{},"body":{"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["user.transactions",{"_index":2365,"title":{},"body":{"entities/Transaction.html":{},"entities/User.html":{}}}],["user.transactions)@joincolumn({name",{"_index":2361,"title":{},"body":{"entities/Transaction.html":{}}}],["user.transactionscount",{"_index":2411,"title":{},"body":{"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["user.userid",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"guards/IsCreatorGuard.html":{},"injectables/TokenService.html":{}}}],["user@example.com",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["user_role",{"_index":3272,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["user_role_enum",{"_index":1115,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"miscellaneous/variables.html":{}}}],["usercart",{"_index":517,"title":{},"body":{"entities/Cart.html":{}}}],["userid",{"_index":108,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":1170,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["userrepository",{"_index":2386,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["userrole",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/EventsController.html":{},"interfaces/Payload.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["userrole.admin",{"_index":1152,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Payload.html":{},"classes/SignUpDto.html":{}}}],["userrole.user",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Payload.html":{},"entities/User.html":{}}}],["users",{"_index":162,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["users.controller",{"_index":2514,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.controller.spec.ts",{"_index":3022,"title":{},"body":{"index.html":{}}}],["users.controller.ts",{"_index":3043,"title":{},"body":{"index.html":{}}}],["users.migration.spec.ts",{"_index":3255,"title":{},"body":{"index.html":{}}}],["users.module.ts",{"_index":3032,"title":{},"body":{"index.html":{}}}],["users.service",{"_index":2501,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.service.spec.ts",{"_index":3040,"title":{},"body":{"index.html":{}}}],["users.service.ts",{"_index":3035,"title":{},"body":{"index.html":{}}}],["users/1",{"_index":2490,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/entities/user.entity",{"_index":797,"title":{},"body":{"modules/CommonModule.html":{}}}],["users/get",{"_index":2486,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/make",{"_index":2496,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/users.service",{"_index":795,"title":{},"body":{"modules/CommonModule.html":{}}}],["userscontroller",{"_index":2480,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":199,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":55,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":789,"title":{"injectables/UsersService.html":{}},"body":{"modules/CommonModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["usersservice.findall(paginationfilterdto",{"_index":2523,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.findallvalues",{"_index":2525,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.findone(1",{"_index":2527,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.removeuseractive(1",{"_index":2530,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.update(1",{"_index":2533,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.verifyuseroneby(1",{"_index":2536,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.verifyuseronerelation(1",{"_index":2539,"title":{},"body":{"injectables/UsersService.html":{}}}],["uses",{"_index":2827,"title":{},"body":{"index.html":{}}}],["using",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"modules/RedisModule.html":{},"injectables/TokenService.html":{},"injectables/WinstonLoggerService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["usually",{"_index":1649,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{}}}],["util",{"_index":3281,"title":{},"body":{"index.html":{}}}],["utilis",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["utilities",{"_index":2908,"title":{},"body":{"index.html":{}}}],["utility",{"_index":807,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"index.html":{}}}],["utilizes",{"_index":2795,"title":{},"body":{"index.html":{}}}],["utilizing",{"_index":3249,"title":{},"body":{"index.html":{}}}],["utils",{"_index":2859,"title":{},"body":{"index.html":{}}}],["utils.service",{"_index":800,"title":{},"body":{"modules/CommonModule.html":{},"injectables/CookieService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{}}}],["utils.service.spec.ts",{"_index":3278,"title":{},"body":{"index.html":{}}}],["utils.service.ts",{"_index":804,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"coverage.html":{},"index.html":{}}}],["utils.service.ts:18",{"_index":826,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["utils.service.ts:32",{"_index":812,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["utils/constants/constants.common",{"_index":1314,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/ReservationsService.html":{}}}],["utils/constants/constants.env",{"_index":863,"title":{},"body":{"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{}}}],["utils/constants/constants.migrationdb",{"_index":1027,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["utils/services/convert",{"_index":799,"title":{},"body":{"modules/CommonModule.html":{},"injectables/CookieService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{}}}],["uuid",{"_index":1188,"title":{},"body":{"injectables/EncryptionService.html":{},"dependencies.html":{}}}],["uuids",{"_index":3286,"title":{},"body":{"index.html":{}}}],["uuidv4",{"_index":1218,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["v4",{"_index":1217,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["valid",{"_index":897,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionService.html":{},"classes/LoginDTO.html":{},"injectables/RefreshTokenStoreService.html":{},"classes/SignUpDto.html":{},"index.html":{}}}],["validate",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["validate(payload",{"_index":61,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validateandextractfromrefreshtoken",{"_index":2290,"title":{},"body":{"injectables/TokenService.html":{}}}],["validateandextractfromrefreshtoken(refreshtoken",{"_index":2309,"title":{},"body":{"injectables/TokenService.html":{}}}],["validated",{"_index":72,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/IdDto.html":{}}}],["validates",{"_index":2311,"title":{},"body":{"injectables/TokenService.html":{},"index.html":{}}}],["validating",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/IdDto.html":{},"index.html":{}}}],["validation",{"_index":120,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["validations",{"_index":3018,"title":{},"body":{"index.html":{}}}],["validator",{"_index":911,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"dependencies.html":{},"index.html":{}}}],["validity",{"_index":3119,"title":{},"body":{"index.html":{}}}],["validpassword",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateUserDto.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/KeyValuePairs.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"classes/SignUpDto.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value1",{"_index":1659,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["values",{"_index":1407,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value}'`).join",{"_index":3494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":1063,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["varchar(255",{"_index":1092,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{}}}],["variable",{"_index":2584,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":224,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":806,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["verbose",{"_index":2552,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["verbose(message",{"_index":2566,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["verification",{"_index":3090,"title":{},"body":{"index.html":{}}}],["verified",{"_index":769,"title":{},"body":{"injectables/CartsService.html":{},"injectables/UsersService.html":{}}}],["verifies",{"_index":766,"title":{},"body":{"injectables/CartsService.html":{},"injectables/EncryptionService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["verify",{"_index":1216,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"index.html":{}}}],["verifycartoneby",{"_index":741,"title":{},"body":{"injectables/CartsService.html":{}}}],["verifycartoneby(cartid",{"_index":764,"title":{},"body":{"injectables/CartsService.html":{}}}],["verifycartrelation",{"_index":742,"title":{},"body":{"injectables/CartsService.html":{}}}],["verifycartrelation(cartid",{"_index":770,"title":{},"body":{"injectables/CartsService.html":{}}}],["verifying",{"_index":98,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"index.html":{}}}],["verifypassword",{"_index":1186,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["verifypassword(hash",{"_index":1211,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["verifyrefreshtokeninredis",{"_index":1893,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["verifyrefreshtokeninredis(userid",{"_index":1904,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["verifytoken",{"_index":2264,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["verifytoken(token",{"_index":2273,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["verifyuseroneby",{"_index":2519,"title":{},"body":{"injectables/UsersService.html":{}}}],["verifyuseroneby(userid",{"_index":2534,"title":{},"body":{"injectables/UsersService.html":{}}}],["verifyuseronerelation",{"_index":2520,"title":{},"body":{"injectables/UsersService.html":{}}}],["verifyuseronerelation(userid",{"_index":2537,"title":{},"body":{"injectables/UsersService.html":{}}}],["version",{"_index":1651,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"index.html":{},"properties.html":{}}}],["veuillez",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["via",{"_index":1820,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["view",{"_index":2142,"title":{},"body":{"injectables/ReservationsService.html":{},"index.html":{}}}],["vital",{"_index":3005,"title":{},"body":{"index.html":{}}}],["void",{"_index":853,"title":{},"body":{"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/RedisService.html":{},"injectables/WinstonLoggerService.html":{}}}],["volleyball",{"_index":2702,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["volume",{"_index":2896,"title":{},"body":{"index.html":{}}}],["volumes",{"_index":2873,"title":{},"body":{"index.html":{}}}],["vs",{"_index":2968,"title":{},"body":{"index.html":{}}}],["warn",{"_index":2553,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"miscellaneous/variables.html":{}}}],["warn(message",{"_index":2569,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["warning",{"_index":2572,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["ways",{"_index":3390,"title":{},"body":{"index.html":{}}}],["weightlifting",{"_index":2703,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["welcome",{"_index":3388,"title":{},"body":{"index.html":{}}}],["wherecondition",{"_index":1775,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["whether",{"_index":1177,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"guards/IsCreatorGuard.html":{},"injectables/RefreshTokenStoreService.html":{},"guards/RoleGuard.html":{},"injectables/TokenManagementService.html":{},"entities/User.html":{}}}],["winston",{"_index":2549,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["winston.config",{"_index":2574,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["winston.config.ts",{"_index":2997,"title":{},"body":{"index.html":{}}}],["winston.createlogger",{"_index":3481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.colorize",{"_index":3474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.combine",{"_index":3467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.combine(commonformat",{"_index":3486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.errors",{"_index":3471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.json",{"_index":3487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.printf",{"_index":3477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.splat",{"_index":3473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.timestamp",{"_index":3468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.logform.format",{"_index":3466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.service.ts",{"_index":3000,"title":{},"body":{"index.html":{}}}],["winston.transports.file",{"_index":3483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winstonloggerservice",{"_index":2546,"title":{"injectables/WinstonLoggerService.html":{}},"body":{"injectables/WinstonLoggerService.html":{},"coverage.html":{},"index.html":{}}}],["winstonloggerservice.debug('this",{"_index":2557,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["winstonloggerservice.error('this",{"_index":2561,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["winstonloggerservice.log('this",{"_index":2565,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["winstonloggerservice.verbose('this",{"_index":2568,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["winstonloggerservice.warn('this",{"_index":2571,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["with'hello",{"_index":3362,"title":{},"body":{"index.html":{}}}],["within",{"_index":1012,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["without",{"_index":3253,"title":{},"body":{"index.html":{}}}],["work",{"_index":3415,"title":{},"body":{"index.html":{}}}],["workflow",{"_index":2904,"title":{},"body":{"index.html":{}}}],["workflows",{"_index":2755,"title":{},"body":{"index.html":{}}}],["working",{"_index":2779,"title":{},"body":{"index.html":{}}}],["world",{"_index":3363,"title":{},"body":{"index.html":{}}}],["x",{"_index":3421,"title":{},"body":{"index.html":{}}}],["x.y.z",{"_index":3372,"title":{},"body":{"index.html":{}}}],["year",{"_index":837,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["yes",{"_index":1482,"title":{},"body":{"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{}}}],["yy",{"_index":3469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yyyy",{"_index":814,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["zero",{"_index":1738,"title":{},"body":{"injectables/PaymentService.html":{}}}],["zoom",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/guards/access-token.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard to protect routes using JWT access tokens.\nExample :\\@UseGuards(AccessTokenGuard)\n\\@Get('protected-route')\ngetProtectedData() {\n  // Protected route logic here\n}\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * Guard to protect routes using JWT access tokens.\n * @class\n * @extends {AuthGuard('jwt')}\n *\n * @example\n * \\@UseGuards(AccessTokenGuard)\n * \\@Get('protected-route')\n * getProtectedData() {\n *   // Protected route logic here\n * }\n */\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/auth/strategies/access-token.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Strategy for validating access tokens.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/security/auth/strategies/access-token.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the User entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to access application configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/auth/strategies/access-token.strategy.ts:44\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload.\nExample :const user = await this.validate(payload);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT payload containing user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe validated user.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayload } from '@common/interfaces/jwt.interface';\nimport { User } from '@modules/users/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n/**\n * Strategy for validating access tokens.\n *\n * @class\n * @extends PassportStrategy\n */\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  /**\n   * @param {Repository} usersRepository - Repository for the User entity.\n   * @param {ConfigService} configService - Service to access application configuration.\n   */\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    configService: ConfigService\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Extract JWT from the Authorization header as a Bearer token\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET') ?? '', // Get the secret key for verifying the token from configuration\n      ignoreExpiration: false // Ensure the expiration is not ignored\n    });\n  }\n\n  /**\n   * Validate the JWT payload.\n   *\n   * @param {JwtPayload} payload - The JWT payload containing user information.\n   * @returns {Promise} - The validated user.\n   * @throws {UnauthorizedException} - If the user is not found or token is invalidated.\n   *\n   * @example\n   * const user = await this.validate(payload);\n   */\n  async validate(payload: JwtPayload): Promise {\n    const user = await this.usersRepository.findOne({ where: { userId: payload.sub } });\n    if (!user || user.tokenVersion !== payload.version) {\n      throw new UnauthorizedException('Token has been invalidated');\n    }\n\n    // Return the user object for request property attachment if validation passes\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddForeignKeyConstraints1712751780000.html":{"url":"classes/AddForeignKeyConstraints1712751780000.html","title":"class - AddForeignKeyConstraints1712751780000","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddForeignKeyConstraints1712751780000\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712751780000-AddForeignKey.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration to add foreign key constraints to the reservations and tickets tables.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712751780000-AddForeignKey.ts:43\n                        \n                    \n\n\n            \n                \n                        Reverts the migration, dropping the foreign key constraints added in the up method.\nExample :await queryRunner.down(queryRunner);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe QueryRunner instance used to run the migration queries.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712751780000-AddForeignKey.ts:18\n                        \n                    \n\n\n            \n                \n                        Runs the migration, adding foreign key constraints to the reservations and tickets tables.\nExample :await queryRunner.up(queryRunner);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe QueryRunner instance used to run the migration queries.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration to add foreign key constraints to the reservations and tickets tables.\n *\n * @class\n */\nexport class AddForeignKeyConstraints1712751780000 implements MigrationInterface {\n  /**\n   * Runs the migration, adding foreign key constraints to the reservations and tickets tables.\n   *\n   * @param {QueryRunner} queryRunner - The QueryRunner instance used to run the migration queries.\n   * @returns {Promise}\n   *\n   * @example\n   * await queryRunner.up(queryRunner);\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Add foreign keys to reservations\n    await queryRunner.query(`\n      ALTER TABLE \"reservations\"\n      ADD CONSTRAINT \"fk_reservations_users\" FOREIGN KEY (\"userId\") REFERENCES \"users\" (\"userId\") ON DELETE SET NULL,\n      ADD CONSTRAINT \"fk_reservations_transactions\" FOREIGN KEY (\"transactionId\") REFERENCES \"transactions\" (\"transactionId\") ON DELETE SET NULL, \n      ADD CONSTRAINT \"fk_reservations_tickets\" FOREIGN KEY (\"ticketId\") REFERENCES \"tickets\" (\"ticketId\") ON DELETE SET NULL;\n    `);\n\n    // Add foreign key to tickets\n    await queryRunner.query(`\n      ALTER TABLE \"tickets\"\n      ADD CONSTRAINT \"fk_tickets_reservations\" FOREIGN KEY (\"reservationId\") REFERENCES \"reservations\" (\"reservationId\") ON DELETE SET NULL;\n    `);\n  }\n\n  /**\n   * Reverts the migration, dropping the foreign key constraints added in the up method.\n   *\n   * @param {QueryRunner} queryRunner - The QueryRunner instance used to run the migration queries.\n   * @returns {Promise}\n   *\n   * @example\n   * await queryRunner.down(queryRunner);\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop foreign keys in reverse order of addition\n    await queryRunner.query(`\n      ALTER TABLE \"tickets\"\n      DROP CONSTRAINT \"fk_tickets_reservations\";\n    `);\n\n    await queryRunner.query(`\n      ALTER TABLE \"reservations\"\n      DROP CONSTRAINT \"fk_reservations_users\",\n      DROP CONSTRAINT \"fk_reservations_transactions\",\n      DROP CONSTRAINT \"fk_reservations_tickets\";\n    `);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCartItemsModule\n\nCartItemsModule\n\nAppModule -->\n\nCartItemsModule->AppModule\n\n\n\n\n\nCartsModule\n\nCartsModule\n\nAppModule -->\n\nCartsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nAppModule -->\n\nReservationsModule->AppModule\n\n\n\n\n\nThrollerModule\n\nThrollerModule\n\nAppModule -->\n\nThrollerModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nAppModule -->\n\nTransactionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The root module of the application.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CartItemsModule\n                        \n                        \n                            CartsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            ReservationsModule\n                        \n                        \n                            ThrollerModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            TransactionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from '@modules/users/users.module';\nimport { RedisModule } from '@database/redis/redis.module';\nimport { DatabaseModule } from '@database/database.module';\nimport { AuthModule } from '@security/auth/auth.module';\nimport { CartsModule } from '@modules/carts/carts.module';\nimport { ReservationsModule } from '@modules/reservations/reservations.module';\nimport { CartItemsModule } from '@modules/cart-items/cart-items.module';\nimport { PaymentModule } from '@libs/payment/payment.module';\nimport { EventsModule } from '@modules/events/events.module';\nimport { TicketsModule } from '@modules/tickets/tickets.module';\nimport { ThrollerModule } from '@security/throttler/throttler.module';\nimport { TransactionsModule } from '@modules/transactions/transactions.module';\n\n/**\n * The root module of the application.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Global configuration module that loads environment variables.\n    ConfigModule.forRoot({\n      envFilePath: `./.${process.env.NODE_ENV || ''}.env`, // Load conditionally the environment variables based on the current environment\n      isGlobal: true // Make the configuration module global\n    }),\n    DatabaseModule, // Import DatabaseModule for database connections\n    RedisModule, // Import RedisModule for Redis connections\n    AuthModule, // Import AuthModule for authentication\n    UsersModule, // Import UsersModule for user management\n    EventsModule, // Import EventsModule for event management\n    CartsModule, // Import CartsModule for cart management\n    CartItemsModule, // Import CartItemsModule for cart items management\n    ReservationsModule, // Import ReservationsModule for reservation management\n    PaymentModule, // Import PaymentModule for payment processing\n    TicketsModule, // Import TicketsModule for ticket management\n    TransactionsModule, // Import TransactionsModule for transaction management\n    ThrollerModule // Import ThrollerModule for request throttling\n  ]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage authentication and user-related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getRefreshToken\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n                    \n                        \n                            Defined in src/security/auth/auth.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\nExample :POST /auth/signup\n{\n```html\n  \"password\": \"password123\",\n  \"firstName\": \"First\",\n  \"lastName\": \"Last\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing user registration data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Delete('/delete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/security/auth/auth.controller.ts:170\n                        \n                    \n\n\n            \n                \n                        Deletes a user. Only accessible by the user.\nExample :DELETE /auth/delete/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRefreshToken(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('access-token')\n                \n            \n\n                    \n                        \n                            Defined in src/security/auth/auth.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Generates a new access token using a refresh token.\nExample :POST /auth/access-token\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP request object.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDTO, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/security/auth/auth.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Logs in a user.\nExample :POST /auth/login\n{\n```html\n  \"password\": \"password123\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing user login data.\n\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(userId: number, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/security/auth/auth.controller.ts:153\n                        \n                    \n\n\n            \n                \n                        Logs out a user. Only accessible by the user.\nExample :POST /auth/logout\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('refresh-token')\n                \n            \n\n                    \n                        \n                            Defined in src/security/auth/auth.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Refreshes the user's tokens.\nExample :POST /auth/refresh-token\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP request object.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(userId: number, updatePasswordDto: UpdatePasswordDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/security/auth/auth.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Updates a user's password. Only accessible by the user.\nExample :PATCH /auth/change-password\n{\n  \"oldPassword\": \"oldPassword123\",\n  \"newPassword\": \"newPassword123\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                updatePasswordDto\n                                            \n                                                            UpdatePasswordDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing old and new passwords.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UseGuards,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Res,\n  Req,\n  Delete,\n  Param\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from '@modules/users/dto/create-user.dto';\nimport { UserId } from '@common/decorators/user-id.decorator';\nimport { TokenService } from '@security/token/token.service';\nimport { AccessTokenGuard } from '@security/guards';\nimport { LoginDTO } from './dto/login.dto';\nimport { UpdatePasswordDTO } from './dto/update-password.dto';\nimport { Request, Response } from 'express';\nimport { User } from '@modules/users/entities/user.entity';\n\n/**\n * Controller to manage authentication and user-related operations.\n * @class\n */\n@Controller('auth')\nexport class AuthController {\n  /**\n   * Creates an instance of AuthController.\n   *\n   * @constructor\n   * @param {AuthService} authService - Service to manage authentication.\n   * @param {TokenService} tokenService - Service to manage tokens.\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly tokenService: TokenService\n  ) {}\n\n  /**\n   * Registers a new user.\n   *\n   * @param {CreateUserDto} createUserDto - DTO containing user registration data.\n   * @returns {Promise} - The created user.\n   *\n   * @example\n   * POST /auth/signup\n   * {\n   *   \"email\": \"user@example.com\",\n   *   \"password\": \"password123\",\n   *   \"firstName\": \"First\",\n   *   \"lastName\": \"Last\"\n   * }\n   */\n  @Post('signup')\n  create(@Body() createUserDto: CreateUserDto): Promise {\n    return this.authService.signup(createUserDto);\n  }\n\n  /**\n   * Logs in a user.\n   *\n   * @param {LoginDTO} loginDto - DTO containing user login data.\n   * @param {Response} response - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * POST /auth/login\n   * {\n   *   \"email\": \"user@example.com\",\n   *   \"password\": \"password123\"\n   * }\n   */\n  @Post('login')\n  async login(@Body() loginDto: LoginDTO, @Res() response: Response): Promise {\n    const { email, password } = loginDto;\n    return await this.authService.login(email, password, response);\n  }\n\n  /**\n   * Updates a user's password. Only accessible by the user.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {UpdatePasswordDTO} updatePasswordDto - DTO containing old and new passwords.\n   * @returns {Promise}\n   *\n   * @example\n   * PATCH /auth/change-password\n   * {\n   *   \"oldPassword\": \"oldPassword123\",\n   *   \"newPassword\": \"newPassword123\"\n   * }\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch('change-password')\n  async updatePassword(\n    @UserId() userId: number,\n    @Body() updatePasswordDto: UpdatePasswordDTO\n  ): Promise {\n    return await this.authService.updatePassword(\n      userId,\n      updatePasswordDto.oldPassword,\n      updatePasswordDto.newPassword\n    );\n  }\n\n  /**\n   * Generates a new access token using a refresh token.\n   *\n   * @param {Request} req - HTTP request object.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * POST /auth/access-token\n   */\n  @HttpCode(HttpStatus.OK)\n  @Post('access-token')\n  async getRefreshToken(@Req() req: Request, @Res() res: Response): Promise {\n    await this.tokenService.generateAccessTokenFromRefreshToken(req, res);\n  }\n\n  /**\n   * Refreshes the user's tokens.\n   *\n   * @param {Request} req - HTTP request object.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * POST /auth/refresh-token\n   */\n  @HttpCode(HttpStatus.OK)\n  @Post('refresh-token')\n  async refreshToken(@Req() req: Request, @Res() res: Response): Promise {\n    return await this.tokenService.refreshToken(req, res);\n  }\n\n  /**\n   * Logs out a user. Only accessible by the user.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {Response} response - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * POST /auth/logout\n   */\n  @UseGuards(AccessTokenGuard)\n  @Post('logout')\n  async logout(@UserId() userId: number, @Res() response: Response): Promise {\n    await this.authService.logout(userId, response);\n    return { message: 'Logged out successfully' };\n  }\n\n  /**\n   * Deletes a user. Only accessible by the user.\n   *\n   * @param {string} id - ID of the user.\n   * @param {Response} response - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * DELETE /auth/delete/1\n   */\n  @UseGuards(AccessTokenGuard)\n  @Delete('/delete/:id')\n  delete(@Param('id') id: string, @Res() response: Response): Promise {\n    return this.authService.delete(+id, response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCartsModule\n\nCartsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCartsModule->AuthModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCookieService\n\nCookieService\n\nAuthModule -->\n\nCookieService->AuthModule\n\n\n\n\n\nRefreshTokenStoreService\n\nRefreshTokenStoreService\n\nAuthModule -->\n\nRefreshTokenStoreService->AuthModule\n\n\n\n\n\nTokenManagementService\n\nTokenManagementService\n\nAuthModule -->\n\nTokenManagementService->AuthModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/security/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage authentication.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CookieService\n                        \n                        \n                            RefreshTokenStoreService\n                        \n                        \n                            TokenManagementService\n                        \n                        \n                            TokenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartsModule\n                        \n                        \n                            CommonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthService } from './auth.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { TokenService } from '@security/token/token.service';\nimport { AuthController } from './auth.controller';\nimport { User } from '@modules/users/entities/user.entity';\nimport { TokenManagementService } from '@security/token/token-management.service';\nimport { CookieService } from '@security/cookie/cookie.service';\nimport { RefreshTokenStoreService } from '@security/token/refreshtoken-store.service';\nimport { CartsModule } from '@modules/carts/carts.module';\nimport { CommonModule } from '@modules/commom.module';\n\n/**\n * Module to manage authentication.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for User entity\n    TypeOrmModule.forFeature([User]),\n    CartsModule, // Import CartsModule\n    CommonModule // Import CommonModule\n  ],\n  controllers: [\n    // Register AuthController\n    AuthController\n  ],\n  providers: [\n    // Register AuthService, TokenService, CookieService, JwtService, TokenManagementService, and RefreshTokenStoreService as providers\n    AuthService,\n    TokenService,\n    CookieService,\n    JwtService,\n    TokenManagementService,\n    RefreshTokenStoreService\n  ]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage authentication and user-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, cartService: CartsService, encryptionService: EncryptionService, tokenService: TokenService, cookieService: CookieService, refreshTokenStoreService: RefreshTokenStoreService)\n                    \n                \n                        \n                            \n                                Defined in src/security/auth/auth.service.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the User entity.\n\n\n                                                        \n                                                \n                                                \n                                                        cartService\n                                                  \n                                                        \n                                                                        CartsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage carts.\n\n\n                                                        \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage encryption.\n\n\n                                                        \n                                                \n                                                \n                                                        tokenService\n                                                  \n                                                        \n                                                                        TokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage tokens.\n\n\n                                                        \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                        CookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage cookies.\n\n\n                                                        \n                                                \n                                                \n                                                        refreshTokenStoreService\n                                                  \n                                                        \n                                                                        RefreshTokenStoreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage refresh tokens.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(userId: number, res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/auth/auth.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Deletes a user.\nExample :await authService.delete(1, res);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/auth/auth.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Logs in a user.\nExample :```html\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email.\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(userId: number, res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/auth/auth.service.ts:153\n                        \n                    \n\n\n            \n                \n                        Logs out a user.\nExample :await authService.logout(1, res);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(createUserDto: CreateUserDto, role: UserRole)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/auth/auth.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\nExample :const user = await authService.signup(createUserDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nDTO containing user registration data.\n\n\n                                            \n                                        \n                                        \n                                                role\n                                            \n                                                            UserRole\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    UserRole.USER\n                                            \n\n                                            \n                                                    \nRole of the new user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(userId: number, oldPassword: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/auth/auth.service.ts:126\n                        \n                    \n\n\n            \n                \n                        Updates a user's password.\nExample :await authService.updatePassword(1, 'oldPassword', 'newPassword');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                oldPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's current password.\n\n\n                                            \n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's new password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '@modules/users/entities/user.entity';\nimport { InvalidCredentialsException } from '@common/exceptions/invalid-credentials.exception';\nimport { CreateUserDto } from '@modules/users/dto';\nimport { TokenService } from '@security/token/token.service';\nimport { EncryptionService } from '@security/encryption/encryption.service';\nimport { UserRole } from '@common/enums/user-role.enum';\nimport { Response } from 'express';\nimport { CookieService } from '@security/cookie/cookie.service';\nimport { RefreshTokenStoreService } from '@security/token/refreshtoken-store.service';\nimport { CartsService } from '@modules/carts/carts.service';\n\n/**\n * Service to manage authentication and user-related operations.\n * @class\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Creates an instance of AuthService.\n   *\n   * @constructor\n   * @param {Repository} usersRepository - Repository for the User entity.\n   * @param {CartsService} cartService - Service to manage carts.\n   * @param {EncryptionService} encryptionService - Service to manage encryption.\n   * @param {TokenService} tokenService - Service to manage tokens.\n   * @param {CookieService} cookieService - Service to manage cookies.\n   * @param {RefreshTokenStoreService} refreshTokenStoreService - Service to manage refresh tokens.\n   */\n  constructor(\n    @InjectRepository(User) private usersRepository: Repository,\n    private cartService: CartsService,\n    private encryptionService: EncryptionService,\n    private tokenService: TokenService,\n    private cookieService: CookieService,\n    private refreshTokenStoreService: RefreshTokenStoreService\n  ) {}\n\n  /**\n   * Registers a new user.\n   *\n   * @param {CreateUserDto} createUserDto - DTO containing user registration data.\n   * @param {UserRole} [role=UserRole.USER] - Role of the new user.\n   * @returns {Promise} - The created user.\n   *\n   * @throws {UnauthorizedException} If the email is already used.\n   *\n   * @example\n   * const user = await authService.signup(createUserDto);\n   */\n  async signup(createUserDto: CreateUserDto, role: UserRole = UserRole.USER): Promise {\n    const normalizedEmail = createUserDto.email.toLowerCase();\n    const existingUser = await this.usersRepository.findOneBy({ email: normalizedEmail });\n    if (existingUser) {\n      throw new UnauthorizedException('Cet email est déjà utilisé. Veuillez en choisir un autre.');\n    }\n    const hashedPassword = await this.encryptionService.hashPassword(createUserDto.password);\n    const newUser = this.usersRepository.create({\n      ...createUserDto,\n      email: normalizedEmail,\n      password: hashedPassword,\n      role,\n      accountKey: await this.encryptionService.generatedKeyUuid(),\n      createdAt: new Date()\n    });\n    return this.usersRepository.save(newUser);\n  }\n\n  /**\n   * Logs in a user.\n   *\n   * @param {string} email - User's email.\n   * @param {string} password - User's password.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise}\n   *\n   * @throws {InvalidCredentialsException} If the email or password is invalid.\n   * @throws {UnauthorizedException} If the user is not active.\n   *\n   * @example\n   * await authService.login('user@example.com', 'password123', res);\n   */\n  async login(email: string, password: string, res: Response): Promise {\n    const normalizedEmail = email.toLowerCase();\n    const user = await this.usersRepository.findOneBy({ email: normalizedEmail });\n    if (!user) {\n      throw new InvalidCredentialsException();\n    }\n    if (!user.isActive) {\n      throw new UnauthorizedException('User is not active');\n    }\n    const validPassword = await this.encryptionService.verifyPassword(user.password, password);\n    if (!validPassword) {\n      throw new InvalidCredentialsException();\n    }\n    user.lastLogin = new Date();\n    await this.usersRepository.save(user);\n    await this.cartService.getOrCreateCart(user.userId);\n\n    const { accessToken, refreshToken } = await this.tokenService.getTokens(user);\n    this.cookieService.setRefreshTokenCookie(res, refreshToken);\n    res.json({ accessToken, userId: user.userId });\n  }\n\n  /**\n   * Updates a user's password.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} oldPassword - User's current password.\n   * @param {string} newPassword - User's new password.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the user is not found.\n   * @throws {HttpException} If the old password is incorrect.\n   *\n   * @example\n   * await authService.updatePassword(1, 'oldPassword', 'newPassword');\n   */\n  async updatePassword(userId: number, oldPassword: string, newPassword: string): Promise {\n    const user = await this.usersRepository.findOneBy({ userId });\n    if (!user) {\n      throw new NotFoundException();\n    }\n    const validPassword = await this.encryptionService.verifyPassword(user.password, oldPassword);\n    if (!validPassword) {\n      throw new HttpException('Invalid password', 400);\n    }\n\n    const hashedPassword = await this.encryptionService.hashPassword(newPassword);\n    user.password = hashedPassword;\n    await this.usersRepository.save(user);\n  }\n\n  /**\n   * Logs out a user.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * await authService.logout(1, res);\n   */\n  async logout(userId: number, res: Response): Promise {\n    const user = await this.usersRepository.findOneBy({ userId });\n    if (!user) {\n      throw new NotFoundException('User not connected');\n    }\n    await this.refreshTokenStoreService.removeRefreshTokenRedis(userId);\n    user.tokenVersion += 1;\n    await this.usersRepository.save(user);\n\n    res.clearCookie('RefreshToken', { path: '/' });\n    res.status(200).send('Logged out successfully');\n  }\n\n  /**\n   * Deletes a user.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * await authService.delete(1, res);\n   */\n  async delete(userId: number, res: Response): Promise {\n    const user = await this.usersRepository.findOneBy({ userId });\n    await this.refreshTokenStoreService.removeRefreshTokenRedis(userId);\n    await this.usersRepository.remove(user);\n    res.clearCookie('RefreshToken', { path: '/' });\n    res.status(200).send('User deleted successfully');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Cart.html":{"url":"entities/Cart.html","title":"entity - Cart","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Cart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/carts/entities/cart.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a shopping cart.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                cartId\n                            \n                            \n                                    \n                                cartItem\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cartId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/carts/entities/cart.entity.ts:27\n                        \n                    \n\n            \n                \n                    Unique identifier for the cart.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cartItem\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.cart)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/carts/entities/cart.entity.ts:52\n                        \n                    \n\n            \n                \n                    Items in the cart.\nExample :const items = cart.cartItem;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/carts/entities/cart.entity.ts:64\n                        \n                    \n\n            \n                \n                    Timestamp when the cart was created.\nExample :const createdAt = cart.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/carts/entities/cart.entity.ts:76\n                        \n                    \n\n            \n                \n                    Timestamp when the cart was last updated.\nExample :const updatedAt = cart.updatedAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@OneToOne(undefined, user => user.cart)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/carts/entities/cart.entity.ts:41\n                        \n                    \n\n            \n                \n                    User associated with the cart.\nExample :const userCart = cart.user;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  OneToOne,\n  JoinColumn,\n  OneToMany,\n  Column,\n  Index\n} from 'typeorm';\n\n/**\n * Entity representing a shopping cart.\n *\n * @class\n * @entity\n */\n@Entity('cart')\nexport class Cart {\n  /**\n   * Unique identifier for the cart.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  cartId: number;\n\n  /**\n   * User associated with the cart.\n   * @type {User}\n   * @oneToOne\n   * @joinColumn\n   *\n   * @example\n   * const userCart = cart.user;\n   */\n  @Index()\n  @OneToOne(() => User, user => user.cart)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  /**\n   * Items in the cart.\n   * @type {CartItem[]}\n   * @oneToMany\n   *\n   * @example\n   * const items = cart.cartItem;\n   */\n  @OneToMany(() => CartItem, cartItem => cartItem.cart)\n  cartItem: CartItem[];\n\n  /**\n   * Timestamp when the cart was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = cart.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the cart was last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = cart.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CartItem.html":{"url":"entities/CartItem.html","title":"entity - CartItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cart-items/entities/cartitems.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing an item in a shopping cart.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                cart\n                            \n                            \n                                    \n                                cartItemId\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                event\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                priceFormula\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                reservations\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        cart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cart\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, cart => cart.cartId)@JoinColumn({name: 'cartId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:43\n                        \n                    \n\n            \n                \n                    Cart associated with the cart item.\nExample :const cart = cartItem.cart;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cartItemId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:29\n                        \n                    \n\n            \n                \n                    Unique identifier for the cart item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:112\n                        \n                    \n\n            \n                \n                    Timestamp when the cart item was created.\nExample :const createdAt = cartItem.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, event => event.cartItems)@JoinColumn({name: 'eventId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:56\n                        \n                    \n\n            \n                \n                    Event associated with the cart item.\nExample :const event = cartItem.event;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:89\n                        \n                    \n\n            \n                \n                    Price of the cart item.\nExample :const price = cartItem.price;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priceFormula\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceFormulaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:78\n                        \n                    \n\n            \n                \n                    Pricing formula for the cart item.\nExample :const priceFormula = cartItem.priceFormula;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:100\n                        \n                    \n\n            \n                \n                    Quantity of the cart item.\nExample :const quantity = cartItem.quantity;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.cartItem)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:67\n                        \n                    \n\n            \n                \n                    Reservations for the cart item.\nExample :const reservations = cartItem.reservations;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:124\n                        \n                    \n\n            \n                \n                    Timestamp when the cart item was last updated.\nExample :const updatedAt = cartItem.updatedAt;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n  Index\n} from 'typeorm';\nimport { Cart } from '@modules/carts/entities/cart.entity';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { PriceFormulaEnum } from '@common/enums/price-formula.enum';\n\n/**\n * Entity representing an item in a shopping cart.\n *\n * @class\n * @entity\n */\n@Entity('cart_items')\nexport class CartItem {\n  /**\n   * Unique identifier for the cart item.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn()\n  cartItemId: number;\n\n  /**\n   * Cart associated with the cart item.\n   * @type {Cart}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const cart = cartItem.cart;\n   */\n  @Index()\n  @ManyToOne(() => Cart, cart => cart.cartId)\n  @JoinColumn({ name: 'cartId' })\n  cart: Cart;\n\n  /**\n   * Event associated with the cart item.\n   * @type {Event}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const event = cartItem.event;\n   */\n  @ManyToOne(() => Event, event => event.cartItems)\n  @JoinColumn({ name: 'eventId' })\n  event: Event;\n\n  /**\n   * Reservations for the cart item.\n   * @type {Reservation[]}\n   * @oneToMany\n   *\n   * @example\n   * const reservations = cartItem.reservations;\n   */\n  @OneToMany(() => Reservation, reservation => reservation.cartItem)\n  reservations: Reservation[];\n\n  /**\n   * Pricing formula for the cart item.\n   * @type {PriceFormulaEnum}\n   * @column\n   *\n   * @example\n   * const priceFormula = cartItem.priceFormula;\n   */\n  @Column()\n  priceFormula: PriceFormulaEnum;\n\n  /**\n   * Price of the cart item.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const price = cartItem.price;\n   */\n  @Column('int')\n  price: number;\n\n  /**\n   * Quantity of the cart item.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const quantity = cartItem.quantity;\n   */\n  @Column('int')\n  quantity: number;\n\n  /**\n   * Timestamp when the cart item was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = cartItem.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the cart item was last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = cartItem.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CartItemsController.html":{"url":"controllers/CartItemsController.html","title":"controller - CartItemsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CartItemsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cart-items/cart-items.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                carts\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage cart items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: number, createCartItemDto: CreateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/items')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Adds an item to the cart.\nExample :POST /carts/items\n{\n  \"eventId\": 1,\n  \"priceFormula\": \"standard\",\n  \"quantity\": 2\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing cart item details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe added cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, cartId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':cartId/items')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Retrieves all items in a specific cart.\nExample :GET /carts/1/items\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe cart items.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(userId: number, cartId: string, cartItemId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':cartId/items/:cartItemId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific item in a cart.\nExample :GET /carts/1/items/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(userId: number, cartId: string, cartItemId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':cartId/items/:cartItemId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.controller.ts:123\n                        \n                    \n\n\n            \n                \n                        Removes a specific item from the cart.\nExample :DELETE /carts/1/items/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe removed cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(userId: number, cartId: string, cartItemId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':cartId/items/:cartItemId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Updates the quantity of a specific item in the cart.\nExample :PATCH /carts/1/items/1\n{\n  \"quantity\": 3\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing updated quantity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe updated cart item.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { UserId } from '@common/decorators/user-id.decorator';\nimport { CreateCartItemDto } from './dto/create-cart-item.dto';\nimport { UpdateCartItemDto } from './dto/update-cart-item.dto';\nimport { AccessTokenGuard } from '@security/guards';\nimport { CartItemsService } from './cart-items.service';\nimport { CartItem } from './entities/cartitems.entity';\n\n/**\n * Controller to manage cart items.\n * @class\n */\n@UseGuards(AccessTokenGuard)\n@Controller('carts')\nexport class CartItemsController {\n  /**\n   * Creates an instance of CartItemsController.\n   *\n   * @param {CartItemsService} cartItemsService - Service to manage cart items.\n   */\n  constructor(private readonly cartItemsService: CartItemsService) {}\n\n  /**\n   * Adds an item to the cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {CreateCartItemDto} createCartItemDto - DTO containing cart item details.\n   * @returns {Promise} - The added cart item.\n   *\n   * @example\n   * POST /carts/items\n   * {\n   *   \"eventId\": 1,\n   *   \"priceFormula\": \"standard\",\n   *   \"quantity\": 2\n   * }\n   */\n  @Post('/items')\n  create(\n    @UserId() userId: number,\n    @Body() createCartItemDto: CreateCartItemDto\n  ): Promise {\n    return this.cartItemsService.addItemToCart(userId, createCartItemDto);\n  }\n\n  /**\n   * Retrieves all items in a specific cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} cartId - ID of the cart.\n   * @returns {Promise} - The cart items.\n   *\n   * @example\n   * GET /carts/1/items\n   */\n  @Get(':cartId/items')\n  findAll(@UserId() userId: number, @Param('cartId') cartId: string): Promise {\n    return this.cartItemsService.findAllItemsInCart(userId, +cartId);\n  }\n\n  /**\n   * Retrieves a specific item in a cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} cartId - ID of the cart.\n   * @param {string} cartItemId - ID of the cart item.\n   * @returns {Promise} - The cart item.\n   *\n   * @example\n   * GET /carts/1/items/1\n   */\n  @Get(':cartId/items/:cartItemId')\n  findOne(\n    @UserId() userId: number,\n    @Param('cartId') cartId: string,\n    @Param('cartItemId') cartItemId: string\n  ): Promise {\n    return this.cartItemsService.findOneItemInCart(userId, +cartId, +cartItemId);\n  }\n\n  /**\n   * Updates the quantity of a specific item in the cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} cartId - ID of the cart.\n   * @param {string} cartItemId - ID of the cart item.\n   * @param {UpdateCartItemDto} updateCartItemDto - DTO containing updated quantity.\n   * @returns {Promise} - The updated cart item.\n   *\n   * @example\n   * PATCH /carts/1/items/1\n   * {\n   *   \"quantity\": 3\n   * }\n   */\n  @Patch(':cartId/items/:cartItemId')\n  update(\n    @UserId() userId: number,\n    @Param('cartId') cartId: string,\n    @Param('cartItemId') cartItemId: string,\n    @Body() updateCartItemDto: UpdateCartItemDto\n  ): Promise {\n    return this.cartItemsService.updateQuantityInCart(\n      userId,\n      +cartId,\n      +cartItemId,\n      updateCartItemDto.quantity\n    );\n  }\n\n  /**\n   * Removes a specific item from the cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} cartId - ID of the cart.\n   * @param {string} cartItemId - ID of the cart item.\n   * @returns {Promise} - The removed cart item.\n   *\n   * @example\n   * DELETE /carts/1/items/1\n   */\n  @Delete(':cartId/items/:cartItemId')\n  remove(\n    @UserId() userId: number,\n    @Param('cartId') cartId: string,\n    @Param('cartItemId') cartItemId: string\n  ): Promise {\n    return this.cartItemsService.removeOneItemFromCart(userId, +cartId, +cartItemId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CartItemsModule.html":{"url":"modules/CartItemsModule.html","title":"module - CartItemsModule","body":"\n                   \n\n\n\n\n    Modules\n    CartItemsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CartItemsModule\n\n\n\ncluster_CartItemsModule_imports\n\n\n\ncluster_CartItemsModule_exports\n\n\n\ncluster_CartItemsModule_providers\n\n\n\n\nCartsModule\n\nCartsModule\n\n\n\nCartItemsModule\n\nCartItemsModule\n\nCartItemsModule -->\n\nCartsModule->CartItemsModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nCartItemsModule -->\n\nEventsModule->CartItemsModule\n\n\n\n\n\nCartItemsService \n\nCartItemsService \n\nCartItemsService  -->\n\nCartItemsModule->CartItemsService \n\n\n\n\n\nCartItemsService\n\nCartItemsService\n\nCartItemsModule -->\n\nCartItemsService->CartItemsModule\n\n\n\n\n\nReservationDetailsService\n\nReservationDetailsService\n\nCartItemsModule -->\n\nReservationDetailsService->CartItemsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/cart-items/cart-items.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage cart items.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CartItemsService\n                        \n                        \n                            ReservationDetailsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CartItemsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartsModule\n                        \n                        \n                            EventsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CartItemsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CartItem } from './entities/cartitems.entity';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { CartItemsController } from './cart-items.controller';\nimport { CartItemsService } from './cart-items.service';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\nimport { ReservationDetailsService } from '@modules/reservation-details/reservation-details.service';\nimport { EventsModule } from '@modules/events/events.module';\nimport { ReservationsModule } from '@modules/reservations/reservations.module';\nimport { CartsModule } from '@modules/carts/carts.module';\n\n/**\n * Module to manage cart items.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for CartItem, Event, and ReservationDetails entities\n    TypeOrmModule.forFeature([CartItem, Event, ReservationDetails]),\n    EventsModule, // Import EventsModule\n    CartsModule, // Import CartsModule\n    forwardRef(() => ReservationsModule) // Import ReservationsModule with forward reference\n  ],\n  controllers: [CartItemsController], // Register CartItemsController\n  providers: [CartItemsService, ReservationDetailsService], // Register CartItemsService and ReservationDetailsService as providers\n  exports: [CartItemsService] // Export CartItemsService\n})\nexport class CartItemsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CartItemsService.html":{"url":"injectables/CartItemsService.html","title":"injectable - CartItemsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CartItemsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cart-items/cart-items.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage cart items.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addItemToCart\n                            \n                            \n                                    Async\n                                findAllItemsInCart\n                            \n                            \n                                    Async\n                                findOneItemInCart\n                            \n                            \n                                    Private\n                                    Async\n                                getOrCreateCartItem\n                            \n                            \n                                    Async\n                                removeAllItemFromCart\n                            \n                            \n                                    Async\n                                removeOneItemFromCart\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                updateQuantityInCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartItemRepository: Repository, eventRepository: Repository, cartsService: CartsService, eventPricesService: EventPricesService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/cart-items/cart-items.service.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of CartItemsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the CartItem entity.\n\n\n                                                        \n                                                \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Event entity.\n\n\n                                                        \n                                                \n                                                \n                                                        cartsService\n                                                  \n                                                        \n                                                                        CartsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage shopping carts.\n\n\n                                                        \n                                                \n                                                \n                                                        eventPricesService\n                                                  \n                                                        \n                                                                        EventPricesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage event prices.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addItemToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addItemToCart(userId: number, createCartItemDto: CreateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Adds an item to the cart.\nExample :const cartItem = await cartItemsService.addItemToCart(1, createCartItemDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing cart item details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe added cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllItemsInCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllItemsInCart(userId: number, cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Finds all items in a cart.\nExample :const cartItems = await cartItemsService.findAllItemsInCart(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe found cart items.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneItemInCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneItemInCart(userId: number, cartId: number, cartItemId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Finds a cart item by its ID.\nExample :const cartItem = await cartItemsService.findOneItemInCart(1, 1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe found cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getOrCreateCartItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrCreateCartItem(cartId: number, createCartItemDto: CreateCartItemDto, unitPrice: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Gets or creates a cart item.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing cart item details.\n\n\n                                            \n                                        \n                                        \n                                                unitPrice\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUnit price of the item.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe found or created cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeAllItemFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeAllItemFromCart(userId: number, cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:222\n                        \n                    \n\n\n            \n                \n                        Removes all items from a cart.\nExample :await cartItemsService.removeAllItemFromCart(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeOneItemFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOneItemFromCart(userId: number, cartId: number, cartItemId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Removes an item from the cart.\nExample :const removedItem = await cartItemsService.removeOneItemFromCart(1, 1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe removed cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(item: CartItem)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:240\n                        \n                    \n\n\n            \n                \n                        Saves a cart item to the repository.\nExample :const savedItem = await cartItemsService.save(cartItem);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart item to save.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe saved cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateQuantityInCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateQuantityInCart(userId: number, cartId: number, cartItemId: number, quantity: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Updates the quantity of a cart item.\nExample :const updatedItem = await cartItemsService.updateQuantityInCart(1, 1, 1, 5);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                        \n                                                quantity\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new quantity to set.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe updated cart item.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CartItem } from './entities/cartitems.entity';\nimport { CreateCartItemDto } from './dto/create-cart-item.dto';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { CartsService } from '@modules/carts/carts.service';\nimport { EventPricesService } from '@modules/events/event-prices.service';\n\n/**\n * Service to manage cart items.\n * @class\n */\n@Injectable()\nexport class CartItemsService {\n  /**\n   * Creates an instance of CartItemsService.\n   *\n   * @param {Repository} cartItemRepository - Repository for the CartItem entity.\n   * @param {Repository} eventRepository - Repository for the Event entity.\n   * @param {CartsService} cartsService - Service to manage shopping carts.\n   * @param {EventPricesService} eventPricesService - Service to manage event prices.\n   */\n  constructor(\n    @InjectRepository(CartItem) private readonly cartItemRepository: Repository,\n    @InjectRepository(Event) private readonly eventRepository: Repository,\n    private readonly cartsService: CartsService,\n    private readonly eventPricesService: EventPricesService\n  ) {}\n\n  /**\n   * Adds an item to the cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {CreateCartItemDto} createCartItemDto - DTO containing cart item details.\n   * @returns {Promise} - The added cart item.\n   *\n   * @throws {NotFoundException} If the event is not found or not enough tickets are available.\n   *\n   * @example\n   * const cartItem = await cartItemsService.addItemToCart(1, createCartItemDto);\n   */\n  async addItemToCart(userId: number, createCartItemDto: CreateCartItemDto): Promise {\n    const cart = await this.cartsService.getOrCreateCart(userId);\n    const event = await this.eventRepository.findOneBy({ eventId: createCartItemDto.eventId });\n    if (!event) throw new NotFoundException('Event not found');\n\n    if (createCartItemDto.quantity > event.quantityAvailable) {\n      throw new NotFoundException('Not enough tickets available');\n    }\n\n    const priceDetail = event.prices.find(p => p.priceFormula === createCartItemDto.priceFormula);\n    if (!priceDetail) {\n      throw new NotFoundException('Price formula not found for event');\n    }\n    return this.getOrCreateCartItem(cart.cartId, createCartItemDto, priceDetail.price);\n  }\n\n  /**\n   * Gets or creates a cart item.\n   *\n   * @param {number} cartId - ID of the cart.\n   * @param {CreateCartItemDto} createCartItemDto - DTO containing cart item details.\n   * @param {number} unitPrice - Unit price of the item.\n   * @returns {Promise} - The found or created cart item.\n   *\n   * @private\n   */\n  private async getOrCreateCartItem(\n    cartId: number,\n    createCartItemDto: CreateCartItemDto,\n    unitPrice: number\n  ): Promise {\n    const existingCartItem = await this.cartItemRepository.findOne({\n      where: {\n        cart: { cartId },\n        event: { eventId: createCartItemDto.eventId },\n        priceFormula: createCartItemDto.priceFormula\n      },\n      relations: ['cart', 'event']\n    });\n\n    if (existingCartItem) {\n      existingCartItem.quantity += createCartItemDto.quantity;\n      existingCartItem.price = unitPrice;\n      return await this.cartItemRepository.save(existingCartItem);\n    } else {\n      const cartItem = this.cartItemRepository.create({\n        ...createCartItemDto,\n        price: unitPrice,\n        cart: { cartId },\n        event: { eventId: createCartItemDto.eventId }\n      });\n      return await this.cartItemRepository.save(cartItem);\n    }\n  }\n\n  /**\n   * Finds a cart item by its ID.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @param {number} cartItemId - ID of the cart item.\n   * @returns {Promise} - The found cart item.\n   *\n   * @throws {NotFoundException} If the cart item is not found.\n   *\n   * @example\n   * const cartItem = await cartItemsService.findOneItemInCart(1, 1, 1);\n   */\n  async findOneItemInCart(userId: number, cartId: number, cartItemId: number): Promise {\n    await this.cartsService.findCart(userId, cartId);\n    const cartItem = await this.cartItemRepository.findOne({\n      where: {\n        cartItemId,\n        cart: { cartId }\n      },\n      relations: ['event', 'cart']\n    });\n    if (!cartItem) {\n      throw new NotFoundException(\n        `CartItem with ID ${cartItemId} not found in the specified cart.`\n      );\n    }\n    return cartItem;\n  }\n\n  /**\n   * Finds all items in a cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @returns {Promise} - The found cart items.\n   *\n   * @throws {NotFoundException} If no cart items are found.\n   *\n   * @example\n   * const cartItems = await cartItemsService.findAllItemsInCart(1, 1);\n   */\n  async findAllItemsInCart(userId: number, cartId: number): Promise {\n    await this.cartsService.findCart(userId, cartId);\n    const cartItems = await this.cartItemRepository.find({\n      where: { cart: { cartId } },\n      relations: ['event', 'cart']\n    });\n    if (!cartItems) {\n      throw new NotFoundException('Cart items not found');\n    }\n    return cartItems;\n  }\n\n  /**\n   * Updates the quantity of a cart item.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @param {number} cartItemId - ID of the cart item.\n   * @param {number} quantity - The new quantity to set.\n   * @returns {Promise} - The updated cart item.\n   *\n   * @throws {NotFoundException} If the cart item is not found or the quantity is not available.\n   *\n   * @example\n   * const updatedItem = await cartItemsService.updateQuantityInCart(1, 1, 1, 5);\n   */\n  async updateQuantityInCart(\n    userId: number,\n    cartId: number,\n    cartItemId: number,\n    quantity: number\n  ): Promise {\n    const cartItem = await this.findOneItemInCart(userId, cartId, cartItemId);\n    if (!cartItem) throw new NotFoundException('Cart item not found');\n\n    const ticketPrice = await this.eventPricesService.getPriceByEventAndType(\n      cartItem.event.eventId,\n      cartItem.priceFormula\n    );\n\n    if (quantity > cartItem.event.quantityAvailable) {\n      throw new NotFoundException('Quantity not available');\n    }\n    cartItem.quantity = quantity;\n    cartItem.price = ticketPrice; // Recalculate the total price\n\n    return await this.cartItemRepository.save(cartItem);\n  }\n\n  /**\n   * Removes an item from the cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @param {number} cartItemId - ID of the cart item.\n   * @returns {Promise} - The removed cart item.\n   *\n   * @throws {NotFoundException} If the cart item is not found.\n   *\n   * @example\n   * const removedItem = await cartItemsService.removeOneItemFromCart(1, 1, 1);\n   */\n  async removeOneItemFromCart(\n    userId: number,\n    cartId: number,\n    cartItemId: number\n  ): Promise {\n    const cartItem = await this.findOneItemInCart(userId, cartId, cartItemId);\n    await this.cartItemRepository.remove(cartItem);\n    return cartItem;\n  }\n\n  /**\n   * Removes all items from a cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @returns {Promise}\n   *\n   * @example\n   * await cartItemsService.removeAllItemFromCart(1, 1);\n   */\n  async removeAllItemFromCart(userId: number, cartId: number): Promise {\n    await this.cartsService.findCart(userId, cartId);\n    const cartItems = await this.cartItemRepository.find({\n      where: { cart: { cartId } },\n      relations: ['reservations']\n    });\n    await this.cartItemRepository.remove(cartItems);\n  }\n\n  /**\n   * Saves a cart item to the repository.\n   *\n   * @param {CartItem} item - The cart item to save.\n   * @returns {Promise} - The saved cart item.\n   *\n   * @example\n   * const savedItem = await cartItemsService.save(cartItem);\n   */\n  async save(item: CartItem): Promise {\n    return await this.cartItemRepository.save(item);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CartsModule.html":{"url":"modules/CartsModule.html","title":"module - CartsModule","body":"\n                   \n\n\n\n\n    Modules\n    CartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CartsModule\n\n\n\ncluster_CartsModule_providers\n\n\n\ncluster_CartsModule_exports\n\n\n\n\nCartsService \n\nCartsService \n\n\n\nCartsModule\n\nCartsModule\n\nCartsService  -->\n\nCartsModule->CartsService \n\n\n\n\n\nCartsService\n\nCartsService\n\nCartsModule -->\n\nCartsService->CartsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/carts/carts.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage carts.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CartsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CartsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Cart } from './entities/cart.entity';\nimport { CartsService } from './carts.service';\n\n/**\n * Module to manage carts.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for Cart entity\n    TypeOrmModule.forFeature([Cart])\n  ],\n  providers: [\n    // Register CartsService as a provider\n    CartsService\n  ],\n  exports: [\n    // Export CartsService\n    CartsService\n  ]\n})\nexport class CartsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CartsService.html":{"url":"injectables/CartsService.html","title":"injectable - CartsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CartsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/carts/carts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage carts.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteCart\n                            \n                            \n                                    Async\n                                findCart\n                            \n                            \n                                    Async\n                                getOrCreateCart\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                verifyCartOneBy\n                            \n                            \n                                    Async\n                                verifyCartRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/carts/carts.service.ts:11\n                            \n                        \n\n                \n                    \n                            Creates an instance of CartsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        cartRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Cart entity.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCart(cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Deletes a cart by its ID.\nExample :await cartsService.deleteCart(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCart(userId: number, cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Finds a cart by user ID and cart ID.\nExample :const cart = await cartsService.findCart(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found cart.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOrCreateCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrCreateCart(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Gets an existing cart or creates a new one if it doesn't exist.\nExample :const cart = await cartsService.getOrCreateCart(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found or newly created cart.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(cart: Cart)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:112\n                        \n                    \n\n\n            \n                \n                        Saves a cart to the repository.\nExample :const savedCart = await cartsService.save(cart);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cart\n                                            \n                                                            Cart\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart to save.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe saved cart.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyCartOneBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyCartOneBy(cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Verifies a cart exists by its ID.\nExample :const cart = await cartsService.verifyCartOneBy(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe verified cart.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyCartRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyCartRelation(cartId: number, relations: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Verifies a cart exists by its ID and loads specified relations.\nExample :const cart = await cartsService.verifyCartRelation(1, 'cartItems');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                relations\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRelations to load.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe verified cart with relations loaded.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Cart } from './entities/cart.entity';\nimport { Repository } from 'typeorm';\n\n/**\n * Service to manage carts.\n * @class\n */\n@Injectable()\nexport class CartsService {\n  /**\n   * Creates an instance of CartsService.\n   *\n   * @constructor\n   * @param {Repository} cartRepository - Repository for the Cart entity.\n   */\n  constructor(@InjectRepository(Cart) private readonly cartRepository: Repository) {}\n\n  /**\n   * Finds a cart by user ID and cart ID.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @returns {Promise} - The found cart.\n   *\n   * @throws {NotFoundException} If the cart is not found.\n   *\n   * @example\n   * const cart = await cartsService.findCart(1, 1);\n   */\n  async findCart(userId: number, cartId: number): Promise {\n    const cart = await this.cartRepository.findOne({\n      where: { cartId, user: { userId } }\n    });\n    if (!cart) throw new NotFoundException('Cart not found');\n    return cart;\n  }\n\n  /**\n   * Gets an existing cart or creates a new one if it doesn't exist.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - The found or newly created cart.\n   *\n   * @example\n   * const cart = await cartsService.getOrCreateCart(1);\n   */\n  async getOrCreateCart(userId: number): Promise {\n    let cart = await this.cartRepository.findOne({\n      where: { user: { userId } },\n      relations: ['cartItem']\n    });\n    if (!cart) {\n      cart = this.cartRepository.create({ user: { userId } });\n      await this.cartRepository.save(cart);\n    }\n    return cart;\n  }\n\n  /**\n   * Verifies a cart exists by its ID.\n   *\n   * @param {number} cartId - ID of the cart.\n   * @returns {Promise} - The verified cart.\n   *\n   * @throws {NotFoundException} If the cart is not found.\n   *\n   * @example\n   * const cart = await cartsService.verifyCartOneBy(1);\n   */\n  async verifyCartOneBy(cartId: number): Promise {\n    const cart = await this.cartRepository.findOneBy({ cartId });\n    if (!cart) {\n      throw new NotFoundException(`Cart with ID ${cartId} not found.`);\n    }\n    return cart;\n  }\n\n  /**\n   * Verifies a cart exists by its ID and loads specified relations.\n   *\n   * @param {number} cartId - ID of the cart.\n   * @param {string} relations - Relations to load.\n   * @returns {Promise} - The verified cart with relations loaded.\n   *\n   * @throws {NotFoundException} If the cart is not found.\n   *\n   * @example\n   * const cart = await cartsService.verifyCartRelation(1, 'cartItems');\n   */\n  async verifyCartRelation(cartId: number, relations: string): Promise {\n    const cart = await this.cartRepository.findOne({\n      where: { cartId },\n      relations: [relations]\n    });\n    if (!cart) {\n      throw new NotFoundException(`Cart with ID ${cartId} not found.`);\n    }\n    return cart;\n  }\n\n  /**\n   * Saves a cart to the repository.\n   *\n   * @param {Cart} cart - The cart to save.\n   * @returns {Promise} - The saved cart.\n   *\n   * @example\n   * const savedCart = await cartsService.save(cart);\n   */\n  async save(cart: Cart): Promise {\n    return await this.cartRepository.save(cart);\n  }\n\n  /**\n   * Deletes a cart by its ID.\n   *\n   * @param {number} cartId - ID of the cart to delete.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the cart is not found.\n   *\n   * @example\n   * await cartsService.deleteCart(1);\n   */\n  async deleteCart(cartId: number): Promise {\n    const cart = await this.verifyCartOneBy(cartId);\n    await this.cartRepository.remove(cart);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_imports\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_CommonModule_exports\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nCommonModule\n\nCommonModule\n\nCommonModule -->\n\nRedisModule->CommonModule\n\n\n\n\n\nConvertUtilsService \n\nConvertUtilsService \n\nConvertUtilsService  -->\n\nCommonModule->ConvertUtilsService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCommonModule->EncryptionService \n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nCommonModule->PaymentService \n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nCommonModule->RedisService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nCommonModule->UsersService \n\n\n\n\n\nConvertUtilsService\n\nConvertUtilsService\n\nCommonModule -->\n\nConvertUtilsService->CommonModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCommonModule -->\n\nEncryptionService->CommonModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nCommonModule -->\n\nPaymentService->CommonModule\n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nCommonModule -->\n\nQueryHelperService->CommonModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nCommonModule -->\n\nRedisService->CommonModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nCommonModule -->\n\nUsersService->CommonModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/commom.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for common services.\nThis module is used to import and export common services used throughout the application.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConvertUtilsService\n                        \n                        \n                            EncryptionService\n                        \n                        \n                            PaymentService\n                        \n                        \n                            QueryHelperService\n                        \n                        \n                            RedisService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConvertUtilsService\n                        \n                        \n                            EncryptionService\n                        \n                        \n                            PaymentService\n                        \n                        \n                            RedisService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { EncryptionService } from '@security/encryption/encryption.service';\nimport { UsersService } from './users/users.service';\nimport { PaymentService } from '@libs/payment/payment.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/entities/user.entity';\nimport { RedisModule } from '@database/redis/redis.module';\nimport { RedisService } from '@database/redis/redis.service';\nimport { ConvertUtilsService } from '@utils/services/convert-utils.service';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Module for common services.\n * This module is used to import and export common services used throughout the application.\n */\n@Global()\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), RedisModule],\n  providers: [\n    ConvertUtilsService,\n    UsersService,\n    EncryptionService,\n    PaymentService,\n    RedisService,\n    QueryHelperService\n  ],\n  exports: [UsersService, ConvertUtilsService, EncryptionService, PaymentService, RedisService]\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConvertUtilsService.html":{"url":"injectables/ConvertUtilsService.html","title":"injectable - ConvertUtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConvertUtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/services/convert-utils.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle various utility conversions.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertDateStringToDate\n                            \n                            \n                                convertDaysToSeconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        convertDateStringToDate\n                        \n                    \n                \n            \n            \n                \nconvertDateStringToDate(dateStr: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/services/convert-utils.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Converts a date string in 'YYYY-MM-DD' format to a Date object.\nExample :const date = convertUtilsService.convertDateStringToDate('2023-05-22');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dateStr\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe date string (e.g., '2023-05-22').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \nThe converted Date object.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        convertDaysToSeconds\n                        \n                    \n                \n            \n            \n                \nconvertDaysToSeconds(duration: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/services/convert-utils.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Converts a duration string in days to seconds.\nExample :const seconds = convertUtilsService.convertDaysToSeconds('7d');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                duration\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe duration string (e.g., '7d').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \nThe duration in seconds.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Service to handle various utility conversions.\n * @class\n */\n@Injectable()\nexport class ConvertUtilsService {\n  /**\n   * Converts a duration string in days to seconds.\n   *\n   * @param {string} duration - The duration string (e.g., '7d').\n   * @returns {number} - The duration in seconds.\n   *\n   * @example\n   * const seconds = convertUtilsService.convertDaysToSeconds('7d');\n   */\n  convertDaysToSeconds(duration: string): number {\n    const days = parseInt(duration.replace('d', ''), 10);\n    return isNaN(days) ? 0 : days * 86400;\n  }\n\n  /**\n   * Converts a date string in 'YYYY-MM-DD' format to a Date object.\n   *\n   * @param {string} dateStr - The date string (e.g., '2023-05-22').\n   * @returns {Date} - The converted Date object.\n   *\n   * @example\n   * const date = convertUtilsService.convertDateStringToDate('2023-05-22');\n   */\n  convertDateStringToDate(dateStr: string): Date {\n    const [year, month, day] = dateStr.split('-');\n    return new Date(Date.UTC(+year, +month - 1, +day));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CookieService.html":{"url":"injectables/CookieService.html","title":"injectable - CookieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CookieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/cookie/cookie.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage cookies.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearRefreshTokenCookie\n                            \n                            \n                                extractRefreshTokenCookie\n                            \n                            \n                                setRefreshTokenCookie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, convertUtilsService: ConvertUtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/security/cookie/cookie.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        convertUtilsService\n                                                  \n                                                        \n                                                                        ConvertUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearRefreshTokenCookie\n                        \n                    \n                \n            \n            \n                \nclearRefreshTokenCookie(res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/cookie/cookie.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Clears the refresh token cookie.\nExample :cookieService.clearRefreshTokenCookie(res);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractRefreshTokenCookie\n                        \n                    \n                \n            \n            \n                \nextractRefreshTokenCookie(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/cookie/cookie.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Extracts the refresh token from the request cookies.\nExample :const refreshToken = cookieService.extractRefreshTokenCookie(req);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP request object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe refresh token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRefreshTokenCookie\n                        \n                    \n                \n            \n            \n                \nsetRefreshTokenCookie(res: Response, refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/cookie/cookie.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Sets the refresh token as an HTTP-only cookie.\nExample :cookieService.setRefreshTokenCookie(res, refreshToken);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe refresh token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PROD_ENV } from '@utils/constants/constants.env';\nimport { ConvertUtilsService } from '@utils/services/convert-utils.service';\nimport { CookieOptions, Request, Response } from 'express';\n\n/**\n * Service to manage cookies.\n * @class\n */\n@Injectable()\nexport class CookieService {\n  constructor(\n    private configService: ConfigService,\n    private convertUtilsService: ConvertUtilsService\n  ) {}\n\n  /**\n   * Extracts the refresh token from the request cookies.\n   *\n   * @param {Request} req - HTTP request object.\n   * @returns {string} - The refresh token.\n   *\n   * @example\n   * const refreshToken = cookieService.extractRefreshTokenCookie(req);\n   */\n  extractRefreshTokenCookie(req: Request): string {\n    return req.cookies['RefreshToken'];\n  }\n\n  /**\n   * Sets the refresh token as an HTTP-only cookie.\n   *\n   * @param {Response} res - HTTP response object.\n   * @param {string} refreshToken - The refresh token.\n   * @throws {Error} If JWT_REFRESH_TOKEN_EXPIRATION is not configured.\n   *\n   * @example\n   * cookieService.setRefreshTokenCookie(res, refreshToken);\n   */\n  setRefreshTokenCookie(res: Response, refreshToken: string): void {\n    const refreshTokenExpiration = this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION');\n    if (!refreshTokenExpiration) {\n      throw new Error('JWT_REFRESH_TOKEN_EXPIRATION is not configured.');\n    }\n\n    const refreshTokenTTL = this.convertUtilsService.convertDaysToSeconds(refreshTokenExpiration);\n    const cookieOptions: CookieOptions = {\n      httpOnly: true,\n      secure: this.configService.get('NODE_ENV') === PROD_ENV,\n      maxAge: refreshTokenTTL * 1000,\n      path: '/',\n      sameSite: this.configService.get('NODE_ENV') === PROD_ENV ? 'none' : 'strict'\n    };\n    res.cookie('RefreshToken', refreshToken, cookieOptions);\n  }\n\n  /**\n   * Clears the refresh token cookie.\n   *\n   * @param {Response} res - HTTP response object.\n   *\n   * @example\n   * cookieService.clearRefreshTokenCookie(res);\n   */\n  clearRefreshTokenCookie(res: Response): void {\n    res.clearCookie('RefreshToken', { path: '/' });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCartItemDto.html":{"url":"classes/CreateCartItemDto.html","title":"class - CreateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cart-items/dto/create-cart-item.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a cart item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                eventId\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                priceFormula\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                quantity\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/dto/create-cart-item.dto.ts:36\n                        \n                    \n\n            \n                \n                    Identifier for the event.\nThis field is required and must be a non-empty integer.\nExample :const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        priceFormula\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceFormulaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(PriceFormulaEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/dto/create-cart-item.dto.ts:68\n                        \n                    \n\n            \n                \n                    Pricing formula for the cart item.\nThis field is required and must be a valid enum value of PriceFormulaEnum.\nExample :const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()@IsPositive()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/dto/create-cart-item.dto.ts:54\n                        \n                    \n\n            \n                \n                    Quantity of the cart item.\nThis field is required, must be a non-empty positive integer, and must be at least 1.\nExample :const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/dto/create-cart-item.dto.ts:22\n                        \n                    \n\n            \n                \n                    Identifier for the user.\nThis field is optional and must be a non-empty integer if provided.\nExample :const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { IsEnum, IsInt, IsNotEmpty, IsOptional, IsPositive, Min } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating a cart item.\n *\n * @class\n */\nexport class CreateCartItemDto {\n  /**\n   * Identifier for the user.\n   * This field is optional and must be a non-empty integer if provided.\n   * @type {number}\n   * @isInt\n   * @isOptional\n   *\n   * @example\n   * const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsInt()\n  @IsOptional()\n  readonly userId: number;\n\n  /**\n   * Identifier for the event.\n   * This field is required and must be a non-empty integer.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  readonly eventId: number;\n\n  /**\n   * Quantity of the cart item.\n   * This field is required, must be a non-empty positive integer, and must be at least 1.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   * @isPositive\n   * @min 1\n   *\n   * @example\n   * const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  @IsPositive()\n  @Min(1)\n  readonly quantity: number;\n\n  /**\n   * Pricing formula for the cart item.\n   * This field is required and must be a valid enum value of PriceFormulaEnum.\n   * @type {PriceFormulaEnum}\n   * @isNotEmpty\n   * @isEnum\n   *\n   * @example\n   * const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsEnum(PriceFormulaEnum)\n  readonly priceFormula: PriceFormulaEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDto.html":{"url":"classes/CreateEventDto.html","title":"class - CreateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/dto/create-event.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating an event.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                basePrice\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                categoryType\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                longDescription\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                quantityAvailable\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                shortDescription\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                startDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:72\n                        \n                    \n\n            \n                \n                    Base price of the event.\nThis field is required and must be a number.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        categoryType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryEventTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:128\n                        \n                    \n\n            \n                \n                    Category type of the event.\nThis field is required and must be a valid enum value of CategoryEventTypeEnum.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:114\n                        \n                    \n\n            \n                \n                    End date of the event in ISO 8601 format.\nThis field is required and must be a string.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        longDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:58\n                        \n                    \n\n            \n                \n                    Long description of the event.\nThis field is required, must be a string, and have a maximum length of 500 characters.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        quantityAvailable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:86\n                        \n                    \n\n            \n                \n                    Quantity of tickets available for the event.\nThis field is required and must be a number.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        shortDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:42\n                        \n                    \n\n            \n                \n                    Short description of the event.\nThis field is required, must be a string, and have a maximum length of 255 characters.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:100\n                        \n                    \n\n            \n                \n                    Start date of the event in ISO 8601 format.\nThis field is required and must be a string.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(5)@MaxLength(25)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:26\n                        \n                    \n\n            \n                \n                    Title of the event.\nThis field is required, must be a string, and have a length between 5 and 50 characters.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CategoryEventTypeEnum } from '@common/enums/category-type.enum';\nimport { IsNotEmpty, IsNumber, IsString, MaxLength, MinLength } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating an event.\n *\n * @class\n */\nexport class CreateEventDto {\n  /**\n   * Title of the event.\n   * This field is required, must be a string, and have a length between 5 and 50 characters.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   * @minLength 5\n   * @maxLength 25\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(25)\n  readonly title: string;\n\n  /**\n   * Short description of the event.\n   * This field is required, must be a string, and have a maximum length of 255 characters.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   * @maxLength 255\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(255)\n  readonly shortDescription: string;\n\n  /**\n   * Long description of the event.\n   * This field is required, must be a string, and have a maximum length of 500 characters.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   * @maxLength 500\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(500)\n  readonly longDescription: string;\n\n  /**\n   * Base price of the event.\n   * This field is required and must be a number.\n   * @type {number}\n   * @isNotEmpty\n   * @isNumber\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  readonly basePrice: number;\n\n  /**\n   * Quantity of tickets available for the event.\n   * This field is required and must be a number.\n   * @type {number}\n   * @isNotEmpty\n   * @isNumber\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  readonly quantityAvailable: number;\n\n  /**\n   * Start date of the event in ISO 8601 format.\n   * This field is required and must be a string.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly startDate: string;\n\n  /**\n   * End date of the event in ISO 8601 format.\n   * This field is required and must be a string.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly endDate: string;\n\n  /**\n   * Category type of the event.\n   * This field is required and must be a valid enum value of CategoryEventTypeEnum.\n   * @type {CategoryEventTypeEnum}\n   * @isNotEmpty\n   * @isString\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly categoryType: CategoryEventTypeEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDetailsDto.html":{"url":"classes/CreateReservationDetailsDto.html","title":"class - CreateReservationDetailsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDetailsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservation-details/dto/create-reservation-details.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating reservation details.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                eventId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                price\n                            \n                            \n                                    \n                                    Readonly\n                                priceFormula\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                reservationId\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                shortDescription\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:36\n                        \n                    \n\n            \n                \n                    Identifier for the event.\nThis field is optional and must be a non-empty integer if provided.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:80\n                        \n                    \n\n            \n                \n                    Price of the reservation.\nThis field is required, must be a number, and must be at least 0.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        priceFormula\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceFormulaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(PriceFormulaEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:92\n                        \n                    \n\n            \n                \n                    Pricing formula for the reservation.\nThis field is required and must be a valid enum value of PriceFormulaEnum.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        reservationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:22\n                        \n                    \n\n            \n                \n                    Identifier for the reservation.\nThis field is optional and must be a non-empty integer if provided.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        shortDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:64\n                        \n                    \n\n            \n                \n                    Short description of the reservation details.\nThis field is required and must be a non-empty string.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:50\n                        \n                    \n\n            \n                \n                    Title of the reservation details.\nThis field is required and must be a non-empty string.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { IsEnum, IsInt, IsNotEmpty, IsNumber, IsString, Min } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating reservation details.\n *\n * @class\n */\nexport class CreateReservationDetailsDto {\n  /**\n   * Identifier for the reservation.\n   * This field is optional and must be a non-empty integer if provided.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  readonly reservationId?: number;\n\n  /**\n   * Identifier for the event.\n   * This field is optional and must be a non-empty integer if provided.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  readonly eventId?: number;\n\n  /**\n   * Title of the reservation details.\n   * This field is required and must be a non-empty string.\n   * @type {string}\n   * @isString\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly title: string;\n\n  /**\n   * Short description of the reservation details.\n   * This field is required and must be a non-empty string.\n   * @type {string}\n   * @isString\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly shortDescription: string;\n\n  /**\n   * Price of the reservation.\n   * This field is required, must be a number, and must be at least 0.\n   * @type {number}\n   * @isNumber\n   * @min 0\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  @Min(0)\n  readonly price: number;\n\n  /**\n   * Pricing formula for the reservation.\n   * This field is required and must be a valid enum value of PriceFormulaEnum.\n   * @type {PriceFormulaEnum}\n   * @isEnum\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsEnum(PriceFormulaEnum)\n  readonly priceFormula: PriceFormulaEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/dto/create-reservation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a reservation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                cartItemId\n                            \n                            \n                                    \n                                    \n                                paymentId\n                            \n                            \n                                    \n                                    \n                                totalPrice\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        cartItemId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/dto/create-reservation.dto.ts:36\n                        \n                    \n\n            \n                \n                    Identifier for the cart item being reserved.\nThis field is required and must be a non-empty integer.\nExample :const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        paymentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/dto/create-reservation.dto.ts:64\n                        \n                    \n\n            \n                \n                    Payment identifier for the reservation.\nThis field is required and must be a non-empty integer.\nExample :const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/dto/create-reservation.dto.ts:50\n                        \n                    \n\n            \n                \n                    Total price of the reservation.\nThis field is required and must be a non-empty number.\nExample :const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/dto/create-reservation.dto.ts:22\n                        \n                    \n\n            \n                \n                    The user making the reservation.\nThis field is required and must be a valid User object.\nExample :const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@modules/users/entities/user.entity';\nimport { IsInt, IsNotEmpty, IsString, IsNumber } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating a reservation.\n *\n * @class\n */\nexport class CreateReservationDto {\n  /**\n   * The user making the reservation.\n   * This field is required and must be a valid User object.\n   * @type {User}\n   * @isNotEmpty\n   * @isString\n   *\n   * @example\n   * const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n   */\n  @IsNotEmpty()\n  @IsString()\n  user: User;\n\n  /**\n   * Identifier for the cart item being reserved.\n   * This field is required and must be a non-empty integer.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  cartItemId: number;\n\n  /**\n   * Total price of the reservation.\n   * This field is required and must be a non-empty number.\n   * @type {number}\n   * @isNotEmpty\n   * @isNumber\n   *\n   * @example\n   * const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  totalPrice: number;\n\n  /**\n   * Payment identifier for the reservation.\n   * This field is required and must be a non-empty integer.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  paymentId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableCartItems1712661230450.html":{"url":"classes/CreateTableCartItems1712661230450.html","title":"class - CreateTableCartItems1712661230450","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableCartItems1712661230450\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712661230450-CreateTableCartItems.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"cart_items\" table.\nThis migration adds a table for storing items in a user's cart, including references to the cart,\nevent, and pricing information. This is intended to set up the schema for managing cart items\nwithin the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230450-CreateTableCartItems.ts:55\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"cart_items\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230450-CreateTableCartItems.ts:21\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"cart_items\" table with various columns to store\ncart item details. If the table or the \"type_price_formule_enum\" type\nalready exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_PRICE_FORMULE_TYPE_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"cart_items\" table.\n *\n * This migration adds a table for storing items in a user's cart, including references to the cart,\n * event, and pricing information. This is intended to set up the schema for managing cart items\n * within the application.\n */\nexport class CreateTableCartItems1712661230450 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"cart_items\" table with various columns to store\n   * cart item details. If the table or the \"type_price_formule_enum\" type\n   * already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"cart_items\" table to check if it already exists.\n    const table = await queryRunner.getTable('cart_items');\n\n    // Ensure the \"type_price_formule_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_PRICE_FORMULE_TYPE_EXIST);\n\n    // Create the \"cart_items\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"cart_items\" (\n          \"cartItemId\" SERIAL PRIMARY KEY,\n          \"cartId\" INTEGER NULL,\n          \"eventId\" INTEGER NULL,\n          \"priceFormula\" \"type_price_formule_enum\" NOT NULL,\n          \"price\" INTEGER NOT NULL,\n          \"quantity\" INTEGER NOT NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (\"cartId\") REFERENCES \"cart\" (\"cartId\") ON DELETE CASCADE,\n          FOREIGN KEY (\"eventId\") REFERENCES \"events\" (\"eventId\")\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"cart_items\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"cart_items\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"cart_items\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableCarts1712661221574.html":{"url":"classes/CreateTableCarts1712661221574.html","title":"class - CreateTableCarts1712661221574","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableCarts1712661221574\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712661221574-CreateTableCarts.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"cart\" table.\nThis migration adds a table for storing shopping cart information, including\nreferences to the user and timestamps for creation and updates.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661221574-CreateTableCarts.ts:43\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"cart\" table, effectively undoing the changes made in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661221574-CreateTableCarts.ts:18\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"cart\" table with various columns to store cart details.\nIf the table already exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"cart\" table.\n *\n * This migration adds a table for storing shopping cart information, including\n * references to the user and timestamps for creation and updates.\n */\nexport class CreateTableCarts1712661221574 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"cart\" table with various columns to store cart details.\n   * If the table already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"cart\" table to check if it already exists.\n    const table = await queryRunner.getTable('cart');\n\n    // Create the \"cart\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"cart\" (\n          \"cartId\" SERIAL PRIMARY KEY,\n          \"userId\" INTEGER NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (\"userId\") REFERENCES \"users\" (\"userId\") ON DELETE CASCADE\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"cart\" table, effectively undoing the changes made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"cart\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"cart\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableEventPrices1712642603715.html":{"url":"classes/CreateTableEventPrices1712642603715.html","title":"class - CreateTableEventPrices1712642603715","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableEventPrices1712642603715\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712642603000-CreateTableEventPrices.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"event_prices\" table.\nThis migration adds a table for storing pricing information for events,\nincluding the event ID, price formula, and price. This is intended to set up\nthe schema for managing event pricing within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712642603000-CreateTableEventPrices.ts:50\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"event_prices\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712642603000-CreateTableEventPrices.ts:21\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"event_prices\" table with various columns to store\nevent pricing details. If the table or the \"type_price_formule_enum\" type\nalready exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_PRICE_FORMULE_TYPE_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"event_prices\" table.\n *\n * This migration adds a table for storing pricing information for events,\n * including the event ID, price formula, and price. This is intended to set up\n * the schema for managing event pricing within the application.\n */\nexport class CreateTableEventPrices1712642603715 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"event_prices\" table with various columns to store\n   * event pricing details. If the table or the \"type_price_formule_enum\" type\n   * already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"event_prices\" table to check if it already exists.\n    const table = await queryRunner.getTable('event_prices');\n\n    // Ensure the \"type_price_formule_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_PRICE_FORMULE_TYPE_EXIST);\n\n    // Create the \"event_prices\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"event_prices\" (\n          \"eventPriceId\" SERIAL PRIMARY KEY,\n          \"eventId\" INTEGER NOT NULL,\n          \"priceFormula\" \"type_price_formule_enum\" NOT NULL,\n          \"price\" INTEGER NOT NULL,\n          FOREIGN KEY (\"eventId\") REFERENCES \"events\" (\"eventId\") ON DELETE CASCADE\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"event_prices\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"event_prices\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"event_prices\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableEvents1712572717258.html":{"url":"classes/CreateTableEvents1712572717258.html","title":"class - CreateTableEvents1712572717258","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableEvents1712572717258\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712572717258-CreateTableEvents.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"events\" table.\nThis migration adds a table for storing event information, including title, descriptions,\ncategory, pricing, and dates. This is intended to set up the schema for managing events\nwithin the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712572717258-CreateTableEvents.ts:56\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"events\" table, effectively undoing the changes made in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712572717258-CreateTableEvents.ts:20\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"events\" table with various columns to store event details.\nIf the table or the \"category_type_enum\" type already exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_CATEGORY_TYPE_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"events\" table.\n *\n * This migration adds a table for storing event information, including title, descriptions,\n * category, pricing, and dates. This is intended to set up the schema for managing events\n * within the application.\n */\nexport class CreateTableEvents1712572717258 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"events\" table with various columns to store event details.\n   * If the table or the \"category_type_enum\" type already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"events\" table to check if it already exists.\n    const table = await queryRunner.getTable('events');\n\n    // Ensure the \"category_type_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_CATEGORY_TYPE_EXIST);\n\n    // Create the \"events\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"events\" (\n          \"eventId\" SERIAL PRIMARY KEY,\n          \"title\" VARCHAR NOT NULL UNIQUE,\n          \"shortDescription\" TEXT NOT NULL,\n          \"longDescription\" TEXT NOT NULL,\n          \"categoryType\" \"category_type_enum\" NOT NULL,\n          \"basePrice\" INTEGER NOT NULL DEFAULT 0,\n          \"quantityAvailable\" INTEGER DEFAULT 0,\n          \"quantitySold\" INTEGER DEFAULT 0,\n          \"revenueGenerated\" INTEGER DEFAULT 0,\n          \"startDate\" TIMESTAMP NOT NULL,\n          \"endDate\" TIMESTAMP NOT NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"events\" table, effectively undoing the changes made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"events\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"events\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableReservationDetails1712751776641.html":{"url":"classes/CreateTableReservationDetails1712751776641.html","title":"class - CreateTableReservationDetails1712751776641","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableReservationDetails1712751776641\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712751776641-CreateTableReservationDetails.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"reservation_details\" table.\nThis migration adds a table for storing detailed information about reservations,\nincluding references to the event and pricing information. This is intended\nto set up the schema for managing reservation details within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712751776641-CreateTableReservationDetails.ts:56\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"reservation_details\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712751776641-CreateTableReservationDetails.ts:21\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"reservation_details\" table with various columns to store\nreservation detail information. If the table or the \"type_price_formule_enum\" type\nalready exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_PRICE_FORMULE_TYPE_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"reservation_details\" table.\n *\n * This migration adds a table for storing detailed information about reservations,\n * including references to the event and pricing information. This is intended\n * to set up the schema for managing reservation details within the application.\n */\nexport class CreateTableReservationDetails1712751776641 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"reservation_details\" table with various columns to store\n   * reservation detail information. If the table or the \"type_price_formule_enum\" type\n   * already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"reservation_details\" table to check if it already exists.\n    const table = await queryRunner.getTable('reservation_details');\n\n    // Ensure the \"type_price_formule_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_PRICE_FORMULE_TYPE_EXIST);\n\n    // Create the \"reservation_details\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"reservation_details\" (\n          \"reservationDetailsId\" SERIAL PRIMARY KEY,\n          \"eventId\" INT NOT NULL,\n          \"reservationId\" INT NOT NULL,\n          \"priceFormula\" \"type_price_formule_enum\" NOT NULL,\n          \"price\" INT NOT NULL DEFAULT 0,\n          \"title\" VARCHAR NOT NULL,\n          \"shortDescription\" TEXT NOT NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (\"eventId\") REFERENCES \"events\" (\"eventId\"),\n          FOREIGN KEY (\"reservationId\") REFERENCES \"reservations\" (\"reservationId\") ON DELETE CASCADE\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"reservation_details\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"reservation_details\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"reservation_details\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableReservations1712661230451.html":{"url":"classes/CreateTableReservations1712661230451.html","title":"class - CreateTableReservations1712661230451","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableReservations1712661230451\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712661230451-CreateTableReservations.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"reservations\" table.\nThis migration adds a table for storing reservation information, including references\nto the user, cart item, transaction, reservation details, and ticket. This is intended\nto set up the schema for managing reservations within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230451-CreateTableReservations.ts:50\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"reservations\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230451-CreateTableReservations.ts:19\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"reservations\" table with various columns to store\nreservation details. If the table already exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"reservations\" table.\n *\n * This migration adds a table for storing reservation information, including references\n * to the user, cart item, transaction, reservation details, and ticket. This is intended\n * to set up the schema for managing reservations within the application.\n */\nexport class CreateTableReservations1712661230451 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"reservations\" table with various columns to store\n   * reservation details. If the table already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"reservations\" table to check if it already exists.\n    const table = await queryRunner.getTable('reservations');\n\n    // Create the \"reservations\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"reservations\" (\n          \"reservationId\" SERIAL PRIMARY KEY,\n          \"userId\" INT NULL,\n          \"cartItemId\" INT NULL,\n          \"transactionId\" INT NULL,\n          \"reservationDetailsId\" INT NULL, \n          \"ticketId\" INT NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (\"userId\") REFERENCES \"users\" (\"userId\") ON DELETE SET NULL,\n          FOREIGN KEY (\"cartItemId\") REFERENCES \"cart_items\" (\"cartItemId\") ON DELETE SET NULL\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"reservations\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"reservations\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"reservations\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableTickets1712717719010.html":{"url":"classes/CreateTableTickets1712717719010.html","title":"class - CreateTableTickets1712717719010","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableTickets1712717719010\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712717719010-CreateTableTickets.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"tickets\" table.\nThis migration adds a table for storing ticket information, including references\nto the reservation and security details for ticket validation. This is intended\nto set up the schema for managing tickets within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712717719010-CreateTableTickets.ts:46\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"tickets\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712717719010-CreateTableTickets.ts:19\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"tickets\" table with various columns to store\nticket details. If the table already exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"tickets\" table.\n *\n * This migration adds a table for storing ticket information, including references\n * to the reservation and security details for ticket validation. This is intended\n * to set up the schema for managing tickets within the application.\n */\nexport class CreateTableTickets1712717719010 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"tickets\" table with various columns to store\n   * ticket details. If the table already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"tickets\" table to check if it already exists.\n    const table = await queryRunner.getTable('tickets');\n\n    // Create the \"tickets\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"tickets\" (\n          \"ticketId\" SERIAL PRIMARY KEY,\n          \"reservationId\" INT NOT NULL,\n          \"purchaseKey\" VARCHAR(255) NOT NULL,\n          \"secureKey\" VARCHAR(255) NOT NULL,\n          \"qrCode\" TEXT NOT NULL,\n          FOREIGN KEY (\"reservationId\") REFERENCES \"reservations\" (\"reservationId\") ON DELETE CASCADE\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"tickets\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"tickets\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"tickets\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableTransactions1712661230452.html":{"url":"classes/CreateTableTransactions1712661230452.html","title":"class - CreateTableTransactions1712661230452","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableTransactions1712661230452\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712661230452-CreateTableTransactions.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"transactions\" table.\nThis migration adds a table for storing transaction information, including\nreferences to the user, payment status, and payment details. This is intended\nto set up the schema for managing transactions within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230452-CreateTableTransactions.ts:53\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"transactions\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230452-CreateTableTransactions.ts:21\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"transactions\" table with various columns to store\ntransaction details. If the table or the \"status_reservation_enum\" type\nalready exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_STATUS_RESERVATION_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"transactions\" table.\n *\n * This migration adds a table for storing transaction information, including\n * references to the user, payment status, and payment details. This is intended\n * to set up the schema for managing transactions within the application.\n */\nexport class CreateTableTransactions1712661230452 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"transactions\" table with various columns to store\n   * transaction details. If the table or the \"status_reservation_enum\" type\n   * already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"transactions\" table to check if it already exists.\n    const table = await queryRunner.getTable('transactions');\n\n    // Ensure the \"status_reservation_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_STATUS_RESERVATION_EXIST);\n\n    // Create the \"transactions\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"transactions\" (\n          \"transactionId\" SERIAL PRIMARY KEY,\n          \"userId\" INT NULL,\n          \"statusPayment\" \"status_reservation_enum\",\n          \"paymentId\" INT NOT NULL,\n          \"totalAmount\" DECIMAL NOT NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (\"userId\") REFERENCES \"users\" (\"userId\") ON DELETE SET NULL\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"transactions\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"transactions\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"transactions\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableUsers1711085051379.html":{"url":"classes/CreateTableUsers1711085051379.html","title":"class - CreateTableUsers1711085051379","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableUsers1711085051379\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1711085051379-CreateTableUsers.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"users\" table.\nThis migration adds a table for storing user information, including their\nemail, password, and role. This is intended to be the initial schema setup\nfor managing user data within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1711085051379-CreateTableUsers.ts:56\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"users\" table, effectively undoing the changes made in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1711085051379-CreateTableUsers.ts:20\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"users\" table with various columns to store user details.\nIf the table or the \"user_role_enum\" type already exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_USER_ROLE_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"users\" table.\n *\n * This migration adds a table for storing user information, including their\n * email, password, and role. This is intended to be the initial schema setup\n * for managing user data within the application.\n */\nexport class CreateTableUsers1711085051379 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"users\" table with various columns to store user details.\n   * If the table or the \"user_role_enum\" type already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"users\" table to check if it already exists.\n    const table = await queryRunner.getTable('users');\n\n    // Ensure the \"user_role_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_USER_ROLE_EXIST);\n\n    // Create the \"users\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"users\" (\n          \"userId\" SERIAL PRIMARY KEY,\n          \"email\" VARCHAR NOT NULL UNIQUE,\n          \"firstName\" VARCHAR NOT NULL,\n          \"lastName\" VARCHAR NOT NULL,\n          \"passwordHash\" VARCHAR NOT NULL,\n          \"accountKey\" VARCHAR UNIQUE,\n          \"role\" \"user_role_enum\" DEFAULT 'USER',\n          \"isActive\" BOOLEAN DEFAULT TRUE,\n          \"tokenVersion\" INTEGER DEFAULT 1,\n          \"transactionsCount\" INTEGER DEFAULT 0,\n          \"totalSpent\" INTEGER DEFAULT 0,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"lastLogin\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"users\" table, effectively undoing the changes made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"users\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"users\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTransactionDto.html":{"url":"classes/CreateTransactionDto.html","title":"class - CreateTransactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTransactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/dto/create-transaction.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateTransactionDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:62\n                        \n                    \n\n            \n                \n                    Email address of the user.\nThis field is required and must be a valid email address.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(3)@MaxLength(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:32\n                        \n                    \n\n            \n                \n                    First name of the user.\nThis field is optional, must be a string, and have a length between 3 and 50 characters.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(3)@MaxLength(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:48\n                        \n                    \n\n            \n                \n                    Last name of the user.\nThis field is optional, must be a string, and have a length between 3 and 50 characters.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsStrongPassword()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:78\n                        \n                    \n\n            \n                \n                    Password for the user.\nThis field is required, must be a strong password, and have a minimum length of 6 characters.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:90\n                        \n                    \n\n            \n                \n                    Role of the user.\nThis field is optional and must be a valid enum value of UserRole.\nExample :```html\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserRole } from '@common/enums/user-role.enum';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsStrongPassword,\n  MaxLength,\n  MinLength\n} from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating a user.\n *\n * @class\n */\nexport class CreateUserDto {\n  /**\n   * First name of the user.\n   * This field is optional, must be a string, and have a length between 3 and 50 characters.\n   * @type {string}\n   * @isString\n   * @minLength 3\n   * @maxLength 50\n   *\n   * @example\n   * const dto: CreateUserDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsString()\n  @MinLength(3)\n  @MaxLength(50)\n  readonly firstName?: string;\n\n  /**\n   * Last name of the user.\n   * This field is optional, must be a string, and have a length between 3 and 50 characters.\n   * @type {string}\n   * @isString\n   * @minLength 3\n   * @maxLength 50\n   *\n   * @example\n   * const dto: CreateUserDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsString()\n  @MinLength(3)\n  @MaxLength(50)\n  readonly lastName?: string;\n\n  /**\n   * Email address of the user.\n   * This field is required and must be a valid email address.\n   * @type {string}\n   * @isNotEmpty\n   * @isEmail\n   *\n   * @example\n   * const dto: CreateUserDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password for the user.\n   * This field is required, must be a strong password, and have a minimum length of 6 characters.\n   * @type {string}\n   * @isNotEmpty\n   * @isStrongPassword\n   * @minLength 6\n   *\n   * @example\n   * const dto: CreateUserDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @IsStrongPassword()\n  @MinLength(6)\n  readonly password: string;\n\n  /**\n   * Role of the user.\n   * This field is optional and must be a valid enum value of UserRole.\n   * @type {UserRole}\n   * @isOptional\n   *\n   * @example\n   * const dto: CreateUserDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!', role: UserRole.ADMIN };\n   */\n  @IsOptional()\n  readonly role?: UserRole;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to set up and configure the database connection using TypeORM.\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n/**\n * Module to set up and configure the database connection using TypeORM.\n * @module\n */\n@Module({\n  imports: [\n    /**\n     * Configures TypeORM to connect to a PostgreSQL database using async configuration.\n     *\n     * @remarks\n     * The configuration is dynamically loaded from environment variables using the ConfigService.\n     *\n     * @example\n     * TypeOrmModule.forRootAsync({\n     *   imports: [ConfigModule],\n     *   inject: [ConfigService],\n     *   useFactory: (config: ConfigService) => ({\n     *     type: 'postgres',\n     *     host: config.get('PGHOST'),\n     *     port: config.get('PGPORT'),\n     *     username: config.get('PGUSER'),\n     *     password: config.get('PGPASSOWRD'),\n     *     database: config.get('PGDATABASE'),\n     *     synchronize: false,\n     *     entities: [__dirname + '/*.entity{.ts,.js}']\n     *   })\n     * })\n     */\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        type: 'postgres',\n        host: config.get('PGHOST'), // Database host\n        port: config.get('PGPORT'), // Database port\n        username: config.get('PGUSER'), // Database username\n        password: config.get('PGPASSOWRD'), // Database password\n        database: config.get('PGDATABASE'), // Database name\n        synchronize: false, // Whether to synchronize the database schema (use false in production)\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'] // Path to the entities\n      })\n    })\n  ]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle encryption tasks.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatedKeyUuid\n                            \n                            \n                                    Async\n                                generatedQRCode\n                            \n                            \n                                    Async\n                                generatedSecureKey\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generatedKeyUuid\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatedKeyUuid()\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/encryption/encryption.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Generates a UUID.\nExample :const uuid = await encryptionService.generatedKeyUuid();\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe generated UUID.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generatedQRCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatedQRCode(secureKey: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/encryption/encryption.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Generates a QR code from a secure key.\nExample :const qrCode = await encryptionService.generatedQRCode(secureKey);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                secureKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe secure key to encode in the QR code.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe generated QR code as a data URL.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generatedSecureKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatedSecureKey(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/encryption/encryption.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Generates a secure key for a user by combining the user's account key with a new UUID.\nExample :const secureKey = await encryptionService.generatedSecureKey(user);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe generated secure key.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/encryption/encryption.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Hashes a password using Argon2.\nExample :const hashedPassword = await encryptionService.hashPassword('password123');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to hash.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe hashed password.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPassword(hash: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/encryption/encryption.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Verifies a password against a hash using Argon2.\nExample :const isValid = await encryptionService.verifyPassword(hashedPassword, 'password123');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hashed password.\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to verify.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nWhether the password is valid.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from '@modules/users/entities/user.entity';\nimport { Injectable } from '@nestjs/common';\nimport * as argon2 from 'argon2';\nimport * as qrcode from 'qrcode';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Service to handle encryption tasks.\n * @class\n */\n@Injectable()\nexport class EncryptionService {\n  /**\n   * Hashes a password using Argon2.\n   *\n   * @param {string} password - The plain text password to hash.\n   * @returns {Promise} - The hashed password.\n   *\n   * @example\n   * const hashedPassword = await encryptionService.hashPassword('password123');\n   */\n  async hashPassword(password: string): Promise {\n    return argon2.hash(password);\n  }\n\n  /**\n   * Verifies a password against a hash using Argon2.\n   *\n   * @param {string} hash - The hashed password.\n   * @param {string} password - The plain text password to verify.\n   * @returns {Promise} - Whether the password is valid.\n   *\n   * @example\n   * const isValid = await encryptionService.verifyPassword(hashedPassword, 'password123');\n   */\n  async verifyPassword(hash: string, password: string): Promise {\n    return argon2.verify(hash, password);\n  }\n\n  /**\n   * Generates a UUID.\n   *\n   * @returns {Promise} - The generated UUID.\n   *\n   * @example\n   * const uuid = await encryptionService.generatedKeyUuid();\n   */\n  async generatedKeyUuid(): Promise {\n    return uuidv4();\n  }\n\n  /**\n   * Generates a secure key for a user by combining the user's account key with a new UUID.\n   *\n   * @param {User} user - The user entity.\n   * @returns {Promise} - The generated secure key.\n   *\n   * @example\n   * const secureKey = await encryptionService.generatedSecureKey(user);\n   */\n  async generatedSecureKey(user: User): Promise {\n    const purchaseKey = await this.generatedKeyUuid();\n    return `${user.accountKey}-${purchaseKey}`;\n  }\n\n  /**\n   * Generates a QR code from a secure key.\n   *\n   * @param {string} secureKey - The secure key to encode in the QR code.\n   * @returns {Promise} - The generated QR code as a data URL.\n   *\n   * @example\n   * const qrCode = await encryptionService.generatedQRCode(secureKey);\n   */\n  async generatedQRCode(secureKey: string): Promise {\n    return await qrcode.toDataURL(secureKey);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Event.html":{"url":"entities/Event.html","title":"entity - Event","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Event\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/entities/event.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing an event.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                basePrice\n                            \n                            \n                                    \n                                cartItems\n                            \n                            \n                                    \n                                categoryType\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                endDate\n                            \n                            \n                                    \n                                eventId\n                            \n                            \n                                    \n                                longDescription\n                            \n                            \n                                    \n                                prices\n                            \n                            \n                                    \n                                quantityAvailable\n                            \n                            \n                                    \n                                quantitySold\n                            \n                            \n                                    \n                                reservationsDetails\n                            \n                            \n                                    \n                                revenueGenerated\n                            \n                            \n                                    \n                                shortDescription\n                            \n                            \n                                    \n                                startDate\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:79\n                        \n                    \n\n            \n                \n                    Base price of the event.\nExample :const basePrice = event.basePrice;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.event)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:171\n                        \n                    \n\n            \n                \n                    Cart items associated with the event.\nExample :const cartItems = event.cartItems;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categoryType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryEventTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:68\n                        \n                    \n\n            \n                \n                    Category type of the event.\nExample :const category = event.categoryType;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:183\n                        \n                    \n\n            \n                \n                    Timestamp when the event was created.\nExample :const createdAt = event.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:101\n                        \n                    \n\n            \n                \n                    End date of the event.\nExample :const endDate = event.endDate;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the event.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        longDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:57\n                        \n                    \n\n            \n                \n                    Long description of the event.\nExample :const longDesc = event.longDescription;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        prices\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EventPrice[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, price => price.event, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:149\n                        \n                    \n\n            \n                \n                    Prices associated with the event.\nExample :const prices = event.prices;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantityAvailable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:113\n                        \n                    \n\n            \n                \n                    Quantity available for the event.\nExample :const availableQty = event.quantityAvailable;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantitySold\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:125\n                        \n                    \n\n            \n                \n                    Quantity sold for the event.\nExample :const soldQty = event.quantitySold;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationsDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReservationDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservationDetails => reservationDetails.event)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:160\n                        \n                    \n\n            \n                \n                    Reservation details associated with the event.\nExample :const reservationDetails = event.reservationsDetails;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revenueGenerated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:137\n                        \n                    \n\n            \n                \n                    Revenue generated from the event.\nExample :const revenue = event.revenueGenerated;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shortDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:46\n                        \n                    \n\n            \n                \n                    Short description of the event.\nExample :const shortDesc = event.shortDescription;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:90\n                        \n                    \n\n            \n                \n                    Start date of the event.\nExample :const startDate = event.startDate;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@Column({unique: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:35\n                        \n                    \n\n            \n                \n                    Title of the event.\nExample :const eventTitle = event.title;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:195\n                        \n                    \n\n            \n                \n                    Timestamp when the event was last updated.\nExample :const updatedAt = event.updatedAt;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { CategoryEventTypeEnum } from '@common/enums/category-type.enum';\nimport { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany, Index } from 'typeorm';\nimport { EventPrice } from './event-price.entity';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\n\n/**\n * Entity representing an event.\n *\n * @class\n * @entity\n */\n@Entity('events')\nexport class Event {\n  /**\n   * Unique identifier for the event.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  eventId: number;\n\n  /**\n   * Title of the event.\n   * @type {string}\n   * @column\n   * @index\n   * @unique\n   *\n   * @example\n   * const eventTitle = event.title;\n   */\n  @Index()\n  @Column({ unique: true, type: 'varchar' })\n  title: string;\n\n  /**\n   * Short description of the event.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const shortDesc = event.shortDescription;\n   */\n  @Column('text')\n  shortDescription: string;\n\n  /**\n   * Long description of the event.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const longDesc = event.longDescription;\n   */\n  @Column('text')\n  longDescription: string;\n\n  /**\n   * Category type of the event.\n   * @type {CategoryEventTypeEnum}\n   * @column\n   *\n   * @example\n   * const category = event.categoryType;\n   */\n  @Column()\n  categoryType: CategoryEventTypeEnum;\n\n  /**\n   * Base price of the event.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const basePrice = event.basePrice;\n   */\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  basePrice: number;\n\n  /**\n   * Start date of the event.\n   * @type {Date}\n   * @column\n   *\n   * @example\n   * const startDate = event.startDate;\n   */\n  @Column('date')\n  startDate: Date;\n\n  /**\n   * End date of the event.\n   * @type {Date}\n   * @column\n   *\n   * @example\n   * const endDate = event.endDate;\n   */\n  @Column('date')\n  endDate: Date;\n\n  /**\n   * Quantity available for the event.\n   * @type {number}\n   * @column\n   * @default 1\n   *\n   * @example\n   * const availableQty = event.quantityAvailable;\n   */\n  @Column({ type: 'int', default: 1 })\n  quantityAvailable: number;\n\n  /**\n   * Quantity sold for the event.\n   * @type {number}\n   * @column\n   * @default 0\n   *\n   * @example\n   * const soldQty = event.quantitySold;\n   */\n  @Column({ type: 'int', default: 0 })\n  quantitySold: number;\n\n  /**\n   * Revenue generated from the event.\n   * @type {number}\n   * @column\n   * @default 0\n   *\n   * @example\n   * const revenue = event.revenueGenerated;\n   */\n  @Column({ type: 'int', default: 0 })\n  revenueGenerated: number;\n\n  /**\n   * Prices associated with the event.\n   * @type {EventPrice[]}\n   * @oneToMany\n   * @eager\n   *\n   * @example\n   * const prices = event.prices;\n   */\n  @OneToMany(() => EventPrice, price => price.event, { eager: true })\n  prices: EventPrice[];\n\n  /**\n   * Reservation details associated with the event.\n   * @type {ReservationDetails[]}\n   * @oneToMany\n   *\n   * @example\n   * const reservationDetails = event.reservationsDetails;\n   */\n  @OneToMany(() => ReservationDetails, reservationDetails => reservationDetails.event)\n  reservationsDetails: ReservationDetails[];\n\n  /**\n   * Cart items associated with the event.\n   * @type {CartItem[]}\n   * @oneToMany\n   *\n   * @example\n   * const cartItems = event.cartItems;\n   */\n  @OneToMany(() => CartItem, cartItem => cartItem.event)\n  cartItems: CartItem[];\n\n  /**\n   * Timestamp when the event was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = event.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the event was last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = event.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventPrice.html":{"url":"entities/EventPrice.html","title":"entity - EventPrice","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventPrice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/entities/event-price.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a price associated with an event.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                event\n                            \n                            \n                                    \n                                eventPriceId\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                priceFormula\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, event => event.prices)@JoinColumn({name: 'eventId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event-price.entity.ts:36\n                        \n                    \n\n            \n                \n                    Event associated with the event price.\nExample :const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        eventPriceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event-price.entity.ts:22\n                        \n                    \n\n            \n                \n                    Unique identifier for the event price.\nExample :const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event-price.entity.ts:64\n                        \n                    \n\n            \n                \n                    Price of the event.\nExample :const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priceFormula\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceFormulaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PriceFormulaEnum, name: 'priceFormula'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event-price.entity.ts:53\n                        \n                    \n\n            \n                \n                    Pricing formula for the event.\nExample :const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn, Index } from 'typeorm';\n\n/**\n * Entity representing a price associated with an event.\n *\n * @class\n * @entity\n */\n@Entity('event_prices')\nexport class EventPrice {\n  /**\n   * Unique identifier for the event price.\n   * @type {number}\n   * @primaryGeneratedColumn\n   *\n   * @example\n   * const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n   */\n  @PrimaryGeneratedColumn('increment')\n  eventPriceId: number;\n\n  /**\n   * Event associated with the event price.\n   * @type {Event}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n   */\n  @Index()\n  @ManyToOne(() => Event, event => event.prices)\n  @JoinColumn({ name: 'eventId' })\n  event: Event;\n\n  /**\n   * Pricing formula for the event.\n   * @type {PriceFormulaEnum}\n   * @column\n   * @enum {PriceFormulaEnum}\n   * @name priceFormula\n   *\n   * @example\n   * const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n   */\n  @Column({\n    type: 'enum',\n    enum: PriceFormulaEnum,\n    name: 'priceFormula'\n  })\n  priceFormula: PriceFormulaEnum;\n\n  /**\n   * Price of the event.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n   */\n  @Column()\n  price: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventPricesService.html":{"url":"injectables/EventPricesService.html","title":"injectable - EventPricesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventPricesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/event-prices.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage event prices.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEventPrices\n                            \n                            \n                                    Async\n                                deleteEventPrices\n                            \n                            \n                                    Private\n                                    Async\n                                findEventById\n                            \n                            \n                                    Async\n                                getPriceByEventAndType\n                            \n                            \n                                    Async\n                                updateEventPrices\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventPriceRepository: Repository, eventRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/events/event-prices.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventPriceRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEventPrices\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEventPrices(eventId: number, basePrice: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-prices.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Creates event prices based on a base price and predefined price formulas.\nExample :await eventPricesService.createEventPrices(1, 100);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                basePrice\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe base price of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteEventPrices\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteEventPrices(eventId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-prices.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Deletes all prices of an event.\nExample :await eventPricesService.deleteEventPrices(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        findEventById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEventById(eventId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-prices.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Finds an event by its ID.\nExample :const event = await eventPricesService.findEventById(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPriceByEventAndType\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPriceByEventAndType(eventId: number, priceFormula: PriceFormulaEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-prices.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Retrieves the price of an event by its ID and price formula.\nExample :const price = await eventPricesService.getPriceByEventAndType(1, PriceFormulaEnum.STANDARD);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                priceFormula\n                                            \n                                                            PriceFormulaEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe price formula type.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe price of the event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateEventPrices\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEventPrices(eventId: number, newBasePrice: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-prices.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Updates the prices of an event based on a new base price and predefined price formulas.\nExample :await eventPricesService.updateEventPrices(1, 150);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                newBasePrice\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new base price of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { EventPrice } from './entities/event-price.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { PRICES_FORMULA } from '@utils/constants/constants.common';\n\n/**\n * Service to manage event prices.\n * @class\n */\n@Injectable()\nexport class EventPricesService {\n  constructor(\n    @InjectRepository(EventPrice)\n    private readonly eventPriceRepository: Repository,\n    @InjectRepository(Event)\n    private readonly eventRepository: Repository\n  ) {}\n\n  /**\n   * Creates event prices based on a base price and predefined price formulas.\n   *\n   * @param {number} eventId - ID of the event.\n   * @param {number} basePrice - The base price of the event.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @example\n   * await eventPricesService.createEventPrices(1, 100);\n   */\n  async createEventPrices(eventId: number, basePrice: number): Promise {\n    await this.findEventById(eventId);\n\n    for (const formula of PRICES_FORMULA) {\n      const price = this.eventPriceRepository.create({\n        event: { eventId },\n        priceFormula: formula.type,\n        price: Math.round(basePrice * formula.multiplier)\n      });\n      await this.eventPriceRepository.save(price);\n    }\n  }\n\n  /**\n   * Retrieves the price of an event by its ID and price formula.\n   *\n   * @param {number} eventId - ID of the event.\n   * @param {PriceFormulaEnum} priceFormula - The price formula type.\n   * @returns {Promise} - The price of the event.\n   *\n   * @throws {NotFoundException} If the price is not found.\n   *\n   * @example\n   * const price = await eventPricesService.getPriceByEventAndType(1, PriceFormulaEnum.STANDARD);\n   */\n  async getPriceByEventAndType(eventId: number, priceFormula: PriceFormulaEnum): Promise {\n    const price = await this.eventPriceRepository.findOne({\n      where: {\n        event: { eventId: eventId },\n        priceFormula: priceFormula\n      }\n    });\n    if (!price) {\n      throw new NotFoundException(\n        `Price not found for event ID ${eventId} and type ${priceFormula}`\n      );\n    }\n    return price.price;\n  }\n\n  /**\n   * Updates the prices of an event based on a new base price and predefined price formulas.\n   *\n   * @param {number} eventId - ID of the event.\n   * @param {number} newBasePrice - The new base price of the event.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @example\n   * await eventPricesService.updateEventPrices(1, 150);\n   */\n  async updateEventPrices(eventId: number, newBasePrice: number): Promise {\n    await this.findEventById(eventId);\n    const eventPrices = await this.eventPriceRepository.find({\n      where: { event: { eventId } }\n    });\n\n    const updatedPrices = eventPrices.map(priceRecord => {\n      const formula = PRICES_FORMULA.find(f => f.type === priceRecord.priceFormula);\n      if (formula) {\n        priceRecord.price = Math.round(newBasePrice * formula.multiplier);\n      }\n      return priceRecord;\n    });\n\n    await this.eventPriceRepository.save(updatedPrices);\n  }\n\n  /**\n   * Deletes all prices of an event.\n   *\n   * @param {number} eventId - ID of the event.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @example\n   * await eventPricesService.deleteEventPrices(1);\n   */\n  async deleteEventPrices(eventId: number): Promise {\n    await this.findEventById(eventId);\n    const prices = await this.eventPriceRepository.find({\n      where: { event: { eventId: eventId } }\n    });\n\n    for (const price of prices) {\n      await this.eventPriceRepository.remove(price);\n    }\n  }\n\n  /**\n   * Finds an event by its ID.\n   *\n   * @param {number} eventId - ID of the event.\n   * @returns {Promise} - The found event.\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @private\n   *\n   * @example\n   * const event = await eventPricesService.findEventById(1);\n   */\n  private async findEventById(eventId: number): Promise {\n    const event = await this.eventRepository.findOneBy({ eventId });\n    if (!event) throw new NotFoundException(`Event with ID ${eventId} not found.`);\n    return event;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventSalesService.html":{"url":"injectables/EventSalesService.html","title":"injectable - EventSalesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventSalesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/event-sales.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage event sales and revenue.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                deductionMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                deductEventQuantity\n                            \n                            \n                                    Async\n                                processEventTicketsAndRevenue\n                            \n                            \n                                    Private\n                                quantityPerFormula\n                            \n                            \n                                    Private\n                                    Async\n                                updateRevenue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventRepository: Repository, eventsService: EventsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/events/event-sales.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventsService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        deductEventQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    deductEventQuantity(eventId: number, priceFormula: string, quantity: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-sales.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Deducts the quantity of tickets available for a specific event.\nExample :await eventSalesService.deductEventQuantity(1, PriceFormulaEnum.SOLO, 3);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                priceFormula\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe price formula used.\n\n\n                                            \n                                        \n                                        \n                                                quantity\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe quantity of tickets to deduct.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processEventTicketsAndRevenue\n                        \n                    \n                \n            \n            \n                \n                        \n                    processEventTicketsAndRevenue(items: CartItem[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-sales.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Processes event tickets and updates revenue based on cart items.\nExample :await eventSalesService.processEventTicketsAndRevenue(cartItems);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                        CartItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of cart items to process.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        quantityPerFormula\n                        \n                    \n                \n            \n            \n                \n                        \n                    quantityPerFormula(priceFormula: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-sales.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Gets the quantity deduction factor for a given price formula.\nExample :const deductionFactor = eventSalesService.quantityPerFormula(PriceFormulaEnum.SOLO);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                priceFormula\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe price formula.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \nThe quantity deduction factor.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        updateRevenue\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRevenue(eventId: number, additionalRevenue: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-sales.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Updates the revenue for a specific event.\nExample :await eventSalesService.updateRevenue(1, 500);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                additionalRevenue\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe additional revenue to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        deductionMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n    [PriceFormulaEnum.SOLO]: 1,\n    [PriceFormulaEnum.DUO]: 2,\n    [PriceFormulaEnum.FAMILY]: 4\n  }\n                    \n                \n                    \n                        \n                                Defined in src/modules/events/event-sales.service.ts:23\n                        \n                    \n\n            \n                \n                    Map of price formulas to quantity deduction factors.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Event } from './entities/event.entity';\nimport { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { EventsService } from './events.service';\n\n/**\n * Service to manage event sales and revenue.\n * @class\n */\n@Injectable()\nexport class EventSalesService {\n  /**\n   * Map of price formulas to quantity deduction factors.\n   *\n   * @private\n   * @readonly\n   * @type {Record}\n   * @memberof EventSalesService\n   */\n  private readonly deductionMap: Record = {\n    [PriceFormulaEnum.SOLO]: 1,\n    [PriceFormulaEnum.DUO]: 2,\n    [PriceFormulaEnum.FAMILY]: 4\n  };\n\n  constructor(\n    @InjectRepository(Event)\n    private eventRepository: Repository,\n    private readonly eventsService: EventsService\n  ) {}\n\n  /**\n   * Processes event tickets and updates revenue based on cart items.\n   *\n   * @param {CartItem[]} items - List of cart items to process.\n   * @returns {Promise}\n   *\n   * @example\n   * await eventSalesService.processEventTicketsAndRevenue(cartItems);\n   */\n  async processEventTicketsAndRevenue(items: CartItem[]): Promise {\n    let totalNewRevenue = 0;\n    for (const item of items) {\n      await this.deductEventQuantity(item.event.eventId, item.priceFormula, item.quantity);\n      totalNewRevenue += item.price * item.quantity;\n    }\n    if (items.length > 0) {\n      await this.updateRevenue(items[0].event.eventId, totalNewRevenue);\n    }\n  }\n\n  /**\n   * Updates the revenue for a specific event.\n   *\n   * @param {number} eventId - ID of the event.\n   * @param {number} additionalRevenue - The additional revenue to add.\n   * @returns {Promise}\n   *\n   * @private\n   *\n   * @example\n   * await eventSalesService.updateRevenue(1, 500);\n   */\n  private async updateRevenue(eventId: number, additionalRevenue: number): Promise {\n    const event = await this.eventsService.findEventById(eventId);\n    event.revenueGenerated += additionalRevenue;\n    await this.eventRepository.save(event);\n  }\n\n  /**\n   * Deducts the quantity of tickets available for a specific event.\n   *\n   * @param {number} eventId - ID of the event.\n   * @param {string} priceFormula - The price formula used.\n   * @param {number} quantity - The quantity of tickets to deduct.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If not enough tickets are available.\n   *\n   * @private\n   *\n   * @example\n   * await eventSalesService.deductEventQuantity(1, PriceFormulaEnum.SOLO, 3);\n   */\n  private async deductEventQuantity(\n    eventId: number,\n    priceFormula: string,\n    quantity: number\n  ): Promise {\n    const event = await this.eventsService.findEventById(eventId);\n    const quantityToDeduct = this.quantityPerFormula(priceFormula) * quantity;\n    if (quantityToDeduct > event.quantityAvailable) {\n      throw new NotFoundException('Not enough tickets available');\n    }\n    event.quantityAvailable -= quantityToDeduct;\n    event.quantitySold += quantityToDeduct;\n    await this.eventRepository.save(event);\n  }\n\n  /**\n   * Gets the quantity deduction factor for a given price formula.\n   *\n   * @param {string} priceFormula - The price formula.\n   * @returns {number} - The quantity deduction factor.\n   *\n   * @private\n   *\n   * @example\n   * const deductionFactor = eventSalesService.quantityPerFormula(PriceFormulaEnum.SOLO);\n   */\n  private quantityPerFormula(priceFormula: string): number {\n    return this.deductionMap[priceFormula] || 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventsController.html":{"url":"controllers/EventsController.html","title":"controller - EventsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/events.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                events\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage events.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findAllFiltered\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getTicketPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEventDto: CreateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(UserRole.ADMIN)@UseGuards(AccessTokenGuard, RoleGuard)@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Creates a new event. Only accessible to admins.\nExample :POST /events/create\n{\n  \"title\": \"Event Title\",\n  \"description\": \"Event Description\",\n  \"startDate\": \"2023-01-01\",\n  \"endDate\": \"2023-01-02\",\n  \"basePrice\": 100\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing event details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('get-events-values')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Retrieves all event values.\nExample :GET /events/get-events-values\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nAll events with selected values.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAllFiltered\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllFiltered(paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('get-all-filtered')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        Retrieves filtered events based on pagination and filter parameters.\nExample :GET /events/get-all-filtered?page=1&limit=10&sortBy=title&sortOrder=ASC\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered events and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:115\n                        \n                    \n\n\n            \n                \n                        Retrieves a single event by its ID.\nExample :GET /events/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getTicketPrice\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTicketPrice(id: number, priceFormula: PriceFormulaEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/price/:priceFormula')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Retrieves the price of a ticket for an event by its ID and price formula.\nExample :GET /events/1/price/STANDARD\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                priceFormula\n                                            \n                                                            PriceFormulaEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe price formula type.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe event ID, price formula, and price.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(UserRole.ADMIN)@UseGuards(AccessTokenGuard, RoleGuard)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:155\n                        \n                    \n\n\n            \n                \n                        Deletes an event by its ID. Only accessible to admins.\nExample :DELETE /events/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nConfirmation message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateEventDto: UpdateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(UserRole.ADMIN)@UseGuards(AccessTokenGuard, RoleGuard)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:139\n                        \n                    \n\n\n            \n                \n                        Updates an existing event. Only accessible to admins.\nExample :PATCH /events/1\n{\n  \"title\": \"Updated Title\",\n  \"description\": \"Updated Description\",\n  \"startDate\": \"2023-01-03\",\n  \"endDate\": \"2023-01-04\",\n  \"basePrice\": 150\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event to update.\n\n\n                                            \n                                        \n                                        \n                                                updateEventDto\n                                            \n                                                            UpdateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing updated event details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated event.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query\n} from '@nestjs/common';\nimport { UserRole } from '@common/enums/user-role.enum';\nimport { Role } from '@common/decorators/role.decorator';\nimport { AccessTokenGuard, RoleGuard } from '@security/guards';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { EventsService } from './events.service';\nimport { UpdateEventDto } from './dto/update-event.dto';\nimport { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { EventPricesService } from './event-prices.service';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { Event } from './entities/event.entity';\n\n/**\n * Controller to manage events.\n * @class\n */\n@Controller('events')\nexport class EventsController {\n  constructor(\n    private readonly eventsService: EventsService,\n    private readonly eventPricesService: EventPricesService\n  ) {}\n\n  /**\n   * Creates a new event. Only accessible to admins.\n   *\n   * @param {CreateEventDto} createEventDto - DTO containing event details.\n   * @returns {Promise} - The created event.\n   *\n   * @example\n   * POST /events/create\n   * {\n   *   \"title\": \"Event Title\",\n   *   \"description\": \"Event Description\",\n   *   \"startDate\": \"2023-01-01\",\n   *   \"endDate\": \"2023-01-02\",\n   *   \"basePrice\": 100\n   * }\n   */\n  @Role(UserRole.ADMIN)\n  @UseGuards(AccessTokenGuard, RoleGuard)\n  @Post('create')\n  create(@Body() createEventDto: CreateEventDto): Promise {\n    return this.eventsService.create(createEventDto);\n  }\n\n  /**\n   * Retrieves filtered events based on pagination and filter parameters.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered events and total count.\n   *\n   * @example\n   * GET /events/get-all-filtered?page=1&limit=10&sortBy=title&sortOrder=ASC\n   */\n  @Get('get-all-filtered')\n  findAllFiltered(\n    @Query() paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    return this.eventsService.findAllFiltered(paginationFilterDto);\n  }\n\n  /**\n   * Retrieves all event values.\n   *\n   * @returns {Promise} - All events with selected values.\n   *\n   * @example\n   * GET /events/get-events-values\n   */\n  @Get('get-events-values')\n  findAll(): Promise {\n    return this.eventsService.findAllValues();\n  }\n\n  /**\n   * Retrieves the price of a ticket for an event by its ID and price formula.\n   *\n   * @param {number} id - ID of the event.\n   * @param {PriceFormulaEnum} priceFormula - The price formula type.\n   * @returns {Promise} - The event ID, price formula, and price.\n   *\n   * @example\n   * GET /events/1/price/STANDARD\n   */\n  @Get(':id/price/:priceFormula')\n  async getTicketPrice(\n    @Param('id') id: number,\n    @Param('priceFormula') priceFormula: PriceFormulaEnum\n  ): Promise {\n    const price = await this.eventPricesService.getPriceByEventAndType(+id, priceFormula);\n    return { eventId: +id, priceFormula, price };\n  }\n\n  /**\n   * Retrieves a single event by its ID.\n   *\n   * @param {string} id - ID of the event.\n   * @returns {Promise} - The found event.\n   *\n   * @example\n   * GET /events/1\n   */\n  @Get(':id')\n  findOne(@Param('id') id: string): Promise {\n    return this.eventsService.findOne(+id);\n  }\n\n  /**\n   * Updates an existing event. Only accessible to admins.\n   *\n   * @param {string} id - ID of the event to update.\n   * @param {UpdateEventDto} updateEventDto - DTO containing updated event details.\n   * @returns {Promise} - The updated event.\n   *\n   * @example\n   * PATCH /events/1\n   * {\n   *   \"title\": \"Updated Title\",\n   *   \"description\": \"Updated Description\",\n   *   \"startDate\": \"2023-01-03\",\n   *   \"endDate\": \"2023-01-04\",\n   *   \"basePrice\": 150\n   * }\n   */\n  @Role(UserRole.ADMIN)\n  @UseGuards(AccessTokenGuard, RoleGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateEventDto: UpdateEventDto): Promise {\n    return this.eventsService.update(+id, updateEventDto);\n  }\n\n  /**\n   * Deletes an event by its ID. Only accessible to admins.\n   *\n   * @param {string} id - ID of the event to delete.\n   * @returns {Promise} - Confirmation message.\n   *\n   * @example\n   * DELETE /events/1\n   */\n  @Role(UserRole.ADMIN)\n  @UseGuards(AccessTokenGuard, RoleGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string): Promise {\n    return this.eventsService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\n\nEventPricesService \n\nEventPricesService \n\n\n\nEventSalesService \n\nEventSalesService \n\n\n\nEventsService \n\nEventsService \n\n\n\nEventsModule\n\nEventsModule\n\nEventPricesService  -->\n\nEventsModule->EventPricesService \n\n\n\nEventSalesService  -->\n\nEventsModule->EventSalesService \n\n\n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\n\n\nEventPricesService\n\nEventPricesService\n\nEventsModule -->\n\nEventPricesService->EventsModule\n\n\n\n\n\nEventSalesService\n\nEventSalesService\n\nEventsModule -->\n\nEventSalesService->EventsModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nEventsModule -->\n\nQueryHelperService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/events/events.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage events.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventPricesService\n                        \n                        \n                            EventSalesService\n                        \n                        \n                            EventsService\n                        \n                        \n                            QueryHelperService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventPricesService\n                        \n                        \n                            EventSalesService\n                        \n                        \n                            EventsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EventsService } from './events.service';\nimport { Event } from './entities/event.entity';\nimport { EventsController } from './events.controller';\nimport { EventPrice } from './entities/event-price.entity';\nimport { EventPricesService } from './event-prices.service';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\nimport { EventSalesService } from './event-sales.service';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Module to manage events.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for Event, EventPrice, and ReservationDetails entities\n    TypeOrmModule.forFeature([Event, EventPrice, ReservationDetails])\n  ],\n  controllers: [\n    // Register EventsController\n    EventsController\n  ],\n  providers: [\n    // Register EventsService, EventPricesService, EventSalesService, and QueryHelperService as providers\n    EventsService,\n    EventPricesService,\n    EventSalesService,\n    QueryHelperService\n  ],\n  exports: [\n    // Export EventsService, EventPricesService, and EventSalesService\n    EventsService,\n    EventPricesService,\n    EventSalesService\n  ]\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsService.html":{"url":"injectables/EventsService.html","title":"injectable - EventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/events.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage events.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                CACHE_TTL_ONE_HOUR\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                    Async\n                                ensureTitleUnique\n                            \n                            \n                                    Async\n                                findAllFiltered\n                            \n                            \n                                    Async\n                                findAllValues\n                            \n                            \n                                    Async\n                                findEventById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventRepository: Repository, redisService: RedisService, eventPricesService: EventPricesService, convertUtilsService: ConvertUtilsService, queryHelper: QueryHelperService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/events/events.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventPricesService\n                                                  \n                                                        \n                                                                        EventPricesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        convertUtilsService\n                                                  \n                                                        \n                                                                        ConvertUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryHelper\n                                                  \n                                                        \n                                                                        QueryHelperService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEventDto: CreateEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Creates a new event.\nExample :const event = await eventsService.create(createEventDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing event details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        ensureTitleUnique\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureTitleUnique(title: string, excludeId?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Ensures that the event title is unique.\nExample :await eventsService.ensureTitleUnique('New Event');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTitle of the event.\n\n\n                                            \n                                        \n                                        \n                                                excludeId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional ID to exclude from the uniqueness check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllFiltered\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllFiltered(paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Retrieves events with pagination and filtering.\nExample :const result = await eventsService.findAllFiltered(paginationFilterDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filtering data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered events and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllValues\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllValues()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Retrieves all event values.\nExample :const events = await eventsService.findAllValues();\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nAll events with selected values.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findEventById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEventById(eventId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Finds an event by its ID.\nExample :const event = await eventsService.findEventById(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:113\n                        \n                    \n\n\n            \n                \n                        Retrieves a single event by its ID.\nExample :const event = await eventsService.findOne(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Deletes an event by its ID.\nExample :const message = await eventsService.remove(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nConfirmation message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateEventDto: UpdateEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Updates an existing event.\nExample :const updatedEvent = await eventsService.update(1, updateEventDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event to update.\n\n\n                                            \n                                        \n                                        \n                                                updateEventDto\n                                            \n                                                            UpdateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing updated event details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated event.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        CACHE_TTL_ONE_HOUR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 360\n                    \n                \n                    \n                        \n                                Defined in src/modules/events/events.service.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { RedisService } from '@database/redis/redis.service';\nimport { Event } from './entities/event.entity';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { UpdateEventDto } from './dto/update-event.dto';\nimport { ConvertUtilsService } from '@utils/services/convert-utils.service';\nimport { EventPricesService } from './event-prices.service';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Service to manage events.\n * @class\n */\n@Injectable()\nexport class EventsService {\n  private static readonly CACHE_TTL_ONE_HOUR: number = 360; // TTL 360 seconds\n\n  constructor(\n    @InjectRepository(Event) private eventRepository: Repository,\n    private readonly redisService: RedisService,\n    private readonly eventPricesService: EventPricesService,\n    private readonly convertUtilsService: ConvertUtilsService,\n    private readonly queryHelper: QueryHelperService\n  ) {}\n\n  /**\n   * Creates a new event.\n   *\n   * @param {CreateEventDto} createEventDto - DTO containing event details.\n   * @returns {Promise} - The created event.\n   *\n   * @throws {ConflictException} If an event with the same title already exists.\n   *\n   * @example\n   * const event = await eventsService.create(createEventDto);\n   */\n  async create(createEventDto: CreateEventDto): Promise {\n    const startDate = this.convertUtilsService.convertDateStringToDate(createEventDto.startDate);\n    const endDate = this.convertUtilsService.convertDateStringToDate(createEventDto.endDate);\n    await this.ensureTitleUnique(createEventDto.title);\n    const event: Event = this.eventRepository.create({\n      ...createEventDto,\n      startDate,\n      endDate\n    });\n    await this.eventRepository.save(event);\n    await this.eventPricesService.createEventPrices(event.eventId, event.basePrice);\n    await this.redisService.clearCacheEvent();\n    return event;\n  }\n\n  /**\n   * Retrieves all event values.\n   *\n   * @returns {Promise} - All events with selected values.\n   *\n   * @example\n   * const events = await eventsService.findAllValues();\n   */\n  async findAllValues(): Promise {\n    return this.eventRepository.find({\n      select: {\n        quantityAvailable: true,\n        quantitySold: true,\n        revenueGenerated: true\n      }\n    });\n  }\n\n  /**\n   * Retrieves events with pagination and filtering.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filtering data.\n   * @returns {Promise} - The filtered events and total count.\n   *\n   * @throws {InternalServerErrorException} If an error occurs while retrieving events.\n   *\n   * @example\n   * const result = await eventsService.findAllFiltered(paginationFilterDto);\n   */\n  async findAllFiltered(\n    paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    const queryOptions = this.queryHelper.buildQueryOptions(paginationFilterDto);\n\n    try {\n      const [events, total] = await this.eventRepository.findAndCount(queryOptions);\n      return { events, total };\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to retrieve events', error.message);\n    }\n  }\n\n  /**\n   * Retrieves a single event by its ID.\n   *\n   * @param {number} id - ID of the event.\n   * @returns {Promise} - The found event.\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @example\n   * const event = await eventsService.findOne(1);\n   */\n  async findOne(id: number): Promise {\n    const event = await this.redisService.fetchCachedData(\n      `event_${id}`,\n      () => this.eventRepository.findOneBy({ eventId: id }),\n      EventsService.CACHE_TTL_ONE_HOUR\n    );\n    if (!event) throw new NotFoundException(`Event with id ${id} not found`);\n    return event;\n  }\n\n  /**\n   * Updates an existing event.\n   *\n   * @param {number} id - ID of the event to update.\n   * @param {UpdateEventDto} updateEventDto - DTO containing updated event details.\n   * @returns {Promise} - The updated event.\n   *\n   * @throws {ConflictException} If an event with the new title already exists.\n   * @throws {NotFoundException} If the event to update is not found.\n   *\n   * @example\n   * const updatedEvent = await eventsService.update(1, updateEventDto);\n   */\n  async update(id: number, updateEventDto: UpdateEventDto): Promise {\n    const event = await this.findOne(id);\n    if (updateEventDto.title && updateEventDto.title !== event.title) {\n      await this.ensureTitleUnique(updateEventDto.title, id);\n    }\n    if (updateEventDto.basePrice !== undefined && updateEventDto.basePrice !== event.basePrice) {\n      await this.eventPricesService.updateEventPrices(event.eventId, updateEventDto.basePrice);\n    }\n\n    Object.assign(event, updateEventDto, { updatedAt: new Date() });\n\n    await this.redisService.clearCacheEvent(id);\n    await this.eventRepository.save(event);\n    return event;\n  }\n\n  /**\n   * Deletes an event by its ID.\n   *\n   * @param {number} id - ID of the event to delete.\n   * @returns {Promise} - Confirmation message.\n   *\n   * @throws {NotFoundException} If the event to delete is not found.\n   *\n   * @example\n   * const message = await eventsService.remove(1);\n   */\n  async remove(id: number): Promise {\n    const event = await this.findOne(id);\n    await this.eventPricesService.deleteEventPrices(id);\n    await this.eventRepository.remove(event);\n    await this.redisService.clearCacheEvent(id);\n    return 'Event deleted successfully.';\n  }\n\n  /**\n   * Ensures that the event title is unique.\n   *\n   * @param {string} title - Title of the event.\n   * @param {number} [excludeId] - Optional ID to exclude from the uniqueness check.\n   * @returns {Promise}\n   *\n   * @throws {ConflictException} If an event with the same title already exists.\n   *\n   * @private\n   *\n   * @example\n   * await eventsService.ensureTitleUnique('New Event');\n   */\n  private async ensureTitleUnique(title: string, excludeId?: number): Promise {\n    const existingEvent = await this.eventRepository.findOneBy({ title });\n    if (existingEvent && existingEvent.eventId !== excludeId) {\n      throw new ConflictException('An event with this title already exists.');\n    }\n  }\n\n  /**\n   * Finds an event by its ID.\n   *\n   * @param {number} eventId - ID of the event.\n   * @returns {Promise} - The found event.\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @example\n   * const event = await eventsService.findEventById(1);\n   */\n  async findEventById(eventId: number): Promise {\n    const event = await this.eventRepository.findOneBy({ eventId });\n    if (!event) throw new NotFoundException(`Event with ID ${eventId} not found.`);\n    return event;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/globals-filter/http-exceptions-filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter to handle HTTP exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/globals-filter/http-exceptions-filter.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(HttpExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/globals-filter/http-exceptions-filter.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/globals-filter/http-exceptions-filter.ts:33\n                        \n                    \n\n\n            \n                \n                        Method to catch and handle HTTP exceptions.\nExample :throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe caught HTTP exception.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe context for the caught exception.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  BadRequestException,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  Logger\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { NODE_ENV, PROD_ENV } from '@utils/constants/constants.env';\nimport { Request, Response } from 'express';\n\n/**\n * Exception filter to handle HTTP exceptions.\n * @class\n * @implements {ExceptionFilter}\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger: Logger = new Logger(HttpExceptionFilter.name);\n\n  constructor(private configService: ConfigService) {}\n\n  /**\n   * Method to catch and handle HTTP exceptions.\n   *\n   * @param {HttpException} exception - The caught HTTP exception.\n   * @param {ArgumentsHost} host - The context for the caught exception.\n   *\n   * @example\n   * throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n   */\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const isNotProd = this.configService.get(NODE_ENV) !== PROD_ENV;\n\n    let responseMessage = exception.getResponse();\n    let detailedErrors = {};\n\n    // Check if the exception is a BadRequestException and extract detailed errors\n    if (exception instanceof BadRequestException && isNotProd) {\n      detailedErrors = (responseMessage as any).message;\n      responseMessage = 'Validation failed'; // General message\n    }\n\n    // Construct the error response object.\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      message: responseMessage\n    };\n\n    // Include additional debugging information in non-production environments.\n    if (isNotProd) {\n      errorResponse['path'] = request.url;\n      errorResponse['method'] = request.method;\n      errorResponse['stack'] = exception.stack;\n      errorResponse['errorDetails'] = detailedErrors;\n    }\n\n    this.logger.error(\n      `Http Status: ${status}, Exception Message: ${exception.message}, Details: ${JSON.stringify(detailedErrors)}`\n    );\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/id.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for validating an ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/id.dto.ts:20\n                        \n                    \n\n            \n                \n                    The ID to be validated.\nExample :const idDto = new IdDto();\nidDto.id = 1;\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsPositive } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for validating an ID.\n * @class\n */\nexport class IdDto {\n  /**\n   * The ID to be validated.\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @example\n   * const idDto = new IdDto();\n   * idDto.id = 1;\n   */\n  @IsInt()\n  @IsPositive()\n  readonly id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidCredentialsException.html":{"url":"classes/InvalidCredentialsException.html","title":"class - InvalidCredentialsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidCredentialsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/invalid-credentials.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom exception for invalid login credentials.\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/invalid-credentials.exception.ts:8\n                            \n                        \n\n                \n                    \n                            Constructs a new InvalidCredentialsException.\nExample :throw new InvalidCredentialsException();\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * Custom exception for invalid login credentials.\n * @class\n * @extends {HttpException}\n */\nexport class InvalidCredentialsException extends HttpException {\n  /**\n   * Constructs a new InvalidCredentialsException.\n   *\n   * @example\n   * throw new InvalidCredentialsException();\n   */\n  constructor() {\n    super('Invalid Login Credentials. Please try again.', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsCreatorGuard.html":{"url":"guards/IsCreatorGuard.html","title":"guard - IsCreatorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsCreatorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/security/guards/is-creator.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard to check if the current user is the creator of the content.\nExample :\\@UseGuards(IsCreatorGuard)\n\\@Patch(':id')\nupdateContent(@Param('id') id: string, @Body() updateContentDto: UpdateContentDto) {\n  // Update content logic here\n}\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/security/guards/is-creator.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/guards/is-creator.guard.ts:28\n                        \n                    \n\n\n            \n                \n                        Method to determine if the current user can activate the route.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nWhether the user can activate the route.\n\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, NotFoundException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n/**\n * Guard to check if the current user is the creator of the content.\n * @class\n * @implements {CanActivate}\n *\n * @example\n * \\@UseGuards(IsCreatorGuard)\n * \\@Patch(':id')\n * updateContent(@Param('id') id: string, @Body() updateContentDto: UpdateContentDto) {\n *   // Update content logic here\n * }\n */\n@Injectable()\nexport class IsCreatorGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * Method to determine if the current user can activate the route.\n   *\n   * @param {ExecutionContext} context - The execution context.\n   * @returns {boolean} - Whether the user can activate the route.\n   *\n   * @throws {NotFoundException} If the user is not the creator of the content.\n   */\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const contentOwnerId = +request.params.id;\n\n    // Check if the current user ID matches the content owner's ID.\n    const isCreator = user && user.userId === contentOwnerId;\n    if (!isCreator) {\n      throw new NotFoundException(`Content not found or access unauthorized.`);\n    }\n\n    // Optionally add isCreator flag to the request object for further use.\n    request.isCreator = isCreator;\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTTokens.html":{"url":"interfaces/JWTTokens.html","title":"interface - JWTTokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JWTTokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/jwt.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing JWT tokens.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The access token.\nExample :const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Expiration time of the token in seconds (optional).\nExample :const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456', expiresIn: 3600 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The refresh token.\nExample :const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * Subject identifier (usually the user ID).\n   * @type {number}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'user', version: 1 };\n   */\n  sub: number;\n\n  /**\n   * Role of the user.\n   * @type {string}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'admin', version: 1 };\n   */\n  role: string;\n\n  /**\n   * Version of the token.\n   * @type {number}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'user', version: 2 };\n   */\n  version: number;\n}\n\n/**\n * Interface representing JWT tokens.\n *\n * @interface JWTTokens\n */\nexport interface JWTTokens {\n  /**\n   * The access token.\n   * @type {string}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n   */\n  accessToken: string;\n\n  /**\n   * The refresh token.\n   * @type {string}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n   */\n  refreshToken: string;\n\n  /**\n   * Expiration time of the token in seconds (optional).\n   * @type {number}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456', expiresIn: 3600 };\n   */\n  expiresIn?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/jwt.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the payload of a JWT.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Role of the user.\nExample :const payload: JwtPayload = { sub: 1, role: 'admin', version: 1 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Subject identifier (usually the user ID).\nExample :const payload: JwtPayload = { sub: 1, role: 'user', version: 1 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Version of the token.\nExample :const payload: JwtPayload = { sub: 1, role: 'user', version: 2 };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * Subject identifier (usually the user ID).\n   * @type {number}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'user', version: 1 };\n   */\n  sub: number;\n\n  /**\n   * Role of the user.\n   * @type {string}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'admin', version: 1 };\n   */\n  role: string;\n\n  /**\n   * Version of the token.\n   * @type {number}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'user', version: 2 };\n   */\n  version: number;\n}\n\n/**\n * Interface representing JWT tokens.\n *\n * @interface JWTTokens\n */\nexport interface JWTTokens {\n  /**\n   * The access token.\n   * @type {string}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n   */\n  accessToken: string;\n\n  /**\n   * The refresh token.\n   * @type {string}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n   */\n  refreshToken: string;\n\n  /**\n   * Expiration time of the token in seconds (optional).\n   * @type {number}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456', expiresIn: 3600 };\n   */\n  expiresIn?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/KeyValuePairs.html":{"url":"interfaces/KeyValuePairs.html","title":"interface - KeyValuePairs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  KeyValuePairs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/key-value-redis.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing a collection of key-value pairs.\nExample :const data: KeyValuePairs = { key1: 'value1', key2: 42, key3: { nestedKey: 'nestedValue' } };\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/common/interfaces/key-value-redis.interface.ts:8\n                            \n                        \n                \n                    \n                        A key-value pair where the key is a string and the value can be of any type.\nExample :const data: KeyValuePairs = { key1: 'value1', key2: 42, key3: { nestedKey: 'nestedValue' } };\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        export interface KeyValuePairs {\n  /**\n   * A key-value pair where the key is a string and the value can be of any type.\n   * @type {any}\n   *\n   * @example\n   * const data: KeyValuePairs = { key1: 'value1', key2: 42, key3: { nestedKey: 'nestedValue' } };\n   */\n  [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDTO.html":{"url":"classes/LoginDTO.html","title":"class - LoginDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for user login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/security/auth/dto/login.dto.ts:21\n                        \n                    \n\n            \n                \n                    Email address of the user.\nThis field is required and must be a valid email address.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/security/auth/dto/login.dto.ts:33\n                        \n                    \n\n            \n                \n                    Password of the user.\nThis field is required and must not be empty.\nExample :```html\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for user login.\n *\n * @class\n */\nexport class LoginDTO {\n  /**\n   * Email address of the user.\n   * This field is required and must be a valid email address.\n   * @type {string}\n   * @isNotEmpty\n   * @isEmail\n   *\n   * @example\n   * const dto: LoginDTO = { email: 'john.doe@example.com', password: 'password123' };\n   */\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password of the user.\n   * This field is required and must not be empty.\n   * @type {string}\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: LoginDTO = { email: 'john.doe@example.com', password: 'password123' };\n   */\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationAndFilterDto.html":{"url":"classes/PaginationAndFilterDto.html","title":"class - PaginationAndFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationAndFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for pagination and filtering.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                filterBy\n                            \n                            \n                                    \n                                    Readonly\n                                filterValue\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                offset\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                sortBy\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                sortOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        filterBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:77\n                        \n                    \n\n            \n                \n                    The field to filter by.\nExample :paginationAndFilterDto.filterBy = 'status';\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        filterValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:89\n                        \n                    \n\n            \n                \n                    The value to filter by.\nExample :paginationAndFilterDto.filterValue = 'active';\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:23\n                        \n                    \n\n            \n                \n                    The maximum number of items to return.\nExample :paginationAndFilterDto.limit = 10;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:38\n                        \n                    \n\n            \n                \n                    The number of items to skip.\nExample :paginationAndFilterDto.offset = 20;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:51\n                        \n                    \n\n            \n                \n                    The field to sort by.\nExample :paginationAndFilterDto.sortBy = 'name';\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        sortOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortOrder\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(SortOrder)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:64\n                        \n                    \n\n            \n                \n                    The order to sort by.\nExample :paginationAndFilterDto.sortOrder = SortOrder.ASC;\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SortOrder } from '@common/enums/sort-order.enum';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsInt, Min, IsString, IsEnum } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for pagination and filtering.\n * @class\n */\nexport class PaginationAndFilterDto {\n  /**\n   * The maximum number of items to return.\n   *\n   * @type {number}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.limit = 10;\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Min(0)\n  readonly limit: number;\n\n  /**\n   * The number of items to skip.\n   *\n   * @type {number}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.offset = 20;\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Min(0)\n  readonly offset: number;\n\n  /**\n   * The field to sort by.\n   *\n   * @type {string}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.sortBy = 'name';\n   */\n  @IsOptional()\n  @IsString()\n  readonly sortBy: string;\n\n  /**\n   * The order to sort by.\n   *\n   * @type {SortOrder}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.sortOrder = SortOrder.ASC;\n   */\n  @IsOptional()\n  @IsEnum(SortOrder)\n  readonly sortOrder: SortOrder;\n\n  /**\n   * The field to filter by.\n   *\n   * @type {string}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.filterBy = 'status';\n   */\n  @IsOptional()\n  @IsString()\n  readonly filterBy: string;\n\n  /**\n   * The value to filter by.\n   *\n   * @type {string | number}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.filterValue = 'active';\n   */\n  @IsOptional()\n  readonly filterValue: string | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the payload of a JWT.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Role of the user.\nExample :const payload: Payload = { sub: 1, role: UserRole.ADMIN, version: 1 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Subject identifier (usually the user ID).\nExample :const payload: Payload = { sub: 1, role: UserRole.USER, version: 1 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Version of the token.\nExample :const payload: Payload = { sub: 1, role: UserRole.USER, version: 2 };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UserRole } from '@common/enums/user-role.enum';\n\n/**\n * Interface representing the payload of a JWT.\n *\n * @interface Payload\n */\nexport interface Payload {\n  /**\n   * Subject identifier (usually the user ID).\n   * @type {number}\n   *\n   * @example\n   * const payload: Payload = { sub: 1, role: UserRole.USER, version: 1 };\n   */\n  sub: number;\n\n  /**\n   * Role of the user.\n   * @type {UserRole}\n   *\n   * @example\n   * const payload: Payload = { sub: 1, role: UserRole.ADMIN, version: 1 };\n   */\n  role: UserRole;\n\n  /**\n   * Version of the token.\n   * @type {number}\n   *\n   * @example\n   * const payload: Payload = { sub: 1, role: UserRole.USER, version: 2 };\n   */\n  version: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_exports\n\n\n\ncluster_PaymentModule_imports\n\n\n\ncluster_PaymentModule_providers\n\n\n\n\nReservationsModule\n\nReservationsModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nReservationsModule->PaymentModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nPaymentModule -->\n\nTicketsModule->PaymentModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nPaymentModule -->\n\nTransactionsModule->PaymentModule\n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nPaymentModule->PaymentService \n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/libs/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ReservationsModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            TransactionsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '@modules/users/entities/user.entity';\nimport { PaymentService } from './payment.service';\nimport { ReservationsModule } from '@modules/reservations/reservations.module';\nimport { TransactionsModule } from '@modules/transactions/transactions.module';\nimport { TicketsModule } from '@modules/tickets/tickets.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    ReservationsModule,\n    TransactionsModule,\n    TicketsModule\n  ],\n  providers: [PaymentService],\n  exports: [PaymentService]\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaymentResult.html":{"url":"interfaces/PaymentResult.html","title":"interface - PaymentResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaymentResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/payment.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the result of a payment.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            detail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            paymentId\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        detail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        detail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Detailed message about the payment result.\nExample :const paymentResult: PaymentResult = { status: StatusReservation.FAILED, detail: 'Insufficient funds' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paymentId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paymentId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Identifier for the payment (optional).\nExample :const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         StatusReservation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StatusReservation\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Status of the payment.\nExample :const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StatusReservation } from '@common/enums/status-reservation.enum';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\n\n/**\n * Interface representing the result of a payment.\n *\n * @interface PaymentResult\n */\nexport interface PaymentResult {\n  /**\n   * Status of the payment.\n   * @type {StatusReservation}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n   */\n  status: StatusReservation;\n\n  /**\n   * Detailed message about the payment result.\n   * @type {string}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.FAILED, detail: 'Insufficient funds' };\n   */\n  detail: string;\n\n  /**\n   * Identifier for the payment (optional).\n   * @type {number}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n   */\n  paymentId?: number;\n}\n\n/**\n * Interface representing the response after processing a payment.\n *\n * @interface ProcessPaymentResponse\n */\nexport interface ProcessPaymentResponse {\n  /**\n   * Status of the payment process.\n   * @type {StatusReservation}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [] };\n   */\n  status: StatusReservation;\n\n  /**\n   * Detailed message about the payment process result.\n   * @type {string}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.FAILED, detail: 'Payment failed, no reservations made' };\n   */\n  detail: string;\n\n  /**\n   * List of reservations associated with the payment (optional).\n   * @type {Reservation[]}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [reservation1, reservation2] };\n   */\n  reservations?: Reservation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/libs/payment/payment.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle payment processing.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                SUCCESS_RATE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                processPayment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    processPayment(cartTotal: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/libs/payment/payment.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Processes a payment based on the total amount in the cart.\nExample :const paymentResult = await paymentService.processPayment(100);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartTotal\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe total amount in the shopping cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe result of the payment processing.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        SUCCESS_RATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0.7\n                    \n                \n                    \n                        \n                                Defined in src/libs/payment/payment.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PaymentResult } from '@common/interfaces/payment.interface';\nimport { StatusReservation } from '@common/enums/status-reservation.enum';\n\n/**\n * Service to handle payment processing.\n * @class\n */\n@Injectable()\nexport class PaymentService {\n  private readonly SUCCESS_RATE = 0.7; // Probability of payment success\n\n  /**\n   * Processes a payment based on the total amount in the cart.\n   *\n   * @param {number} cartTotal - The total amount in the shopping cart.\n   * @returns {Promise} - The result of the payment processing.\n   *\n   * @example\n   * const paymentResult = await paymentService.processPayment(100);\n   */\n  async processPayment(cartTotal: number): Promise {\n    const random = Math.random(); // Generate a random number between 0 and 1\n\n    // If the cart total is zero, reject the payment\n    if (cartTotal === 0) {\n      return {\n        status: StatusReservation.REJECTED,\n        detail: 'No items found in the cart to process.'\n      };\n    }\n\n    // Approve or reject the payment based on the success rate\n    if (random \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProcessPaymentResponse.html":{"url":"interfaces/ProcessPaymentResponse.html","title":"interface - ProcessPaymentResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProcessPaymentResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/payment.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the response after processing a payment.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            detail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            reservations\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        detail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        detail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Detailed message about the payment process result.\nExample :const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.FAILED, detail: 'Payment failed, no reservations made' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reservations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reservations:         Reservation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Reservation[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of reservations associated with the payment (optional).\nExample :const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [reservation1, reservation2] };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         StatusReservation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StatusReservation\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Status of the payment process.\nExample :const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [] };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StatusReservation } from '@common/enums/status-reservation.enum';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\n\n/**\n * Interface representing the result of a payment.\n *\n * @interface PaymentResult\n */\nexport interface PaymentResult {\n  /**\n   * Status of the payment.\n   * @type {StatusReservation}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n   */\n  status: StatusReservation;\n\n  /**\n   * Detailed message about the payment result.\n   * @type {string}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.FAILED, detail: 'Insufficient funds' };\n   */\n  detail: string;\n\n  /**\n   * Identifier for the payment (optional).\n   * @type {number}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n   */\n  paymentId?: number;\n}\n\n/**\n * Interface representing the response after processing a payment.\n *\n * @interface ProcessPaymentResponse\n */\nexport interface ProcessPaymentResponse {\n  /**\n   * Status of the payment process.\n   * @type {StatusReservation}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [] };\n   */\n  status: StatusReservation;\n\n  /**\n   * Detailed message about the payment process result.\n   * @type {string}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.FAILED, detail: 'Payment failed, no reservations made' };\n   */\n  detail: string;\n\n  /**\n   * List of reservations associated with the payment (optional).\n   * @type {Reservation[]}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [reservation1, reservation2] };\n   */\n  reservations?: Reservation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueryHelperService.html":{"url":"injectables/QueryHelperService.html","title":"injectable - QueryHelperService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueryHelperService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/query/query-helper.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to build query options for database operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildQueryOptions\n                            \n                            \n                                    Private\n                                buildWhereCondition\n                            \n                            \n                                createNestedOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildQueryOptions\n                        \n                    \n                \n            \n            \n                \nbuildQueryOptions(paginationFilterDto: PaginationAndFilterDto, limitPut?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/query/query-helper.service.ts:22\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TypeEntity\n                            \n                        \n                    \n\n            \n                \n                        Constructs query options for pagination, sorting, and filtering.\nExample :const options = queryHelperService.buildQueryOptions(paginationDto, 20);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination, sorting, and filtering data.\n\n\n                                            \n                                        \n                                        \n                                                limitPut\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional limit override.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     FindManyOptions\n\n                        \n                            \n                                \nThe constructed query options.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildWhereCondition\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildWhereCondition(filterBy?: string, filterValue?: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/query/query-helper.service.ts:56\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TypeEntity\n                            \n                        \n                    \n\n            \n                \n                        Constructs the where condition for filtering.\nExample :const where = queryHelperService.buildWhereCondition('name', 'John');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filterBy\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nField to filter by.\n\n\n                                            \n                                        \n                                        \n                                                filterValue\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nValue to filter by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     FindOptionsWhere\n\n                        \n                            \n                                \nThe constructed where condition.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createNestedOrder\n                        \n                    \n                \n            \n            \n                \ncreateNestedOrder(sortBy: string, sortOrder: \"ASC\" | \"DESC\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/query/query-helper.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Creates nested order conditions for sorting.\nExample :const order = queryHelperService.createNestedOrder('address.city', 'ASC');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sortBy\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nField to sort by, can be nested.\n\n\n                                            \n                                        \n                                        \n                                                sortOrder\n                                            \n                                                        \"ASC\" | \"DESC\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOrder direction (ascending or descending).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nThe constructed order condition.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { SortOrder } from '@common/enums/sort-order.enum';\nimport { Injectable } from '@nestjs/common';\nimport { FindManyOptions, FindOptionsWhere } from 'typeorm';\n\n/**\n * Service to build query options for database operations.\n * @class\n */\n@Injectable()\nexport class QueryHelperService {\n  /**\n   * Constructs query options for pagination, sorting, and filtering.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination, sorting, and filtering data.\n   * @param {number} [limitPut] - Optional limit override.\n   * @returns {FindManyOptions} - The constructed query options.\n   *\n   * @example\n   * const options = queryHelperService.buildQueryOptions(paginationDto, 20);\n   */\n  buildQueryOptions(\n    paginationFilterDto: PaginationAndFilterDto,\n    limitPut?: number\n  ): FindManyOptions {\n    const {\n      limit = limitPut || 10, // Default limit if not provided\n      offset, // Number of records to skip\n      sortBy, // Field to sort by\n      sortOrder = SortOrder.ASC, // Default sort order\n      filterBy, // Field to filter by\n      filterValue // Value to filter by\n    } = paginationFilterDto;\n\n    const whereCondition = this.buildWhereCondition(filterBy, filterValue);\n    const orderCondition = sortBy ? this.createNestedOrder(sortBy, sortOrder) : {};\n\n    return {\n      where: whereCondition,\n      order: orderCondition,\n      skip: offset,\n      take: limit\n    };\n  }\n\n  /**\n   * Constructs the where condition for filtering.\n   *\n   * @param {string} [filterBy] - Field to filter by.\n   * @param {string | number} [filterValue] - Value to filter by.\n   * @returns {FindOptionsWhere} - The constructed where condition.\n   *\n   * @example\n   * const where = queryHelperService.buildWhereCondition('name', 'John');\n   */\n  private buildWhereCondition(\n    filterBy?: string,\n    filterValue?: string | number\n  ): FindOptionsWhere {\n    let whereCondition: FindOptionsWhere = {};\n\n    if (filterBy && filterValue && filterValue !== 'ALL') {\n      const nestedFields = filterBy.split('.');\n      let currentField = whereCondition;\n      nestedFields.forEach((field, index) => {\n        if (index === nestedFields.length - 1) {\n          currentField[field] = filterValue;\n        } else {\n          currentField[field] = {};\n          currentField = currentField[field];\n        }\n      });\n    }\n    return whereCondition;\n  }\n\n  /**\n   * Creates nested order conditions for sorting.\n   *\n   * @param {string} sortBy - Field to sort by, can be nested.\n   * @param {'ASC' | 'DESC'} sortOrder - Order direction (ascending or descending).\n   * @returns {object} - The constructed order condition.\n   *\n   * @example\n   * const order = queryHelperService.createNestedOrder('address.city', 'ASC');\n   */\n  createNestedOrder(sortBy: string, sortOrder: 'ASC' | 'DESC'): object {\n    const orderParts = sortBy.split('.');\n    const order = {};\n    let currentPart = order;\n    orderParts.forEach((part, index) => {\n      if (index === orderParts.length - 1) {\n        currentPart[part] = sortOrder;\n      } else {\n        currentPart[part] = {};\n        currentPart = currentPart[part];\n      }\n    });\n    return order;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nREDIS_CLIENT \n\nREDIS_CLIENT \n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nREDIS_CLIENT  -->\n\nRedisModule->REDIS_CLIENT \n\n\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/redis/redis.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to set up and configure Redis client and Redis service.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            REDIS_CLIENT\n                        \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RedisService } from './redis.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport Redis from 'ioredis';\n\n/**\n * Module to set up and configure Redis client and Redis service.\n * @module\n */\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    /**\n     * Provides the Redis client instance.\n     *\n     * @remarks\n     * The Redis client is configured using environment variables accessed through ConfigService.\n     *\n     * @example\n     * {\n     *   provide: 'REDIS_CLIENT',\n     *   useFactory: async (configService: ConfigService) =>\n     *     new Redis({\n     *       host: configService.get('REDIS_HOST'),\n     *       port: configService.get('REDIS_PORT'),\n     *       password: configService.get('REDIS_PASSWORD')\n     *     }),\n     *   inject: [ConfigService]\n     * }\n     */\n    {\n      provide: 'REDIS_CLIENT',\n      useFactory: async (configService: ConfigService) =>\n        new Redis({\n          host: configService.get('REDIS_HOST'), // Redis server host\n          port: configService.get('REDIS_PORT'), // Redis server port\n          password: configService.get('REDIS_PASSWORD') // Redis server password\n        }),\n      inject: [ConfigService]\n    },\n    RedisService\n  ],\n  exports: ['REDIS_CLIENT', RedisService]\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/redis/redis.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with Redis for caching purposes.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCacheEvent\n                            \n                            \n                                    Async\n                                del\n                            \n                            \n                                    Async\n                                fetchCachedData\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Private\n                                safeParse\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisClient: Redis)\n                    \n                \n                        \n                            \n                                Defined in src/database/redis/redis.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        redisClient\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Redis client instance injected via dependency injection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearCacheEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearCacheEvent(eventId?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Clear cache for a specific event or all events.\nExample :await redisService.clearCacheEvent(123);\nawait redisService.clearCacheEvent();\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional event ID to clear specific cache.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                        \n                    del(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Delete a key from Redis.\nExample :await redisService.del('user:1');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to delete from Redis.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nConfirmation message after deleting the key.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        fetchCachedData\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchCachedData(key: string, fetchFn: () => void, TTL: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:109\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Fetch data from Redis cache or execute a function to retrieve data and cache it.\nExample :const data = await redisService.fetchCachedData('user:1', fetchUserFromDb, 3600);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to fetch from cache.\n\n\n                                            \n                                        \n                                        \n                                                fetchFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe function to execute if data is not found in cache.\n\n\n                                            \n                                        \n                                        \n                                                TTL\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTime To Live for the cached data in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe fetched or cached data.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Get a value from Redis by key.\nExample :const value = await redisService.get('user:1');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to retrieve from Redis.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe value associated with the key, or null if not found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        safeParse\n                        \n                    \n                \n            \n            \n                \n                        \n                    safeParse(jsonString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:129\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Safely parse a JSON string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jsonString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JSON string to parse.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \nThe parsed object.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: any, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Set a key-value pair in Redis with optional TTL (Time To Live).\nExample :await redisService.set('user:1', { name: 'John' }, 3600);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to set in Redis.\n\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to set, will be stringified if not a string.\n\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional TTL in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nConfirmation message after setting the key.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(RedisService.name)\n                    \n                \n                    \n                        \n                                Defined in src/database/redis/redis.service.ts:19\n                        \n                    \n\n            \n                \n                    Logger instance from NestJS.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger, InternalServerErrorException } from '@nestjs/common';\nimport Redis from 'ioredis';\n\n/**\n * Service to interact with Redis for caching purposes.\n * @class\n */\n@Injectable()\nexport class RedisService {\n  /**\n   * Logger instance from NestJS.\n   *\n   * @private\n   * @readonly\n   * @type {Logger}\n   * @memberof RedisService\n   * @default new Logger(RedisService.name)\n   */\n  private readonly logger: Logger = new Logger(RedisService.name);\n\n  /**\n   * @param {Redis} redisClient - The Redis client instance injected via dependency injection.\n   */\n  constructor(@Inject('REDIS_CLIENT') private readonly redisClient: Redis) {}\n\n  /**\n   * Set a key-value pair in Redis with optional TTL (Time To Live).\n   *\n   * @param {string} key - The key to set in Redis.\n   * @param {any} value - The value to set, will be stringified if not a string.\n   * @param {number} [ttl] - Optional TTL in seconds.\n   * @returns {Promise} - Confirmation message after setting the key.\n   *\n   * @throws {Error} If the key is not provided.\n   *\n   * @example\n   * await redisService.set('user:1', { name: 'John' }, 3600);\n   */\n  async set(key: string, value: any, ttl?: number): Promise {\n    if (!key) throw new Error('Key is required');\n    const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n    if (typeof ttl === 'number') {\n      await this.redisClient.set(key, stringValue, 'EX', ttl);\n    } else {\n      await this.redisClient.set(key, stringValue);\n    }\n    return `Data set for key: ${key}`;\n  }\n\n  /**\n   * Get a value from Redis by key.\n   *\n   * @param {string} key - The key to retrieve from Redis.\n   * @returns {Promise} - The value associated with the key, or null if not found.\n   *\n   * @throws {Error} If the key is not provided.\n   *\n   * @example\n   * const value = await redisService.get('user:1');\n   */\n  async get(key: string): Promise {\n    if (!key) throw new Error('Key is required');\n\n    try {\n      const value = await this.redisClient.get(key);\n      if (!value) return null;\n      return value;\n    } catch (error) {\n      this.logger.error(`Error retrieving key ${key} from cache`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a key from Redis.\n   *\n   * @param {string} key - The key to delete from Redis.\n   * @returns {Promise} - Confirmation message after deleting the key.\n   *\n   * @throws {Error} If the key is not provided.\n   *\n   * @example\n   * await redisService.del('user:1');\n   */\n  async del(key: string): Promise {\n    if (!key) throw new Error('Key is required');\n\n    const result = await this.redisClient.del(key);\n    if (!result) {\n      this.logger.warn(`Key not found in cache: ${key}`);\n      return `Key not found: ${key}`;\n    }\n    return `Key deleted: ${key}`;\n  }\n\n  /**\n   * Fetch data from Redis cache or execute a function to retrieve data and cache it.\n   *\n   * @param {string} key - The key to fetch from cache.\n   * @param {() => Promise} fetchFn - The function to execute if data is not found in cache.\n   * @param {number} TTL - Time To Live for the cached data in seconds.\n   * @returns {Promise} - The fetched or cached data.\n   *\n   * @template T\n   *\n   * @example\n   * const data = await redisService.fetchCachedData('user:1', fetchUserFromDb, 3600);\n   */\n  async fetchCachedData(key: string, fetchFn: () => Promise, TTL: number): Promise {\n    let data = await this.get(key);\n    if (!data) {\n      const result = await fetchFn();\n      await this.set(key, JSON.stringify(result), TTL);\n      return result;\n    }\n    return this.safeParse(data);\n  }\n\n  /**\n   * Safely parse a JSON string.\n   *\n   * @param {string} jsonString - The JSON string to parse.\n   * @returns {T} - The parsed object.\n   *\n   * @throws {InternalServerErrorException} If parsing fails.\n   *\n   * @template T\n   */\n  private safeParse(jsonString: string): T {\n    try {\n      return JSON.parse(jsonString) as T;\n    } catch (error) {\n      throw new InternalServerErrorException('Error parsing data');\n    }\n  }\n\n  /**\n   * Clear cache for a specific event or all events.\n   *\n   * @param {number} [eventId] - Optional event ID to clear specific cache.\n   * @returns {Promise}\n   *\n   * @example\n   * await redisService.clearCacheEvent(123);\n   * await redisService.clearCacheEvent();\n   */\n  async clearCacheEvent(eventId?: number): Promise {\n    if (eventId) {\n      await this.del(`event_${eventId}`);\n    }\n    await this.del('events_all');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/auth/dto/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for refreshing a token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/security/auth/dto/refresh-token.dto.ts:19\n                        \n                    \n\n            \n                \n                    The refresh token.\nThis field is required and must not be empty.\nExample :const dto: RefreshTokenDto = { refreshToken: 'some-refresh-token' };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for refreshing a token.\n *\n * @class\n */\nexport class RefreshTokenDto {\n  /**\n   * The refresh token.\n   * This field is required and must not be empty.\n   * @type {string}\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: RefreshTokenDto = { refreshToken: 'some-refresh-token' };\n   */\n  @IsNotEmpty()\n  readonly refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStoreService.html":{"url":"injectables/RefreshTokenStoreService.html","title":"injectable - RefreshTokenStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/token/refreshtoken-store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage refresh tokens stored in Redis.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                removeRefreshTokenRedis\n                            \n                            \n                                    Async\n                                storeRefreshTokenInRedis\n                            \n                            \n                                    Async\n                                verifyRefreshTokenInRedis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisService: RedisService, convertUtilsService: ConvertUtilsService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/security/token/refreshtoken-store.service.ts:21\n                            \n                        \n\n                \n                    \n                            Creates an instance of RefreshTokenStoreService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with Redis.\n\n\n                                                        \n                                                \n                                                \n                                                        convertUtilsService\n                                                  \n                                                        \n                                                                        ConvertUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to convert values.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to access configuration variables.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeRefreshTokenRedis\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRefreshTokenRedis(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/refreshtoken-store.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Removes a refresh token from Redis.\nExample :await refreshTokenStoreService.removeRefreshTokenRedis(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeRefreshTokenInRedis\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRefreshTokenInRedis(userId: number, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/refreshtoken-store.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Stores a refresh token in Redis with a TTL.\nExample :await refreshTokenStoreService.storeRefreshTokenInRedis(1, 'refreshToken');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe refresh token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyRefreshTokenInRedis\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyRefreshTokenInRedis(userId: number, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/refreshtoken-store.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Verifies a refresh token in Redis.\nExample :const isValid = await refreshTokenStoreService.verifyRefreshTokenInRedis(1, 'refreshToken');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe refresh token to verify.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nWhether the token is valid.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(RefreshTokenStoreService.name)\n                    \n                \n                    \n                        \n                                Defined in src/security/token/refreshtoken-store.service.ts:21\n                        \n                    \n\n            \n                \n                    Logger instance from NestJS.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { RedisService } from '@database/redis/redis.service';\nimport { ConfigService } from '@nestjs/config';\nimport { ConvertUtilsService } from '@utils/services/convert-utils.service';\n\n/**\n * Service to manage refresh tokens stored in Redis.\n * @class\n */\n@Injectable()\nexport class RefreshTokenStoreService {\n  /**\n   * Logger instance from NestJS.\n   *\n   * @private\n   * @readonly\n   * @type {Logger}\n   * @memberof RefreshTokenStoreService\n   * @default new Logger(RefreshTokenStoreService.name)\n   */\n  private readonly logger: Logger = new Logger(RefreshTokenStoreService.name);\n\n  /**\n   * Creates an instance of RefreshTokenStoreService.\n   *\n   * @constructor\n   * @param {RedisService} redisService - Service to interact with Redis.\n   * @param {ConvertUtilsService} convertUtilsService - Service to convert values.\n   * @param {ConfigService} configService - Service to access configuration variables.\n   */\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly convertUtilsService: ConvertUtilsService,\n    private readonly configService: ConfigService\n  ) {}\n\n  /**\n   * Stores a refresh token in Redis with a TTL.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} token - The refresh token.\n   * @returns {Promise}\n   *\n   * @example\n   * await refreshTokenStoreService.storeRefreshTokenInRedis(1, 'refreshToken');\n   */\n  async storeRefreshTokenInRedis(userId: number, token: string): Promise {\n    const ttl = this.convertUtilsService.convertDaysToSeconds(\n      this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION')\n    );\n    await this.redisService.set(`refresh_token_${userId}`, token, ttl);\n    this.logger.log(`Refresh token stored for user ${userId}`);\n  }\n\n  /**\n   * Verifies a refresh token in Redis.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} token - The refresh token to verify.\n   * @returns {Promise} - Whether the token is valid.\n   *\n   * @example\n   * const isValid = await refreshTokenStoreService.verifyRefreshTokenInRedis(1, 'refreshToken');\n   */\n  async verifyRefreshTokenInRedis(userId: number, token: string): Promise {\n    const storedToken = await this.redisService.get(`refresh_token_${userId}`);\n    return storedToken === token;\n  }\n\n  /**\n   * Removes a refresh token from Redis.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise}\n   *\n   * @example\n   * await refreshTokenStoreService.removeRefreshTokenRedis(1);\n   */\n  async removeRefreshTokenRedis(userId: number): Promise {\n    this.logger.log(`Refresh token for user ${userId} removed from Redis`);\n    await this.redisService.del(`refresh_token_${userId}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Reservation.html":{"url":"entities/Reservation.html","title":"entity - Reservation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Reservation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/entities/reservation.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a reservation.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                cartItem\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                reservationDetails\n                            \n                            \n                                    \n                                reservationId\n                            \n                            \n                                    \n                                    \n                                ticket\n                            \n                            \n                                    \n                                    \n                                    \n                                transaction\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        cartItem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, cartItem => cartItem.reservations)@JoinColumn({name: 'cartItemId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:85\n                        \n                    \n\n            \n                \n                    Cart item associated with the reservation.\nExample :const cartItem = reservation.cartItem;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:110\n                        \n                    \n\n            \n                \n                    Timestamp when the reservation was created.\nExample :const createdAt = reservation.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reservationDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReservationDetails\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, reservationDetails => reservationDetails.reservation)@JoinColumn({name: 'reservationDetailsId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:57\n                        \n                    \n\n            \n                \n                    Detailed information of the reservation.\nExample :const details = reservation.reservationDetails;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:30\n                        \n                    \n\n            \n                \n                    Unique identifier for the reservation.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        ticket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ticket\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, ticket => ticket.reservation)@JoinColumn({name: 'ticketId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:98\n                        \n                    \n\n            \n                \n                    Ticket associated with the reservation.\nExample :const ticket = reservation.ticket;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        transaction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Transaction\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, transaction => transaction.reservation)@JoinColumn({name: 'transactionId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:71\n                        \n                    \n\n            \n                \n                    Transaction associated with the reservation.\nExample :const transaction = reservation.transaction;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:122\n                        \n                    \n\n            \n                \n                    Timestamp when the reservation was last updated.\nExample :const updatedAt = reservation.updatedAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, user => user.reservations)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:44\n                        \n                    \n\n            \n                \n                    User associated with the reservation.\nExample :const user = reservation.user;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\nimport { Ticket } from '@modules/tickets/entities/ticket.entity';\nimport { Transaction } from '@modules/transactions/entities/transaction.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToOne,\n  Index\n} from 'typeorm';\n\n/**\n * Entity representing a reservation.\n *\n * @class\n * @entity\n */\n@Entity('reservations')\nexport class Reservation {\n  /**\n   * Unique identifier for the reservation.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  reservationId: number;\n\n  /**\n   * User associated with the reservation.\n   * @type {User}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const user = reservation.user;\n   */\n  @Index()\n  @ManyToOne(() => User, user => user.reservations)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  /**\n   * Detailed information of the reservation.\n   * @type {ReservationDetails}\n   * @oneToOne\n   * @joinColumn\n   *\n   * @example\n   * const details = reservation.reservationDetails;\n   */\n  @OneToOne(() => ReservationDetails, reservationDetails => reservationDetails.reservation)\n  @JoinColumn({ name: 'reservationDetailsId' })\n  reservationDetails: ReservationDetails;\n\n  /**\n   * Transaction associated with the reservation.\n   * @type {Transaction}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const transaction = reservation.transaction;\n   */\n  @Index()\n  @ManyToOne(() => Transaction, transaction => transaction.reservation)\n  @JoinColumn({ name: 'transactionId' })\n  transaction: Transaction;\n\n  /**\n   * Cart item associated with the reservation.\n   * @type {CartItem}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const cartItem = reservation.cartItem;\n   */\n  @Index()\n  @ManyToOne(() => CartItem, cartItem => cartItem.reservations)\n  @JoinColumn({ name: 'cartItemId' })\n  cartItem: CartItem;\n\n  /**\n   * Ticket associated with the reservation.\n   * @type {Ticket}\n   * @oneToOne\n   * @joinColumn\n   *\n   * @example\n   * const ticket = reservation.ticket;\n   */\n  @OneToOne(() => Ticket, ticket => ticket.reservation)\n  @JoinColumn({ name: 'ticketId' })\n  ticket: Ticket;\n\n  /**\n   * Timestamp when the reservation was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = reservation.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the reservation was last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = reservation.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ReservationDetails.html":{"url":"entities/ReservationDetails.html","title":"entity - ReservationDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ReservationDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservation-details/entities/reservation-details.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing the details of a reservation.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                event\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                priceFormula\n                            \n                            \n                                    \n                                    \n                                    \n                                reservation\n                            \n                            \n                                    \n                                reservationDetailsId\n                            \n                            \n                                    \n                                shortDescription\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:114\n                        \n                    \n\n            \n                \n                    Timestamp when the reservation details were created.\nExample :const createdAt = reservationDetails.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, event => event.reservationsDetails, {nullable: false})@JoinColumn({name: 'eventId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:56\n                        \n                    \n\n            \n                \n                    Event associated with the reservation details.\nExample :const event = reservationDetails.event;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:91\n                        \n                    \n\n            \n                \n                    Price of the reservation.\nExample :const price = reservationDetails.price;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priceFormula\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceFormulaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PriceFormulaEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:67\n                        \n                    \n\n            \n                \n                    Pricing formula for the reservation.\nExample :const priceFormula = reservationDetails.priceFormula;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@OneToOne(undefined, reservation => reservation.reservationDetails)@JoinColumn({name: 'reservationId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:42\n                        \n                    \n\n            \n                \n                    Reservation associated with the reservation details.\nExample :const reservation = reservationDetails.reservation;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationDetailsId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:28\n                        \n                    \n\n            \n                \n                    Unique identifier for the reservation details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shortDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:102\n                        \n                    \n\n            \n                \n                    Short description of the reservation details.\nExample :const description = reservationDetails.shortDescription;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:78\n                        \n                    \n\n            \n                \n                    Title of the reservation details.\nExample :const title = reservationDetails.title;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:126\n                        \n                    \n\n            \n                \n                    Timestamp when the reservation details were last updated.\nExample :const updatedAt = reservationDetails.updatedAt;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToOne,\n  Index\n} from 'typeorm';\n\n/**\n * Entity representing the details of a reservation.\n *\n * @class\n * @entity\n */\n@Entity('reservation_details')\nexport class ReservationDetails {\n  /**\n   * Unique identifier for the reservation details.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  reservationDetailsId: number;\n\n  /**\n   * Reservation associated with the reservation details.\n   * @type {Reservation}\n   * @oneToOne\n   * @joinColumn\n   *\n   * @example\n   * const reservation = reservationDetails.reservation;\n   */\n  @Index()\n  @OneToOne(() => Reservation, reservation => reservation.reservationDetails)\n  @JoinColumn({ name: 'reservationId' })\n  reservation: Reservation;\n\n  /**\n   * Event associated with the reservation details.\n   * @type {Event}\n   * @manyToOne\n   * @joinColumn\n   * @nullable false\n   *\n   * @example\n   * const event = reservationDetails.event;\n   */\n  @ManyToOne(() => Event, event => event.reservationsDetails, { nullable: false })\n  @JoinColumn({ name: 'eventId' })\n  event: Event;\n\n  /**\n   * Pricing formula for the reservation.\n   * @type {PriceFormulaEnum}\n   * @column\n   *\n   * @example\n   * const priceFormula = reservationDetails.priceFormula;\n   */\n  @Column({ type: 'enum', enum: PriceFormulaEnum })\n  priceFormula: PriceFormulaEnum;\n\n  /**\n   * Title of the reservation details.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const title = reservationDetails.title;\n   */\n  @Column()\n  title: string;\n\n  /**\n   * Price of the reservation.\n   * @type {number}\n   * @column\n   * @precision 10\n   * @scale 2\n   *\n   * @example\n   * const price = reservationDetails.price;\n   */\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  /**\n   * Short description of the reservation details.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const description = reservationDetails.shortDescription;\n   */\n  @Column('text')\n  shortDescription: string;\n\n  /**\n   * Timestamp when the reservation details were created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = reservationDetails.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the reservation details were last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = reservationDetails.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationDetailsModule.html":{"url":"modules/ReservationDetailsModule.html","title":"module - ReservationDetailsModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationDetailsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationDetailsModule\n\n\n\ncluster_ReservationDetailsModule_providers\n\n\n\ncluster_ReservationDetailsModule_imports\n\n\n\n\nCartItemsModule\n\nCartItemsModule\n\n\n\nReservationDetailsModule\n\nReservationDetailsModule\n\nReservationDetailsModule -->\n\nCartItemsModule->ReservationDetailsModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nReservationDetailsModule -->\n\nEventsModule->ReservationDetailsModule\n\n\n\n\n\nReservationDetailsService\n\nReservationDetailsService\n\nReservationDetailsModule -->\n\nReservationDetailsService->ReservationDetailsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/reservation-details/reservation-details.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage reservation details.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReservationDetailsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartItemsModule\n                        \n                        \n                            EventsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReservationDetailsService } from './reservation-details.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { ReservationDetails } from './entities/reservation-details.entity';\nimport { EventsModule } from '@modules/events/events.module';\nimport { CartItemsModule } from '@modules/cart-items/cart-items.module';\n\n/**\n * Module to manage reservation details.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for Event and ReservationDetails entities\n    TypeOrmModule.forFeature([Event, ReservationDetails]),\n    CartItemsModule, // Import CartItemsModule\n    EventsModule // Import EventsModule\n  ],\n  providers: [\n    // Register ReservationDetailsService as a provider\n    ReservationDetailsService\n  ]\n})\nexport class ReservationDetailsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationDetailsService.html":{"url":"injectables/ReservationDetailsService.html","title":"injectable - ReservationDetailsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationDetailsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservation-details/reservation-details.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage reservation details.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createReservationDetailsFromReservation\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationDetailsRepository: Repository, eventRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/reservation-details/reservation-details.service.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of ReservationDetailsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reservationDetailsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the ReservationDetails entity.\n\n\n                                                        \n                                                \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Event entity.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createReservationDetailsFromReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservationDetailsFromReservation(reservation: Reservation, cartItem: CartItem)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservation-details/reservation-details.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Creates reservation details from a reservation and cart item.\nExample :const reservationDetails = await reservationDetailsService.createReservationDetailsFromReservation(reservation, cartItem);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe reservation entity.\n\n\n                                            \n                                        \n                                        \n                                                cartItem\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart item entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe created reservation details.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservation-details/reservation-details.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Finds a reservation detail by its ID.\nExample :const reservationDetails = await reservationDetailsService.findOne(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the reservation detail.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe found reservation detail.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ReservationDetails } from './entities/reservation-details.entity';\nimport { Repository } from 'typeorm';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { CreateReservationDetailsDto } from './dto/create-reservation-details.dto';\nimport { Event } from '@modules/events/entities/event.entity';\n\n/**\n * Service to manage reservation details.\n * @class\n */\n@Injectable()\nexport class ReservationDetailsService {\n  /**\n   * Creates an instance of ReservationDetailsService.\n   *\n   * @constructor\n   * @param {Repository} reservationDetailsRepository - Repository for the ReservationDetails entity.\n   * @param {Repository} eventRepository - Repository for the Event entity.\n   */\n  constructor(\n    @InjectRepository(ReservationDetails)\n    private reservationDetailsRepository: Repository,\n    @InjectRepository(Event)\n    private eventRepository: Repository\n  ) {}\n\n  /**\n   * Creates reservation details from a reservation and cart item.\n   *\n   * @param {Reservation} reservation - The reservation entity.\n   * @param {CartItem} cartItem - The cart item entity.\n   * @returns {Promise} - The created reservation details.\n   *\n   * @throws {NotFoundException} If the event is not found in the cart item or in the repository.\n   *\n   * @example\n   * const reservationDetails = await reservationDetailsService.createReservationDetailsFromReservation(reservation, cartItem);\n   */\n  async createReservationDetailsFromReservation(\n    reservation: Reservation,\n    cartItem: CartItem\n  ): Promise {\n    if (!cartItem.event) {\n      throw new NotFoundException('Event ID is not found in CartItem');\n    }\n\n    const event = await this.eventRepository.findOne({\n      where: { eventId: cartItem.event.eventId }\n    });\n\n    if (!event) {\n      throw new NotFoundException('Event not found');\n    }\n\n    const createReservationDetailsDto: CreateReservationDetailsDto = {\n      title: event.title,\n      shortDescription: event.shortDescription,\n      priceFormula: cartItem.priceFormula,\n      price: cartItem.price\n    };\n\n    const newReservationDetails = this.reservationDetailsRepository.create({\n      ...createReservationDetailsDto,\n      event: { eventId: cartItem.event.eventId },\n      reservation: { reservationId: reservation.reservationId }\n    });\n\n    return await this.reservationDetailsRepository.save(newReservationDetails);\n  }\n\n  /**\n   * Finds a reservation detail by its ID.\n   *\n   * @param {number} id - ID of the reservation detail.\n   * @returns {Promise} - The found reservation detail.\n   *\n   * @throws {NotFoundException} If the reservation detail is not found.\n   *\n   * @example\n   * const reservationDetails = await reservationDetailsService.findOne(1);\n   */\n  async findOne(id: number): Promise {\n    const reservationDetails = await this.reservationDetailsRepository.findOne({\n      where: { reservationDetailsId: id },\n      relations: ['event', 'reservation']\n    });\n    if (!reservationDetails) {\n      throw new NotFoundException(`Reservation details with id ${id} not found`);\n    }\n    return reservationDetails;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReservationsController.html":{"url":"controllers/ReservationsController.html","title":"controller - ReservationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReservationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/reservations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reservations\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage reservations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createReservations\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findAllAdmin\n                            \n                            \n                                    \n                                findAllData\n                            \n                            \n                                    \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createReservations\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservations(userId: number, cartId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:cartId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Creates reservations for a user based on their cart.\nExample :POST /reservations/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user's cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of created reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, paginationDto: PaginationAndFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/find-all')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations for a user with pagination and filtering.\nExample :GET /reservations/1/find-all?page=1&limit=10&sortBy=date&sortOrder=ASC\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered reservations and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAllAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllAdmin(paginationDto: PaginationAndFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RoleGuard)@Role(UserRole.ADMIN)@Get('find-all-admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations with pagination for admin.\nExample :GET /reservations/find-all-admin?page=1&limit=10\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAllData\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllData(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('find-all-data/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.controller.ts:87\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations for a user.\nExample :GET /reservations/find-all-data/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.controller.ts:102\n                        \n                    \n\n\n            \n                \n                        Retrieves a single reservation by its ID.\nExample :GET /reservations/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the reservation.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found reservation.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Param, UseGuards, Query } from '@nestjs/common';\nimport { ReservationsService } from './reservations.service';\nimport { UserId } from '@common/decorators/user-id.decorator';\nimport { AccessTokenGuard, RoleGuard } from '@security/guards';\nimport { Role } from '@common/decorators/role.decorator';\nimport { UserRole } from '@common/enums/user-role.enum';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { Reservation } from './entities/reservation.entity';\n\n/**\n * Controller to manage reservations.\n * @class\n */\n@UseGuards(AccessTokenGuard)\n@Controller('reservations')\nexport class ReservationsController {\n  /**\n   * Creates an instance of ReservationsController.\n   *\n   * @constructor\n   * @param {ReservationsService} reservationsService - Service to manage reservations.\n   */\n  constructor(private readonly reservationsService: ReservationsService) {}\n\n  /**\n   * Creates reservations for a user based on their cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the user's cart.\n   * @returns {Promise} - List of created reservations.\n   *\n   * @example\n   * POST /reservations/1\n   */\n  @Post('/:cartId')\n  async createReservations(\n    @UserId() userId: number,\n    @Param('cartId') cartId: number\n  ): Promise {\n    return this.reservationsService.generateReservation(userId, cartId);\n  }\n\n  /**\n   * Retrieves all reservations for a user with pagination and filtering.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {PaginationAndFilterDto} paginationDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered reservations and total count.\n   *\n   * @example\n   * GET /reservations/1/find-all?page=1&limit=10&sortBy=date&sortOrder=ASC\n   */\n  @Get(':userId/find-all')\n  findAll(\n    @Param('userId') userId: number,\n    @Query() paginationDto: PaginationAndFilterDto\n  ): Promise {\n    return this.reservationsService.findAll(userId, paginationDto);\n  }\n\n  /**\n   * Retrieves all reservations with pagination for admin.\n   *\n   * @param {PaginationAndFilterDto} paginationDto - DTO containing pagination data.\n   * @returns {Promise} - List of reservations.\n   *\n   * @example\n   * GET /reservations/find-all-admin?page=1&limit=10\n   */\n  @UseGuards(RoleGuard)\n  @Role(UserRole.ADMIN)\n  @Get('find-all-admin')\n  findAllAdmin(@Query() paginationDto: PaginationAndFilterDto): Promise {\n    return this.reservationsService.findAllAdmin(paginationDto);\n  }\n\n  /**\n   * Retrieves all reservations for a user.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - List of reservations.\n   *\n   * @example\n   * GET /reservations/find-all-data/1\n   */\n  @Get('find-all-data/:userId')\n  findAllData(@Param('userId') userId: number): Promise {\n    return this.reservationsService.findAllData(userId);\n  }\n\n  /**\n   * Retrieves a single reservation by its ID.\n   *\n   * @param {string} id - ID of the reservation.\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - The found reservation.\n   *\n   * @example\n   * GET /reservations/1\n   */\n  @Get(':id')\n  findOne(@Param('id') id: string, @UserId() userId: number): Promise {\n    return this.reservationsService.findOne(+id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationsModule.html":{"url":"modules/ReservationsModule.html","title":"module - ReservationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_imports\n\n\n\ncluster_ReservationsModule_providers\n\n\n\ncluster_ReservationsModule_exports\n\n\n\n\nCartItemsModule\n\nCartItemsModule\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nCartItemsModule->ReservationsModule\n\n\n\n\n\nCartsModule\n\nCartsModule\n\nReservationsModule -->\n\nCartsModule->ReservationsModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nReservationsModule -->\n\nEventsModule->ReservationsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nReservationsModule -->\n\nTransactionsModule->ReservationsModule\n\n\n\n\n\nReservationsProcessorService \n\nReservationsProcessorService \n\nReservationsProcessorService  -->\n\nReservationsModule->ReservationsProcessorService \n\n\n\n\n\nReservationsService \n\nReservationsService \n\nReservationsService  -->\n\nReservationsModule->ReservationsService \n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nReservationsModule -->\n\nQueryHelperService->ReservationsModule\n\n\n\n\n\nReservationDetailsService\n\nReservationDetailsService\n\nReservationsModule -->\n\nReservationDetailsService->ReservationsModule\n\n\n\n\n\nReservationsProcessorService\n\nReservationsProcessorService\n\nReservationsModule -->\n\nReservationsProcessorService->ReservationsModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/reservations/reservations.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage reservations.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueryHelperService\n                        \n                        \n                            ReservationDetailsService\n                        \n                        \n                            ReservationsProcessorService\n                        \n                        \n                            ReservationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReservationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartItemsModule\n                        \n                        \n                            CartsModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            TransactionsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ReservationsProcessorService\n                        \n                        \n                            ReservationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { ReservationsService } from './reservations.service';\nimport { ReservationsController } from './reservations.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Reservation } from './entities/reservation.entity';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\nimport { TicketsModule } from '@modules/tickets/tickets.module';\nimport { EventsModule } from '@modules/events/events.module';\nimport { ReservationsProcessorService } from './reservations-processor.service';\nimport { ReservationDetailsService } from '@modules/reservation-details/reservation-details.service';\nimport { CartsModule } from '@modules/carts/carts.module';\nimport { CartItemsModule } from '@modules/cart-items/cart-items.module';\nimport { TransactionsModule } from '@modules/transactions/transactions.module';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Module to manage reservations.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for Reservation, Event, and ReservationDetails entities\n    TypeOrmModule.forFeature([Reservation, Event, ReservationDetails]),\n    forwardRef(() => TicketsModule), // Import TicketsModule with forward reference\n    EventsModule, // Import EventsModule\n    CartsModule, // Import CartsModule\n    CartItemsModule, // Import CartItemsModule\n    TransactionsModule // Import TransactionsModule\n  ],\n  controllers: [\n    // Register ReservationsController\n    ReservationsController\n  ],\n  providers: [\n    // Register services as providers\n    ReservationsService,\n    ReservationsProcessorService,\n    ReservationDetailsService,\n    QueryHelperService\n  ],\n  exports: [\n    // Export ReservationsService and ReservationsProcessorService\n    ReservationsService,\n    ReservationsProcessorService\n  ]\n})\nexport class ReservationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationsProcessorService.html":{"url":"injectables/ReservationsProcessorService.html","title":"injectable - ReservationsProcessorService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationsProcessorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/reservations-processor.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to process reservations for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                cleanUpAfterPayment\n                            \n                            \n                                    Private\n                                    Async\n                                createReservationsForAllCartItems\n                            \n                            \n                                    Private\n                                    Async\n                                createReservationsForEachCartItem\n                            \n                            \n                                    Private\n                                    Async\n                                finalizeBooking\n                            \n                            \n                                    Private\n                                    Async\n                                initiateReservation\n                            \n                            \n                                    Private\n                                    Async\n                                preventDuplicateReservation\n                            \n                            \n                                    Async\n                                processUserReservation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationRepository: Repository, ticketService: TicketsService, eventSalesService: EventSalesService, transactionService: TransactionsService, usersService: UsersService, cartService: CartsService, cartItemsService: CartItemsService, paymentService: PaymentService, reservationDetailsService: ReservationDetailsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/reservations/reservations-processor.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the ReservationsProcessorService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Reservation entity.\n\n\n                                                        \n                                                \n                                                \n                                                        ticketService\n                                                  \n                                                        \n                                                                        TicketsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage tickets.\n\n\n                                                        \n                                                \n                                                \n                                                        eventSalesService\n                                                  \n                                                        \n                                                                        EventSalesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage event sales.\n\n\n                                                        \n                                                \n                                                \n                                                        transactionService\n                                                  \n                                                        \n                                                                        TransactionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage transactions.\n\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage users.\n\n\n                                                        \n                                                \n                                                \n                                                        cartService\n                                                  \n                                                        \n                                                                        CartsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage carts.\n\n\n                                                        \n                                                \n                                                \n                                                        cartItemsService\n                                                  \n                                                        \n                                                                        CartItemsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage cart items.\n\n\n                                                        \n                                                \n                                                \n                                                        paymentService\n                                                  \n                                                        \n                                                                        PaymentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage payments.\n\n\n                                                        \n                                                \n                                                \n                                                        reservationDetailsService\n                                                  \n                                                        \n                                                                        ReservationDetailsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage reservation details.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        cleanUpAfterPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanUpAfterPayment(cartId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:223\n                        \n                    \n\n\n            \n                \n                        Cleans up after the payment process by removing cart items and deleting the cart.\nExample :await reservationsProcessorService.cleanUpAfterPayment(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createReservationsForAllCartItems\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservationsForAllCartItems(cartItems: CartItem[], user: User, transaction: Transaction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Creates reservations for all items in the cart.\nExample :const reservations = await reservationsProcessorService.createReservationsForAllCartItems(cartItems, user, transaction);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartItems\n                                            \n                                                        CartItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of cart items.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                        \n                                                transaction\n                                            \n                                                            Transaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe transaction entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of created reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createReservationsForEachCartItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservationsForEachCartItem(item: CartItem, user: User, transaction: Transaction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Creates reservations for each cart item.\nExample :const reservations = await reservationsProcessorService.createReservationsForEachCartItem(cartItem, user, transaction);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart item entity.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                        \n                                                transaction\n                                            \n                                                            Transaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe transaction entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of created reservations for the cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        finalizeBooking\n                        \n                    \n                \n            \n            \n                \n                        \n                    finalizeBooking(cartItems: CartItem[], reservations: Reservation[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Finalizes the booking process by updating event tickets and revenue.\nExample :await reservationsProcessorService.finalizeBooking(cartItems, reservations);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartItems\n                                            \n                                                        CartItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of cart items.\n\n\n                                            \n                                        \n                                        \n                                                reservations\n                                            \n                                                            Reservation[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of reservations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        initiateReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    initiateReservation(user: User, cartItem: CartItem, transaction: Transaction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Initiates a new reservation.\nExample :const reservation = await reservationsProcessorService.initiateReservation(user, cartItem, transaction);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                        \n                                                cartItem\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart item entity.\n\n\n                                            \n                                        \n                                        \n                                                transaction\n                                            \n                                                            Transaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe transaction entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe initiated reservation.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        preventDuplicateReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    preventDuplicateReservation(item: CartItem, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Prevents duplicate reservations for the same cart item and user.\nExample :await reservationsProcessorService.preventDuplicateReservation(cartItem, user);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart item entity.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processUserReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    processUserReservation(userId: number, cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Processes a user's reservation based on their cart.\nExample :const reservations = await reservationsProcessorService.processUserReservation(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user's cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of created reservations.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '@modules/users/entities/user.entity';\nimport { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { UsersService } from '@modules/users/users.service';\nimport { CartsService } from '@modules/carts/carts.service';\nimport { CartItemsService } from '@modules/cart-items/cart-items.service';\nimport { Reservation } from './entities/reservation.entity';\nimport { StatusReservation } from '@common/enums/status-reservation.enum';\nimport { TicketsService } from '@modules/tickets/tickets.service';\nimport { PaymentService } from '@libs/payment/payment.service';\nimport { ReservationDetailsService } from '@modules/reservation-details/reservation-details.service';\nimport { Transaction } from '@modules/transactions/entities/transaction.entity';\nimport { TransactionsService } from '@modules/transactions/transactions.service';\nimport { EventSalesService } from '@modules/events/event-sales.service';\n\n/**\n * Service to process reservations for users.\n * @class\n */\n@Injectable()\nexport class ReservationsProcessorService {\n  /**\n   * Constructor for the ReservationsProcessorService.\n   *\n   * @constructor\n   * @param {Repository} reservationRepository - Repository for the Reservation entity.\n   * @param {TicketsService} ticketService - Service to manage tickets.\n   * @param {EventSalesService} eventSalesService - Service to manage event sales.\n   * @param {TransactionsService} transactionService - Service to manage transactions.\n   * @param {UsersService} usersService - Service to manage users.\n   * @param {CartsService} cartService - Service to manage carts.\n   * @param {CartItemsService} cartItemsService - Service to manage cart items.\n   * @param {PaymentService} paymentService - Service to manage payments.\n   * @param {ReservationDetailsService} reservationDetailsService - Service to manage reservation details.\n   */\n  constructor(\n    @InjectRepository(Reservation) private reservationRepository: Repository,\n    private readonly ticketService: TicketsService,\n    private readonly eventSalesService: EventSalesService,\n    private readonly transactionService: TransactionsService,\n    private readonly usersService: UsersService,\n    private readonly cartService: CartsService,\n    private readonly cartItemsService: CartItemsService,\n    private readonly paymentService: PaymentService,\n    private readonly reservationDetailsService: ReservationDetailsService\n  ) {}\n\n  /**\n   * Processes a user's reservation based on their cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the user's cart.\n   * @returns {Promise} - List of created reservations.\n   *\n   * @example\n   * const reservations = await reservationsProcessorService.processUserReservation(1, 1);\n   */\n  async processUserReservation(userId: number, cartId: number): Promise {\n    const user = await this.usersService.verifyUserOneBy(userId);\n    const cartItems = await this.cartItemsService.findAllItemsInCart(userId, cartId);\n    const cartTotalPrice = this.transactionService.calculateCartTotal(cartItems);\n    const paymentResult = await this.paymentService.processPayment(cartTotalPrice);\n\n    const transaction = await this.transactionService.createTransaction(\n      user,\n      cartTotalPrice,\n      paymentResult\n    );\n\n    let reservations = await this.createReservationsForAllCartItems(cartItems, user, transaction);\n\n    if (paymentResult.status === StatusReservation.APPROVED) {\n      await this.finalizeBooking(cartItems, reservations);\n    }\n    await this.cleanUpAfterPayment(cartId, userId);\n    return reservations;\n  }\n\n  /**\n   * Creates reservations for all items in the cart.\n   *\n   * @param {CartItem[]} cartItems - List of cart items.\n   * @param {User} user - The user entity.\n   * @param {Transaction} transaction - The transaction entity.\n   * @returns {Promise} - List of created reservations.\n   *\n   * @private\n   *\n   * @example\n   * const reservations = await reservationsProcessorService.createReservationsForAllCartItems(cartItems, user, transaction);\n   */\n  private async createReservationsForAllCartItems(\n    cartItems: CartItem[],\n    user: User,\n    transaction: Transaction\n  ): Promise {\n    let reservations = [];\n\n    for (const item of cartItems) {\n      reservations.push(...(await this.createReservationsForEachCartItem(item, user, transaction)));\n    }\n    return reservations;\n  }\n\n  /**\n   * Creates reservations for each cart item.\n   *\n   * @param {CartItem} item - The cart item entity.\n   * @param {User} user - The user entity.\n   * @param {Transaction} transaction - The transaction entity.\n   * @returns {Promise} - List of created reservations for the cart item.\n   *\n   * @private\n   *\n   * @example\n   * const reservations = await reservationsProcessorService.createReservationsForEachCartItem(cartItem, user, transaction);\n   */\n  private async createReservationsForEachCartItem(\n    item: CartItem,\n    user: User,\n    transaction: Transaction\n  ): Promise {\n    let reservations = [];\n    await this.preventDuplicateReservation(item, user);\n    for (let i = 0; i } - The initiated reservation.\n   *\n   * @private\n   *\n   * @example\n   * const reservation = await reservationsProcessorService.initiateReservation(user, cartItem, transaction);\n   */\n  private async initiateReservation(\n    user: User,\n    cartItem: CartItem,\n    transaction: Transaction\n  ): Promise {\n    const reservation = this.reservationRepository.create({\n      user,\n      cartItem,\n      transaction\n    });\n    return this.reservationRepository.save(reservation);\n  }\n\n  /**\n   * Finalizes the booking process by updating event tickets and revenue.\n   *\n   * @param {CartItem[]} cartItems - List of cart items.\n   * @param {Reservation[]} reservations - List of reservations.\n   * @returns {Promise}\n   *\n   * @private\n   *\n   * @example\n   * await reservationsProcessorService.finalizeBooking(cartItems, reservations);\n   */\n  private async finalizeBooking(cartItems: CartItem[], reservations: Reservation[]): Promise {\n    const eventIds = new Set(cartItems.map(item => item.event.eventId));\n    for (const eventId of eventIds) {\n      const itemsForEvent = cartItems.filter(item => item.event.eventId === eventId);\n      await this.eventSalesService.processEventTicketsAndRevenue(itemsForEvent);\n    }\n    await this.ticketService.generateTicketsForApprovedReservations(reservations);\n  }\n\n  /**\n   * Prevents duplicate reservations for the same cart item and user.\n   *\n   * @param {CartItem} item - The cart item entity.\n   * @param {User} user - The user entity.\n   * @returns {Promise}\n   *\n   * @throws {Error} If a duplicate reservation is found.\n   *\n   * @private\n   *\n   * @example\n   * await reservationsProcessorService.preventDuplicateReservation(cartItem, user);\n   */\n  private async preventDuplicateReservation(item: CartItem, user: User): Promise {\n    const existingReservation = await this.reservationRepository.findOne({\n      where: { cartItem: item, user }\n    });\n    if (existingReservation) {\n      throw new Error(`Reservation already exists for item with ID ${item.cartItemId}.`);\n    }\n  }\n\n  /**\n   * Cleans up after the payment process by removing cart items and deleting the cart.\n   *\n   * @param {number} cartId - ID of the cart.\n   * @param {number} userId - ID of the user.\n   * @returns {Promise}\n   *\n   * @private\n   *\n   * @example\n   * await reservationsProcessorService.cleanUpAfterPayment(1, 1);\n   */\n  private async cleanUpAfterPayment(cartId: number, userId: number): Promise {\n    await this.cartItemsService.removeAllItemFromCart(userId, cartId);\n    await this.cartService.deleteCart(cartId);\n    await this.cartService.getOrCreateCart(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationsService.html":{"url":"injectables/ReservationsService.html","title":"injectable - ReservationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/reservations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage reservations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllAdmin\n                            \n                            \n                                    Async\n                                findAllData\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                generateReservation\n                            \n                            \n                                    Private\n                                getSelectFieldsFindAll\n                            \n                            \n                                    Private\n                                getSelectFieldsFindAllAdmin\n                            \n                            \n                                    Async\n                                saveReservation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationRepository: Repository, reservationProcessorService: ReservationsProcessorService, queryHelperService: QueryHelperService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/reservations/reservations.service.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of ReservationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Reservation entity.\n\n\n                                                        \n                                                \n                                                \n                                                        reservationProcessorService\n                                                  \n                                                        \n                                                                        ReservationsProcessorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for processing reservations.\n\n\n                                                        \n                                                \n                                                \n                                                        queryHelperService\n                                                  \n                                                        \n                                                                        QueryHelperService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for building query options.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations for a user with pagination and filtering.\nExample :const result = await reservationsService.findAll(1, paginationFilterDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered reservations and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllAdmin(paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations with pagination for admin.\nExample :const reservations = await reservationsService.findAllAdmin(paginationFilterDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllData\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllData(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations for a user.\nExample :const reservations = await reservationsService.findAllData(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(reservationId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Finds a reservation by its ID and user ID.\nExample :const reservation = await reservationsService.findOne(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the reservation.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found reservation.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateReservation(userId: number, cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Generates reservations for a user based on their cart.\nExample :const reservations = await reservationsService.generateReservation(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user's cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of created reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSelectFieldsFindAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelectFieldsFindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Gets the fields to select for findAll query.\nExample :const selectFields = reservationsService.getSelectFieldsFindAll();\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                \nThe fields to select.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSelectFieldsFindAllAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelectFieldsFindAllAdmin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:216\n                        \n                    \n\n\n            \n                \n                        Gets the fields to select for findAllAdmin query.\nExample :const selectFields = reservationsService.getSelectFieldsFindAllAdmin();\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                \nThe fields to select for admin view.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveReservation(reservation: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Saves a reservation to the repository.\nExample :const savedReservation = await reservationsService.saveReservation(reservation);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe reservation entity to save.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe saved reservation.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Reservation } from './entities/reservation.entity';\nimport { ReservationsProcessorService } from './reservations-processor.service';\nimport { DEFAULT_PAGE_SIZE } from '@utils/constants/constants.common';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Service to manage reservations.\n * @class\n */\n@Injectable()\nexport class ReservationsService {\n  /**\n   * Creates an instance of ReservationsService.\n   *\n   * @constructor\n   * @param {Repository} reservationRepository - Repository for the Reservation entity.\n   * @param {ReservationsProcessorService} reservationProcessorService - Service for processing reservations.\n   * @param {QueryHelperService} queryHelperService - Service for building query options.\n   */\n  constructor(\n    @InjectRepository(Reservation) private reservationRepository: Repository,\n    private readonly reservationProcessorService: ReservationsProcessorService,\n    private readonly queryHelperService: QueryHelperService\n  ) {}\n\n  /**\n   * Generates reservations for a user based on their cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the user's cart.\n   * @returns {Promise} - List of created reservations.\n   *\n   * @example\n   * const reservations = await reservationsService.generateReservation(1, 1);\n   */\n  async generateReservation(userId: number, cartId: number): Promise {\n    return await this.reservationProcessorService.processUserReservation(userId, cartId);\n  }\n\n  /**\n   * Retrieves all reservations for a user with pagination and filtering.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered reservations and total count.\n   *\n   * @throws {InternalServerErrorException} If an error occurs while retrieving reservations.\n   *\n   * @example\n   * const result = await reservationsService.findAll(1, paginationFilterDto);\n   */\n  async findAll(\n    userId: number,\n    paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    const queryOptions =\n      this.queryHelperService.buildQueryOptions(paginationFilterDto);\n\n    queryOptions.where = { ...queryOptions.where, user: { userId } };\n    queryOptions.relations = [\n      'user',\n      'reservationDetails',\n      'reservationDetails.event',\n      'transaction'\n    ];\n    queryOptions.select = this.getSelectFieldsFindAll();\n\n    try {\n      const [reservations, total] = await this.reservationRepository.findAndCount(queryOptions);\n      return { reservations, total };\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to retrieve reservations.', error);\n    }\n  }\n\n  /**\n   * Retrieves all reservations for a user.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - List of reservations.\n   *\n   * @example\n   * const reservations = await reservationsService.findAllData(1);\n   */\n  async findAllData(userId: number): Promise {\n    return await this.reservationRepository.find({\n      where: { user: { userId } },\n      relations: ['reservationDetails', 'reservationDetails.event', 'transaction'],\n      select: this.getSelectFieldsFindAll()\n    });\n  }\n\n  /**\n   * Retrieves all reservations with pagination for admin.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination data.\n   * @returns {Promise} - List of reservations.\n   *\n   * @throws {NotFoundException} If no reservations are found.\n   *\n   * @example\n   * const reservations = await reservationsService.findAllAdmin(paginationFilterDto);\n   */\n  async findAllAdmin(paginationFilterDto: PaginationAndFilterDto): Promise {\n    const { limit, offset } = paginationFilterDto;\n    const reservations = await this.reservationRepository.find({\n      skip: offset,\n      take: limit ?? DEFAULT_PAGE_SIZE.USER,\n      relations: ['user', 'reservationDetails', 'reservationDetails.event', 'transaction'],\n      select: this.getSelectFieldsFindAllAdmin()\n    });\n\n    if (!reservations.length) {\n      throw new NotFoundException('No reservations found.');\n    }\n\n    return reservations;\n  }\n\n  /**\n   * Finds a reservation by its ID and user ID.\n   *\n   * @param {number} reservationId - ID of the reservation.\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - The found reservation.\n   *\n   * @throws {NotFoundException} If the reservation is not found.\n   *\n   * @example\n   * const reservation = await reservationsService.findOne(1, 1);\n   */\n  async findOne(reservationId: number, userId: number): Promise {\n    const reservation = await this.reservationRepository.findOne({\n      where: { reservationId },\n      relations: ['ticket', 'user'],\n      select: {\n        reservationId: true,\n        ticket: {\n          ticketId: true,\n          qrCode: true\n        },\n        user: {\n          userId: true\n        }\n      }\n    });\n    if (!reservation || reservation.user.userId !== userId) {\n      throw new NotFoundException(`Reservation with ID ${reservationId} not found.`);\n    }\n    return reservation;\n  }\n\n  /**\n   * Saves a reservation to the repository.\n   *\n   * @param {Reservation} reservation - The reservation entity to save.\n   * @returns {Promise} - The saved reservation.\n   *\n   * @example\n   * const savedReservation = await reservationsService.saveReservation(reservation);\n   */\n  async saveReservation(reservation: Reservation): Promise {\n    return await this.reservationRepository.save(reservation);\n  }\n\n  /**\n   * Gets the fields to select for findAll query.\n   *\n   * @returns {object} - The fields to select.\n   *\n   * @private\n   *\n   * @example\n   * const selectFields = reservationsService.getSelectFieldsFindAll();\n   */\n  private getSelectFieldsFindAll(): object {\n    return {\n      reservationId: true,\n      reservationDetails: {\n        title: true,\n        shortDescription: true,\n        price: true,\n        priceFormula: true,\n        event: {\n          eventId: true,\n          categoryType: true,\n          startDate: true\n        }\n      },\n      user: {\n        userId: true,\n        firstName: true,\n        lastName: true\n      },\n      transaction: {\n        statusPayment: true,\n        paymentId: true\n      }\n    };\n  }\n\n  /**\n   * Gets the fields to select for findAllAdmin query.\n   *\n   * @returns {object} - The fields to select for admin view.\n   *\n   * @private\n   *\n   * @example\n   * const selectFields = reservationsService.getSelectFieldsFindAllAdmin();\n   */\n  private getSelectFieldsFindAllAdmin(): object {\n    return {\n      reservationId: true,\n      user: {\n        userId: true,\n        email: true\n      },\n      reservationDetails: {\n        title: true,\n        event: {\n          eventId: true\n        }\n      },\n      transaction: {\n        transactionId: true,\n        statusPayment: true,\n        paymentId: true,\n        totalAmount: true\n      }\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/security/guards/role.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard to check if the user has the required role to access the route.\nExample :\\@UseGuards(RoleGuard)\n\\@Role(UserRole.ADMIN)\n\\@Get('admin')\ngetAdminData() {\n  // Admin route logic here\n}\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/security/guards/role.guard.ts:21\n                            \n                        \n\n                \n                    \n                            Creates an instance of RoleGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector to retrieve metadata.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/guards/role.guard.ts:39\n                        \n                    \n\n\n            \n                \n                        Method to determine if the user can activate the route based on their role.\nExample :const canActivate = roleGuard.canActivate(context);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \nWhether the user can activate the route.\n\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { ROLE_KEY } from '@common/decorators/role.decorator';\nimport { UserRole } from '@common/enums/user-role.enum';\n\n/**\n * Guard to check if the user has the required role to access the route.\n * @class\n * @implements {CanActivate}\n *\n * @example\n * \\@UseGuards(RoleGuard)\n * \\@Role(UserRole.ADMIN)\n * \\@Get('admin')\n * getAdminData() {\n *   // Admin route logic here\n * }\n */\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  /**\n   * Creates an instance of RoleGuard.\n   *\n   * @constructor\n   * @param {Reflector} reflector - The reflector to retrieve metadata.\n   */\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * Method to determine if the user can activate the route based on their role.\n   *\n   * @param {ExecutionContext} context - The execution context.\n   * @returns {boolean | Promise | Observable} - Whether the user can activate the route.\n   *\n   * @example\n   * const canActivate = roleGuard.canActivate(context);\n   */\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    // Retrieve the required role for the route from the metadata.\n    const requiredRole = this.reflector.getAllAndOverride(ROLE_KEY, [\n      context.getHandler(),\n      context.getClass()\n    ]);\n\n    // If no specific role is required, allow access.\n    if (!requiredRole) {\n      return true;\n    }\n\n    // Get the user object from the request and compare roles.\n    const { user } = context.switchToHttp().getRequest();\n    return user.role === requiredRole;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/auth/dto/signup.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for user sign-up.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/security/auth/dto/signup.dto.ts:62\n                        \n                    \n\n            \n                \n                    Email address of the user.\nThis field is required and must be a valid email address.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(3)@MaxLength(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/security/auth/dto/signup.dto.ts:32\n                        \n                    \n\n            \n                \n                    First name of the user.\nThis field is optional, must be a string, and have a length between 3 and 50 characters.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(3)@MaxLength(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/security/auth/dto/signup.dto.ts:48\n                        \n                    \n\n            \n                \n                    Last name of the user.\nThis field is optional, must be a string, and have a length between 3 and 50 characters.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsStrongPassword()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/security/auth/dto/signup.dto.ts:78\n                        \n                    \n\n            \n                \n                    Password for the user.\nThis field is required, must be a strong password, and have a minimum length of 6 characters.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/security/auth/dto/signup.dto.ts:90\n                        \n                    \n\n            \n                \n                    Role of the user.\nThis field is optional and must be a valid enum value of UserRole.\nExample :```html\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserRole } from '@common/enums/user-role.enum';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsStrongPassword,\n  MaxLength,\n  MinLength\n} from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for user sign-up.\n *\n * @class\n */\nexport class SignUpDto {\n  /**\n   * First name of the user.\n   * This field is optional, must be a string, and have a length between 3 and 50 characters.\n   * @type {string}\n   * @isString\n   * @minLength 3\n   * @maxLength 50\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsString()\n  @MinLength(3)\n  @MaxLength(50)\n  readonly firstName?: string;\n\n  /**\n   * Last name of the user.\n   * This field is optional, must be a string, and have a length between 3 and 50 characters.\n   * @type {string}\n   * @isString\n   * @minLength 3\n   * @maxLength 50\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsString()\n  @MinLength(3)\n  @MaxLength(50)\n  readonly lastName?: string;\n\n  /**\n   * Email address of the user.\n   * This field is required and must be a valid email address.\n   * @type {string}\n   * @isNotEmpty\n   * @isEmail\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password for the user.\n   * This field is required, must be a strong password, and have a minimum length of 6 characters.\n   * @type {string}\n   * @isNotEmpty\n   * @isStrongPassword\n   * @minLength 6\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @IsStrongPassword()\n  @MinLength(6)\n  readonly password: string;\n\n  /**\n   * Role of the user.\n   * This field is optional and must be a valid enum value of UserRole.\n   * @type {UserRole}\n   * @isOptional\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!', role: UserRole.ADMIN };\n   */\n  @IsOptional()\n  readonly role?: UserRole;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ThrollerModule.html":{"url":"modules/ThrollerModule.html","title":"module - ThrollerModule","body":"\n                   \n\n\n\n\n    Modules\n    ThrollerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ThrollerModule\n\n\n\ncluster_ThrollerModule_imports\n\n\n\n\nThrottler\n\nThrottler\n\n\n\nThrollerModule\n\nThrollerModule\n\nThrollerModule -->\n\nThrottler->ThrollerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/security/throttler/throttler.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            Throttler\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ThrottlerModule as Throttler } from '@nestjs/throttler';\n\n@Module({\n  imports: [\n    Throttler.forRoot([\n      {\n        ttl: 60000,\n        limit: 10\n      }\n    ])\n  ]\n})\nexport class ThrollerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Ticket.html":{"url":"entities/Ticket.html","title":"entity - Ticket","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Ticket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tickets/entities/ticket.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a ticket.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                purchaseKey\n                            \n                            \n                                    \n                                qrCode\n                            \n                            \n                                    \n                                    \n                                    \n                                reservation\n                            \n                            \n                                    \n                                secureKey\n                            \n                            \n                                    \n                                ticketId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purchaseKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/entities/ticket.entity.ts:43\n                        \n                    \n\n            \n                \n                    Unique purchase key for the ticket.\nExample :const purchaseKey = ticket.purchaseKey;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        qrCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/entities/ticket.entity.ts:65\n                        \n                    \n\n            \n                \n                    QR code for the ticket.\nExample :const qrCode = ticket.qrCode;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@OneToOne(undefined, reservation => reservation.ticket)@JoinColumn({name: 'reservationId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/entities/ticket.entity.ts:32\n                        \n                    \n\n            \n                \n                    Reservation associated with the ticket.\nExample :const reservation = ticket.reservation;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        secureKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/entities/ticket.entity.ts:54\n                        \n                    \n\n            \n                \n                    Secure key for the ticket.\nExample :const secureKey = ticket.secureKey;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ticketId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/entities/ticket.entity.ts:18\n                        \n                    \n\n            \n                \n                    Unique identifier for the ticket.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, JoinColumn, OneToOne, Index } from 'typeorm';\n\n/**\n * Entity representing a ticket.\n *\n * @class\n * @entity\n */\n@Entity('tickets')\nexport class Ticket {\n  /**\n   * Unique identifier for the ticket.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn()\n  ticketId: number;\n\n  /**\n   * Reservation associated with the ticket.\n   * @type {Reservation}\n   * @oneToOne\n   * @joinColumn\n   *\n   * @example\n   * const reservation = ticket.reservation;\n   */\n  @Index()\n  @OneToOne(() => Reservation, reservation => reservation.ticket)\n  @JoinColumn({ name: 'reservationId' })\n  reservation: Reservation;\n\n  /**\n   * Unique purchase key for the ticket.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const purchaseKey = ticket.purchaseKey;\n   */\n  @Column({ unique: true })\n  purchaseKey: string;\n\n  /**\n   * Secure key for the ticket.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const secureKey = ticket.secureKey;\n   */\n  @Column()\n  secureKey: string;\n\n  /**\n   * QR code for the ticket.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const qrCode = ticket.qrCode;\n   */\n  @Column()\n  qrCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketsModule.html":{"url":"modules/TicketsModule.html","title":"module - TicketsModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_imports\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_providers\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nTransactionsModule->TicketsModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tickets/tickets.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for handling tickets.\nThis module is used to create tickets for reservations.\nThis module imports the ReservationsModule to resolve circular dependencies.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TransactionsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { TicketsService } from './tickets.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Ticket } from './entities/ticket.entity';\nimport { ReservationsModule } from '@modules/reservations/reservations.module';\nimport { Transaction } from '@modules/transactions/entities/transaction.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport { ReservationDetailsModule } from '@modules/reservation-details/reservation-details.module';\nimport { TransactionsModule } from '@modules/transactions/transactions.module';\n\n/**\n * Module for handling tickets.\n * This module is used to create tickets for reservations.\n * This module imports the ReservationsModule to resolve circular dependencies.\n */\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Ticket, Transaction, User]),\n    forwardRef(() => ReservationsModule), // Import the ReservationsModule with forwardRef\n    forwardRef(() => ReservationDetailsModule), // Import the ReservationsModule with forwardRef\n    TransactionsModule\n  ],\n  providers: [TicketsService],\n  exports: [TicketsService]\n})\nexport class TicketsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketsService.html":{"url":"injectables/TicketsService.html","title":"injectable - TicketsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TicketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tickets/tickets.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage tickets.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createNewTicket\n                            \n                            \n                                    Async\n                                generateTicketsForApprovedReservations\n                            \n                            \n                                    Private\n                                    Async\n                                generateTicketsForReservation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketRepository: Repository, encryptionService: EncryptionService, usersService: UsersService, reservationService: ReservationsService, transactionService: TransactionsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/tickets/tickets.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for the TicketsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        ticketRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Ticket entity.\n\n\n                                                        \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage encryption.\n\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage users.\n\n\n                                                        \n                                                \n                                                \n                                                        reservationService\n                                                  \n                                                        \n                                                                        ReservationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage reservations.\n\n\n                                                        \n                                                \n                                                \n                                                        transactionService\n                                                  \n                                                        \n                                                                        TransactionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage transactions.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createNewTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    createNewTicket(user: User, reservation: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Creates a new ticket for a reservation.\nExample :const ticket = await ticketsService.createNewTicket(user, reservation);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe reservation entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created ticket.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateTicketsForApprovedReservations\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTicketsForApprovedReservations(reservations: Reservation[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Generates tickets for approved reservations.\nExample :await ticketsService.generateTicketsForApprovedReservations(reservations);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservations\n                                            \n                                                            Reservation[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of reservations to generate tickets for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateTicketsForReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTicketsForReservation(reservationId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Generates tickets for a specific reservation.\nExample :const tickets = await ticketsService.generateTicketsForReservation(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the reservation.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of generated tickets.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Ticket } from './entities/ticket.entity';\nimport { Repository } from 'typeorm';\nimport { EncryptionService } from '@security/encryption/encryption.service';\nimport { ReservationsService } from '@modules/reservations/reservations.service';\nimport { UsersService } from '@modules/users/users.service';\nimport { User } from '@modules/users/entities/user.entity';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { TransactionsService } from '@modules/transactions/transactions.service';\nimport { StatusReservation } from '@common/enums/status-reservation.enum';\n\n/**\n * Service to manage tickets.\n * @class\n */\n@Injectable()\nexport class TicketsService {\n  /**\n   * Constructor for the TicketsService.\n   *\n   * @constructor\n   * @param {Repository} ticketRepository - Repository for the Ticket entity.\n   * @param {EncryptionService} encryptionService - Service to manage encryption.\n   * @param {UsersService} usersService - Service to manage users.\n   * @param {ReservationsService} reservationService - Service to manage reservations.\n   * @param {TransactionsService} transactionService - Service to manage transactions.\n   */\n  constructor(\n    @InjectRepository(Ticket) private ticketRepository: Repository,\n    private encryptionService: EncryptionService,\n    private usersService: UsersService,\n    @Inject(forwardRef(() => ReservationsService))\n    private reservationService: ReservationsService,\n    private transactionService: TransactionsService\n  ) {}\n\n  /**\n   * Generates tickets for approved reservations.\n   *\n   * @param {Reservation[]} reservations - List of reservations to generate tickets for.\n   * @returns {Promise}\n   *\n   * @example\n   * await ticketsService.generateTicketsForApprovedReservations(reservations);\n   */\n  async generateTicketsForApprovedReservations(reservations: Reservation[]): Promise {\n    for (const reservation of reservations) {\n      const transaction = await this.transactionService.findTransactionByReservationId(\n        reservation.reservationId\n      );\n      if (transaction && transaction.statusPayment === StatusReservation.APPROVED) {\n        await this.generateTicketsForReservation(\n          reservation.reservationId,\n          reservation.user.userId\n        );\n      }\n    }\n  }\n\n  /**\n   * Generates tickets for a specific reservation.\n   *\n   * @param {number} reservationId - ID of the reservation.\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - List of generated tickets.\n   *\n   * @throws {NotFoundException} If the reservation is not found.\n   *\n   * @private\n   *\n   * @example\n   * const tickets = await ticketsService.generateTicketsForReservation(1, 1);\n   */\n  private async generateTicketsForReservation(\n    reservationId: number,\n    userId: number\n  ): Promise {\n    const reservation = await this.reservationService.findOne(reservationId, userId);\n    if (!reservation) throw new NotFoundException('Reservation not found');\n\n    const user = await this.usersService.verifyUserOneBy(userId);\n    const ticket = await this.createNewTicket(user, reservation);\n\n    reservation.ticket = ticket;\n    await this.reservationService.saveReservation(reservation);\n\n    return [ticket];\n  }\n\n  /**\n   * Creates a new ticket for a reservation.\n   *\n   * @param {User} user - The user entity.\n   * @param {Reservation} reservation - The reservation entity.\n   * @returns {Promise} - The created ticket.\n   *\n   * @private\n   *\n   * @example\n   * const ticket = await ticketsService.createNewTicket(user, reservation);\n   */\n  private async createNewTicket(user: User, reservation: Reservation): Promise {\n    const purchaseKey = await this.encryptionService.generatedKeyUuid();\n    const secureKey = await this.encryptionService.generatedSecureKey(user);\n    const qrCode = await this.encryptionService.generatedQRCode(secureKey);\n\n    const ticket = this.ticketRepository.create({\n      reservation,\n      purchaseKey,\n      secureKey,\n      qrCode\n    });\n    return await this.ticketRepository.save(ticket);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenConfig.html":{"url":"interfaces/TokenConfig.html","title":"interface - TokenConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/token.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the configuration for tokens.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessTokenExpiration\n                                        \n                                \n                                \n                                        \n                                            accessTokenSecret\n                                        \n                                \n                                \n                                        \n                                            refreshTokenExpiration\n                                        \n                                \n                                \n                                        \n                                            refreshTokenSecret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessTokenExpiration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessTokenExpiration:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Expiration time for access tokens.\nExample :const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        accessTokenSecret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessTokenSecret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Secret key used to sign access tokens.\nExample :const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshTokenExpiration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshTokenExpiration:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Expiration time for refresh tokens.\nExample :const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshTokenSecret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshTokenSecret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Secret key used to sign refresh tokens.\nExample :const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface TokenConfig {\n  /**\n   * Secret key used to sign access tokens.\n   * @type {string}\n   *\n   * @example\n   * const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n   */\n  accessTokenSecret: string;\n\n  /**\n   * Expiration time for access tokens.\n   * @type {string}\n   *\n   * @example\n   * const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n   */\n  accessTokenExpiration: string;\n\n  /**\n   * Secret key used to sign refresh tokens.\n   * @type {string}\n   *\n   * @example\n   * const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n   */\n  refreshTokenSecret: string;\n\n  /**\n   * Expiration time for refresh tokens.\n   * @type {string}\n   *\n   * @example\n   * const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n   */\n  refreshTokenExpiration: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenManagementService.html":{"url":"injectables/TokenManagementService.html","title":"injectable - TokenManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/token/token-management.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage JWT tokens.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createAccessToken\n                            \n                            \n                                createRefreshToken\n                            \n                            \n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/security/token/token-management.service.ts:11\n                            \n                        \n\n                \n                    \n                            Creates an instance of TokenManagementService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with JWT.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to access configuration variables.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createAccessToken\n                        \n                    \n                \n            \n            \n                \ncreateAccessToken(payload: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token-management.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Creates an access token.\nExample :const accessToken = tokenManagementService.createAccessToken({ userId: 1, role: 'user' });\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payload to encode in the token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe created access token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \ncreateRefreshToken(payload: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token-management.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Creates a refresh token.\nExample :const refreshToken = tokenManagementService.createRefreshToken({ userId: 1, role: 'user' });\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payload to encode in the token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe created refresh token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyToken\n                        \n                    \n                \n            \n            \n                \nverifyToken(token: string, isAccessToken: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token-management.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Verifies a JWT token.\nExample :const payload = await tokenManagementService.verifyToken(token, true);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe token to verify.\n\n\n                                            \n                                        \n                                        \n                                                isAccessToken\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    \nWhether the token is an access token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe decoded token payload.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Payload } from '@common/interfaces/payload.interface';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\n/**\n * Service to manage JWT tokens.\n * @class\n */\n@Injectable()\nexport class TokenManagementService {\n  /**\n   * Creates an instance of TokenManagementService.\n   *\n   * @constructor\n   * @param {JwtService} jwtService - Service to interact with JWT.\n   * @param {ConfigService} configService - Service to access configuration variables.\n   */\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService\n  ) {}\n\n  /**\n   * Creates an access token.\n   *\n   * @param {Payload} payload - The payload to encode in the token.\n   * @returns {string} - The created access token.\n   *\n   * @example\n   * const accessToken = tokenManagementService.createAccessToken({ userId: 1, role: 'user' });\n   */\n  createAccessToken(payload: Payload): string {\n    return this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION')\n    });\n  }\n\n  /**\n   * Creates a refresh token.\n   *\n   * @param {Payload} payload - The payload to encode in the token.\n   * @returns {string} - The created refresh token.\n   *\n   * @example\n   * const refreshToken = tokenManagementService.createRefreshToken({ userId: 1, role: 'user' });\n   */\n  createRefreshToken(payload: Payload): string {\n    return this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION')\n    });\n  }\n\n  /**\n   * Verifies a JWT token.\n   *\n   * @param {string} token - The token to verify.\n   * @param {boolean} [isAccessToken=false] - Whether the token is an access token.\n   * @returns {Promise} - The decoded token payload.\n   *\n   * @example\n   * const payload = await tokenManagementService.verifyToken(token, true);\n   */\n  verifyToken(token: string, isAccessToken: boolean = false): Promise {\n    const secretKey = isAccessToken\n      ? this.configService.get('JWT_ACCESS_TOKEN_SECRET')\n      : this.configService.get('JWT_REFRESH_TOKEN_SECRET');\n    return this.jwtService.verifyAsync(token, { secret: secretKey });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenService.html":{"url":"injectables/TokenService.html","title":"injectable - TokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/token/token.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage JWT tokens and token-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createPayload\n                            \n                            \n                                    Private\n                                errorResponse\n                            \n                            \n                                    Async\n                                generateAccessTokenFromRefreshToken\n                            \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                validateAndExtractFromRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, tokenManagementService: TokenManagementService, cookieService: CookieService, configService: ConfigService, refreshTokenStoreService: RefreshTokenStoreService)\n                    \n                \n                        \n                            \n                                Defined in src/security/token/token.service.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of TokenService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage users.\n\n\n                                                        \n                                                \n                                                \n                                                        tokenManagementService\n                                                  \n                                                        \n                                                                        TokenManagementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage JWT tokens.\n\n\n                                                        \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                        CookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage cookies.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to access configuration variables.\n\n\n                                                        \n                                                \n                                                \n                                                        refreshTokenStoreService\n                                                  \n                                                        \n                                                                        RefreshTokenStoreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage refresh tokens.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createPayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPayload(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Creates a payload for JWT tokens.\nExample :const payload = tokenService.createPayload(user);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Payload\n\n                        \n                            \n                                \nThe payload for the JWT token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    errorResponse(res: Response, message: string, status: HttpStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Sends an error response.\nExample :const response = tokenService.errorResponse(res, 'Error message', HttpStatus.BAD_REQUEST);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nError message.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                        HttpStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP status code.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Response\n\n                        \n                            \n                                \nThe error response.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateAccessTokenFromRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessTokenFromRefreshToken(req: Request, res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Generates a new access token using the provided refresh token.\nExample :const response = await tokenService.generateAccessTokenFromRefreshToken(req, res);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP request object.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe response with the new access token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Generates access and refresh tokens for a user and stores the refresh token in Redis.\nExample :const tokens = await tokenService.getTokens(user);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe generated JWT tokens.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req: Request, res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Refreshes the access and refresh tokens using the provided refresh token.\nExample :const response = await tokenService.refreshToken(req, res);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP request object.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe response with new tokens.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateAndExtractFromRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateAndExtractFromRefreshToken(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Validates a refresh token and extracts the payload.\nExample :const { payload, userId } = await tokenService.validateAndExtractFromRefreshToken(refreshToken);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe refresh token to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe extracted payload and user ID.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(TokenService.name)\n                    \n                \n                    \n                        \n                                Defined in src/security/token/token.service.ts:27\n                        \n                    \n\n            \n                \n                    Logger instance from NestJS.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JWTTokens } from '@common/interfaces/jwt.interface';\nimport { User } from '@modules/users/entities/user.entity';\nimport { Payload } from '@common/interfaces/payload.interface';\nimport { Request, Response } from 'express';\nimport { TokenManagementService } from './token-management.service';\nimport { UsersService } from '@modules/users/users.service';\nimport { CookieService } from '@security/cookie/cookie.service';\nimport { RefreshTokenStoreService } from './refreshtoken-store.service';\n\n/**\n * Service to manage JWT tokens and token-related operations.\n * @class\n */\n@Injectable()\nexport class TokenService {\n  /**\n   * Logger instance from NestJS.\n   *\n   * @private\n   * @readonly\n   * @type {Logger}\n   * @memberof TokenService\n   * @default new Logger(TokenService.name)\n   */\n  private readonly logger: Logger = new Logger(TokenService.name);\n\n  /**\n   * Creates an instance of TokenService.\n   *\n   * @constructor\n   * @param {UsersService} usersService - Service to manage users.\n   * @param {TokenManagementService} tokenManagementService - Service to manage JWT tokens.\n   * @param {CookieService} cookieService - Service to manage cookies.\n   * @param {ConfigService} configService - Service to access configuration variables.\n   * @param {RefreshTokenStoreService} refreshTokenStoreService - Service to manage refresh tokens.\n   */\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly tokenManagementService: TokenManagementService,\n    private readonly cookieService: CookieService,\n    private readonly configService: ConfigService,\n    private readonly refreshTokenStoreService: RefreshTokenStoreService\n  ) {}\n\n  /**\n   * Generates access and refresh tokens for a user and stores the refresh token in Redis.\n   *\n   * @param {User} user - The user entity.\n   * @returns {Promise} - The generated JWT tokens.\n   *\n   * @example\n   * const tokens = await tokenService.getTokens(user);\n   */\n  async getTokens(user: User): Promise {\n    const payload = this.createPayload(user);\n    const accessToken = this.tokenManagementService.createAccessToken(payload);\n    const refreshToken = this.tokenManagementService.createRefreshToken(payload);\n\n    await this.refreshTokenStoreService.storeRefreshTokenInRedis(user.userId, refreshToken);\n\n    this.logger.log(`Access token created for user ${user.userId}`);\n    this.logger.log(`Refresh token created and stored in Redis for user ${user.userId}`);\n\n    return { accessToken, refreshToken };\n  }\n\n  /**\n   * Creates a payload for JWT tokens.\n   *\n   * @param {User} user - The user entity.\n   * @returns {Payload} - The payload for the JWT token.\n   *\n   * @example\n   * const payload = tokenService.createPayload(user);\n   */\n  private createPayload(user: User): Payload {\n    return { sub: user.userId, role: user.role, version: user.tokenVersion };\n  }\n\n  /**\n   * Refreshes the access and refresh tokens using the provided refresh token.\n   *\n   * @param {Request} req - HTTP request object.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise} - The response with new tokens.\n   *\n   * @example\n   * const response = await tokenService.refreshToken(req, res);\n   */\n  async refreshToken(req: Request, res: Response): Promise {\n    const oldRefreshToken = this.cookieService.extractRefreshTokenCookie(req);\n    if (!oldRefreshToken) {\n      return this.errorResponse(\n        res,\n        'No refresh token provided. Please login again.',\n        HttpStatus.UNAUTHORIZED\n      );\n    }\n    try {\n      const { userId } = await this.validateAndExtractFromRefreshToken(oldRefreshToken);\n      const user = await this.usersService.verifyUserOneBy(userId);\n      await this.refreshTokenStoreService.removeRefreshTokenRedis(userId);\n\n      const { accessToken, refreshToken } = await this.getTokens(user);\n\n      await this.refreshTokenStoreService.storeRefreshTokenInRedis(userId, refreshToken);\n      this.cookieService.setRefreshTokenCookie(res, refreshToken);\n\n      this.logger.log(`Tokens refreshed for user ${userId}`);\n      return res.status(HttpStatus.OK).json({ accessToken, refreshToken, userId });\n    } catch (error) {\n      return this.errorResponse(res, error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  /**\n   * Generates a new access token using the provided refresh token.\n   *\n   * @param {Request} req - HTTP request object.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise} - The response with the new access token.\n   *\n   * @example\n   * const response = await tokenService.generateAccessTokenFromRefreshToken(req, res);\n   */\n  async generateAccessTokenFromRefreshToken(req: Request, res: Response): Promise {\n    const refreshTokenFromCookie = this.cookieService.extractRefreshTokenCookie(req);\n    if (!refreshTokenFromCookie) {\n      return this.errorResponse(\n        res,\n        'No refresh token provided. Please login again.',\n        HttpStatus.UNAUTHORIZED\n      );\n    }\n    try {\n      const { payload, userId } =\n        await this.validateAndExtractFromRefreshToken(refreshTokenFromCookie);\n\n      const newAccessToken = this.tokenManagementService.createAccessToken({\n        sub: userId,\n        role: payload.role,\n        version: payload.version\n      });\n\n      return res.status(HttpStatus.OK).json({\n        accessToken: newAccessToken,\n        userId,\n        expiresIn: this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION')\n      });\n    } catch (error) {\n      return this.errorResponse(\n        res,\n        'Failed to generate access token due to internal error. Please try again later.',\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  /**\n   * Validates a refresh token and extracts the payload.\n   *\n   * @param {string} refreshToken - The refresh token to validate.\n   * @returns {Promise} - The extracted payload and user ID.\n   *\n   * @throws {UnauthorizedException} If the token is invalid or expired.\n   *\n   * @example\n   * const { payload, userId } = await tokenService.validateAndExtractFromRefreshToken(refreshToken);\n   */\n  async validateAndExtractFromRefreshToken(\n    refreshToken: string\n  ): Promise {\n    try {\n      const payload = await this.tokenManagementService.verifyToken(refreshToken);\n      const userId = payload.sub;\n      if (!(await this.refreshTokenStoreService.verifyRefreshTokenInRedis(userId, refreshToken))) {\n        throw new UnauthorizedException('Invalid or expired refresh token.');\n      }\n      return { payload, userId };\n    } catch (error) {\n      this.logger.error(`Token validation failed: ${error.message}`);\n      throw new UnauthorizedException('Failed to validate token.');\n    }\n  }\n\n  /**\n   * Sends an error response.\n   *\n   * @param {Response} res - HTTP response object.\n   * @param {string} message - Error message.\n   * @param {HttpStatus} status - HTTP status code.\n   * @returns {Response} - The error response.\n   *\n   * @example\n   * const response = tokenService.errorResponse(res, 'Error message', HttpStatus.BAD_REQUEST);\n   */\n  private errorResponse(res: Response, message: string, status: HttpStatus): Response {\n    this.logger.error(message);\n    return res.status(status).json({\n      message: message,\n      actionRequired: 'Please login again.'\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Transaction.html":{"url":"entities/Transaction.html","title":"entity - Transaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Transaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/entities/transaction.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a transaction.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                paymentId\n                            \n                            \n                                    \n                                reservation\n                            \n                            \n                                    \n                                statusPayment\n                            \n                            \n                                    \n                                totalAmount\n                            \n                            \n                                    \n                                transactionId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:98\n                        \n                    \n\n            \n                \n                    Timestamp when the transaction was created.\nExample :const createdAt = transaction.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paymentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:75\n                        \n                    \n\n            \n                \n                    Payment identifier for the transaction.\nExample :const paymentId = transaction.paymentId;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.transaction)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:53\n                        \n                    \n\n            \n                \n                    Reservations associated with the transaction.\nExample :const reservations = transaction.reservations;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusPayment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StatusReservation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:64\n                        \n                    \n\n            \n                \n                    Status of the payment for the transaction.\nExample :const statusPayment = transaction.statusPayment;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:86\n                        \n                    \n\n            \n                \n                    Total amount of the transaction.\nExample :const totalAmount = transaction.totalAmount;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        transactionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:28\n                        \n                    \n\n            \n                \n                    Unique identifier for the transaction.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:110\n                        \n                    \n\n            \n                \n                    Timestamp when the transaction was last updated.\nExample :const updatedAt = transaction.updatedAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, user => user.transactions)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:42\n                        \n                    \n\n            \n                \n                    User associated with the transaction.\nExample :const user = transaction.user;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { StatusReservation } from '@common/enums/status-reservation.enum';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n  Index\n} from 'typeorm';\n\n/**\n * Entity representing a transaction.\n *\n * @class\n * @entity\n */\n@Entity('transactions')\nexport class Transaction {\n  /**\n   * Unique identifier for the transaction.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  transactionId: number;\n\n  /**\n   * User associated with the transaction.\n   * @type {User}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const user = transaction.user;\n   */\n  @Index()\n  @ManyToOne(() => User, user => user.transactions)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  /**\n   * Reservations associated with the transaction.\n   * @type {Reservation[]}\n   * @oneToMany\n   *\n   * @example\n   * const reservations = transaction.reservations;\n   */\n  @OneToMany(() => Reservation, reservation => reservation.transaction)\n  reservation: Reservation[];\n\n  /**\n   * Status of the payment for the transaction.\n   * @type {StatusReservation}\n   * @column\n   *\n   * @example\n   * const statusPayment = transaction.statusPayment;\n   */\n  @Column({ type: 'varchar' })\n  statusPayment: StatusReservation;\n\n  /**\n   * Payment identifier for the transaction.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const paymentId = transaction.paymentId;\n   */\n  @Column()\n  paymentId: number;\n\n  /**\n   * Total amount of the transaction.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const totalAmount = transaction.totalAmount;\n   */\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  totalAmount: number;\n\n  /**\n   * Timestamp when the transaction was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = transaction.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the transaction was last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = transaction.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TransactionsController.html":{"url":"controllers/TransactionsController.html","title":"controller - TransactionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TransactionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/transactions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                transactions\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage transactions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, paginationDto: PaginationAndFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/find-all')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.controller.ts:27\n                        \n                    \n\n\n            \n                \n                        Retrieves all transactions for a user with pagination and filtering.\nExample :GET /transactions/1/find-all?page=1&limit=10&sortBy=createdAt&sortOrder=ASC\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered transactions and total count.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards, Query } from '@nestjs/common';\nimport { AccessTokenGuard } from '@security/guards';\nimport { TransactionsService } from './transactions.service';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { Transaction } from './entities/transaction.entity';\n\n/**\n * Controller to manage transactions.\n * @class\n */\n@UseGuards(AccessTokenGuard)\n@Controller('transactions')\nexport class TransactionsController {\n  constructor(private readonly transactionsService: TransactionsService) {}\n\n  /**\n   * Retrieves all transactions for a user with pagination and filtering.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {PaginationAndFilterDto} paginationDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered transactions and total count.\n   *\n   * @example\n   * GET /transactions/1/find-all?page=1&limit=10&sortBy=createdAt&sortOrder=ASC\n   */\n  @Get(':userId/find-all')\n  findAll(\n    @Param('userId') userId: number,\n    @Query() paginationDto: PaginationAndFilterDto\n  ): Promise {\n    return this.transactionsService.findAll(userId, paginationDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nTransactionsService \n\nTransactionsService \n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nTransactionsModule -->\n\nQueryHelperService->TransactionsModule\n\n\n\n\n\nReservationDetailsService\n\nReservationDetailsService\n\nTransactionsModule -->\n\nReservationDetailsService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/transactions/transactions.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage transactions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueryHelperService\n                        \n                        \n                            ReservationDetailsService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TransactionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Transaction } from './entities/transaction.entity';\nimport { ReservationDetailsService } from '@modules/reservation-details/reservation-details.service';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport { TicketsModule } from '@modules/tickets/tickets.module';\nimport { ReservationsModule } from '@modules/reservations/reservations.module';\nimport { QueryHelperService } from '@database/query/query-helper.service';\nimport { TransactionsController } from './transactions.controller';\n\n/**\n * Module to manage transactions.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for Transaction, Event, ReservationDetails, and User entities\n    TypeOrmModule.forFeature([Transaction, Event, ReservationDetails, User]),\n    forwardRef(() => ReservationsModule), // Import ReservationsModule with forward reference\n    forwardRef(() => TicketsModule) // Import TicketsModule with forward reference\n  ],\n  providers: [\n    // Register TransactionsService, ReservationDetailsService, and QueryHelperService as providers\n    TransactionsService,\n    ReservationDetailsService,\n    QueryHelperService\n  ],\n  controllers: [\n    // Register TransactionsController\n    TransactionsController\n  ],\n  exports: [\n    // Export TransactionsService\n    TransactionsService\n  ]\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/transactions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage transactions.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculateCartTotal\n                            \n                            \n                                    Async\n                                createTransaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findTransactionByReservationId\n                            \n                            \n                                    Private\n                                getSelectFieldsFindAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transactionRepository: Repository, userRepository: Repository, queryHelperService: QueryHelperService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/transactions/transactions.service.ts:32\n                            \n                        \n\n                \n                    \n                            Creates an instance of TransactionsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        transactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Transaction entity.\n\n\n                                                        \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the User entity.\n\n\n                                                        \n                                                \n                                                \n                                                        queryHelperService\n                                                  \n                                                        \n                                                                        QueryHelperService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to build query options.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        calculateCartTotal\n                        \n                    \n                \n            \n            \n                \ncalculateCartTotal(cartItems: CartItem[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Calculates the total amount for the items in the cart.\nExample :const total = transactionsService.calculateCartTotal(cartItems);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartItems\n                                            \n                                                        CartItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of cart items.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \nThe total amount.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransaction(user: User, total: number, paymentResult: PaymentResult)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Creates a new transaction.\nExample :const transaction = await transactionsService.createTransaction(user, 100, paymentResult);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                        \n                                                total\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe total amount of the transaction.\n\n\n                                            \n                                        \n                                        \n                                                paymentResult\n                                            \n                                                            PaymentResult\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payment result.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created transaction.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Retrieves all transactions for a user with pagination and filtering.\nExample :const result = await transactionsService.findAll(1, paginationFilterDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered transactions and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findTransactionByReservationId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findTransactionByReservationId(reservationId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Finds a transaction by reservation ID.\nExample :const transaction = await transactionsService.findTransactionByReservationId(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the reservation.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found transaction.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSelectFieldsFindAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelectFieldsFindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Gets the fields to select for the findAll query.\nExample :const selectFields = transactionsService.getSelectFieldsFindAll();\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                \nThe fields to select.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(TransactionsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/transactions.service.ts:32\n                        \n                    \n\n            \n                \n                    Logger instance.\nExample :private readonly logger = new Logger(TransactionsService.name);\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  NotFoundException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Transaction } from './entities/transaction.entity';\nimport { Repository } from 'typeorm';\nimport { User } from '@modules/users/entities/user.entity';\nimport { PaymentResult } from '@common/interfaces/payment.interface';\nimport { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { QueryHelperService } from '@database/query/query-helper.service';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\n\n/**\n * Service to manage transactions.\n * @class\n */\n@Injectable()\nexport class TransactionsService {\n  /**\n   * Logger instance.\n   *\n   * @private\n   * @memberof TransactionsService\n   * @type {Logger}\n   *\n   * @example\n   * private readonly logger = new Logger(TransactionsService.name);\n   */\n  private readonly logger: Logger = new Logger(TransactionsService.name);\n\n  /**\n   * Creates an instance of TransactionsService.\n   *\n   * @constructor\n   * @param {Repository} transactionRepository - Repository for the Transaction entity.\n   * @param {Repository} userRepository - Repository for the User entity.\n   * @param {QueryHelperService} queryHelperService - Service to build query options.\n   */\n  constructor(\n    @InjectRepository(Transaction) private transactionRepository: Repository,\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private readonly queryHelperService: QueryHelperService\n  ) {}\n\n  /**\n   * Creates a new transaction.\n   *\n   * @param {User} user - The user entity.\n   * @param {number} total - The total amount of the transaction.\n   * @param {PaymentResult} paymentResult - The payment result.\n   * @returns {Promise} - The created transaction.\n   *\n   * @example\n   * const transaction = await transactionsService.createTransaction(user, 100, paymentResult);\n   */\n  async createTransaction(\n    user: User,\n    total: number,\n    paymentResult: PaymentResult\n  ): Promise {\n    const transaction = this.transactionRepository.create({\n      user,\n      paymentId: Math.floor(Math.random() * 1000000),\n      totalAmount: total,\n      statusPayment: paymentResult.status\n    });\n    const savedTransaction = await this.transactionRepository.save(transaction);\n    if (paymentResult.status === 'APPROVED') {\n      await this.userRepository.update(user.userId, {\n        transactionsCount: user.transactionsCount + 1,\n        totalSpent: user.totalSpent + total\n      });\n    } else {\n      await this.userRepository.update(user.userId, {\n        transactionsCount: user.transactionsCount + 1\n      });\n    }\n\n    return savedTransaction;\n  }\n\n  /**\n   * Finds a transaction by reservation ID.\n   *\n   * @param {number} reservationId - ID of the reservation.\n   * @returns {Promise} - The found transaction.\n   *\n   * @throws {NotFoundException} If the transaction is not found.\n   *\n   * @example\n   * const transaction = await transactionsService.findTransactionByReservationId(1);\n   */\n  async findTransactionByReservationId(reservationId: number): Promise {\n    const transaction = await this.transactionRepository.findOne({\n      where: { reservation: { reservationId } },\n      relations: ['reservation']\n    });\n\n    if (!transaction) {\n      throw new NotFoundException(`Transaction with reservation ID ${reservationId} not found.`);\n    }\n\n    return transaction;\n  }\n\n  /**\n   * Retrieves all transactions for a user with pagination and filtering.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered transactions and total count.\n   *\n   * @throws {InternalServerErrorException} If an error occurs while retrieving transactions.\n   *\n   * @example\n   * const result = await transactionsService.findAll(1, paginationFilterDto);\n   */\n  async findAll(\n    userId: number,\n    paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    const queryOptions = this.queryHelperService.buildQueryOptions(\n      paginationFilterDto,\n      5\n    );\n\n    queryOptions.where = { ...queryOptions.where, user: { userId } };\n    queryOptions.relations = [\n      'user',\n      'reservation',\n      'reservation.ticket',\n      'reservation.reservationDetails',\n      'reservation.reservationDetails.event'\n    ];\n\n    queryOptions.select = this.getSelectFieldsFindAll();\n    if (paginationFilterDto.sortBy) {\n      queryOptions.order = {\n        [paginationFilterDto.sortBy]: paginationFilterDto.sortOrder.toUpperCase() // 'ASC' or 'DESC'\n      };\n    } else {\n      queryOptions.order = {\n        createdAt: 'DESC'\n      };\n    }\n    try {\n      const [transactions, total] = await this.transactionRepository.findAndCount(queryOptions);\n      return { transactions, total };\n    } catch (error) {\n      this.logger.error(`Failed to retrieve transactions. Error: ${error.message}`, error.stack);\n      throw new InternalServerErrorException('Failed to retrieve transactions.', error.message);\n    }\n  }\n\n  /**\n   * Calculates the total amount for the items in the cart.\n   *\n   * @param {CartItem[]} cartItems - List of cart items.\n   * @returns {number} - The total amount.\n   *\n   * @example\n   * const total = transactionsService.calculateCartTotal(cartItems);\n   */\n  calculateCartTotal(cartItems: CartItem[]): number {\n    return cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  }\n\n  /**\n   * Gets the fields to select for the findAll query.\n   *\n   * @returns {object} - The fields to select.\n   *\n   * @private\n   *\n   * @example\n   * const selectFields = transactionsService.getSelectFieldsFindAll();\n   */\n  private getSelectFieldsFindAll(): object {\n    return {\n      transactionId: true,\n      statusPayment: true,\n      totalAmount: true,\n      createdAt: true,\n      user: {\n        userId: true,\n        firstName: true,\n        lastName: true\n      },\n      reservation: {\n        reservationId: true,\n        transaction: {\n          transactionId: true,\n          statusPayment: true\n        },\n        ticket: {\n          ticketId: true,\n          purchaseKey: true,\n          secureKey: true,\n          qrCode: true\n        },\n        reservationDetails: {\n          title: true,\n          shortDescription: true,\n          price: true,\n          priceFormula: true,\n          event: {\n            eventId: true,\n            categoryType: true,\n            startDate: true\n          }\n        }\n      }\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCartItemDto.html":{"url":"classes/UpdateCartItemDto.html","title":"class - UpdateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cart-items/dto/update-cart-item.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a cart item.\nExtends CreateCartItemDto with all properties optional.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateCartItemDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCartItemDto } from './create-cart-item.dto';\n\n/**\n * Data Transfer Object (DTO) for updating a cart item.\n * Extends CreateCartItemDto with all properties optional.\n *\n * @class\n */\nexport class UpdateCartItemDto extends PartialType(CreateCartItemDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEventDto.html":{"url":"classes/UpdateEventDto.html","title":"class - UpdateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/dto/update-event.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for updating an event.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateEventDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateEventDto } from './create-event.dto';\n\n/**\n * Data transfer object for updating an event.\n *\n * @export UpdateEventDto\n * @class UpdateEventDto\n * @extends {PartialType(CreateEventDto)}\n */\nexport class UpdateEventDto extends PartialType(CreateEventDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDTO.html":{"url":"classes/UpdatePasswordDTO.html","title":"class - UpdatePasswordDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/auth/dto/update-password.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a user's password.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsStrongPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/security/auth/dto/update-password.dto.ts:35\n                        \n                    \n\n            \n                \n                    The user's new password.\nThis field is required and must be a strong password.\nExample :const dto: UpdatePasswordDTO = { oldPassword: 'OldPassword123!', newPassword: 'NewStrongPassword123!' };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/security/auth/dto/update-password.dto.ts:21\n                        \n                    \n\n            \n                \n                    The user's old password.\nThis field is required and must be a non-empty string.\nExample :const dto: UpdatePasswordDTO = { oldPassword: 'OldPassword123!', newPassword: 'NewStrongPassword123!' };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsStrongPassword } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for updating a user's password.\n *\n * @class\n */\nexport class UpdatePasswordDTO {\n  /**\n   * The user's old password.\n   * This field is required and must be a non-empty string.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   *\n   * @example\n   * const dto: UpdatePasswordDTO = { oldPassword: 'OldPassword123!', newPassword: 'NewStrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly oldPassword: string;\n\n  /**\n   * The user's new password.\n   * This field is required and must be a strong password.\n   * @type {string}\n   * @isNotEmpty\n   * @isStrongPassword\n   *\n   * @example\n   * const dto: UpdatePasswordDTO = { oldPassword: 'OldPassword123!', newPassword: 'NewStrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @IsStrongPassword()\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateReservationDetailsDto.html":{"url":"classes/UpdateReservationDetailsDto.html","title":"class - UpdateReservationDetailsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateReservationDetailsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservation-details/dto/update-reservation-details.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating reservation details.\nExtends CreateReservationDetailsDto with all properties optional.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateReservationDetailsDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateReservationDetailsDto } from './create-reservation-details.dto';\n\n/**\n * Data Transfer Object (DTO) for updating reservation details.\n * Extends CreateReservationDetailsDto with all properties optional.\n *\n * @class\n */\nexport class UpdateReservationDetailsDto extends PartialType(CreateReservationDetailsDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateReservationDto.html":{"url":"classes/UpdateReservationDto.html","title":"class - UpdateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/dto/update-reservation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a reservation.\nExtends CreateReservationDto with all properties optional.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateReservationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateReservationDto } from './create-reservation.dto';\n\n/**\n * Data Transfer Object (DTO) for updating a reservation.\n * Extends CreateReservationDto with all properties optional.\n *\n * @class\n */\nexport class UpdateReservationDto extends PartialType(CreateReservationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTransactionDto.html":{"url":"classes/UpdateTransactionDto.html","title":"class - UpdateTransactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTransactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/dto/update-transaction.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateTransactionDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTransactionDto } from './create-transaction.dto';\n\nexport class UpdateTransactionDto extends PartialType(CreateTransactionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a user.\nExtends CreateUserDto with all properties optional.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * Data Transfer Object (DTO) for updating a user.\n * Extends CreateUserDto with all properties optional.\n *\n * @class\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accountKey\n                            \n                            \n                                    \n                                cart\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastLogin\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                reservations\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                tokenVersion\n                            \n                            \n                                    \n                                totalSpent\n                            \n                            \n                                    \n                                transactions\n                            \n                            \n                                    \n                                transactionsCount\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accountKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:113\n                        \n                    \n\n            \n                \n                    Unique account key for the user.\nExample :const accountKey = user.accountKey;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cart\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, cart => cart.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    Shopping cart associated with the user.\nExample :const cart = user.cart;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:185\n                        \n                    \n\n            \n                \n                    Timestamp when the user was created.\nExample :const createdAt = user.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:66\n                        \n                    \n\n            \n                \n                    Email address of the user.\nExample :const email = user.email;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:77\n                        \n                    \n\n            \n                \n                    First name of the user.\nExample :const firstName = user.firstName;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:151\n                        \n                    \n\n            \n                \n                    Indicates whether the user is active.\nExample :const isActive = user.isActive;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastLogin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:197\n                        \n                    \n\n            \n                \n                    Timestamp when the user last logged in.\nExample :const lastLogin = user.lastLogin;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:88\n                        \n                    \n\n            \n                \n                    Last name of the user.\nExample :const lastName = user.lastName;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column({type: 'varchar', nullable: false, name: 'passwordHash'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:102\n                        \n                    \n\n            \n                \n                    Password hash for the user.\nThis field is excluded from responses.\nExample :const password = user.password;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:44\n                        \n                    \n\n            \n                \n                    Reservations made by the user.\nExample :const reservations = user.reservations;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:125\n                        \n                    \n\n            \n                \n                    Role of the user.\nExample :const role = user.role;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tokenVersion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column({type: 'int', default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:140\n                        \n                    \n\n            \n                \n                    Version of the token for the user.\nThis field is excluded from responses.\nExample :const tokenVersion = user.tokenVersion;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalSpent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:173\n                        \n                    \n\n            \n                \n                    Total amount spent by the user.\nExample :const totalSpent = user.totalSpent;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        transactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Transaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, transaction => transaction.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    Transactions made by the user.\nExample :const transactions = user.transactions;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        transactionsCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:162\n                        \n                    \n\n            \n                \n                    Number of transactions made by the user.\nExample :const transactionsCount = user.transactionsCount;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:22\n                        \n                    \n\n            \n                \n                    Unique identifier for the user.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, OneToOne, OneToMany } from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { UserRole } from '@common/enums/user-role.enum';\nimport { Cart } from '@modules/carts/entities/cart.entity';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { Transaction } from '@modules/transactions/entities/transaction.entity';\n\n/**\n * Entity representing a user.\n *\n * @class\n * @entity\n */\n@Entity('users')\nexport class User {\n  /**\n   * Unique identifier for the user.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  userId: number;\n\n  /**\n   * Shopping cart associated with the user.\n   * @type {Cart}\n   * @oneToOne\n   *\n   * @example\n   * const cart = user.cart;\n   */\n  @OneToOne(() => Cart, cart => cart.user)\n  cart: Cart;\n\n  /**\n   * Reservations made by the user.\n   * @type {Reservation[]}\n   * @oneToMany\n   *\n   * @example\n   * const reservations = user.reservations;\n   */\n  @OneToMany(() => Reservation, reservation => reservation.user)\n  reservations: Reservation[];\n\n  /**\n   * Transactions made by the user.\n   * @type {Transaction[]}\n   * @oneToMany\n   *\n   * @example\n   * const transactions = user.transactions;\n   */\n  @OneToMany(() => Transaction, transaction => transaction.user)\n  transactions: Transaction[];\n\n  /**\n   * Email address of the user.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const email = user.email;\n   */\n  @Column({ type: 'varchar', nullable: false, unique: true })\n  email: string;\n\n  /**\n   * First name of the user.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const firstName = user.firstName;\n   */\n  @Column({ type: 'varchar' })\n  firstName: string;\n\n  /**\n   * Last name of the user.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const lastName = user.lastName;\n   */\n  @Column({ type: 'varchar' })\n  lastName: string;\n\n  /**\n   * Password hash for the user.\n   * This field is excluded from responses.\n   * @type {string}\n   * @exclude\n   * @column\n   *\n   * @example\n   * const password = user.password;\n   */\n  @Exclude()\n  @Column({ type: 'varchar', nullable: false, name: 'passwordHash' })\n  password: string;\n\n  /**\n   * Unique account key for the user.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const accountKey = user.accountKey;\n   */\n  @Column({ unique: true })\n  accountKey: string;\n\n  /**\n   * Role of the user.\n   * @type {UserRole}\n   * @column\n   * @default UserRole.USER\n   *\n   * @example\n   * const role = user.role;\n   */\n  @Column({ type: 'varchar', default: UserRole.USER })\n  role: UserRole;\n\n  /**\n   * Version of the token for the user.\n   * This field is excluded from responses.\n   * @type {number}\n   * @exclude\n   * @column\n   * @default 1\n   *\n   * @example\n   * const tokenVersion = user.tokenVersion;\n   */\n  @Exclude()\n  @Column({ type: 'int', default: 1 })\n  tokenVersion: number;\n\n  /**\n   * Indicates whether the user is active.\n   * @type {boolean}\n   * @column\n   *\n   * @example\n   * const isActive = user.isActive;\n   */\n  @Column()\n  isActive: boolean;\n\n  /**\n   * Number of transactions made by the user.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const transactionsCount = user.transactionsCount;\n   */\n  @Column()\n  transactionsCount: number;\n\n  /**\n   * Total amount spent by the user.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const totalSpent = user.totalSpent;\n   */\n  @Column()\n  totalSpent: number;\n\n  /**\n   * Timestamp when the user was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = user.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the user last logged in.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const lastLogin = user.lastLogin;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  lastLogin: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findAllValues\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                makeInactive\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(UserRole.ADMIN)@UseGuards(RoleGuard)@Get('get-all')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with pagination and filtering. Only accessible by admins.\nExample :GET /users/get-all?page=1&limit=10&sortBy=createdAt&sortOrder=ASC\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered users and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAllValues\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllValues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(UserRole.ADMIN)@UseGuards(RoleGuard)@Get('get-all-values')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves all users. Only accessible by admins.\nExample :GET /users/get-all-values\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of all users.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(IsCreatorGuard)@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by ID. Only accessible by the user or admins.\nExample :GET /users/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        makeInactive\n                        \n                    \n                \n            \n            \n                \n                        \n                    makeInactive(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(IsCreatorGuard)@Patch('make-inactive/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:104\n                        \n                    \n\n\n            \n                \n                        Deactivates a user by setting their isActive flag to false. Only accessible by the user or admins.\nExample :PATCH /users/make-inactive/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user to deactivate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(IsCreatorGuard)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:89\n                        \n                    \n\n\n            \n                \n                        Updates a user's information. Only accessible by the user or admins.\nExample :PATCH /users/1\n{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"User\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing updated user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated user.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Body, Patch, Param, UseGuards, Query } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { Role } from '@common/decorators/role.decorator';\nimport { UpdateUserDto } from './dto';\nimport { AccessTokenGuard, IsCreatorGuard, RoleGuard } from '@security/guards';\nimport { UserRole } from '@common/enums/user-role.enum';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { User } from './entities/user.entity';\n\n/**\n * Controller to manage users.\n * @class\n */\n@UseGuards(AccessTokenGuard)\n@Controller('users')\nexport class UsersController {\n  /**\n   * Creates an instance of UsersController.\n   *\n   * @constructor\n   * @param {UsersService} usersService - Service to manage users.\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves all users with pagination and filtering. Only accessible by admins.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered users and total count.\n   *\n   * @example\n   * GET /users/get-all?page=1&limit=10&sortBy=createdAt&sortOrder=ASC\n   */\n  @Role(UserRole.ADMIN)\n  @UseGuards(RoleGuard)\n  @Get('get-all')\n  findAll(\n    @Query() paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    return this.usersService.findAll(paginationFilterDto);\n  }\n\n  /**\n   * Retrieves all users. Only accessible by admins.\n   *\n   * @returns {Promise} - List of all users.\n   *\n   * @example\n   * GET /users/get-all-values\n   */\n  @Role(UserRole.ADMIN)\n  @UseGuards(RoleGuard)\n  @Get('get-all-values')\n  findAllValues(): Promise {\n    return this.usersService.findAllValues();\n  }\n\n  /**\n   * Retrieves a single user by ID. Only accessible by the user or admins.\n   *\n   * @param {string} id - ID of the user.\n   * @returns {Promise} - The found user.\n   *\n   * @example\n   * GET /users/1\n   */\n  @UseGuards(IsCreatorGuard)\n  @Get(':id')\n  findOne(@Param('id') id: string): Promise {\n    return this.usersService.findOne(+id);\n  }\n\n  /**\n   * Updates a user's information. Only accessible by the user or admins.\n   *\n   * @param {string} id - ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - DTO containing updated user information.\n   * @returns {Promise} - The updated user.\n   *\n   * @example\n   * PATCH /users/1\n   * {\n   *   \"firstName\": \"Updated\",\n   *   \"lastName\": \"User\"\n   * }\n   */\n  @UseGuards(IsCreatorGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto): Promise {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  /**\n   * Deactivates a user by setting their isActive flag to false. Only accessible by the user or admins.\n   *\n   * @param {string} id - ID of the user to deactivate.\n   * @returns {Promise}\n   *\n   * @example\n   * PATCH /users/make-inactive/1\n   */\n  @UseGuards(IsCreatorGuard)\n  @Patch('make-inactive/:id')\n  makeInactive(@Param('id') id: string): Promise {\n    return this.usersService.removeUserActive(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAccessTokenStrategy->UsersModule\n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nUsersModule -->\n\nQueryHelperService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage users.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            QueryHelperService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { AccessTokenStrategy } from '@security/auth/strategies/access-token.strategy';\nimport { Transaction } from '@modules/transactions/entities/transaction.entity';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Module to manage users.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for User and Transaction entities\n    TypeOrmModule.forFeature([User, Transaction])\n  ],\n  controllers: [\n    // Register UsersController\n    UsersController\n  ],\n  providers: [\n    // Register UsersService, QueryHelperService, and AccessTokenStrategy as providers\n    UsersService,\n    QueryHelperService,\n    AccessTokenStrategy\n  ]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllValues\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                removeUserActive\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                verifyUserOneBy\n                            \n                            \n                                    Async\n                                verifyUserOneRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, queryHelper: QueryHelperService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            Creates an instance of UsersService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the User entity.\n\n\n                                                        \n                                                \n                                                \n                                                        queryHelper\n                                                  \n                                                        \n                                                                        QueryHelperService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to build query options.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with pagination and filtering.\nExample :const result = await usersService.findAll(paginationFilterDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered users and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllValues\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllValues()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Retrieves all users.\nExample :const users = await usersService.findAllValues();\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of all users.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Finds a user by ID.\nExample :const user = await usersService.findOne(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeUserActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUserActive(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Deactivates a user by setting their isActive flag to false.\nExample :await usersService.removeUserActive(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user to deactivate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Updates a user's information.\nExample :const updatedUser = await usersService.update(1, updateUserDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing updated user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyUserOneBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyUserOneBy(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:126\n                        \n                    \n\n\n            \n                \n                        Verifies a user exists by their ID.\nExample :const user = await usersService.verifyUserOneBy(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe verified user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyUserOneRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyUserOneRelation(userId: number, relations: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Verifies a user exists by their ID and loads specified relations.\nExample :const user = await usersService.verifyUserOneRelation(1, 'profile');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                relations\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRelations to load.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe verified user with relations loaded.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateUserDto } from './dto';\nimport { QueryHelperService } from '@database/query/query-helper.service';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\n\n/**\n * Service to manage users.\n * @class\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Creates an instance of UsersService.\n   *\n   * @constructor\n   * @param {Repository} usersRepository - Repository for the User entity.\n   * @param {QueryHelperService} queryHelper - Service to build query options.\n   */\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private readonly queryHelper: QueryHelperService\n  ) {}\n\n  /**\n   * Retrieves all users with pagination and filtering.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered users and total count.\n   *\n   * @throws {InternalServerErrorException} If an error occurs while retrieving users.\n   *\n   * @example\n   * const result = await usersService.findAll(paginationFilterDto);\n   */\n  async findAll(\n    paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    const queryOptions = this.queryHelper.buildQueryOptions(paginationFilterDto);\n\n    try {\n      const [users, total] = await this.usersRepository.findAndCount(queryOptions);\n      return { users, total };\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to retrieve users', error.message);\n    }\n  }\n\n  /**\n   * Retrieves all users.\n   *\n   * @returns {Promise} - List of all users.\n   *\n   * @example\n   * const users = await usersService.findAllValues();\n   */\n  async findAllValues(): Promise {\n    return this.usersRepository.find();\n  }\n\n  /**\n   * Finds a user by ID.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - The found user.\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * const user = await usersService.findOne(1);\n   */\n  async findOne(userId: number): Promise {\n    const user = await this.verifyUserOneBy(userId);\n    return user;\n  }\n\n  /**\n   * Updates a user's information.\n   *\n   * @param {number} userId - ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - DTO containing updated user information.\n   * @returns {Promise} - The updated user.\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * const updatedUser = await usersService.update(1, updateUserDto);\n   */\n  async update(userId: number, updateUserDto: UpdateUserDto): Promise {\n    const user = await this.verifyUserOneBy(userId);\n    Object.assign(user, updateUserDto);\n    return this.usersRepository.save(user);\n  }\n\n  /**\n   * Deactivates a user by setting their isActive flag to false.\n   *\n   * @param {number} userId - ID of the user to deactivate.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * await usersService.removeUserActive(1);\n   */\n  async removeUserActive(userId: number): Promise {\n    const user = await this.verifyUserOneBy(userId);\n    user.isActive = false;\n    await this.usersRepository.save(user);\n  }\n\n  /**\n   * Verifies a user exists by their ID.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - The verified user.\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * const user = await usersService.verifyUserOneBy(1);\n   */\n  async verifyUserOneBy(userId: number): Promise {\n    const user = await this.usersRepository.findOneBy({ userId });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${userId} not found.`);\n    }\n    return user;\n  }\n\n  /**\n   * Verifies a user exists by their ID and loads specified relations.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} relations - Relations to load.\n   * @returns {Promise} - The verified user with relations loaded.\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * const user = await usersService.verifyUserOneRelation(1, 'profile');\n   */\n  async verifyUserOneRelation(userId: number, relations: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { userId },\n      relations: [relations]\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${userId} not found.`);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WinstonLoggerService.html":{"url":"injectables/WinstonLoggerService.html","title":"injectable - WinstonLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WinstonLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/logger/winston.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle logging using Winston.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/logger/winston.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Logs a message at the debug level.\nExample :winstonLoggerService.debug('This is a debug message');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to log.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/logger/winston.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Logs a message at the error level.\nExample :winstonLoggerService.error('This is an error message', 'Error stack trace');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to log.\n\n\n                                            \n                                        \n                                        \n                                                trace\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe stack trace.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/logger/winston.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Logs a message at the info level.\nExample :winstonLoggerService.log('This is an info message');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to log.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/logger/winston.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Logs a message at the verbose level.\nExample :winstonLoggerService.verbose('This is a verbose message');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to log.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/logger/winston.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Logs a message at the warn level.\nExample :winstonLoggerService.warn('This is a warning message');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to log.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LoggerService } from '@nestjs/common';\nimport { logger } from './winston.config'; // Import your winston logger setup\n\n/**\n * Service to handle logging using Winston.\n * @class\n * @implements {LoggerService}\n */\n@Injectable()\nexport class WinstonLoggerService implements LoggerService {\n  /**\n   * Logs a message at the info level.\n   *\n   * @param {string} message - The message to log.\n   *\n   * @example\n   * winstonLoggerService.log('This is an info message');\n   */\n  log(message: string) {\n    logger.info(message);\n  }\n\n  /**\n   * Logs a message at the error level.\n   *\n   * @param {string} message - The message to log.\n   * @param {string} trace - The stack trace.\n   *\n   * @example\n   * winstonLoggerService.error('This is an error message', 'Error stack trace');\n   */\n  error(message: string, trace: string) {\n    logger.error(message, { trace });\n  }\n\n  /**\n   * Logs a message at the warn level.\n   *\n   * @param {string} message - The message to log.\n   *\n   * @example\n   * winstonLoggerService.warn('This is a warning message');\n   */\n  warn(message: string) {\n    logger.warn(message);\n  }\n\n  /**\n   * Logs a message at the debug level.\n   *\n   * @param {string} message - The message to log.\n   *\n   * @example\n   * winstonLoggerService.debug('This is a debug message');\n   */\n  debug(message: string) {\n    logger.debug(message);\n  }\n\n  /**\n   * Logs a message at the verbose level.\n   *\n   * @param {string} message - The message to log.\n   *\n   * @example\n   * winstonLoggerService.verbose('This is a verbose message');\n   */\n  verbose(message: string) {\n    logger.verbose(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/common/decorators/role.decorator.ts\n            \n            variable\n            Role\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/role.decorator.ts\n            \n            variable\n            ROLE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/user-id.decorator.ts\n            \n            variable\n            UserId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/dto/id.dto.ts\n            \n            class\n            IdDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/dto/pagination.dto.ts\n            \n            class\n            PaginationAndFilterDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/exceptions/invalid-credentials.exception.ts\n            \n            class\n            InvalidCredentialsException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/globals-filter/http-exceptions-filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/jwt.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/jwt.interface.ts\n            \n            interface\n            JWTTokens\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/key-value-redis.interface.ts\n            \n            interface\n            KeyValuePairs\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/interfaces/payload.interface.ts\n            \n            interface\n            Payload\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/payment.interface.ts\n            \n            interface\n            PaymentResult\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/payment.interface.ts\n            \n            interface\n            ProcessPaymentResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/token.interface.ts\n            \n            interface\n            TokenConfig\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/common/logger/winston.config.ts\n            \n            variable\n            commonFormat\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/logger/winston.config.ts\n            \n            variable\n            consoleFormat\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/logger/winston.config.ts\n            \n            variable\n            level\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/logger/winston.config.ts\n            \n            variable\n            levels\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/logger/winston.config.ts\n            \n            variable\n            logger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/logger/winston.service.ts\n            \n            injectable\n            WinstonLoggerService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/database/migration-runner.ts\n            \n            function\n            runMigrations\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1711085051379-CreateTableUsers.ts\n            \n            class\n            CreateTableUsers1711085051379\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712572717258-CreateTableEvents.ts\n            \n            class\n            CreateTableEvents1712572717258\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712642603000-CreateTableEventPrices.ts\n            \n            class\n            CreateTableEventPrices1712642603715\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712661221574-CreateTableCarts.ts\n            \n            class\n            CreateTableCarts1712661221574\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712661230450-CreateTableCartItems.ts\n            \n            class\n            CreateTableCartItems1712661230450\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712661230451-CreateTableReservations.ts\n            \n            class\n            CreateTableReservations1712661230451\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712661230452-CreateTableTransactions.ts\n            \n            class\n            CreateTableTransactions1712661230452\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712717719010-CreateTableTickets.ts\n            \n            class\n            CreateTableTickets1712717719010\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712751776641-CreateTableReservationDetails.ts\n            \n            class\n            CreateTableReservationDetails1712751776641\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712751780000-AddForeignKey.ts\n            \n            class\n            AddForeignKeyConstraints1712751780000\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/query/query-helper.service.ts\n            \n            injectable\n            QueryHelperService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/database/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/database/typeorm-cli.config.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/libs/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/cart-items/cart-items.controller.ts\n            \n            controller\n            CartItemsController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/cart-items/cart-items.service.ts\n            \n            injectable\n            CartItemsService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/modules/cart-items/dto/create-cart-item.dto.ts\n            \n            class\n            CreateCartItemDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/cart-items/dto/update-cart-item.dto.ts\n            \n            class\n            UpdateCartItemDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/cart-items/entities/cartitems.entity.ts\n            \n            entity\n            CartItem\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/carts/carts.service.ts\n            \n            injectable\n            CartsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/carts/entities/cart.entity.ts\n            \n            entity\n            Cart\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/dto/create-event.dto.ts\n            \n            class\n            CreateEventDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/events/dto/update-event.dto.ts\n            \n            class\n            UpdateEventDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/entities/event-price.entity.ts\n            \n            entity\n            EventPrice\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/entities/event.entity.ts\n            \n            entity\n            Event\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/event-prices.service.ts\n            \n            injectable\n            EventPricesService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/modules/events/event-sales.service.ts\n            \n            injectable\n            EventSalesService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/modules/events/events.controller.ts\n            \n            controller\n            EventsController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/events/events.service.ts\n            \n            injectable\n            EventsService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/modules/reservation-details/dto/create-reservation-details.dto.ts\n            \n            class\n            CreateReservationDetailsDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/reservation-details/dto/update-reservation-details.dto.ts\n            \n            class\n            UpdateReservationDetailsDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/reservation-details/entities/reservation-details.entity.ts\n            \n            entity\n            ReservationDetails\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/reservation-details/reservation-details.service.ts\n            \n            injectable\n            ReservationDetailsService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/reservations/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/reservations/dto/update-reservation.dto.ts\n            \n            class\n            UpdateReservationDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/reservations/entities/reservation.entity.ts\n            \n            entity\n            Reservation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/reservations/reservations-processor.service.ts\n            \n            injectable\n            ReservationsProcessorService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/reservations/reservations.controller.ts\n            \n            controller\n            ReservationsController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/reservations/reservations.service.ts\n            \n            injectable\n            ReservationsService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/modules/tickets/entities/ticket.entity.ts\n            \n            entity\n            Ticket\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/tickets/tickets.service.ts\n            \n            injectable\n            TicketsService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/transactions/dto/create-transaction.dto.ts\n            \n            class\n            CreateTransactionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/transactions/dto/update-transaction.dto.ts\n            \n            class\n            UpdateTransactionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/transactions/entities/transaction.entity.ts\n            \n            entity\n            Transaction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/transactions/transactions.controller.ts\n            \n            controller\n            TransactionsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/security/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/security/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/security/auth/dto/login.dto.ts\n            \n            class\n            LoginDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/security/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/security/auth/dto/signup.dto.ts\n            \n            class\n            SignUpDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/security/auth/dto/update-password.dto.ts\n            \n            class\n            UpdatePasswordDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/security/auth/strategies/access-token.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/security/cookie/cookie.service.ts\n            \n            injectable\n            CookieService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/security/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/security/guards/access-token.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/security/guards/is-creator.guard.ts\n            \n            guard\n            IsCreatorGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/security/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/security/token/refreshtoken-store.service.ts\n            \n            injectable\n            RefreshTokenStoreService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/security/token/token-management.service.ts\n            \n            injectable\n            TokenManagementService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/security/token/token.service.ts\n            \n            injectable\n            TokenService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.common.ts\n            \n            variable\n            DEFAULT_PAGE_SIZE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.common.ts\n            \n            variable\n            PRICES_FORMULA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.env.ts\n            \n            variable\n            DEV_ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.env.ts\n            \n            variable\n            NODE_ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.env.ts\n            \n            variable\n            PROD_ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            createEnumType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            DOES_ENUM_CATEGORY_TYPE_EXIST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            DOES_ENUM_PRICE_FORMULE_TYPE_EXIST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            DOES_ENUM_STATUS_RESERVATION_EXIST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            DOES_ENUM_USER_ROLE_EXIST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            ENUM_TYPES_DB\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/services/convert-utils.service.ts\n            \n            injectable\n            ConvertUtilsService\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.7\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.7\n        \n            @nestjs/event-emitter : ^2.0.4\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.3.7\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/throttler : ^5.1.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            argon2 : ^0.40.1\n        \n            cache-manager-redis-store : ^3.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            csrf-csrf : ^3.0.4\n        \n            dotenv : ^16.4.5\n        \n            express-rate-limit : ^7.2.0\n        \n            helmet : ^7.1.0\n        \n            ioredis : ^5.3.2\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.11.5\n        \n            qrcode : ^1.5.3\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^9.0.1\n        \n            winston : ^3.13.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategoryEventTypeEnum   (src/.../category-type.enum.ts)\n                        \n                        \n                            PriceFormulaEnum   (src/.../price-formula.enum.ts)\n                        \n                        \n                            SortOrder   (src/.../sort-order.enum.ts)\n                        \n                        \n                            StatusReservation   (src/.../status-reservation.enum.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/category-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CategoryEventTypeEnum\n                    \n                \n                    \n                        \n                            Enumeration for different types of event categories.\n\n                        \n                    \n                        \n                            \n                                 ARCHERY\n                            \n                        \n                        \n                            \n                                Value : ARCHERY\n                            \n                        \n                        \n                            \n                                 ATHLETICS\n                            \n                        \n                        \n                            \n                                Value : ATHLETICS\n                            \n                        \n                        \n                            \n                                 BADMINTON\n                            \n                        \n                        \n                            \n                                Value : BADMINTON\n                            \n                        \n                        \n                            \n                                 BASKETBALL\n                            \n                        \n                        \n                            \n                                Value : BASKETBALL\n                            \n                        \n                        \n                            \n                                 BOXING\n                            \n                        \n                        \n                            \n                                Value : BOXING\n                            \n                        \n                        \n                            \n                                 CANOE_KAYAK\n                            \n                        \n                        \n                            \n                                Value : CANOE_KAYAK\n                            \n                        \n                        \n                            \n                                 CYCLING\n                            \n                        \n                        \n                            \n                                Value : CYCLING\n                            \n                        \n                        \n                            \n                                 DIVING\n                            \n                        \n                        \n                            \n                                Value : DIVING\n                            \n                        \n                        \n                            \n                                 FENCING\n                            \n                        \n                        \n                            \n                                Value : FENCING\n                            \n                        \n                        \n                            \n                                 FOOTBALL\n                            \n                        \n                        \n                            \n                                Value : FOOTBALL\n                            \n                        \n                        \n                            \n                                 GYMNASTICS\n                            \n                        \n                        \n                            \n                                Value : GYMNASTICS\n                            \n                        \n                        \n                            \n                                 HANDBALL\n                            \n                        \n                        \n                            \n                                Value : HANDBALL\n                            \n                        \n                        \n                            \n                                 ROWING\n                            \n                        \n                        \n                            \n                                Value : ROWING\n                            \n                        \n                        \n                            \n                                 SAILING\n                            \n                        \n                        \n                            \n                                Value : SAILING\n                            \n                        \n                        \n                            \n                                 SWIMMING\n                            \n                        \n                        \n                            \n                                Value : SWIMMING\n                            \n                        \n                        \n                            \n                                 TABLE_TENNIS\n                            \n                        \n                        \n                            \n                                Value : TABLE_TENNIS\n                            \n                        \n                        \n                            \n                                 TENNIS\n                            \n                        \n                        \n                            \n                                Value : TENNIS\n                            \n                        \n                        \n                            \n                                 VOLLEYBALL\n                            \n                        \n                        \n                            \n                                Value : VOLLEYBALL\n                            \n                        \n                        \n                            \n                                 WEIGHTLIFTING\n                            \n                        \n                        \n                            \n                                Value : WEIGHTLIFTING\n                            \n                        \n                        \n                            \n                                 KARATE\n                            \n                        \n                        \n                            \n                                Value : KARATE\n                            \n                        \n            \n        \n\n    src/common/enums/price-formula.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PriceFormulaEnum\n                    \n                \n                    \n                        \n                            Enumeration for different pricing formulas.\n\n                        \n                    \n                        \n                            \n                                 SOLO\n                            \n                        \n                        \n                            \n                                Value : SOLO\n                            \n                        \n                        \n                            \n                                 DUO\n                            \n                        \n                        \n                            \n                                Value : DUO\n                            \n                        \n                        \n                            \n                                 FAMILY\n                            \n                        \n                        \n                            \n                                Value : FAMILY\n                            \n                        \n            \n        \n\n    src/common/enums/sort-order.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        SortOrder\n                    \n                \n                    \n                        \n                            Enumeration for sort order options.\n\n                        \n                    \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/common/enums/status-reservation.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        StatusReservation\n                    \n                \n                    \n                        \n                            Enumeration for reservation status options.\n\n                        \n                    \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : APPROVED\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : REJECTED\n                            \n                        \n            \n        \n\n    src/common/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                    \n                        \n                            Enumeration for user roles.\n\n                        \n                    \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            runMigrations   (src/.../migration-runner.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        The bootstrap function to set up and start the NestJS application.\n\n\n                \n            \n        \n    \n    src/database/migration-runner.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        runMigrations\n                        \n                    \n                \n            \n            \n                \nrunMigrations()\n                \n            \n\n\n\n\n            \n                \n                        Runs database migrations using TypeORM.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n    NEST-JO\n\n\n    Optimized for Performance and Efficiency!\n\n\n    \n    \n    \n    \n\n\n    \n\n\n\n\n  Table of Contents\n\n\n Overview\n Features\n Repository Structure\n Modules\n Getting Started\n Installation\n Usage\n Tests\n\n\n Project Roadmap\n Contributing\n License\n Acknowledgments\n\n\nOverview\nNest-Jo is a powerful open-source project designed to streamline and optimize the development, testing, and deployment processes for Nest.js applications. Leveraging a comprehensive set of Docker services defined in docker-compose files, including PostgreSQL and Redis containers, Nest-Jo simplifies the setup of a robust environment for efficient development workflows. The project also includes configurations such as tsconfig.build.json for enhancing the TypeScript build process by excluding unnecessary files, enabling faster compilation and improved performance. With structures like nest-cli.json for customizing project layouts and compiler options, Nest-Jo offers modularity and flexibility, ultimately enhancing the development experience for engineers working on Nest.js applications. By bundling essential functionalities like hot-reload servers and production environment setups, Nest-Jo adds value by streamlining the development lifecycle and enhancing the overall productivity of software teams.\n\nFeatures\n\n\n\n\nFeature\nDescription\n\n\n\n\n⚙️\nArchitecture\nNest.js project with optimized TypeScript build process. Utilizes Docker and services for PostgreSQL and Redis. Facilitates efficient development, testing, and deployment.\n\n\n🔩\nCode Quality\nFollows linting rules with ESLint and Prettier configurations. Maintains consistent code style and readability throughout the codebase.\n\n\n📄\nDocumentation\nExtensive documentation with tsconfig files and Docker configurations. Enables developers to understand and contribute to the project efficiently.\n\n\n🔌\nIntegrations\nIntegrates various libraries like Passport JWT, TypeORM, and Winston. Utilizes Swagger for API documentation and NestJS modules for scalability.\n\n\n🧩\nModularity\nHighly modular codebase with class-transformer and class-validator usage. Promotes code reuse and separation of concerns.\n\n\n🧪\nTesting\nUses Jest and Supertest for testing, with TypeORM for database integration testing. Ensures robust test coverage for reliable code quality.\n\n\n⚡️\nPerformance\nEfficient resource usage with Redis caching, Express Rate Limit, and optimized TypeScript compilation. Ensures fast execution and performance.\n\n\n🛡️\nSecurity\nImplements security measures like helmet, CORS, and Argon2 for secure data handling. Uses JWT and rate limiting for access control.\n\n\n📦\nDependencies\nRelies on key libraries like NestJS, TypeORM, and Express. Also uses Redis, PostgreSQL, and various TypeScript typings for functionality.\n\n\n🚀\nScalability\nBuilt with scalability in mind using NestJS features for handling increased traffic and load. Docker setup enables easy scaling and deployment.\n\n\n\n\nRepository Structure\nExample :└── nest-jo/\n    ├── Dockerfile\n    ├── Makefile\n    ├── README.md\n    ├── docker-compose.override.yml\n    ├── docker-compose.prod.yml\n    ├── docker-compose.yml\n    ├── nest-cli.json\n    ├── package.json\n    ├── src\n    │   ├── app.module.ts\n    │   ├── common\n    │   ├── database\n    │   ├── libs\n    │   ├── main.ts\n    │   ├── modules\n    │   ├── security\n    │   ├── type.d.ts\n    │   └── utils\n    ├── test\n    │   ├── app.e2e-spec.ts\n    │   └── jest-e2e.json\n    ├── tsconfig.build.json\n    └── tsconfig.json\nModules\n.\n\n\n\n\nFile\nSummary\n\n\n\n\ntsconfig.build.json\nOptimize TypeScript build process by excluding unnecessary files from compilation. This setting in tsconfig.build.json improves build performance for the Nest.js project, focusing on essential source files while excluding test and distribution directories.\n\n\ndocker-compose.yml\nDefines Docker services for NestJS server, PostgreSQL database, and Redis cache. Specifies networking and persistent volumes. Enables efficient development, testing, and deployment of the NestJS application within the repositorys architecture.\n\n\ndocker-compose.override.yml\nServer with hot-reload, PostgreSQL, and Redis. Manages container configuration, exposing server on port 3000, linking environment variables. Facilitates seamless development setup within the NestJS projects architecture.\n\n\nDockerfile\nInstalls dependencies, builds app, and prunes dev dependencies, 2) Sets up production environment, copies necessary files, exposes port, and specifies entry point for running app.\n\n\nnest-cli.json\nEnables customization of Nest.js project structuring via the nest-cli.json file. Specifies schema, collection, source root, and compiler options, enhancing modularity and build configuration within the repository's architecture.\n\n\ndocker-compose.prod.yml\nDefines production environment setup for NestJS server, PostgreSQL database, and Redis cache using Docker Compose. Manages service dependencies, environment variables, volume configurations, and network connections for seamless deployment in the repositorys architecture.\n\n\ntsconfig.json\nEnables module path aliases for streamlined import statements in the NestJS project. Organizes codebase structure by providing easy access to common, module-specific, security, database, library, and utility files. Support for TypeScript compilation and efficient development workflow.\n\n\npackage.json\nEnables building, testing & running a Nest.js API. Key tasks include building, formatting, linting, testing, starting the app in different environments, handling database migrations, and setting up TypeORM. Dependencies cover various Nest.js modules, utilities, security, and database packages.\n\n\nMakefile\nManages database migrations, testing, Redis connection, and Docker operations for development and production environments within the repository architecture. Key functions include creating, running, and reverting migrations, running tests, connecting to Redis, and managing Docker containers.\n\n\n\n\n\nsrc\n\n\n\n\nFile\nSummary\n\n\n\n\nmain.ts\nInitiates NestJS application setup with logging, CORS, database migrations, cookie parsing, security headers, and global pipes/interceptors/filters. Listens on configurable port with environment mode logging.\n\n\ntype.d.ts\nExtends Express Request interface to include user property for attaching logged-in user data.\n\n\napp.module.ts\nDefines root application module with global configuration, database, Redis connections, authentication, user, event, cart, reservation, payment, ticket, transaction, and request throttling modules. Orchestrates key system components for a robust and scalable NestJS application.\n\n\n\n\n\nsrc.libs.payment\n\n\n\n\nFile\nSummary\n\n\n\n\npayment.module.ts\nFacilitates payment processing by integrating user, reservation, transaction, and ticket entities. Exports PaymentService to handle payment-related operations within the NestJS apps modular architecture.\n\n\npayment.service.spec.ts\nTests payment processing scenarios based on cart total, returning different reservation statuses.\n\n\npayment.service.ts\nHandles payment processing for a shopping cart based on a success rate, ensuring payment approval or rejection. Located in the src/libs/payment/payment.service.ts file of the nest-jo repository, this service plays a crucial role in managing the payment flow within the application architecture.\n\n\n\n\n\nsrc.common.enums\n\n\n\n\nFile\nSummary\n\n\n\n\nsort-order.enum.ts\nASC (ascending) and DESC (descending). Crucial for ordering operations throughout the Nest-jo repository, ensuring flexibility and consistency in sorting functionalities.\n\n\nuser-role.enum.ts\nDefines user roles as an enum in the common module to manage authorization levels within the Nest-JO repository structure.\n\n\nstatus-reservation.enum.ts\nDefines reservation status options for the common module.\n\n\ncategory-type.enum.ts\nDefines event categories with types for sports events in the repositorys Nest.js backend. Categorizes events such as Archery, Athletics, and Basketball into enums for easy reference and consistency across the application.\n\n\nprice-formula.enum.ts\nDefines price formulas for various customer groups within the Nest-JO repositorys architecture.\n\n\n\n\n\nsrc.common.decorators\n\n\n\n\nFile\nSummary\n\n\n\n\nuser-id.decorator.ts\nExtracts user ID from request object using a custom NestJS decorator. Enhances route handlers to access user ID effortlessly, reinforcing authorization capabilities within the applications domain.\n\n\nrole.decorator.ts\nDefines a role decorator to set user roles for route handlers in the NestJS application. It imports UserRole enum and utilizes SetMetadata from @nestjs/common. Key features include ease of role assignment for different routes and increased modularity in handling user permissions.\n\n\n\n\n\nsrc.common.exceptions\n\n\n\n\nFile\nSummary\n\n\n\n\ninvalid-credentials.exception.ts\nDefines InvalidCredentialsException for unauthorized login attempts in the backend. Extends HttpException with a message and status code. Centralizes handling of invalid login credentials within the common/exceptions module.\n\n\n\n\n\nsrc.common.globals-filter\n\n\n\n\nFile\nSummary\n\n\n\n\nhttp-exceptions-filter.spec.ts\nImplements logging and formats error responses based on environment for HTTP exceptions in the NestJS app. It handles non-production vs. production scenarios, creating detailed response objects and logging appropriately.\n\n\nhttp-exceptions-filter.ts\nHandles and customizes HTTP exceptions by providing detailed error responses in non-production environments using NestJS. The filter class logs errors, constructs responses, and enhances debugging info for API requests.\n\n\n\n\n\nsrc.common.dto\n\n\n\n\nFile\nSummary\n\n\n\n\npagination.dto.ts\nDefines a PaginationAndFilter DTO for sorting, filtering, and paginating data in the repository. Enables standardized input handling for querying and presenting data efficiently within the architecture.\n\n\nid.dto.ts\nValidates and sanitizes ID inputs through a Data Transfer Object (DTO) using class-validator in the parent repositorys architecture.\n\n\n\n\n\nsrc.common.interfaces\n\n\n\n\nFile\nSummary\n\n\n\n\ntoken.interface.ts\nTokenConfig` specifying secrets and expiration times for access and refresh tokens within Nest-jos architecture.\n\n\npayment.interface.ts\nDefines interfaces for payment processing results and responses to ensure consistency and clarity in managing payment status, details, and associated reservations within the repositorys architecture.\n\n\nkey-value-redis.interface.ts\nDefines a structure for storing key-value pairs in the Redis database. Used to represent data within the repositorys architecture.\n\n\npayload.interface.ts\nDefines JWT payload structure with user ID, role, and token version, enhancing authentication in the Nest-JO repository.\n\n\njwt.interface.ts\nDefines interfaces for JWT payload and tokens with sub, role, version, accessToken, refreshToken, and optional expiresIn properties. Crucial for handling JWT authentication and authorization within the NestJS-based projects common module.\n\n\n\n\n\nsrc.common.logger\n\n\n\n\nFile\nSummary\n\n\n\n\nwinston.config.ts\nDefines logging levels and formats based on environment for the user-service. Utilizes Winston to log to files and console in development. Maintains consistent log formats across transports.\n\n\nwinston.service.ts\nImplements a WinstonLoggerService for logging at different levels. It integrates the winston logger setup into the repositorys common functionality, enhancing the architecture with structured logging capabilities.\n\n\n\n\n\nsrc.modules\n\n\n\n\nFile\nSummary\n\n\n\n\ncommom.module.ts\nDefines a module consolidating common services. Imports and exports vital services for the app. Facilitates seamless access to shared functionalities across the project.\n\n\n\n\n\nsrc.modules.reservation-details\n\n\n\n\nFile\nSummary\n\n\n\n\nreservation-details.module.ts\nOrchestrates reservation details management by integrating services and entities.-Registers ReservationDetailsService provider, importing Event and ReservationDetails entities.-Utilizes CartItemsModule and EventsModule from the repository structure.\n\n\nreservation-details.service.ts\nManages reservation details, creating new entries from reservations and cart items. Also retrieves reservation details by ID, handling related entities.\n\n\nreservation-details.service.spec.ts\nImplements ReservationDetailsService tests ensuring event existence, creation, and retrieval. Uses repositories to simulate and verify operations. Enhances reservation details handling within the Nest-JO repository architecture.\n\n\n\n\n\nsrc.modules.reservation-details.entities\n\n\n\n\nFile\nSummary\n\n\n\n\nreservation-details.entity.ts\nDefines reservation details, linking reservations and events with pricing data and timestamps. Crucial for handling booking specifics within the Nest.js architecture, facilitating efficient reservation management.\n\n\n\n\n\nsrc.modules.reservation-details.dto\n\n\n\n\nFile\nSummary\n\n\n\n\ncreate-reservation-details.dto.ts\nDefines required data structure for creating reservation details; validations ensure data integrity. Implements PriceFormulaEnum for pricing flexibility within the Nest.js architecture.\n\n\nupdate-reservation-details.dto.ts\nEnables updating reservation details by extending the creation DTO with optional properties. Crucial for managing reservation data within the repositorys architecture.\n\n\n\n\n\nsrc.modules.users\n\n\n\n\nFile\nSummary\n\n\n\n\nusers.controller.spec.ts\nEnsures CRUD operations perform as expected with mocked UsersService. Covers find, update, and set inactive user actions, responding appropriately to various scenarios like user not found.\n\n\nusers.module.ts\nDefines a module managing users in the NestJS application, incorporating TypeORM for entities. Registers controllers and providers for user-related operations, authentication strategy, and database query assistance.\n\n\nusers.service.ts\nManages user data with CRUD operations, pagination, and filters. Validates user existence and updates user info securely. Key features include finding, updating, deactivating users, and verifying user relations.\n\n\nusers.service.spec.ts\nImplements user management functions for the repository, including finding, updating, and deactivating users. Handles database interactions and error handling, ensuring data integrity and system reliability.\n\n\nusers.controller.ts\nControls user data access, retrieval, updates, and deactivation with role-based guards. Performs operations based on user ID and user role. Only accessible by admins, the user, or the creator.\n\n\n\n\n\nsrc.modules.users.entities\n\n\n\n\nFile\nSummary\n\n\n\n\nuser.entity.ts\nDefines User entity with relationships to Cart, Reservations, and Transactions. Captures user details like email, names, role, activity status, and timestamps, excluding sensitive fields. Contributes to user data management within the repositorys modular architecture.\n\n\n\n\n\nsrc.modules.users.dto\n\n\n\n\nFile\nSummary\n\n\n\n\nupdate-user.dto.ts\nDefines an UpdateUserDto class inheriting properties from CreateUserDto with all fields optional. This supports flexible user data updates in the users module.\n\n\nindex.ts\nExports user-related data transfer objects for creating and updating users within the Nest-JO repositorys modular architecture.\n\n\ncreate-user.dto.ts\nDefines a DTO for user creation with fields for first name, last name, email, password, and role. Implements validation rules using class-validator for each field. This DTO ensures proper data structure for user creation within the repository.\n\n\n\n\n\nsrc.modules.cart-items\n\n\n\n\nFile\nSummary\n\n\n\n\ncart-items.module.ts\nDefines a module managing cart items in the NestJS repository. Imports TypeORM for entities, connects to related modules, and registers services. Follows the repositorys architecture by integrating with Events, Carts, and Reservations modules.\n\n\ncart-items.service.ts\nManages cart items, enabling addition, retrieval, update, and removal functionalities. Interfaces with related services to handle user shopping cart operations seamlessly within the NestJS repository structure.\n\n\ncart-items.controller.ts\nManages cart items by allowing addition, retrieval, updating, and removal functionalities. Utilizes user authentication and service for cart operations. Supports handling cart items for a specific user and cart.\n\n\ncart-items.service.spec.ts\nAdding, updating, and removing items from a cart. Utilizes repositories, services, and DTOs to facilitate interaction with the database. Handles exceptions for non-existent events and insufficient ticket quantities.\n\n\ncart-items.controller.spec.ts\nCreate, FindAll, FindOne, Update, Remove. Handles item addition, retrieval, updating, and deletion in the shopping cart. Validates user permissions and responses based on item existence.\n\n\n\n\n\nsrc.modules.cart-items.entities\n\n\n\n\nFile\nSummary\n\n\n\n\ncartitems.entity.ts\nDefines a CartItem entity with associations to Cart, Event, and Reservations. Manages pricing, quantity, and timestamps for items in a shopping cart within the nest-jo repositorys modular architecture.\n\n\n\n\n\nsrc.modules.cart-items.dto\n\n\n\n\nFile\nSummary\n\n\n\n\ncreate-cart-item.dto.ts\nDefines a DTO for creating a cart item, enforcing data integrity by specifying user, event, quantity, and pricing formula fields. Collaborates with the architecture to ensure accurate cart item creation within the NestJS e-commerce repository.\n\n\nupdate-cart-item.dto.ts\nEnables cart item updates with optional properties. Extends CreateCartItemDto to modify cart items flexibly within the cart-items module, enhancing the dynamic functionality of the parent repositorys e-commerce platform.\n\n\n\n\n\nsrc.modules.reservations\n\n\n\n\nFile\nSummary\n\n\n\n\nreservations-processor.service.spec.ts\nImplements reservation processing logic for user bookings, payments, and cart management. Leveraging service dependencies for user verification, transaction handling, and reservation creation, culminating in successful booking finalization and cleanup operations post-payment.\n\n\nreservations.controller.spec.ts\nTests reservation-related endpoints, ensuring successful creation, proper error handling, and retrieval of reservations. Validates interactions with the ReservationsService for user and admin roles, conforming to specified behaviors and data fetch criteria.\n\n\nreservations.service.spec.ts\nGenerateReservations, findAll, findAllAdmin, findOne, saveReservation. Employs mock functions and entities. Validates processing, retrieval, and saving of reservations, enhancing robustness.\n\n\nreservations-processor.service.ts\nProcesses user reservations, creates new reservations for cart items, finalizes bookings by updating event tickets, prevents duplicate reservations, and cleans up post-payment. Interfaces with multiple services to manage transactions, payments, cart items, and users in the repositorys architecture.\n\n\nreservations.service.ts\nManages reservations for users, processing, and retrieving data with pagination and filtering. Handles admin view for reservations, saving, and finding specific reservations. Implements query options to enhance database interactions in the repository architecture.\n\n\nreservations.module.ts\nEnables management of reservations in the application by providing controllers, services, and importing related modules/entities. Facilitates interaction with tickets, events, carts, and transactions while ensuring data integrity with TypeORM.\n\n\nreservations.controller.ts\nManages user reservations with creation, retrieval, and admin access functions. Implements reservation services for user and admin operations, supporting pagination and filtering. Enables actions like creating, finding, and examining reservations.\n\n\n\n\n\nsrc.modules.reservations.entities\n\n\n\n\nFile\nSummary\n\n\n\n\nreservation.entity.ts\nDefines reservation entity relationships for users, details, transactions, cart items, and tickets. Timestamps track creation and updates. Organized within the reservations module, supporting the systems booking functionality.\n\n\n\n\n\nsrc.modules.reservations.dto\n\n\n\n\nFile\nSummary\n\n\n\n\ncreate-reservation.dto.ts\nVerifies user, cart item, total price, and payment ID validity. Crucial for ensuring accurate creation of reservations within reservations module of NestJS project.\n\n\nupdate-reservation.dto.ts\nDefines an UpdateReservationDto class extending CreateReservationDto, enabling optional property updates. This DTO streamlines reservation data manipulation within the repositorys architecture.\n\n\n\n\n\nsrc.modules.events\n\n\n\n\nFile\nSummary\n\n\n\n\nevents.controller.ts\nManages event creation, retrieval, updates, and deletion, restricting access to admins. Supports fetching event prices and filtered events with pagination. Implements role-based guards for security.\n\n\nevent-prices.service.ts\nCreates, retrieves, updates, and deletes prices based on formulas. Ensures events exist before price operations. High modularity and TypeORM integration in the repositorys nested structure.\n\n\nevents.service.spec.ts\nCreates, retrieves, updates, and removes events. Utilizes Redis caching, TypeORM entities, and DTOs for effective event handling. Handles conflicts, not found exceptions, and filters events based on specified criteria.\n\n\nevents.service.ts\nManages events by creating, updating, retrieving, and deleting events with unique titles. Handles pagination, filtering, and caching. Utilizes TypeORM for database operations and Redis for caching.\n\n\nevents.module.ts\nDefines a module managing events with services for event management, pricing, and sales. Registers controllers and providers for event-related entities using TypeORM. Facilitates seamless interaction with event data in the NestJS architecture.\n\n\nevent-sales.service.ts\nManages event ticket sales & revenue by processing cart items, updating revenue for events, and deducting ticket quantities based on price formulas. Critical for tracking event finances in the repositorys modular architecture.\n\n\nevents.controller.spec.ts\nTests EventsControllers CRUD operations for events, ensuring proper service method calls with valid input data. Supports event creation, retrieval, updates, and deletion functionalities based on specified criteria. Aligns with the repositorys modular architecture for scalable event management in a NestJS application.\n\n\nevent-sales.service.spec.ts\nImplements** ticket sales processing for events.-Updates event revenue dynamically.-Manages event ticket quantities.-Validates ticket availability.-Ensures revenue accuracy.\n\n\nevent-prices.service.spec.ts\nImplements EventPricesService testing for event price creation, retrieval, updating, and deletion. Spans service interaction with repositories and throws NotFoundExceptions. Ensures event and price data integrity for the nest-jo architecture.\n\n\n\n\n\nsrc.modules.events.entities\n\n\n\n\nFile\nSummary\n\n\n\n\nevent-price.entity.ts\nDefines EventPrice entity with price formula and price attributes linked to the Event entity in the event_prices table to manage different event pricing structures within the Nest-JO repository's modular architecture.\n\n\nevent.entity.ts\nDefines Event entity structure with title, descriptions, pricing, dates, quantities, revenue, and relationships for a Nest.js projects event management module.\n\n\n\n\n\nsrc.modules.events.dto\n\n\n\n\nFile\nSummary\n\n\n\n\nupdate-event.dto.ts\nDefines UpdateEventDto by extending PartialType from NestJS Swagger. Facilitates updating event data by inheriting from CreateEventDto. vital for ensuring accurate event modifications within the events module structure.\n\n\ncreate-event.dto.ts\nTitle, descriptions, price, dates, and category type. Enforces specific field criteria. Integrates with CategoryEventTypeEnum for event categorization within the repositorys modular architecture.\n\n\n\n\n\nsrc.modules.tickets\n\n\n\n\nFile\nSummary\n\n\n\n\ntickets.service.ts\nManages ticket generation for approved reservations. Links transactions, users, and reservations to generate tickets securely. Handles ticket creation, encryption, and QR code generation.\n\n\ntickets.module.ts\nDefines a module for managing tickets, essential for creating reservations. Imports modules to handle reservations, transactions, and user entities. Resolves circular dependencies with forwardRef. Provides the TicketsService for ticket operations.\n\n\ntickets.service.spec.ts\nImplements ticket generation for approved reservations, handles non-approved cases, and creates tickets securely. Services include encryption, reservations, users, and transactions to facilitate the ticketing process within the repositorys modular architecture.\n\n\n\n\n\nsrc.modules.tickets.entities\n\n\n\n\nFile\nSummary\n\n\n\n\nticket.entity.ts\nDefines the Ticket entity structure with relationships for the Nest-jo repository.Specifies ticket details such as ID, reservation connection, purchase key, secure key, and QR code.\n\n\n\n\n\nsrc.modules.transactions\n\n\n\n\nFile\nSummary\n\n\n\n\ntransactions.controller.spec.ts\nImplements tests for TransactionsController to ensure retrieval of user transactions based on specified filters. Handles mocked data responses for transactions, validating the correct functionality of the findAll method.\n\n\ntransactions.module.ts\nDefines a module managing transactions, integrating TypeORM for entities, TransactionsService, ReservationDetailsService, and providing TransactionsController. Imports ReservationsModule and TicketsModule. Services include TransactionService, ReservationDetailsService, and QueryHelperService. TransactionService is exported.\n\n\ntransactions.service.ts\nManages transactions for users, enabling creation, retrieval by reservation ID, and browsing with pagination and filtering. Calculates total cart amount and selects specific fields for queries in the repository architecture.\n\n\ntransactions.service.spec.ts\nEnsures transactions creation, retrieval, and total calculation capabilities. Implements error handling. Collaborates with typeorm repositories and query services for seamless data management and retrieval.\n\n\ntransactions.controller.ts\nImplements a controller for managing user transactions with pagination and filtering. Uses an access token guard for security. Handles requests to retrieve filtered transactions with pagination based on user ID.\n\n\n\n\n\nsrc.modules.transactions.entities\n\n\n\n\nFile\nSummary\n\n\n\n\ntransaction.entity.ts\nDefines a Transaction entity with fields for user, reservations, payment status, payment ID, total amount, and timestamps. Linked to User and Reservation entities. Crucial for managing transaction data within the repositorys architecture.\n\n\n\n\n\nsrc.modules.transactions.dto\n\n\n\n\nFile\nSummary\n\n\n\n\ncreate-transaction.dto.ts\nDefines create-transaction data transfer object to capture transaction details within the Nest-JO repositorys architecture.\n\n\nupdate-transaction.dto.ts\nDefines a DTO class by extending another to represent a partial update to a transaction entity.\n\n\n\n\n\nsrc.modules.carts\n\n\n\n\nFile\nSummary\n\n\n\n\ncarts.service.ts\nFind, create, verify, save, delete. Utilizes TypeORM for data handling. Key methods ensure cart existence, handle relationships, and provide error handling. Enhances user experience within NestJS ecosystem.\n\n\ncarts.service.spec.ts\nFind, create, verify existence, save, and delete. Ensures successful cart retrievals and throws NotFoundException if needed. Enhances the carts module functionality within the repositorys architectural design.\n\n\ncarts.module.ts\nImplements a module for managing carts in the Nest.js application by defining the necessary dependencies and registering the CartsService as a provider, facilitating the handling and manipulation of cart-related data.\n\n\n\n\n\nsrc.modules.carts.entities\n\n\n\n\nFile\nSummary\n\n\n\n\ncart.entity.ts\nDefines a shopping cart entity with a user association, cart items, and creation/update timestamps. Organized within the cart entity, enabling efficient management of user-specific shopping cart details in the Nest.js backend architecture.\n\n\n\n\n\nsrc.database\n\n\n\n\nFile\nSummary\n\n\n\n\ntypeorm-cli.config.ts\nDefines TypeORM DataSource config for PostgreSQL in the NestJS project. Loads env variables and sets up DB connection details dynamically using ConfigService. Specifies paths to entities and migrations for database operations.\n\n\nmigration-runner.ts\nExecutes database migrations with TypeORM. Logger tracks progress. Handles initialization, migration execution, and error handling. Supports app stability and data schema updates within the repositorys NestJS architecture.\n\n\ndatabase.module.ts\nEstablishes PostgreSQL database connection using TypeORM, dynamically configuring through environment variables. Enables secure database setup via ConfigService injection.\n\n\n\n\n\nsrc.database.redis\n\n\n\n\nFile\nSummary\n\n\n\n\nredis.service.ts\nImplements Redis caching functions for efficient data storage and retrieval. Contains methods to set, get, delete data in Redis, fetch data from cache, safely parse JSON, and clear cache by event or all events.\n\n\nredis.module.ts\nSets up and configures the Redis client using environment variables. Provides the Redis client instance and Redis service. Centralizes Redis setup and access for use across the application modules.\n\n\nredis.service.spec.ts\nImplements Redis caching logic with set, get, and del operations. Handles cache retrieval, storage, and error scenarios for efficient data caching in the Nest.js project structure.\n\n\n\n\n\nsrc.database.migrations\n\n\n\n\nFile\nSummary\n\n\n\n\n1712751776641-CreateTableReservationDetails.ts\nDefines migration to create reservation_details table for detailed reservation info, covering event references and pricing. Implements up() to create table if not existing, down() to revert changes.\n\n\n1712661230450-CreateTableCartItems.ts\nDefines and executes database migration to create cart_items table in the application. Ensures proper storage of cart item details with cart and event references, price formula, quantity, and timestamps. Also manages table existence checks and enum types.\n\n\n1712661230451-CreateTableReservations.ts\nImplements migration for reservations table creation in the database, managing reservation info for users, cart items, transactions, details, and tickets within the application schema. It creates or drops the table based on existence to ensure reservation data storage functionality.\n\n\n1712717719010-CreateTableTickets.ts\nCreates migration for tickets table with reservation and security details. Set up schema to manage tickets within the application. Implementation handles table creation and deletion based on existing state.\n\n\n1712572717258-CreateTableEvents.ts\nCreates events table schema for managing event details in the application. Adds columns for title, descriptions, pricing, dates, etc. Skips creation if table or category_type_enum type exists. Downs the events table in revert.\n\n\n1711085051379-CreateTableUsers.ts\nCreates user table with essential columns and default values. Validates table existence and user role enum type. Enables migration up (create) and down (drop) functionality for user data management within the apps database architecture.\n\n\n1712661230452-CreateTableTransactions.ts\nImplements migration functionality to create and revert a transactions table in the database. Checks for existing table and enum type before creating. Supports storing transaction details linked to users and payments in the system architecture.\n\n\n1712661221574-CreateTableCarts.ts\nCreates a migration for the cart table in the database. Adds columns for cart details, user references, and timestamps for creation and updates. Implements methods to create and revert the table if needed.\n\n\n1712642603000-CreateTableEventPrices.ts\nDefines a migration creating the event_prices table storing event pricing details. Checks table existence and ensures the type_price_formule_enum type exists. Supports creating and dropping the table based on existence status.\n\n\n1712751780000-AddForeignKey.ts\nImplements foreign key constraints for the reservations and tickets tables, ensuring referential integrity in the database. Facilitates linking reservations to users, transactions, and tickets, enhancing data relationships.\n\n\n\n\n\nsrc.database.migrations-test\n\n\n\n\nFile\nSummary\n\n\n\n\nadd-foreign-key-constraints.migration.spec.ts\nImplements migrations to add foreign key constraints between tables, ensuring data integrity by linking reservations, tickets, users, and transactions in the database.\n\n\ncreate-table-cart-items.migration.spec.ts\nImplements CreateTableCartItems migration testing in the database module. Verifies table creation based on existing table status, ensuring correct table operations in the NestJS project. Enforces data integrity and schema evolution with database migrations.\n\n\ncreate-table-reservation-details.migration.spec.ts\nVerifies and creates a reservation_details table if not existing. Tests migration logic ensuring table creation based on TypeORM query results. Aligns with the repositorys modular database structure.\n\n\ncreate-table-reservations.migration.spec.ts\nImplements migration logic to create or drop reservations table based on its existence. Supports database schema evolution in the Nest-JO repository architecture.\n\n\ncreate-table-events.migration.spec.ts\nImplements migration logic for creating and dropping the events table in the database. Validates table existence to avoid duplicate creation. Enforces database schema integrity for the NestJS project's database module.\n\n\ncreate-table-event-prices.migration.spec.ts\nImplements migration logic for creating or dropping the event_prices table using TypeORM and constants. Handles scenarios where the table already exists or needs creation, utilizing QueryRunner methods effectively within the NestJS database architecture.\n\n\ncreate-table-tickets.migration.spec.ts\nImplements migration tests ensuring tickets table creation and deletion. Verifies existent table before acting. Maintains database schema integrity in the Nest.js project.\n\n\ncreate-table-transactions.migration.spec.ts\nImplements migration for transactions table creation and deletion based on table existence in the database. Ensures proper table management without duplicate creation.\n\n\ncreate-table-carts.migration.spec.ts\nVerifies and applies database schema changes for the cart table based on table existence checks, ensuring seamless migration operations within the nest-jo project's database architecture.\n\n\ncreate-table-users.migration.spec.ts\nImplements migration tests for creating/dropping users table. Verifies table creation and dropping logic based on existing table status, ensuring database integrity in the Nest.js project's database architecture.\n\n\n\n\n\nsrc.database.query\n\n\n\n\nFile\nSummary\n\n\n\n\nquery-helper.service.spec.ts\nImplements query building functions for sorting, filtering, and ordering database queries based on provided criteria. Enhances data retrieval capabilities within the repository architecture.\n\n\nquery-helper.service.ts\nBuilds query options for database operations, incorporating pagination, sorting, and filtering. Constructs where conditions for filtering and nested order conditions for sorting, enhancing data retrieval efficiency within the parent repositorys architecture.\n\n\n\n\n\nsrc.utils.constants\n\n\n\n\nFile\nSummary\n\n\n\n\nconstants.env.ts\nDefine key environment constants for node environment, development, and production, enabling specific logic based on the environment setting. Centralizes environment-related configurations for better code clarity and maintainability.\n\n\nconstants.common.ts\nDefines price formulas and default page sizes for entities in the repository. PRICES_FORMULA maps price types to multipliers. DEFAULT_PAGE_SIZE sets entity-specific default page sizes. Crucial for consistent pricing and pagination across the project.\n\n\nconstants.migrationdb.ts\nType_price_formule, user_role, status_reservation, category_type. Utilizes constants for easy maintenance and generates SQL dynamically based on predefined enum values.\n\n\n\n\n\nsrc.utils.services\n\n\n\n\nFile\nSummary\n\n\n\n\nconvert-utils.service.spec.ts\nTests conversion functions in ConvertUtilsService to ensure accurate conversion of days to seconds and date strings to Date objects. Validates handling of invalid inputs, contributing to robust utility services in the repositorys architecture.\n\n\nconvert-utils.service.ts\nConvert days to seconds and date string to Date object. Enhances repository architecture by providing essential util functions for various modules.\n\n\n\n\n\nsrc.security.encryption\n\n\n\n\nFile\nSummary\n\n\n\n\nencryption.service.ts\nHashing passwords with Argon2, verifying passwords, generating UUIDs and secure keys for users, and creating QR codes from secure keys. Crucial for security and user authentication within the Nest-JO repositorys architecture.\n\n\nencryption.service.spec.ts\nTests encryption service for hashing and verifying passwords using Argon2. Ensures password hashing and verification functionality is correctly implemented. Key element in ensuring secure password management within NestJS authentication framework.\n\n\n\n\n\nsrc.security.guards\n\n\n\n\nFile\nSummary\n\n\n\n\nis-creator.guard.ts\nValidates user identity as content creator in routes, throwing exception if unauthorized. Enhances request object with creator flag for usage. Complements NestJS architecture in enforcing authorization policies.\n\n\nindex.ts\nExports RoleGuard, IsCreatorGuard, and AccessTokenGuard for role-based, creator authentication, and access token validation within the NestJS applications security layer in the src/security/guards directory.\n\n\nrole.guard.spec.ts\nTests RoleGuard role access control based on user role permissions. Utilizes Reflector to override roles. Validates allowing/denying access for different user roles. Contributes to ensuring secure role-based authorization within the apps security layer.\n\n\nrole.guard.ts\nEnables role-based route access in the NestJS architecture by checking users role against required role. Retrieves metadata using a reflector for role validation.\n\n\nis-creator.guard.spec.ts\nVerifies user as content creator. Tests guard behavior in NestJS app. Guards access to content based on user ID. Handles scenarios where user is or isnt creator. Crucial for enforcing content access control.\n\n\naccess-token.guard.ts\nEnforces JWT access token validation for safeguarding routes in the repositorys architecture.Extends AuthGuard(jwt') for securing protected routes.\n\n\n\n\n\nsrc.security.cookie\n\n\n\n\nFile\nSummary\n\n\n\n\ncookie.service.spec.ts\nExtracts refresh token, sets cookie securely with expiration, and throws error if misconfigured. Essential for testing and ensuring secure cookie handling within the NestJS application.\n\n\ncookie.service.ts\nManages refresh token cookies for secure authentication flows in NestJS, handling extraction, setting, and clearing actions based on configuration settings and HTTP requests.\n\n\n\n\n\nsrc.security.token\n\n\n\n\nFile\nSummary\n\n\n\n\ntoken-management.service.spec.ts\nImplements token creation and verification using JWT in the security module. Manages access and refresh tokens with customized expiration periods. Validates payloads based on user roles and secret keys stored in configuration.\n\n\ntoken.service.ts\nManages JWT tokens, creates, refreshes, and validates tokens for user authentication. Implements refresh token storage in Redis and error handling. Services include user management, token generation, and token verification.\n\n\nrefreshtoken-store.service.spec.ts\nImplements tests for storing, verifying, and removing refresh tokens in Redis. Validates functionality with jest mocks for services. Enhances reliability and security of refresh token management in the project architecture.\n\n\nrefreshtoken-store.service.ts\nManages refresh tokens in Redis, storing them with a TTL, verifying their validity, and removing them. Implements essential services to interact with Redis, convert values, and access configuration variables within the NestJS architecture.\n\n\ntoken-management.service.ts\nManages JWT tokens creation and verification for authentication purposes in the repositorys security module. Implements functions to generate access and refresh tokens, plus validate token authenticity using secret keys and expiration settings from configurations.\n\n\ntoken.service.spec.ts\nTests service methods for token creation, refresh, and validation. Verifies token generation, user authentication, token storage, and error handling. Crucial for security and user session management within the repositorys architecture.\n\n\n\n\n\nsrc.security.throttler\n\n\n\n\nFile\nSummary\n\n\n\n\nthrottler.module.ts\nEnables request rate limiting using ThrottlerModule in NestJS, ensuring API stability by restricting requests to 10 per minute. Integrated within the security module for effective rate limiting across the application.\n\n\n\n\n\nsrc.security.auth\n\n\n\n\nFile\nSummary\n\n\n\n\nauth.controller.ts\nManages user authentication operations like registration, login, password updates, token generation, and user deletion. Utilizes various DTOs, guards, services, and decorators to secure and control user access in the application.\n\n\nauth.controller.spec.ts\nTests AuthController methods for user authentication and authorization.Mocks AuthService and TokenService dependencies to ensure correct parameter handling and method calls.Validates controller functions for user signup, login, update password, refresh token, and logout.\n\n\nauth.service.spec.ts\nImplements authentication services for user sign-up, login, password update, and logout. Tests user actions like signing up, logging in, changing passwords, and logging out with error handling. Uses repositories, encryption, tokens, cookies, and a shopping cart service.\n\n\nauth.service.ts\nManages user authentication, registrations, logins, password updates, logouts, and deletions within the Nest-jo repository, facilitating secure user interactions with encrypted passwords, tokens, cookies, and role-based access control.\n\n\nauth.module.ts\nManages authentication by providing services for user authorization and token handling. Integrates with User entity from TypeORM, CartsModule, and CommonModule to secure user access within the NestJS application architecture.\n\n\n\n\n\nsrc.security.auth.dto\n\n\n\n\nFile\nSummary\n\n\n\n\nsignup.dto.ts\nFirstName, lastName (optional strings), email (required valid email), password (required strong, min 6 chars), role (optional enum UserRole). Supports maintaining data integrity and security in the nest-jo repository.\n\n\nlogin.dto.ts\nDefines a DTO for user login, ensuring email is valid and not empty, and password is not empty. This DTO enhances user authentication security within the NestJS project structure.\n\n\nrefresh-token.dto.ts\nDefines a RefreshTokenDto class ensuring the required nature of the refreshToken field using class-validator. This DTO aids in securely refreshing tokens within the nest-jo repositorys security architecture.\n\n\nupdate-password.dto.ts\nDefines DTO for updating users password with validation rules. Promotes secure password management in the apps security module.\n\n\n\n\n\nsrc.security.auth.strategies\n\n\n\n\nFile\nSummary\n\n\n\n\naccess-token.strategy.spec.ts\nTests AccessTokenStrategy behavior for validating JWT payload against user entity in User repository. Uses Jest mocks for successful user retrieval and unauthorized exceptions. Key dependency injection with ConfigService and TypeORM.\n\n\naccess-token.strategy.ts\nValidates access tokens securely by verifying user identity from JWT payload. Enhances application security with JWT authorization and user verification against stored data. Key features include JWT extraction, secret key configuration, and user validation.\n\n\n\n\n\ntest\n\n\n\n\nFile\nSummary\n\n\n\n\napp.e2e-spec.ts\nTests NestJS apps HTTP GET request response of / route with'Hello World! text. Integrates AppModule to test INestApplication using @nestjs/testing and supertest.\n\n\njest-e2e.json\nDefines Jest configuration for end-to-end tests in the NestJS project. Sets module file extensions, test environment, regex for test file selection, and transforms TypeScript files using ts-jest.\n\n\n\n\n\n\nGetting Started\nSystem Requirements:\n\nTypeScript: version x.y.z\n\nInstallation\nFrom source\n\n\n\nClone the nest-jo repository:\n\nExample :$ git clone https://github.com/Binary-Blade/nest-jo\nChange to the project directory:\n\nExample :$ cd nest-jo\nInstall the dependencies:\n\nExample :$ npm install\nUsage\nFrom source\n\n\nRun nest-jo using the command below:\nExample :$ npm run build && node dist/main.js\nTests\n\nRun the test suite using the command below:\nExample :$ npm test\n\nProject Roadmap\n\n ► INSERT-TASK-1\n ► INSERT-TASK-2\n ► ...\n\n\nContributing\nContributions are welcome! Here are several ways you can contribute:\n\nReport Issues: Submit bugs found or log feature requests for the nest-jo project.\nSubmit Pull Requests: Review open PRs, and submit your own PRs.\nJoin the Discussions: Share your insights, provide feedback, or ask questions.\n\n\nContributing Guidelines\n\n\nFork the Repository: Start by forking the project repository to your github account.\nClone Locally: Clone the forked repository to your local machine using a git client.Example :git clone https://github.com/Binary-Blade/nest-jo\nCreate a New Branch: Always work on a new branch, giving it a descriptive name.Example :git checkout -b new-feature-x\nMake Your Changes: Develop and test your changes locally.\nCommit Your Changes: Commit with a clear message describing your updates.Example :git commit -m 'Implemented new feature x.'\nPush to github: Push the changes to your forked repository.Example :git push origin new-feature-x\nSubmit a Pull Request: Create a PR against the original project repository. Clearly describe the changes and their motivations.\nReview: Once your PR is reviewed and approved, it will be merged into the main branch. Congratulations on your contribution!\n\n\nContributor Graph\n\n\n   \n      \n   \n\n\n\n\nLicense\nThis project is protected under the SELECT-A-LICENSE License. For more details, refer to the LICENSE file.\n\nAcknowledgments\n\nList any resources, contributors, inspiration, etc. here.\n\nReturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CartItemsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationDetailsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ThrollerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CartItemsModule\n\n\n\ncluster_CartItemsModule_exports\n\n\n\ncluster_CartItemsModule_providers\n\n\n\ncluster_CartsModule\n\n\n\ncluster_CartsModule_exports\n\n\n\ncluster_CartsModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_ReservationDetailsModule\n\n\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_exports\n\n\n\ncluster_ReservationsModule_providers\n\n\n\ncluster_ThrollerModule\n\n\n\ncluster_ThrollerModule_imports\n\n\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCartItemsModule\n\nCartItemsModule\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nCartItemsModule->ReservationsModule\n\n\n\nAppModule -->\n\nCartItemsModule->AppModule\n\n\n\n\n\nCartItemsService \n\nCartItemsService \n\nCartItemsService  -->\n\nCartItemsModule->CartItemsService \n\n\n\n\n\nReservationDetailsModule\n\nReservationDetailsModule\n\nReservationDetailsModule -->\n\nCartItemsModule->ReservationDetailsModule\n\n\n\n\n\nCartsModule\n\nCartsModule\n\nAuthModule -->\n\nCartsModule->AuthModule\n\n\n\nCartItemsModule -->\n\nCartsModule->CartItemsModule\n\n\n\nReservationsModule -->\n\nCartsModule->ReservationsModule\n\n\n\nAppModule -->\n\nCartsModule->AppModule\n\n\n\n\n\nCartsService \n\nCartsService \n\nCartsService  -->\n\nCartsModule->CartsService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nCartItemsModule -->\n\nEventsModule->CartItemsModule\n\n\n\nReservationsModule -->\n\nEventsModule->ReservationsModule\n\n\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nEventPricesService \n\nEventPricesService \n\nEventPricesService  -->\n\nEventsModule->EventPricesService \n\n\n\n\n\nEventSalesService \n\nEventSalesService \n\nEventSalesService  -->\n\nEventsModule->EventSalesService \n\n\n\n\n\nEventsService \n\nEventsService \n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\nReservationDetailsModule -->\n\nEventsModule->ReservationDetailsModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nPaymentModule->PaymentService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nCommonModule -->\n\nRedisModule->CommonModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nREDIS_CLIENT \n\nREDIS_CLIENT \n\nREDIS_CLIENT  -->\n\nRedisModule->REDIS_CLIENT \n\n\n\nPaymentModule -->\n\nReservationsModule->PaymentModule\n\n\n\nAppModule -->\n\nReservationsModule->AppModule\n\n\n\n\n\nReservationsProcessorService \n\nReservationsProcessorService \n\nReservationsProcessorService  -->\n\nReservationsModule->ReservationsProcessorService \n\n\n\n\n\nReservationsService \n\nReservationsService \n\nReservationsService  -->\n\nReservationsModule->ReservationsService \n\n\n\n\n\nThrollerModule\n\nThrollerModule\n\nAppModule -->\n\nThrollerModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nPaymentModule -->\n\nTicketsModule->PaymentModule\n\n\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nPaymentModule -->\n\nTransactionsModule->PaymentModule\n\n\n\nReservationsModule -->\n\nTransactionsModule->ReservationsModule\n\n\n\nTicketsModule -->\n\nTransactionsModule->TicketsModule\n\n\n\nAppModule -->\n\nTransactionsModule->AppModule\n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\n\n\nConvertUtilsService \n\nConvertUtilsService \n\nConvertUtilsService  -->\n\nCommonModule->ConvertUtilsService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCommonModule->EncryptionService \n\n\n\nPaymentService  -->\n\nCommonModule->PaymentService \n\n\n\nRedisService  -->\n\nCommonModule->RedisService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nCommonModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCookieService\n\nCookieService\n\nAuthModule -->\n\nCookieService->AuthModule\n\n\n\n\n\nRefreshTokenStoreService\n\nRefreshTokenStoreService\n\nAuthModule -->\n\nRefreshTokenStoreService->AuthModule\n\n\n\n\n\nTokenManagementService\n\nTokenManagementService\n\nAuthModule -->\n\nTokenManagementService->AuthModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\n\n\nCartItemsService\n\nCartItemsService\n\nCartItemsModule -->\n\nCartItemsService->CartItemsModule\n\n\n\n\n\nReservationDetailsService\n\nReservationDetailsService\n\nCartItemsModule -->\n\nReservationDetailsService->CartItemsModule\n\n\n\nReservationsModule -->\n\nReservationDetailsService->ReservationsModule\n\n\n\nTransactionsModule -->\n\nReservationDetailsService->TransactionsModule\n\n\n\nReservationDetailsModule -->\n\nReservationDetailsService->ReservationDetailsModule\n\n\n\n\n\nCartsService\n\nCartsService\n\nCartsModule -->\n\nCartsService->CartsModule\n\n\n\n\n\nConvertUtilsService\n\nConvertUtilsService\n\nCommonModule -->\n\nConvertUtilsService->CommonModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCommonModule -->\n\nEncryptionService->CommonModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\nCommonModule -->\n\nPaymentService->CommonModule\n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nEventsModule -->\n\nQueryHelperService->EventsModule\n\n\n\nReservationsModule -->\n\nQueryHelperService->ReservationsModule\n\n\n\nTransactionsModule -->\n\nQueryHelperService->TransactionsModule\n\n\n\nUsersModule -->\n\nQueryHelperService->UsersModule\n\n\n\nCommonModule -->\n\nQueryHelperService->CommonModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\nCommonModule -->\n\nRedisService->CommonModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\nCommonModule -->\n\nUsersService->CommonModule\n\n\n\n\n\nEventPricesService\n\nEventPricesService\n\nEventsModule -->\n\nEventPricesService->EventsModule\n\n\n\n\n\nEventSalesService\n\nEventSalesService\n\nEventsModule -->\n\nEventSalesService->EventsModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nReservationsProcessorService\n\nReservationsProcessorService\n\nReservationsModule -->\n\nReservationsProcessorService->ReservationsModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\nThrottler\n\nThrottler\n\nThrollerModule -->\n\nThrottler->ThrollerModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nUsersModule -->\n\nAccessTokenStrategy->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    30 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            commonFormat   (src/.../winston.config.ts)\n                        \n                        \n                            configService   (src/.../typeorm-cli.config.ts)\n                        \n                        \n                            consoleFormat   (src/.../winston.config.ts)\n                        \n                        \n                            createEnumType   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            DEFAULT_PAGE_SIZE   (src/.../constants.common.ts)\n                        \n                        \n                            DEV_ENV   (src/.../constants.env.ts)\n                        \n                        \n                            DOES_ENUM_CATEGORY_TYPE_EXIST   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            DOES_ENUM_PRICE_FORMULE_TYPE_EXIST   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            DOES_ENUM_STATUS_RESERVATION_EXIST   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            DOES_ENUM_USER_ROLE_EXIST   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            ENUM_TYPES_DB   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            level   (src/.../winston.config.ts)\n                        \n                        \n                            levels   (src/.../winston.config.ts)\n                        \n                        \n                            logger   (src/.../winston.config.ts)\n                        \n                        \n                            NODE_ENV   (src/.../constants.env.ts)\n                        \n                        \n                            PRICES_FORMULA   (src/.../constants.common.ts)\n                        \n                        \n                            PROD_ENV   (src/.../constants.env.ts)\n                        \n                        \n                            Role   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLE_KEY   (src/.../role.decorator.ts)\n                        \n                        \n                            UserId   (src/.../user-id.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/logger/winston.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        commonFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :     winston.Logform.Format\n\n                    \n                \n                \n                    \n                        Default value : winston.format.combine(\n  winston.format.timestamp({ format: 'YY-MM-DD HH:mm:ss' }),\n  winston.format.errors({ stack: true }), // Print stack trace\n  winston.format.splat()\n)\n                    \n                \n\n            \n                \n                    Common format for all logs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        consoleFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :     winston.Logform.Format\n\n                    \n                \n                \n                    \n                        Default value : winston.format.combine(\n  commonFormat,\n  winston.format.colorize(), // Colorize part of the message\n  winston.format.printf(({ level, message, timestamp }) => {\n    return `${timestamp} ${level}: ${message}`;\n  })\n)\n                    \n                \n\n            \n                \n                    Console-specific log format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): string => {\n  const env = process.env.NODE_ENV || DEV_ENV;\n  const isDevelopment = env === DEV_ENV;\n  return isDevelopment ? 'debug' : 'warn';\n}\n                    \n                \n\n            \n                \n                    Determines the logging level based on the environment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        levels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  error: 0,\n  warn: 1,\n  info: 2,\n  http: 3,\n  debug: 4\n}\n                    \n                \n\n            \n                \n                    Logging levels for different types of messages.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : winston.createLogger({\n  level: level(),\n  levels,\n  defaultMeta: { service: 'user-service' },\n  transports: [\n    new winston.transports.File({\n      filename: 'error.log',\n      level: 'error',\n      format: winston.format.combine(commonFormat, winston.format.json()) // Use JSON format for files\n    }),\n    new winston.transports.File({\n      filename: 'combined.log',\n      format: winston.format.combine(commonFormat, winston.format.json()) // Consistent with error log format\n    })\n  ]\n})\n                    \n                \n\n            \n                \n                    Winston logger configuration.\n\n                \n            \n\n        \n    \n\n    src/database/typeorm-cli.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n\n    src/utils/constants/constants.migrationdb.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createEnumType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (typeName: string, values: string[]): string => `\nDO $$\nBEGIN\n    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = '${typeName}') THEN\n        CREATE TYPE \"${typeName}\" AS ENUM(${values.map(value => `'${value}'`).join(', ')});\n    END IF;\nEND\n$$;\n`\n                    \n                \n\n            \n                \n                    Generates SQL for creating an enum type if it does not already exist.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOES_ENUM_CATEGORY_TYPE_EXIST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : createEnumType(\n  'category_type_enum',\n  ENUM_TYPES_DB.category_type\n)\n                    \n                \n\n            \n                \n                    SQL command to check and create the category_type_enum if it does not exist.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOES_ENUM_PRICE_FORMULE_TYPE_EXIST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : createEnumType(\n  'type_price_formule_enum',\n  ENUM_TYPES_DB.type_price_formule\n)\n                    \n                \n\n            \n                \n                    SQL command to check and create the type_price_formule_enum if it does not exist.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOES_ENUM_STATUS_RESERVATION_EXIST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : createEnumType(\n  'status_reservation_enum',\n  ENUM_TYPES_DB.status_reservation\n)\n                    \n                \n\n            \n                \n                    SQL command to check and create the status_reservation_enum if it does not exist.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOES_ENUM_USER_ROLE_EXIST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : createEnumType(\n  'user_role_enum',\n  ENUM_TYPES_DB.user_role\n)\n                    \n                \n\n            \n                \n                    SQL command to check and create the user_role_enum if it does not exist.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENUM_TYPES_DB\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  type_price_formule: ['SOLO', 'DUO', 'FAMILY'],\n  user_role: ['USER', 'ADMIN'],\n  status_reservation: ['APPROVED', 'REJECTED', 'CANCELLED'],\n  category_type: [\n    'ARCHERY',\n    'ATHLETICS',\n    'BADMINTON',\n    'BASKETBALL',\n    'BOXING',\n    'CANOE_KAYAK',\n    'CYCLING',\n    'DIVING',\n    'FENCING',\n    'FOOTBALL',\n    'GYMNASTICS',\n    'HANDBALL',\n    'ROWING',\n    'SAILING',\n    'SWIMMING',\n    'TABLE_TENNIS',\n    'TENNIS',\n    'VOLLEYBALL',\n    'WEIGHTLIFTING',\n    'KARATE'\n  ]\n}\n                    \n                \n\n            \n                \n                    Database enum types with their possible values.\n\n                \n            \n\n        \n    \n\n    src/utils/constants/constants.common.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_PAGE_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Readonly>\n\n                    \n                \n                \n                    \n                        Default value : {\n  USER: 8,\n  RESERVATION: 12,\n  EVENT: 8\n} as const satisfies Record\n                    \n                \n\n            \n                \n                    Default page size constants for different entities.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRICES_FORMULA\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReadonlyArray\n\n                    \n                \n                \n                    \n                        Default value : [\n  { type: PriceFormulaEnum.SOLO, multiplier: 1 },\n  { type: PriceFormulaEnum.DUO, multiplier: 1.3 },\n  { type: PriceFormulaEnum.FAMILY, multiplier: 1.8 }\n] as const\n                    \n                \n\n            \n                \n                    Array of price formulas with their respective multipliers.\n\n                \n            \n\n        \n    \n\n    src/utils/constants/constants.env.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEV_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'development'\n                    \n                \n\n            \n                \n                    Value for the development environment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NODE_ENV'\n                    \n                \n\n            \n                \n                    Environment variable for the node environment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PROD_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n            \n                \n                    Value for the production environment.\n\n                \n            \n\n        \n    \n\n    src/common/decorators/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: UserRole): MethodDecorator => SetMetadata(ROLE_KEY, role)\n                    \n                \n\n            \n                \n                    Decorator to set the role metadata on a route handler.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'role'\n                    \n                \n\n            \n                \n                    Key used to store role metadata.\n\n                \n            \n\n        \n    \n\n    src/common/decorators/user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_: unknown, ctx: ExecutionContext): number => {\n  const request = ctx.switchToHttp().getRequest();\n  return request.user?.userId;\n})\n                    \n                \n\n            \n                \n                    Custom decorator to extract the user ID from the request object.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
