var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.692,1,2.301]],["body/injectables/AccessTokenGuard.html",[0,1.21,1,4.025,2,2.053,3,0.113,4,0.129,5,0.113,6,5.493,7,4.995,8,0.177,9,4.874,10,7.47,11,6.566,12,4.202,13,4.202,14,3.716,15,3.864,16,0.784,17,4.621,18,7.47,19,5.729,20,7.47,21,0.011,22,6.566,23,5.525,24,5.525,25,4.305,26,7.99,27,0.271,28,1.041,29,6.25,30,4.995,31,0.219,32,0.145,33,0.009,34,0.009]],["title/injectables/AccessTokenStrategy.html",[0,0.692,35,2.786]],["body/injectables/AccessTokenStrategy.html",[0,1.036,2,1.604,3,0.088,4,0.101,5,0.088,8,0.202,13,4.693,14,3.769,15,3.31,16,0.672,21,0.011,25,3.846,27,0.303,28,0.813,30,3.902,31,0.188,32,0.113,33,0.007,34,0.007,35,4.175,36,6.274,37,3.902,38,6.274,39,5.114,40,6.399,41,0.395,42,1.292,43,1.834,44,6.659,45,2.044,46,3.902,47,3.802,48,4.365,49,0.672,50,4.882,51,1.328,52,0.923,53,0.497,54,0.923,55,5.705,56,1.537,57,1.644,58,1.831,59,3.067,60,4.016,61,6.399,62,5.443,63,4.882,64,4.54,65,0.802,66,1.988,67,6.399,68,2.958,69,2.857,70,1.292,71,1.739,72,5.114,73,5.114,74,2.631,75,6.399,76,2.34,77,1.56,78,4.882,79,3.902,80,4.291,81,2.108,82,1.158,83,1.481,84,3.611,85,1.699,86,4.882,87,4.882,88,4.882,89,3.902,90,4.291,91,4.882,92,4.882,93,3.551,94,4.882,95,4.882,96,3.611,97,1.914,98,4.291,99,4.882,100,3.02,101,2.875,102,3.379,103,4.882,104,2.04,105,1.914,106,6.399,107,4.291,108,1.475,109,4.291,110,3.611,111,4.291,112,1.914,113,1.36,114,4.882,115,1.689,116,1.397,117,2.631,118,4.882,119,4.882,120,3.379,121,4.882]],["title/classes/AddForeignKeyConstraints1712751780000.html",[31,0.125,122,3.412]],["body/classes/AddForeignKeyConstraints1712751780000.html",[3,0.085,4,0.097,5,0.085,8,0.199,16,0.784,21,0.011,27,0.171,31,0.183,32,0.109,33,0.007,34,0.007,41,0.38,42,1.261,43,2.052,49,0.655,51,1.295,52,0.9,53,0.485,54,0.9,66,2.304,70,1.508,71,1.945,82,1.115,83,1.295,97,3.344,108,1.886,122,4.988,123,1.345,124,6.158,125,3.757,126,4.375,127,6.12,128,4.858,129,7.019,130,3.457,131,4.655,132,6.561,133,2.787,134,3.775,135,4.303,136,3.228,137,3.222,138,3.363,139,4.731,140,4.701,141,3.228,142,5.486,143,4.988,144,2.886,145,6.241,146,2.319,147,3.118,148,3.861,149,4.022,150,3.363,151,4.701,152,4.988,153,5.486,154,6.241,155,5.486,156,4.022,157,7.464,158,3.714,159,8.275,160,6.241,161,4.199,162,2.339,163,3.222,164,3.333,165,3.861,166,6.241,167,3.861,168,2.645,169,6.241,170,3.861,171,6.241,172,3.105,173,4.018,174,4.701,175,3.253,176,4.132]],["title/modules/AppModule.html",[177,1.157,178,2.955]],["body/modules/AppModule.html",[3,0.086,4,0.098,5,0.086,8,0.134,21,0.011,27,0.325,28,0.789,31,0.139,32,0.11,33,0.007,34,0.007,56,0.835,59,3.007,60,3.529,74,2.553,117,2.553,177,2.247,178,6.212,179,1.858,180,1.917,181,2.115,182,2.115,183,1.979,184,2.045,185,2.045,186,4.164,187,4.164,188,5.65,189,4.808,190,4.593,191,5.65,192,4.593,193,5.65,194,5.327,195,4.399,196,5.65,197,4.593,198,4.808,199,5.65,200,2.801,201,2.115,202,1.917,203,4.737,204,5.514,205,2.708,206,3.786,207,4.737,208,4.164,209,4.737,210,3.504,211,3.279,212,2.553,213,2.79,214,3.786,215,4.737,216,3.504,217,3.504,218,4.737,219,3.504,220,4.737,221,5.013,222,3.786,223,4.868,224,3.529,225,4.737,226,4.737,227,4.164,228,4.164,229,3.786,230,4.737,231,2.45,232,3.786,233,4.737,234,2.27,235,3.786,236,2.115,237,5.514,238,2.93,239,3.279,240,7.175,241,1.25,242,1.949,243,2.27,244,1.355,245,2.553,246,3.091,247,2.27,248,1.979,249,4.737]],["title/controllers/AuthController.html",[250,1.974,251,3.158]],["body/controllers/AuthController.html",[1,1.639,3,0.055,4,0.063,5,0.055,8,0.209,12,2.577,14,2.279,15,2.851,16,0.85,17,3.795,21,0.011,27,0.28,28,0.507,31,0.135,32,0.07,33,0.005,34,0.005,41,0.246,42,0.925,43,2.098,45,1.463,49,0.754,51,1.489,52,1.035,53,0.557,54,1.035,56,1.527,58,1.311,65,0.342,66,1.833,68,3.198,70,1.635,71,2.06,81,1.313,83,1.707,85,1.594,93,3.944,108,2.284,113,1.926,115,1.825,116,2.316,117,4.32,146,0.945,163,2.841,202,2.23,239,3.815,250,2.548,251,4.077,252,1.406,253,2.673,254,1.984,255,3.041,256,1.708,257,3.389,258,3.171,259,1.69,260,4.027,261,4.003,262,3.662,263,2.469,264,4.405,265,3.041,266,3.795,267,2.23,268,4.582,269,3.041,270,3.662,271,5.414,272,4.582,273,3.171,274,3.944,275,4.538,276,2.698,277,3.171,278,2.698,279,2.37,280,4.903,281,2.09,282,3.662,283,1.708,284,1.69,285,3.041,286,1.343,287,5.497,288,3.041,289,3.041,290,2.834,291,5.528,292,4.582,293,2.222,294,5.008,295,3.041,296,6.085,297,3.041,298,3.041,299,2.834,300,2.37,301,4.582,302,5.737,303,3.041,304,5.591,305,4.582,306,3.041,307,4.246,308,4.582,309,2.673,310,1.492,311,3.041,312,3.041,313,4.582,314,2.673,315,3.041,316,3.041,317,4.027,318,3.306,319,4.582,320,2.673,321,5.591,322,3.041,323,3.041,324,2.279,325,4.077,326,4.582,327,3.662,328,4.027,329,3.662,330,4.582,331,3.662,332,4.027,333,3.171,334,1.984,335,3.041,336,2.431,337,4.071,338,2.673,339,2.431,340,2.431,341,3.876,342,2.431,343,2.698,344,1.984,345,3.041,346,2.249,347,3.041,348,1.881,349,2.673,350,3.041,351,0.847,352,1.276,353,3.101,354,4.582,355,2.673,356,3.041,357,3.041,358,3.041,359,3.041,360,3.041,361,3.041,362,3.041,363,4.582,364,3.041,365,3.041,366,3.041,367,3.041,368,3.041,369,3.041,370,3.041,371,3.041,372,3.041,373,1.458,374,2.673,375,2.431,376,3.041,377,3.041,378,3.041]],["title/modules/AuthModule.html",[177,1.157,188,2.955]],["body/modules/AuthModule.html",[3,0.097,4,0.11,5,0.097,8,0.151,21,0.011,27,0.321,28,0.889,31,0.157,32,0.124,33,0.008,34,0.008,56,1.194,57,1.371,77,1.704,81,2.304,177,2.24,179,2.092,180,2.159,181,2.383,182,2.383,183,2.229,184,3.382,185,2.304,188,6.171,190,4.723,200,3.026,201,2.383,202,2.159,205,2.926,210,3.947,239,4.69,251,5.794,252,3.133,256,1.887,337,5.193,338,4.69,341,4.944,342,4.264,379,4.69,380,4.69,381,4.69,382,5.478,383,4.944,384,4.944,385,5.193,386,5.336,387,3.248,388,5.951,389,4.264,390,5.336,391,5.336,392,4.69,393,4.264,394,4.69,395,4.264,396,5.336,397,3.947,398,3.812]],["title/injectables/AuthService.html",[0,0.692,337,2.641]],["body/injectables/AuthService.html",[0,0.718,2,0.957,3,0.053,4,0.06,5,0.053,8,0.201,15,3.105,16,0.8,21,0.011,27,0.289,28,0.485,31,0.13,32,0.068,33,0.005,34,0.005,41,0.236,42,0.896,43,2.081,45,1.715,46,2.329,47,3.27,49,0.714,51,1.412,52,0.981,53,0.528,54,0.981,55,4.292,56,1.544,57,1.139,58,2.247,65,0.91,66,2.391,68,2.051,70,1.539,71,1.973,73,4.292,76,1.396,77,0.931,81,1.258,82,0.691,83,1.717,84,2.155,85,2.367,104,2.842,105,1.739,108,2.302,110,2.155,112,2.774,113,2.256,115,0.769,116,1.947,146,1.378,147,1.217,163,1.915,202,2.173,232,3.545,239,3.07,256,2.187,257,3.28,258,3.07,261,2.894,262,3.545,263,2.39,264,3.545,266,3.713,270,3.545,273,2.016,274,4.092,275,2.155,280,4.797,281,1.34,282,3.545,283,1.235,284,1.637,286,1.788,287,5.15,290,2.744,293,2,294,4.209,296,6.084,300,2.294,307,4.154,309,3.898,310,1.586,318,4.105,320,3.898,324,2.207,327,5.653,329,5.438,331,2.329,337,3.713,341,4.398,342,2.329,348,1.802,349,2.561,351,1.235,353,4.285,375,3.545,383,4.398,384,4.398,393,2.329,394,2.561,395,2.329,399,2.561,400,3.898,401,5.276,402,3.634,403,4.62,404,2.914,405,2.744,406,3.28,407,3.28,408,4.435,409,2.914,410,4.435,411,4.435,412,2.914,413,2.914,414,4.435,415,4.435,416,2.937,417,3.48,418,2.914,419,4.435,420,0.905,421,1.075,422,3.545,423,2.914,424,4.435,425,3.545,426,2.986,427,4.154,428,2.914,429,2.914,430,2.329,431,1.716,432,1.716,433,2.329,434,2.914,435,1.347,436,6.459,437,2.914,438,4.435,439,5.677,440,2.914,441,2.914,442,2.914,443,2.914,444,2.914,445,2.914,446,2.914,447,2.914,448,2.914,449,5.276,450,2.914,451,2.914,452,2.914,453,2.329,454,2.561,455,1.258,456,2.207,457,2.914,458,2.155,459,3.545,460,2.914,461,2.914,462,2.329,463,2.914,464,6.003,465,4.435,466,2.561,467,4.72,468,2.914,469,2.894,470,2.914,471,2.561,472,2.914,473,2.329,474,2.914,475,2.914,476,2.914,477,2.914,478,2.561,479,2.914,480,2.914,481,0.931,482,3.898,483,4.435,484,2.914,485,2.914,486,2.914,487,2.329]],["title/entities/Cart.html",[57,1.097,242,1.326]],["body/entities/Cart.html",[3,0.086,4,0.098,5,0.086,8,0.135,16,0.871,21,0.011,27,0.256,31,0.185,32,0.11,33,0.007,34,0.007,41,0.571,49,0.819,52,0.687,53,0.668,56,1.516,57,1.928,65,0.932,81,2.056,82,1.13,108,1.903,212,2.567,242,2.701,243,3.596,267,2.424,279,3.257,284,2.323,310,1.424,420,2.49,455,3.368,456,3.988,488,1.868,489,4.187,490,2.718,491,3.895,492,1.378,493,3.8,494,3.786,495,3.739,496,3.895,497,4.763,498,3.132,499,2.469,500,3.297,501,5.534,502,4.763,503,6.296,504,3.708,505,3.583,506,3.706,507,4.763,508,6.296,509,4.763,510,3.132,511,6.296,512,3.807,513,4.763,514,4.763,515,3.018,516,6.296,517,5.534,518,2.947,519,3.542,520,4.881,521,4.362,522,4.881,523,4.389,524,4.763,525,4.187]],["title/entities/CartItem.html",[57,1.097,494,1.907]],["body/entities/CartItem.html",[3,0.07,4,0.08,5,0.07,8,0.109,16,0.896,21,0.011,27,0.263,31,0.16,32,0.089,33,0.006,34,0.006,41,0.512,49,0.843,52,0.787,53,0.674,57,1.765,65,0.959,82,0.916,130,3.23,241,2.226,242,2.769,244,2.212,267,2.495,279,2.822,284,2.013,310,1.622,420,2.337,455,3.129,456,3.743,488,1.514,490,2.355,491,3.374,492,1.194,493,2.939,494,2.436,495,3.474,498,2.714,499,2.139,500,2.673,501,4.794,504,3.212,505,3.409,506,3.478,510,2.714,515,3.293,519,3.866,521,4.484,522,4.377,523,4.579,526,5.035,527,3.395,528,4.01,529,3.912,530,3.032,531,3.129,532,4.35,533,2.857,534,3.862,535,3.862,536,3.862,537,3.862,538,5.455,539,3.395,540,3.862,541,2.013,542,3.862,543,4.359,544,6.872,545,3.862,546,4.359,547,3.703,548,3.862,549,2.822,550,2.822,551,4.359,552,3.862,553,4.794,554,4.794,555,3.862,556,4.794,557,3.862,558,5.455,559,5.016,560,3.395,561,2.173,562,2.081,563,2.274,564,2.274,565,3.862,566,3.862,567,3.395]],["title/controllers/CartItemsController.html",[250,1.974,568,3.158]],["body/controllers/CartItemsController.html",[1,1.858,3,0.062,4,0.071,5,0.062,8,0.205,16,0.833,17,2.133,21,0.011,27,0.272,28,0.574,31,0.148,32,0.08,33,0.006,34,0.006,41,0.279,42,1.016,49,0.728,51,1.439,52,1,53,0.539,54,1,56,1.399,58,0.986,68,3.016,70,1.603,71,2.032,83,1.742,108,2.596,115,1.83,143,4.018,146,1.071,163,2.562,213,4.264,242,2.772,243,3.583,250,2.744,252,1.594,254,2.25,256,1.653,259,2.19,267,2.154,271,4.107,281,1.971,286,1.916,293,2.55,310,1.729,324,2.502,325,4.39,333,4.107,334,2.25,339,2.755,340,2.755,344,2.25,346,2.55,351,0.96,352,0.96,405,2.133,481,1.606,493,4.612,494,1.54,510,3.245,526,4.479,528,4.009,529,5.16,531,2.171,532,4.31,541,1.855,568,4.39,569,2.755,570,2.829,571,3.495,572,4.39,573,3.671,574,3.448,575,5.18,576,5.028,577,3.448,578,2.502,579,5.028,580,5.028,581,2.41,582,1.749,583,2.386,584,5.028,585,3.448,586,3.374,587,4.74,588,5.028,589,3.03,590,5.028,591,3.448,592,7.241,593,3.448,594,5.028,595,3.448,596,3.719,597,4.018,598,3.03,599,5.779,600,5.028,601,3.448,602,3.281,603,2.386,604,4.018,605,4.084,606,2.755,607,2.755,608,3.448,609,2.133,610,3.448,611,3.448,612,5.733,613,3.03,614,5.935,615,3.448,616,3.448,617,3.448,618,3.448]],["title/modules/CartItemsModule.html",[177,1.157,189,2.515]],["body/modules/CartItemsModule.html",[3,0.097,4,0.11,5,0.097,8,0.152,21,0.011,27,0.322,28,0.892,31,0.157,32,0.157,33,0.008,34,0.008,77,1.711,177,2.242,179,2.1,180,2.167,181,2.392,182,2.392,183,2.237,184,3.387,185,3.22,189,5.175,190,4.727,192,4.727,195,4.019,200,3.033,201,2.392,202,2.167,205,2.932,210,3.961,211,3.707,213,3.154,216,3.961,241,1.968,242,2.437,243,3.255,252,3.14,256,1.892,387,3.255,398,3.821,488,2.1,494,3.033,526,3.313,562,2.886,568,5.802,605,5.195,606,4.28,607,4.28,619,4.707,620,4.707,621,5.356,622,4.707,623,4.528,624,4.707,625,4.701,626,5.356,627,3.449,628,4,629,3.154,630,3.154,631,3.154,632,3.707,633,5.356,634,3.961,635,3.961]],["title/injectables/CartItemsService.html",[0,0.692,605,2.515]],["body/injectables/CartItemsService.html",[0,0.609,2,0.774,3,0.043,4,0.049,5,0.043,8,0.203,16,0.805,21,0.011,27,0.247,28,0.393,31,0.11,32,0.055,33,0.004,34,0.004,41,0.191,42,0.759,43,2.125,45,1.2,47,3.588,49,0.734,51,1.452,52,1.009,53,0.543,54,1.009,56,1.314,57,1.374,58,1.782,65,0.924,66,2.367,68,2.474,70,1.584,71,2.014,76,1.129,77,0.753,82,0.559,83,1.716,85,2.362,104,2.442,105,3.075,108,2.318,112,2.563,113,1.948,115,1.791,130,0.984,131,2.114,143,3.003,146,1.167,164,1.678,213,4.225,241,2.024,242,2.769,243,3.438,256,1.735,281,1.617,284,1.387,293,2.506,310,1.797,324,1.87,351,1.49,352,1.49,402,3.936,405,2.325,426,3.252,433,1.883,481,2.505,491,2.325,493,4.593,494,3.614,510,1.87,526,4.437,528,4.023,529,4.851,530,2.098,531,1.017,532,4.121,541,1.73,546,1.883,550,1.219,551,1.883,553,2.071,562,1.269,575,5.313,578,1.87,582,1.861,596,3.957,597,3.003,603,1.63,604,1.883,605,3.151,607,1.883,636,1.883,637,3.758,638,3.758,639,3.758,640,4.688,641,3.758,642,4.688,643,4.276,644,4.688,645,2.356,646,3.703,647,4.121,648,2.356,649,4.688,650,2.78,651,3.758,652,2.356,653,3.758,654,3.758,655,2.356,656,3.01,657,4.312,658,3.758,659,3.758,660,2.356,661,3.758,662,2.356,663,6.23,664,2.356,665,2.601,666,3.303,667,3.758,668,2.356,669,3.758,670,2.356,671,2.356,672,3.758,673,3.758,674,3.758,675,2.356,676,2.78,677,3.758,678,3.758,679,3.003,680,2.356,681,2.356,682,3.758,683,3.758,684,3.003,685,2.071,686,1.742,687,2.356,688,1.63,689,3.303,690,3.703,691,2.356,692,1.883,693,4.688,694,2.071,695,3.758,696,1.883,697,2.071,698,3.758,699,2.356,700,2.356,701,3.758,702,2.356,703,2.356,704,2.356,705,3.758,706,3.758,707,3.309,708,2.356,709,2.356,710,2.356,711,2.356,712,3.758,713,4.688,714,1.742,715,3.758,716,3.303,717,3.758,718,3.758,719,2.356,720,2.071,721,2.356,722,2.356,723,2.356,724,1.089,725,2.356,726,2.356,727,2.356]],["title/modules/CartsModule.html",[177,1.157,190,2.402]],["body/modules/CartsModule.html",[3,0.11,4,0.125,5,0.11,8,0.172,21,0.011,27,0.305,28,1.01,31,0.178,32,0.17,33,0.009,34,0.009,57,1.558,77,1.937,177,2.312,179,2.378,180,2.454,181,2.708,182,2.708,183,2.534,184,3.405,185,3.405,190,4.854,200,3.276,201,2.708,202,2.454,205,2.618,242,2.279,256,2.043,387,3.516,398,3.412,402,5.031,405,4.538,728,5.331,729,5.331,730,5.331,731,6.065,732,5.331,733,6.065,734,6.065,735,4.847]],["title/injectables/CartsService.html",[0,0.692,402,2.402]],["body/injectables/CartsService.html",[0,0.805,2,1.116,3,0.061,4,0.07,5,0.061,8,0.216,16,0.851,21,0.011,27,0.235,28,0.566,31,0.146,32,0.079,33,0.006,34,0.006,41,0.275,42,1.004,43,2.175,45,1.589,47,3.599,49,0.781,51,1.544,52,1.073,53,0.578,54,1.073,56,1.371,57,1.278,58,1.423,65,0.928,66,2.379,70,1.638,71,2.062,76,1.628,77,1.085,82,0.805,83,1.615,85,1.182,104,2.706,105,3.145,108,2.248,112,2.307,113,1.92,115,1.819,146,1.545,163,2.147,222,3.974,229,3.974,242,2.813,256,1.385,284,1.835,286,1.418,290,3.076,293,2.545,310,1.749,351,1.803,352,0.946,402,3.643,405,3.076,426,3.429,481,1.589,493,4.484,494,1.516,643,5.176,656,2.798,657,3.442,665,3.442,676,3.678,679,3.974,707,5.067,714,3.678,716,2.985,732,2.985,736,2.985,737,4.973,738,4.973,739,4.973,740,4.973,741,4.973,742,3.396,743,3.396,744,5.884,745,4.973,746,3.396,747,4.973,748,4.973,749,3.396,750,4.973,751,4.973,752,3.396,753,3.678,754,4.371,755,4.973,756,2.474,757,4.973,758,4.973,759,4.973,760,3.396,761,4.973,762,4.973,763,4.973,764,3.396,765,4.226,766,2.892,767,4.973,768,5.692,769,4.973,770,3.396,771,4.973,772,3.974,773,3.396,774,5.884,775,3.396,776,4.973,777,3.396,778,4.973,779,3.396,780,3.396]],["title/modules/CommonModule.html",[177,1.157,382,2.786]],["body/modules/CommonModule.html",[3,0.094,4,0.108,5,0.094,8,0.148,21,0.011,27,0.317,28,0.869,31,0.153,32,0.171,33,0.008,34,0.008,56,0.918,59,3.2,77,1.665,147,3.245,177,2.264,179,2.044,180,2.109,181,2.328,182,2.328,183,2.178,184,3.18,185,3.18,194,5.36,200,2.981,201,2.328,202,2.109,205,2.882,208,4.582,221,5.336,382,5.858,387,2.499,397,3.856,403,5.391,430,4.166,781,4.582,782,4.582,783,5.213,784,4.582,785,4.903,786,5.133,787,4.903,788,4.508,789,3.798,790,5.213,791,6.207,792,6.207,793,5.868,794,5.213,795,4.582,796,5.213,797,4.166,798,3.856,799,3.856,800,2.933,801,2.933]],["title/injectables/ConvertUtilsService.html",[0,0.692,785,2.402]],["body/injectables/ConvertUtilsService.html",[0,1.079,2,1.707,3,0.094,4,0.107,5,0.094,8,0.208,16,0.814,21,0.011,27,0.189,28,0.865,31,0.196,32,0.12,33,0.008,34,0.008,41,0.42,42,1.345,49,0.699,51,1.382,52,0.961,53,0.517,54,0.961,58,1.906,65,0.922,70,1.567,83,1.382,113,1.446,115,1.758,116,2.219,286,1.937,310,1.485,456,4.355,481,1.659,785,3.747,802,6.463,803,4.151,804,4.346,805,3.446,806,5.855,807,5.855,808,6.661,809,6.661,810,6.661,811,5.194,812,6.818,813,6.661,814,5.855,815,5.855,816,5.324,817,6.661,818,7.757,819,7.757,820,6.661,821,7.757,822,5.855,823,6.661,824,6.661,825,5.194,826,7.428,827,6.818,828,5.355,829,6.661,830,5.855,831,5.194,832,3.059,833,5.194,834,2.584,835,5.194,836,5.194,837,6.661,838,6.661,839,5.194,840,5.194]],["title/injectables/CookieService.html",[0,0.692,383,2.515]],["body/injectables/CookieService.html",[0,0.987,2,1.489,3,0.082,4,0.093,5,0.082,8,0.209,16,0.83,21,0.011,27,0.279,28,0.755,31,0.179,32,0.105,33,0.007,34,0.007,41,0.367,42,1.23,45,1.946,48,4.088,49,0.772,51,1.526,52,1.061,53,0.571,54,1.061,58,1.743,65,0.888,70,1.486,74,2.442,83,1.526,85,2.119,93,4.18,104,1.894,112,1.777,113,1.262,115,1.196,116,2.261,117,4.48,234,2.919,256,1.696,263,4.48,286,1.767,287,5.314,294,5.077,296,5.441,300,4.346,302,4.868,348,2.804,383,3.587,407,5.441,785,4.542,798,3.353,799,3.353,841,3.984,842,6.091,843,6.091,844,6.091,845,3.984,846,4.533,847,6.091,848,4.533,849,6.091,850,5.879,851,6.091,852,5.441,853,6.091,854,4.533,855,4.868,856,6.091,857,6.091,858,4.533,859,5.354,860,6.091,861,5.676,862,3.984,863,8.074,864,4.533,865,2.255,866,4.533,867,5.354,868,5.354,869,3.623,870,4.533,871,6.091,872,4.533,873,6.091,874,4.505,875,7.356,876,4.533,877,4.533,878,4.868,879,6.091,880,6.091,881,5.354,882,4.533,883,4.533]],["title/classes/CreateCartItemDto.html",[31,0.125,575,2.786]],["body/classes/CreateCartItemDto.html",[3,0.078,4,0.089,5,0.078,8,0.122,16,0.852,21,0.011,27,0.214,31,0.197,32,0.1,33,0.007,34,0.007,41,0.349,49,0.757,53,0.63,54,0.85,56,1.039,65,0.912,108,2.54,116,1.687,123,1.236,241,1.556,242,2.611,267,2.24,281,2.516,283,1.642,310,1.663,352,2.359,421,2.175,481,2.685,492,1.291,499,2.828,526,4.669,528,3.602,531,3.628,532,4.798,541,3.101,547,4.198,549,3.049,550,3.049,563,2.544,564,2.544,575,5.433,581,3.89,602,5.296,884,6.634,885,3.195,886,2.545,887,3.847,888,3.452,889,4.319,890,3.89,891,3.876,892,5.083,893,4.819,894,4.588,895,6.487,896,4.319,897,4.319,898,3.177,899,2.726,900,4.319,901,4.319,902,5.182,903,4.319,904,4.319,905,3.847,906,4.712,907,5.518,908,4.486,909,4.964,910,5.899,911,4.712,912,2.07,913,4.319,914,3.796]],["title/classes/CreateEventDto.html",[31,0.125,915,2.786]],["body/classes/CreateEventDto.html",[3,0.05,4,0.057,5,0.05,8,0.247,16,0.848,21,0.011,27,0.154,31,0.152,32,0.064,33,0.005,34,0.005,41,0.222,49,0.751,53,0.637,65,0.908,116,1.213,123,0.786,131,2.385,241,2.163,267,2.223,281,2.478,283,1.18,286,1.855,310,1.514,352,2.352,421,1.564,456,2.896,492,0.928,530,1.662,532,2.385,684,4.137,690,2.934,816,4.651,886,1.83,887,2.766,890,3.873,891,4.02,898,2.284,899,1.96,908,4.581,912,1.316,915,5.35,916,6.453,917,2.031,918,5.709,919,5.709,920,5.709,921,6.593,922,6.102,923,4.641,924,5.103,925,4.148,926,3.726,927,2.746,928,3.135,929,8.081,930,8.081,931,8.081,932,6.064,933,7.206,934,5.593,935,7.251,936,8.64,937,8.64,938,8.081,939,8.081,940,8.081,941,5.312,942,3.829,943,2.746,944,3.135,945,2.746,946,3.135,947,5.82,948,5.82,949,2.746,950,2.746,951,5.115,952,5.312,953,5.312,954,2.746,955,2.746,956,2.746,957,5.176,958,2.746,959,3.135,960,2.746,961,2.746,962,2.934,963,3.135,964,2.414,965,2.414,966,5.026,967,4.854,968,1.901,969,4.651,970,3.135,971,2.746,972,2.746,973,2.746,974,2.746,975,2.746]],["title/classes/CreateReservationDetailsDto.html",[31,0.125,976,2.786]],["body/classes/CreateReservationDetailsDto.html",[3,0.064,4,0.073,5,0.064,8,0.17,16,0.858,21,0.011,27,0.186,31,0.177,32,0.082,33,0.006,34,0.006,41,0.285,49,0.766,53,0.635,54,1.112,65,0.918,116,1.463,123,1.009,172,4.165,241,2.194,244,2.446,267,2.267,281,2.512,283,1.423,286,1.747,310,1.633,352,2.37,421,1.886,481,2.61,492,1.119,499,2.585,530,3.321,531,3.614,541,3.089,547,3.932,549,2.644,550,2.644,563,2.077,564,2.077,581,3.916,582,2.539,834,2.991,886,2.207,887,3.335,888,4.085,890,3.916,891,3.836,892,5.031,893,4.769,894,3.883,895,6.531,898,2.754,899,2.363,905,4.302,906,4.085,907,4.844,908,4.547,911,4.085,912,1.69,914,4.493,923,4.71,925,4.214,932,3.781,942,3.781,966,4.805,967,4.329,976,5.425,977,4.912,978,6.616,979,2.609,980,3.527,981,8.692,982,7.182,983,8.172,984,3.527,985,3.527,986,3.527,987,3.527,988,3.527,989,3.527,990,3.1]],["title/classes/CreateReservationDto.html",[31,0.125,991,3.158]],["body/classes/CreateReservationDto.html",[3,0.08,4,0.092,5,0.08,8,0.126,16,0.858,21,0.011,27,0.218,31,0.2,32,0.103,33,0.007,34,0.007,41,0.36,49,0.766,53,0.635,56,1.572,65,0.918,81,1.919,113,2.275,116,2.088,123,1.271,242,1.867,244,2.338,245,3.239,267,2.267,281,2.53,283,1.674,310,1.706,481,2.61,492,1.316,499,2.861,528,2.779,529,5.225,530,2.357,724,2.779,886,2.595,887,3.922,888,4.804,890,3.916,891,4.065,892,5.127,893,4.86,894,4.297,898,3.239,907,5.276,908,4.658,912,2.13,926,3.906,942,3.287,966,5.443,967,4.213,991,6.192,992,6.7,993,3.287,994,5.225,995,8.447,996,4.444,997,6.011,998,6.011,999,7.182,1000,6.53,1001,4.444,1002,4.444,1003,4.444,1004,6.011]],["title/classes/CreateTableCartItems1712661230450.html",[31,0.125,1005,3.412]],["body/classes/CreateTableCartItems1712661230450.html",[3,0.082,4,0.093,5,0.082,8,0.195,21,0.011,27,0.221,31,0.133,32,0.105,33,0.007,34,0.007,41,0.366,42,1.229,43,2.03,49,0.639,51,1.263,52,0.878,53,0.596,54,0.878,59,2.917,65,0.509,66,2.047,69,2.718,70,1.229,71,1.791,82,1.074,83,1.263,97,2.696,101,2.667,123,1.296,126,4.245,128,3.424,133,2.718,134,3.705,135,4.257,136,3.149,137,3.411,138,3.28,139,4.675,141,3.149,144,3.653,146,2.284,147,3.072,148,3.803,149,3.962,150,3.28,156,2.44,158,4.35,161,4.136,163,1.955,164,2.718,165,3.968,173,2.342,236,3.426,241,1.606,242,2.582,243,3.524,259,2.713,318,3.28,351,1.695,420,1.891,435,3.179,455,1.955,493,3.705,495,2.17,505,2.628,506,2.814,528,2.814,529,2.801,530,1.776,531,1.955,532,2.547,541,2.537,549,3.149,578,3.028,582,2.118,756,2.253,766,3.426,805,3.149,894,4.33,899,2.093,1005,4.865,1006,6.044,1007,3.619,1008,6.772,1009,3.28,1010,3.28,1011,3.585,1012,3.28,1013,3.424,1014,3.424,1015,4.528,1016,3.28,1017,3.28,1018,3.424,1019,3.28,1020,3.028,1021,4.528,1022,3.28,1023,3.28,1024,3.028,1025,5.438,1026,3.28,1027,3.28,1028,3.134,1029,2.955,1030,1.955,1031,2.022,1032,4.528,1033,3.619,1034,2.547,1035,2.547,1036,3.134,1037,2.547,1038,2.547]],["title/classes/CreateTableCarts1712661221574.html",[31,0.125,1039,3.412]],["body/classes/CreateTableCarts1712661221574.html",[3,0.087,4,0.1,5,0.087,8,0.201,21,0.011,27,0.175,31,0.142,32,0.112,33,0.007,34,0.007,41,0.391,42,1.283,43,2.067,49,0.667,51,1.318,52,0.916,53,0.493,54,0.916,56,1.119,65,0.542,66,1.977,69,2.836,70,1.283,71,1.837,82,1.145,83,1.318,97,2.491,108,2.145,123,1.381,126,4.305,128,2.716,133,2.836,134,3.825,135,4.335,136,3.286,137,3.256,138,3.423,139,4.712,141,3.286,144,3.72,146,2.343,147,3.151,148,3.902,149,4.064,150,3.423,156,2.601,158,4.381,161,3.994,162,2.402,163,2.084,165,2.497,173,2.497,236,3.368,242,2.717,259,2.783,324,3.16,351,1.769,420,1.973,435,3.282,455,2.084,491,3.929,493,2.601,495,2.314,505,2.742,506,2.937,578,3.16,582,2.21,756,2.402,766,3.368,805,3.286,894,2.843,1009,3.423,1010,3.423,1016,3.423,1017,3.423,1018,3.573,1019,3.423,1020,3.16,1022,3.423,1023,3.423,1024,3.16,1026,3.423,1027,4.064,1030,2.084,1031,2.156,1034,2.716,1035,2.716,1036,3.341,1038,2.716,1039,5.076,1040,6.24,1041,3.858,1042,5.583,1043,4.828,1044,4.828,1045,4.828]],["title/classes/CreateTableEventPrices1712642603715.html",[31,0.125,1046,3.412]],["body/classes/CreateTableEventPrices1712642603715.html",[3,0.084,4,0.095,5,0.084,8,0.197,21,0.011,27,0.224,31,0.136,32,0.107,33,0.007,34,0.007,41,0.374,42,1.247,43,2.042,49,0.648,51,1.281,52,0.891,53,0.6,54,0.891,59,2.959,65,0.52,66,2.065,69,2.757,70,1.247,71,1.806,82,1.097,83,1.281,97,2.421,101,2.724,123,1.323,126,4.265,128,2.602,133,2.757,134,3.745,135,4.283,136,3.194,137,3.432,138,3.327,139,4.687,141,3.194,144,3.675,146,2.304,147,3.098,148,3.836,149,3.996,150,3.327,156,2.492,158,4.36,161,2.602,163,1.997,164,2.757,165,3.595,173,2.393,236,3.45,241,2.098,259,2.736,293,1.815,351,1.719,435,3.213,530,3.03,531,1.997,541,2.564,549,4.112,550,3.194,578,3.072,582,2.148,756,2.301,766,3.45,805,3.194,894,3.636,899,2.138,1009,3.327,1010,3.327,1011,3.636,1012,3.327,1013,3.473,1014,3.473,1016,3.327,1017,3.327,1018,3.473,1019,3.327,1020,3.072,1022,3.327,1023,3.327,1024,3.072,1025,5.485,1026,3.327,1027,3.327,1028,3.201,1029,3.018,1030,1.997,1031,2.065,1033,3.697,1034,2.602,1035,2.602,1036,3.201,1037,3.91,1038,2.602,1046,4.934,1047,6.109,1048,3.697,1049,7.475,1050,4.625,1051,4.625,1052,4.625,1053,4.065]],["title/classes/CreateTableEvents1712572717258.html",[31,0.125,1054,3.412]],["body/classes/CreateTableEvents1712572717258.html",[3,0.082,4,0.093,5,0.082,8,0.195,21,0.011,27,0.221,31,0.133,32,0.105,33,0.007,34,0.007,41,0.367,42,1.23,43,2.03,49,0.639,51,1.264,52,0.879,53,0.596,54,0.879,59,2.919,65,0.509,66,2.048,69,2.72,70,1.23,71,1.792,82,1.075,83,1.264,97,1.777,101,2.669,123,1.297,126,4.246,133,2.72,134,3.707,135,4.258,136,3.151,137,3.412,138,3.282,139,4.675,141,3.151,144,3.654,146,2.285,147,3.073,148,3.805,149,3.964,150,3.282,156,2.442,158,4.35,164,2.72,165,4.177,173,2.345,236,3.427,241,1.941,259,2.714,351,1.696,420,2.455,435,3.181,455,1.957,495,2.172,498,2.255,505,3.176,506,2.816,541,1.673,549,3.151,578,3.03,582,2.119,756,2.255,766,3.427,805,3.151,834,3.66,894,4.332,899,2.096,918,3.137,919,3.137,920,3.137,921,3.623,922,3.353,923,2.55,924,2.804,925,3.423,944,4.505,1009,3.282,1010,3.282,1011,3.587,1012,3.282,1013,3.427,1014,3.427,1016,3.282,1017,3.282,1018,3.427,1019,3.282,1020,3.03,1022,3.282,1023,3.282,1024,3.03,1026,3.282,1027,3.282,1029,2.958,1030,1.957,1031,2.024,1034,2.55,1035,2.55,1037,4.833,1038,2.55,1054,4.868,1055,6.047,1056,3.623,1057,5.354,1058,5.354,1059,4.533,1060,4.533,1061,5.879,1062,3.623,1063,4.533,1064,4.533,1065,2.958,1066,4.505,1067,3.623,1068,3.623]],["title/classes/CreateTableReservationDetails1712751776641.html",[31,0.125,1069,3.412]],["body/classes/CreateTableReservationDetails1712751776641.html",[3,0.082,4,0.093,5,0.082,8,0.194,21,0.011,27,0.22,31,0.132,32,0.104,33,0.007,34,0.007,41,0.364,42,1.225,43,2.027,49,0.637,51,1.258,52,0.875,53,0.595,54,0.875,59,2.907,65,0.506,66,2.043,69,3.522,70,1.225,71,1.787,82,1.068,83,1.258,97,2.689,101,2.653,123,1.289,126,4.24,128,3.412,130,2.865,133,2.708,134,3.695,135,4.25,136,3.138,137,3.405,138,3.268,139,4.672,141,3.138,144,3.647,146,2.279,147,3.065,148,3.795,149,3.953,150,3.268,156,2.427,158,4.347,161,4.127,163,2.619,164,2.708,165,4.08,172,3.412,173,2.33,236,3.42,241,1.601,244,2.099,259,2.707,351,1.689,420,2.13,435,3.171,455,1.945,495,2.159,505,2.619,506,2.804,530,1.766,531,1.945,541,2.53,549,3.138,578,3.018,582,2.11,756,2.241,766,3.42,805,3.138,834,2.241,899,2.083,923,2.534,925,2.241,1009,3.268,1010,3.268,1011,3.572,1012,3.268,1013,3.412,1014,3.412,1016,3.268,1017,3.268,1018,3.412,1019,3.268,1020,3.018,1022,3.268,1023,3.268,1024,3.018,1025,5.427,1026,3.268,1027,3.268,1028,3.117,1029,2.939,1030,1.945,1031,2.011,1033,3.6,1034,2.534,1035,2.534,1036,4.198,1037,2.534,1038,2.534,1065,2.939,1066,3.332,1069,4.848,1070,6.028,1071,3.6,1072,7.441,1073,3.958,1074,4.504,1075,4.504,1076,3.958,1077,4.504,1078,3.117,1079,4.475]],["title/classes/CreateTableReservations1712661230451.html",[31,0.125,1080,3.412]],["body/classes/CreateTableReservations1712661230451.html",[3,0.083,4,0.095,5,0.083,8,0.197,21,0.011,27,0.167,31,0.135,32,0.107,33,0.007,34,0.007,41,0.372,42,1.243,43,2.039,49,0.646,51,1.276,52,0.887,53,0.478,54,0.887,56,1.084,59,2.949,65,0.517,66,1.93,69,2.747,70,1.243,71,1.802,82,1.091,83,1.276,97,2.718,108,2.095,123,1.316,126,4.26,128,3.461,130,3.597,133,2.747,134,3.735,135,4.277,136,3.182,137,3.426,138,3.315,139,4.684,141,3.182,144,3.669,146,2.299,147,3.092,148,3.828,149,3.987,150,3.315,156,2.479,158,4.357,161,4.163,162,2.289,163,2.656,164,3.304,165,4.192,167,2.846,170,2.846,172,2.289,173,2.38,236,3.304,242,1.911,244,2.271,247,2.949,248,2.57,259,2.73,351,1.713,420,1.911,435,3.205,455,1.986,495,2.205,505,2.656,506,2.844,528,2.844,529,4.288,578,3.061,582,2.574,756,2.289,766,3.304,805,3.182,1008,3.677,1009,3.315,1010,3.315,1011,3.623,1012,3.315,1013,3.461,1014,3.461,1016,3.315,1017,3.315,1018,3.461,1019,3.315,1020,3.061,1022,3.315,1023,3.315,1024,3.061,1026,3.315,1027,3.315,1030,1.986,1031,2.054,1034,2.588,1035,2.588,1038,2.588,1078,3.184,1079,5.033,1080,4.917,1081,6.092,1082,3.677,1083,4.601,1084,4.601,1085,4.601]],["title/classes/CreateTableTickets1712717719010.html",[31,0.125,1086,3.412]],["body/classes/CreateTableTickets1712717719010.html",[3,0.086,4,0.097,5,0.086,8,0.199,21,0.011,27,0.172,31,0.139,32,0.11,33,0.007,34,0.007,41,0.382,42,1.265,43,2.055,49,0.658,51,1.3,52,0.903,53,0.486,54,0.903,59,3.002,65,0.531,66,1.956,69,2.797,70,1.265,71,1.822,82,1.121,83,1.3,97,2.456,120,4.335,123,1.352,126,4.285,128,2.659,130,1.975,131,4.862,133,2.797,134,3.786,135,4.31,136,3.24,137,3.453,138,3.375,139,4.7,141,3.24,144,3.698,146,2.324,147,3.125,148,3.869,149,4.031,150,3.375,156,2.547,158,4.371,161,3.952,163,2.041,164,2.797,165,3.869,170,2.924,172,3.495,173,2.445,236,3.34,244,1.792,247,3.833,259,2.76,351,1.744,435,3.248,578,3.116,582,2.602,756,2.352,766,3.34,805,3.24,1009,3.375,1010,3.375,1011,3.689,1012,3.375,1013,3.524,1014,3.524,1016,3.375,1017,3.375,1018,3.524,1019,3.375,1020,3.116,1022,3.375,1023,3.375,1024,3.116,1026,3.375,1027,3.375,1030,2.041,1031,2.111,1034,2.659,1035,2.659,1036,3.271,1038,2.659,1066,3.496,1079,3.084,1086,5.006,1087,6.175,1088,3.778,1089,5.506,1090,4.727,1091,4.727,1092,4.727,1093,3.084,1094,6.264,1095,3.084,1096,2.784]],["title/classes/CreateTableTransactions1712661230452.html",[31,0.125,1097,3.412]],["body/classes/CreateTableTransactions1712661230452.html",[3,0.083,4,0.095,5,0.083,8,0.196,21,0.011,27,0.223,31,0.135,32,0.106,33,0.007,34,0.007,41,0.371,42,1.241,43,2.038,49,0.645,51,1.275,52,0.886,53,0.599,54,0.886,56,1.082,59,2.944,65,0.516,66,2.059,69,2.743,70,1.241,71,1.801,82,1.089,83,1.275,97,2.409,101,2.704,108,2.092,123,1.313,126,4.258,128,2.583,133,2.743,134,3.731,135,4.274,136,3.178,137,3.424,138,3.31,139,4.683,141,3.178,144,3.667,146,2.297,147,3.089,148,3.825,149,3.984,150,3.31,156,2.474,158,4.356,161,3.895,162,2.284,163,1.982,164,3.092,165,3.825,167,2.84,168,4.841,173,2.375,236,3.442,245,3.984,248,3.089,259,2.728,351,1.711,420,1.908,435,3.201,455,1.982,495,2.2,505,2.652,506,2.84,578,3.056,582,2.572,756,2.284,766,3.442,805,3.178,899,2.122,994,2.84,1009,3.31,1010,3.31,1011,3.618,1012,3.31,1013,3.456,1014,3.456,1016,3.31,1017,3.31,1018,3.456,1019,3.31,1020,3.056,1022,3.31,1023,3.31,1024,3.056,1026,3.31,1027,3.31,1029,2.995,1030,1.982,1031,2.05,1034,2.583,1035,2.583,1038,2.583,1079,4.009,1097,4.91,1098,6.086,1099,3.669,1100,3.31,1101,4.591,1102,4.591,1103,6.499,1104,3.669,1105,4.591,1106,4.591,1107,3.396,1108,3.396,1109,3.396]],["title/classes/CreateTableUsers1711085051379.html",[31,0.125,1110,3.412]],["body/classes/CreateTableUsers1711085051379.html",[3,0.082,4,0.094,5,0.082,8,0.195,21,0.011,27,0.222,31,0.133,32,0.105,33,0.007,34,0.007,41,0.368,42,1.232,43,2.031,49,0.64,51,1.266,52,0.88,53,0.596,54,0.88,56,1.423,59,2.924,65,0.51,66,2.05,69,2.724,70,1.232,71,1.793,82,1.077,83,1.266,97,1.781,101,2.675,108,1.373,123,1.3,126,4.248,133,2.724,134,3.711,135,4.261,136,3.155,137,3.178,138,3.287,139,4.677,141,3.155,144,3.656,146,2.287,147,3.076,148,3.808,149,3.967,150,3.287,156,2.448,158,4.351,162,4.218,165,3.808,173,2.35,234,2.177,236,3.429,259,2.716,274,3.035,276,2.675,278,2.675,283,1.699,351,1.699,353,3.874,416,2.973,420,2.51,435,3.184,453,3.63,455,1.961,481,1.451,498,3.035,505,2.633,506,2.82,578,3.035,582,2.122,756,2.26,766,3.429,805,3.155,834,3.035,894,4.056,899,2.1,1009,3.287,1010,3.287,1011,3.592,1012,3.287,1013,3.432,1014,3.432,1016,3.287,1017,3.287,1018,3.432,1019,3.287,1020,3.035,1022,3.287,1023,3.287,1024,3.035,1026,3.287,1027,3.287,1029,2.964,1030,1.961,1031,2.028,1034,2.555,1035,2.555,1038,2.555,1065,5.011,1110,4.875,1111,6.053,1112,3.63,1113,6.1,1114,4.875,1115,4.542,1116,4.542,1117,6.471,1118,3.63,1119,4.542,1120,4.542,1121,3.992,1122,3.36,1123,3.144,1124,3.992,1125,3.63,1126,3.63,1127,3.992]],["title/classes/CreateTransactionDto.html",[31,0.125,1128,2.955]],["body/classes/CreateTransactionDto.html",[3,0.126,4,0.143,5,0.126,21,0.01,31,0.204,32,0.161,33,0.009,34,0.009,123,1.987,1128,5.499,1129,6.104,1130,5.137]],["title/modules/DatabaseModule.html",[177,1.157,191,2.955]],["body/modules/DatabaseModule.html",[3,0.099,4,0.113,5,0.099,8,0.155,12,4.448,16,0.574,21,0.011,27,0.274,28,0.912,31,0.161,32,0.127,33,0.008,34,0.008,43,1.406,48,4.302,52,0.789,53,0.535,60,3.873,74,2.948,77,1.748,82,1.787,100,4.66,137,2.972,164,3.074,177,2.209,179,2.145,191,4.765,205,3.252,206,6.021,223,3.787,224,3.078,236,3.898,274,3.748,387,2.622,488,2.954,772,4.373,878,4.373,1012,2.948,1131,5.471,1132,6.051,1133,6.051,1134,4.809,1135,5.471,1136,4.809,1137,4.809,1138,4.809,1139,6.885,1140,5.092,1141,6.051,1142,6.051,1143,6.051,1144,5.572,1145,6.885,1146,6.021,1147,6.885,1148,6.622,1149,6.885,1150,6.885,1151,6.885,1152,7.534,1153,6.885,1154,6.885,1155,3.385,1156,4.047,1157,4.047]],["title/injectables/EncryptionService.html",[0,0.692,403,2.641]],["body/injectables/EncryptionService.html",[0,0.921,2,1.346,3,0.074,4,0.084,5,0.074,8,0.21,12,3.967,16,0.865,21,0.011,27,0.269,28,0.683,31,0.167,32,0.095,33,0.007,34,0.007,41,0.331,42,1.148,43,2.199,49,0.778,51,1.463,52,1.017,53,0.548,54,1.017,56,1.467,57,1.461,58,1.627,65,0.935,66,2.338,70,1.664,71,2.085,81,1.769,83,1.537,97,3.231,113,1.583,115,1.955,274,4.356,275,4.205,283,1.583,286,1.883,299,4.742,318,3.063,403,3.517,406,4.205,449,4.997,765,3.71,804,3.71,874,5.928,898,3.063,1066,5.216,1093,3.71,1095,4.601,1096,4.153,1155,3.517,1158,3.601,1159,4.997,1160,7.052,1161,5.685,1162,5.685,1163,5.685,1164,5.685,1165,4.097,1166,7.153,1167,5.685,1168,5.67,1169,5.685,1170,4.097,1171,6.127,1172,5.67,1173,5.685,1174,4.997,1175,5.685,1176,5.685,1177,4.097,1178,5.685,1179,4.544,1180,5.685,1181,5.685,1182,4.097,1183,5.685,1184,6.127,1185,5.685,1186,7.052,1187,6.127,1188,7.052,1189,5.685,1190,4.097,1191,4.997,1192,4.997,1193,5.685,1194,4.205,1195,4.097,1196,5.685,1197,4.097,1198,4.097,1199,4.097,1200,3.601,1201,4.097]],["title/entities/Event.html",[57,1.097,241,1.127]],["body/entities/Event.html",[3,0.055,4,0.062,5,0.055,8,0.186,16,0.912,21,0.011,27,0.239,31,0.134,32,0.07,33,0.005,34,0.005,41,0.495,49,0.863,53,0.687,57,1.572,65,0.975,82,0.717,212,1.63,234,2.932,241,2.32,242,1.417,243,2.186,244,1.305,267,2.553,279,2.36,284,1.683,286,1.652,310,1.648,420,2.534,455,2.834,456,4.089,481,1.755,488,1.186,490,1.97,492,0.999,494,3.199,495,3.147,496,2.822,498,3.044,499,1.789,500,3.802,504,4.065,505,3.184,506,3.191,510,2.27,515,3.308,518,1.871,519,2.566,522,4.958,523,4.773,530,2.399,532,3.441,541,2.027,543,3.646,567,4.01,581,2.186,582,1.587,627,3.489,628,1.781,629,1.781,630,1.781,650,5.299,657,4.544,690,3.157,696,3.646,832,2.687,834,3.434,918,4.544,919,3.802,920,4.544,921,4.39,922,4.063,923,3.09,924,4.061,925,3.266,928,3.374,932,3.374,933,4.01,941,4.889,944,4.525,946,3.374,959,3.374,964,2.658,965,2.658,1065,2.977,1067,4.39,1068,4.39,1079,4.504,1109,3.374,1168,3.374,1202,2.658,1203,5.493,1204,3.646,1205,3.646,1206,3.024,1207,4.01,1208,3.024,1209,3.024,1210,4.562,1211,3.024,1212,4.562,1213,6.118,1214,3.024,1215,4.562,1216,3.024,1217,5.377,1218,3.024,1219,4.562,1220,4.562,1221,4.284,1222,4.562,1223,5.493,1224,3.024,1225,4.01,1226,3.024,1227,4.562,1228,3.024,1229,4.562,1230,4.562,1231,4.01,1232,3.646,1233,3.024,1234,4.01,1235,3.024,1236,4.525,1237,4.01,1238,3.024,1239,4.562,1240,4.01,1241,3.024,1242,4.562,1243,3.024,1244,3.024,1245,4.562,1246,3.646,1247,3.024,1248,4.562,1249,2.417,1250,3.024]],["title/entities/EventPrice.html",[57,1.097,1221,2.786]],["body/entities/EventPrice.html",[3,0.082,4,0.094,5,0.082,8,0.129,16,0.863,21,0.011,27,0.251,31,0.18,32,0.106,33,0.007,34,0.007,41,0.558,49,0.774,52,1.063,53,0.646,57,1.894,65,0.923,82,1.081,241,2.368,267,2.29,310,1.599,481,2.625,488,1.787,490,2.639,492,1.338,496,3.781,498,3.041,499,2.397,504,2.684,515,3.533,519,3.439,521,4.267,523,4.452,530,3.452,531,3.731,533,3.37,541,2.256,547,4.356,549,3.162,550,3.162,559,4.774,562,2.455,563,2.684,564,2.684,895,6.567,899,3.555,999,7.223,1053,7.456,1221,5.727,1225,4.005,1251,6.757,1252,3.642,1253,4.557,1254,4.557,1255,8.218,1256,4.557,1257,4.557,1258,4.557,1259,4.557]],["title/injectables/EventPricesService.html",[0,0.692,647,2.515]],["body/injectables/EventPricesService.html",[0,0.807,2,1.118,3,0.062,4,0.07,5,0.062,8,0.204,16,0.831,21,0.011,27,0.271,28,0.567,31,0.146,32,0.079,33,0.006,34,0.006,41,0.275,42,1.006,43,2.139,45,1.591,47,3.443,49,0.757,51,1.496,52,1.04,53,0.605,54,1.04,58,1.425,65,0.92,66,2.38,70,1.599,71,2.027,76,1.632,77,1.087,82,0.807,83,1.584,85,2.508,104,2.883,105,3.054,112,1.953,113,2.007,115,1.555,231,3.354,241,2.359,256,1.387,290,3.081,293,2.463,310,1.766,324,2.478,351,1.387,352,1.387,426,3.704,530,3.435,531,3.296,541,3.14,547,3.718,550,3.852,562,1.834,563,2.005,564,2.005,586,2.577,646,4.077,647,2.934,650,5.855,656,2.802,688,2.356,692,2.721,918,4.487,928,5.647,934,3.448,1221,2.221,1249,2.721,1260,5.951,1261,2.721,1262,4.982,1263,4.982,1264,4.379,1265,4.982,1266,4.982,1267,3.404,1268,3.404,1269,4.982,1270,4.982,1271,3.404,1272,5.699,1273,4.487,1274,4.982,1275,4.982,1276,3.404,1277,4.982,1278,4.379,1279,3.404,1280,4.982,1281,4.982,1282,3.404,1283,4.982,1284,4.982,1285,4.982,1286,6.484,1287,3.404,1288,4.982,1289,4.379,1290,2.992,1291,3.981,1292,2.992,1293,3.404,1294,5.892,1295,3.404,1296,3.404,1297,3.404,1298,4.982,1299,3.404,1300,3.404,1301,3.404,1302,3.404,1303,4.982,1304,3.404,1305,3.404,1306,3.404,1307,3.404,1308,3.404,1309,3.404,1310,3.404,1311,3.404,1312,3.404,1313,3.404,1314,2.992]],["title/injectables/EventSalesService.html",[0,0.692,1315,2.786]],["body/injectables/EventSalesService.html",[0,0.848,2,1.197,3,0.066,4,0.075,5,0.066,8,0.201,16,0.816,21,0.011,27,0.276,28,0.607,31,0.154,32,0.084,33,0.006,34,0.006,41,0.295,42,1.057,43,2.035,45,1.671,47,3.094,49,0.775,51,1.471,52,1.022,53,0.59,54,1.022,58,1.497,65,0.829,66,2.29,70,1.571,71,1.929,76,1.746,77,1.164,82,0.864,83,1.577,85,2.974,104,1.522,112,1.429,113,1.015,115,0.961,127,3.87,131,4.375,147,2.186,212,1.963,231,2.707,241,2.22,242,2.079,243,3.643,256,1.457,286,1.703,293,1.968,310,1.734,324,3.33,352,1.974,420,1.132,421,1.344,426,2.603,481,1.956,492,1.145,494,3.165,518,2.254,528,1.684,530,3.05,531,3.186,532,4.734,541,2.615,547,1.963,550,3.817,563,2.146,564,2.146,581,2.508,587,4.14,602,3.414,646,3.621,665,3.621,688,2.521,689,4.599,690,4.632,696,4.182,697,3.202,834,2.603,935,4.599,1231,3.202,1236,5.753,1237,3.202,1260,6.075,1273,3.621,1315,3.995,1316,2.912,1317,4.182,1318,6.123,1319,6.123,1320,5.233,1321,5.233,1322,5.233,1323,3.202,1324,4.702,1325,3.643,1326,3.643,1327,3.643,1328,5.233,1329,5.233,1330,5.883,1331,5.233,1332,5.233,1333,3.643,1334,3.87,1335,5.233,1336,2.707,1337,3.414,1338,5.233,1339,3.643,1340,7.379,1341,6.693,1342,5.233,1343,5.233,1344,5.233,1345,5.233,1346,7.088,1347,3.643,1348,5.233,1349,4.182,1350,5.382,1351,4.599,1352,4.599,1353,4.599,1354,3.643,1355,5.233,1356,5.233,1357,2.695,1358,2.912,1359,2.521,1360,6.123,1361,3.643,1362,3.643,1363,4.599,1364,3.202,1365,3.643,1366,3.643,1367,5.233,1368,4.599,1369,6.693,1370,3.643,1371,3.643]],["title/controllers/EventsController.html",[250,1.974,1372,3.158]],["body/controllers/EventsController.html",[1,1.714,3,0.058,4,0.066,5,0.058,8,0.233,16,0.857,17,3.502,21,0.011,27,0.287,28,0.53,31,0.139,32,0.074,33,0.006,34,0.006,41,0.257,42,0.957,43,1.455,45,1.016,49,0.765,51,1.553,52,1.014,53,0.581,54,1.014,65,0.357,66,0.886,68,3.252,70,1.649,71,2.072,83,1.588,85,1.648,105,1.858,113,1.319,115,1.923,163,2.896,231,2.451,241,2.332,247,2.271,250,2.618,252,1.47,254,2.075,256,1.319,259,1.748,267,2.263,271,3.918,281,2.125,283,1.319,284,1.748,286,1.752,290,2.931,291,5.621,293,2.56,310,1.267,324,2.357,325,4.188,333,3.279,334,2.075,344,2.075,346,2.352,351,1.319,352,1.319,355,2.795,373,2.271,416,1.373,417,1.714,431,1.873,432,1.873,510,3.725,530,3.138,531,3.037,541,1.174,547,3.615,550,3.638,563,1.873,564,1.873,570,3.529,571,2.79,572,3.504,573,3.881,582,2.183,586,3.873,603,2.201,647,3.334,686,2.352,724,2.19,753,3.504,822,6.581,915,4.885,918,4.342,920,4.342,924,3.881,925,3.725,934,3.279,1037,4.55,1289,4.164,1324,3.502,1357,2.352,1358,2.542,1372,3.504,1373,2.795,1374,4.976,1375,5.662,1376,2.795,1377,5.662,1378,3.18,1379,3.18,1380,6.182,1381,4.738,1382,7.789,1383,4.738,1384,5.514,1385,4.885,1386,3.18,1387,6.274,1388,4.164,1389,2.795,1390,3.338,1391,3.957,1392,3.18,1393,3.245,1394,3.245,1395,4.738,1396,3.502,1397,2.665,1398,2.201,1399,3.786,1400,3.18,1401,3.279,1402,7.034,1403,3.18,1404,4.738,1405,3.18,1406,4.738,1407,2.795,1408,3.18,1409,3.18,1410,3.786,1411,2.542,1412,5.082,1413,3.18,1414,3.18,1415,4.738,1416,4.738,1417,2.665,1418,2.352,1419,3.881,1420,3.786,1421,1.789,1422,3.18,1423,4.188,1424,3.18,1425,3.18,1426,3.18,1427,3.18,1428,2.542,1429,3.18,1430,3.18,1431,2.542,1432,3.18,1433,2.542,1434,2.795,1435,3.18,1436,3.18,1437,3.18,1438,3.18]],["title/modules/EventsModule.html",[177,1.157,192,2.402]],["body/modules/EventsModule.html",[3,0.097,4,0.11,5,0.097,8,0.152,21,0.011,27,0.316,28,0.892,31,0.157,32,0.157,33,0.008,34,0.008,77,1.711,177,2.242,179,2.1,180,2.167,181,2.392,182,2.392,183,2.237,184,3.387,185,3.22,192,4.979,200,3.033,201,2.392,202,2.167,205,2.312,241,2.07,252,3.14,256,1.892,387,3.255,398,3.821,488,2.1,627,3.449,628,3.154,629,3.154,630,3.154,647,5.195,686,3.961,789,3.885,800,3.013,801,3.013,1037,3.821,1221,4.867,1249,4.28,1290,4.707,1315,5.756,1324,5.456,1357,3.961,1358,4.28,1372,5.802,1439,4.707,1440,4.707,1441,4.707,1442,5.356,1443,5.356,1444,4.707,1445,4.707]],["title/injectables/EventsService.html",[0,0.692,1324,2.641]],["body/injectables/EventsService.html",[0,0.678,2,0.888,3,0.049,4,0.056,5,0.049,8,0.202,16,0.846,21,0.011,27,0.276,28,0.45,31,0.123,32,0.063,33,0.005,34,0.005,41,0.219,42,0.845,43,2.165,45,1.337,47,2.667,49,0.784,51,1.476,52,1.026,53,0.567,54,1.077,58,1.197,65,0.947,66,2.407,68,3.052,70,1.627,71,2.053,76,1.295,77,0.863,82,0.641,83,1.516,85,2.685,104,2.973,105,2.927,112,2.262,113,1.982,115,1.817,163,2.212,234,2.455,241,2.364,256,1.165,259,1.544,281,1.995,283,1.165,284,1.544,286,1.263,290,2.589,293,2.503,310,1.688,324,2.082,346,1.998,351,1.165,352,1.918,373,2.765,375,2.159,420,0.839,421,0.997,426,3.105,435,2.667,456,1.344,487,2.159,492,0.916,495,1.295,498,2.082,510,2.87,541,2.303,571,2.465,572,3.096,573,3.861,582,2.007,586,3.415,603,1.87,646,2.897,647,4.055,656,2.354,686,1.998,688,1.87,692,4.094,724,2.667,753,3.096,766,2.576,785,3.874,787,3.874,789,2.667,797,2.159,798,1.998,799,1.998,800,1.52,801,1.52,828,1.763,865,2.082,915,4.643,920,2.897,922,1.998,924,2.589,925,3.781,1030,1.166,1031,1.869,1037,4.448,1067,2.159,1068,2.159,1207,3.679,1246,2.159,1264,3.679,1278,3.679,1314,3.679,1323,2.375,1324,2.589,1357,1.998,1368,3.679,1374,4.503,1376,3.679,1385,3.764,1388,3.679,1389,2.375,1390,3.105,1391,2.354,1393,2.984,1396,3.169,1397,2.354,1398,2.897,1401,2.897,1407,3.679,1410,3.345,1411,3.345,1412,5.035,1420,3.345,1421,1.52,1446,2.375,1447,5.123,1448,5.123,1449,4.185,1450,4.611,1451,4.503,1452,4.185,1453,2.702,1454,4.185,1455,4.185,1456,6.242,1457,2.702,1458,3.679,1459,4.185,1460,2.159,1461,3.679,1462,3.679,1463,2.702,1464,3.109,1465,2.354,1466,4.185,1467,2.702,1468,4.185,1469,2.702,1470,4.185,1471,2.702,1472,4.185,1473,2.702,1474,4.185,1475,2.702,1476,4.185,1477,4.185,1478,5.123,1479,5.769,1480,2.897,1481,1.87,1482,3.679,1483,2.702,1484,2.702,1485,2.702,1486,2.702,1487,2.702,1488,2.702,1489,2.702,1490,1.87,1491,1.998,1492,1.763,1493,1.998,1494,2.375,1495,1.763,1496,2.702,1497,1.671,1498,1.998,1499,1.998,1500,2.702,1501,2.702,1502,2.702,1503,4.185,1504,4.185,1505,2.702,1506,5.123,1507,2.375,1508,2.702,1509,2.702,1510,4.185,1511,2.702,1512,2.702,1513,4.185,1514,2.702,1515,2.702]],["title/classes/HttpExceptionFilter.html",[31,0.125,1516,3.412]],["body/classes/HttpExceptionFilter.html",[3,0.086,4,0.098,5,0.086,8,0.178,16,0.66,21,0.011,27,0.273,28,0.793,31,0.185,32,0.11,33,0.007,34,0.007,41,0.385,42,1.271,45,1.52,48,4.145,49,0.74,51,1.305,52,0.907,53,0.547,54,0.907,65,0.9,69,2.125,70,0.961,74,2.564,83,1.305,85,2.452,89,3.803,112,2.467,113,2.172,116,1.361,117,3.39,120,3.293,123,1.361,133,3.147,144,2.909,287,4.36,294,5.055,348,2.943,352,1.963,373,3.378,420,1.478,421,1.756,425,6.233,492,1.377,505,2.054,582,1.655,609,2.943,804,4.894,845,4.182,852,3.519,861,4.653,862,4.182,865,2.367,892,3.105,1031,2.125,1073,3.105,1100,4.041,1144,5.547,1157,3.519,1349,3.803,1394,3.254,1497,4.825,1516,5.028,1517,6.592,1518,6.592,1519,6.631,1520,3.803,1521,6.829,1522,7.5,1523,4.508,1524,6.292,1525,6.292,1526,6.292,1527,7.8,1528,4.758,1529,6.292,1530,6.292,1531,7.5,1532,4.653,1533,7.049,1534,3.803,1535,4.758,1536,4.182,1537,4.758,1538,4.758,1539,4.758,1540,4.758,1541,7.049,1542,4.758,1543,7.5,1544,4.758,1545,7.049,1546,4.182,1547,4.758,1548,4.758,1549,3.519,1550,4.758,1551,4.758,1552,4.182,1553,4.758,1554,4.758,1555,4.182,1556,4.182,1557,4.182,1558,4.758,1559,4.758,1560,4.758,1561,4.758,1562,4.758,1563,4.758,1564,4.758,1565,4.758,1566,4.758,1567,4.758,1568,4.758]],["title/classes/IdDto.html",[31,0.125,1569,3.158]],["body/classes/IdDto.html",[3,0.111,4,0.127,5,0.111,8,0.174,16,0.777,21,0.011,27,0.224,31,0.233,32,0.143,33,0.009,34,0.009,39,5.914,41,0.498,49,0.646,53,0.575,65,0.831,72,5.914,113,2.06,116,2.117,123,1.76,267,1.911,281,2.236,283,2.06,293,2.544,310,1.603,352,2.293,481,2.364,492,1.62,886,3.194,907,5.121,910,6.504,912,2.948,1569,6.329,1570,5.407,1571,6.151,1572,6.151,1573,7.399]],["title/classes/InvalidCredentialsException.html",[31,0.125,427,2.955]],["body/classes/InvalidCredentialsException.html",[3,0.114,4,0.13,5,0.114,8,0.178,16,0.788,21,0.011,25,4.319,27,0.229,28,1.049,31,0.22,32,0.146,33,0.009,34,0.009,45,2.56,49,0.661,112,2.942,113,2.311,123,1.801,235,5.031,261,4.895,336,5.031,425,6.632,427,5.954,458,5.549,1521,5.996,1574,6.594,1575,5.031,1576,5.996,1577,7.503,1578,6.295,1579,5.996,1580,6.295,1581,6.295,1582,6.295,1583,5.533]],["title/guards/IsCreatorGuard.html",[9,2.786,343,2.515]],["body/guards/IsCreatorGuard.html",[0,1.075,3,0.093,4,0.106,5,0.093,8,0.188,9,4.33,14,2.569,16,0.697,19,5.356,21,0.011,23,4.908,24,4.908,27,0.241,28,0.86,31,0.195,32,0.12,33,0.008,34,0.008,41,0.418,42,1.34,45,1.649,49,0.697,51,1.377,52,0.957,53,0.515,54,0.957,56,1.515,65,0.869,70,1.34,83,1.071,104,2.157,105,2.025,112,2.025,113,1.438,115,1.362,116,1.477,117,3.575,127,3.819,133,2.963,144,3.068,232,6.398,234,2.475,286,1.453,293,2.275,333,4.592,343,3.908,426,3.301,473,4.126,573,4.105,609,3.194,968,3.573,1031,3.274,1123,5.075,1155,4.105,1156,3.819,1433,5.303,1532,5.724,1584,3.819,1585,6.445,1586,4.126,1587,6.445,1588,7.201,1589,4.908,1590,6.636,1591,7.739,1592,7.036,1593,4.538,1594,7.201,1595,5.163,1596,5.832,1597,6.398,1598,5.163,1599,5.832,1600,6.802,1601,5.303,1602,4.126,1603,4.538,1604,5.163,1605,6.636,1606,5.163,1607,5.163,1608,7.739,1609,5.163,1610,4.538,1611,5.163,1612,4.126,1613,5.163,1614,5.163]],["title/interfaces/JWTTokens.html",[1615,1.843,1616,2.955]],["body/interfaces/JWTTokens.html",[3,0.09,4,0.102,5,0.09,8,0.14,13,3.635,14,3.215,15,4.329,16,0.888,21,0.011,32,0.15,33,0.008,34,0.008,41,0.401,53,0.657,54,1.099,56,1.342,62,5.273,64,4.045,65,0.95,93,4.106,102,4.472,263,4.6,286,1.869,293,1.457,300,3.342,310,1.69,416,3.412,469,5.57,481,2.524,490,2.789,492,1.414,499,1.943,581,2.375,828,4.216,1615,3.412,1616,5.856,1617,2.788,1618,3.96,1619,5.608,1620,7.122,1621,7.122,1622,4.779,1623,5.164,1624,3.96,1625,3.96,1626,5.273,1627,4.888,1628,2.918]],["title/interfaces/JwtPayload.html",[62,2.955,1615,1.843]],["body/interfaces/JwtPayload.html",[3,0.089,4,0.102,5,0.089,8,0.14,13,3.629,14,2.46,15,3.938,16,0.888,21,0.011,32,0.149,33,0.008,34,0.008,41,0.4,53,0.657,54,0.713,56,1.474,62,5.789,64,4.64,65,0.95,93,3.929,102,3.422,263,4.102,286,1.831,293,1.897,300,2.557,310,1.724,416,3.734,469,4.967,481,2.726,490,2.785,492,1.412,499,2.53,581,3.092,828,3.226,1615,3.409,1616,5.465,1617,2.781,1618,3.951,1619,4.465,1620,6.312,1621,6.312,1622,3.657,1623,3.951,1624,5.156,1625,5.156,1626,5.906,1627,5.351,1628,3.799]],["title/interfaces/KeyValuePairs.html",[1615,1.843,1629,3.412]],["body/interfaces/KeyValuePairs.html",[3,0.11,4,0.125,5,0.11,8,0.172,16,0.829,21,0.011,32,0.141,33,0.009,34,0.009,49,0.638,53,0.613,65,0.887,97,3.385,283,2.199,286,1.796,421,3.186,490,2.626,1615,3.173,1617,3.421,1629,6.712,1630,6.459,1631,4.861,1632,5.346,1633,5.346,1634,7.897,1635,7.897,1636,7.897,1637,7.897,1638,7.897,1639,7.897,1640,7.897,1641,6.082,1642,6.082,1643,6.459]],["title/classes/LoginDTO.html",[31,0.125,304,3.158]],["body/classes/LoginDTO.html",[3,0.103,4,0.117,5,0.103,8,0.161,16,0.84,21,0.011,27,0.206,31,0.225,32,0.131,33,0.008,34,0.008,41,0.458,49,0.739,53,0.622,56,1.478,65,0.79,116,2.013,123,1.621,261,4.591,267,2.186,273,4.87,274,4.232,275,5.205,281,2.419,283,1.959,286,1.837,304,5.921,352,2.336,353,4.876,492,1.54,886,3.038,890,3.837,891,3.983,893,4.353,898,3.792,908,4.72,912,2.715,1644,4.98,1645,4.98,1646,5.666,1647,5.921,1648,5.666,1649,6.117,1650,5.624]],["title/classes/PaginationAndFilterDto.html",[31,0.125,1390,2.124]],["body/classes/PaginationAndFilterDto.html",[3,0.083,4,0.095,5,0.083,8,0.131,16,0.899,21,0.011,27,0.252,31,0.217,32,0.107,33,0.007,34,0.007,41,0.373,49,0.834,52,0.889,53,0.675,54,1.145,115,1.626,116,1.763,123,1.319,175,4.264,243,3.55,267,2.467,281,1.862,283,1.716,286,1.826,310,1.756,352,2.48,421,2.273,459,4.924,492,1.349,832,3.628,886,2.66,890,3.55,906,3.685,907,4.802,909,6.094,911,3.685,912,2.21,951,5.415,967,4.292,990,5.415,1100,3.32,1390,3.065,1393,3.187,1394,3.831,1464,3.32,1651,4.052,1652,6.099,1653,6.099,1654,4.528,1655,5.546,1656,6.099,1657,6.481,1658,6.161,1659,4.61,1660,6.161,1661,4.61,1662,6.161,1663,6.161,1664,4.61,1665,6.161,1666,4.61,1667,4.924,1668,6.161,1669,5.415,1670,4.61,1671,5.478,1672,6.161,1673,4.61,1674,4.61,1675,6.161,1676,5.415,1677,4.052,1678,4.052,1679,3.685,1680,4.61]],["title/interfaces/Payload.html",[64,2.402,1615,1.843]],["body/interfaces/Payload.html",[3,0.098,4,0.112,5,0.098,8,0.154,13,3.848,16,0.871,21,0.011,27,0.197,32,0.125,33,0.008,34,0.008,41,0.438,53,0.644,56,1.388,64,5.012,65,0.932,93,3.404,293,2.011,310,1.721,416,3.783,417,4.377,422,6.295,431,3.19,432,3.19,481,2.768,490,2.953,492,1.498,499,2.683,581,3.279,1615,3.401,1617,3.047,1624,5.467,1625,5.467,1626,5.996,1627,5.42,1681,4.761,1682,6.013]],["title/modules/PaymentModule.html",[177,1.157,193,2.955]],["body/modules/PaymentModule.html",[3,0.108,4,0.123,5,0.108,21,0.011,27,0.312,28,0.994,31,0.175,32,0.138,33,0.008,34,0.008,56,1.051,77,1.905,81,2.575,177,2.122,179,2.339,180,2.413,181,2.663,182,2.663,183,2.492,184,3.38,185,3.38,193,6.161,195,4.577,197,4.779,198,5.003,200,3.243,201,2.663,202,2.413,205,3.135,211,4.128,217,4.411,219,4.411,387,2.858,397,4.411,786,5.225,1683,5.964,1684,5.964,1685,5.964,1686,5.964,1687,5.964,1688,5.964]],["title/interfaces/PaymentResult.html",[1615,1.843,1689,2.641]],["body/interfaces/PaymentResult.html",[3,0.085,4,0.097,5,0.085,8,0.134,16,0.88,21,0.011,27,0.227,32,0.145,33,0.007,34,0.007,41,0.382,53,0.651,54,1.122,65,0.942,130,3.25,244,2.226,245,4.76,246,3.081,286,1.75,287,2.921,310,1.51,373,3.365,490,3.031,492,1.37,499,2.454,515,2.263,561,2.656,994,5.123,1000,5.976,1020,2.349,1073,4.582,1076,5.666,1100,4.733,1336,2.442,1337,4.084,1465,4.377,1549,3.492,1615,3.522,1617,2.656,1689,5.395,1690,3.774,1691,6.172,1692,5.502,1693,5.502,1694,7.028,1695,6.39,1696,5.046,1697,3.081,1698,3.081,1699,5.754,1700,6.172,1701,4.15,1702,4.15]],["title/injectables/PaymentService.html",[0,0.692,786,2.515]],["body/injectables/PaymentService.html",[0,1.108,2,1.78,3,0.098,4,0.112,5,0.098,8,0.194,16,0.718,21,0.011,27,0.272,28,0.902,31,0.201,32,0.125,33,0.008,34,0.008,41,0.438,42,1.382,43,1.926,49,0.718,51,1.124,52,0.781,53,0.531,54,0.781,58,1.957,65,0.842,66,1.905,70,1.382,71,1.826,83,1.124,85,2.609,105,2.124,115,1.429,231,3.879,242,2.577,243,2.596,245,4.634,246,5.14,310,1.676,352,2.088,420,1.683,421,1.999,481,1.73,491,4.232,492,1.498,724,3.756,786,4.029,804,4.464,834,3.404,962,3.749,1076,3.534,1100,2.919,1334,5.06,1337,3.534,1465,3.848,1689,4.638,1696,3.35,1697,3.534,1698,3.534,1703,4.761,1704,7.499,1705,6.013,1706,6.841,1707,5.416,1708,5.452,1709,6.841,1710,7.499,1711,6.841,1712,5.416,1713,4.761,1714,5.416,1715,6.013,1716,7.499,1717,5.416,1718,4.006,1719,5.416,1720,6.841,1721,5.416,1722,5.416,1723,4.329]],["title/interfaces/ProcessPaymentResponse.html",[1615,1.843,1699,3.158]],["body/interfaces/ProcessPaymentResponse.html",[3,0.085,4,0.096,5,0.085,8,0.132,16,0.878,21,0.011,27,0.226,32,0.144,33,0.007,34,0.007,41,0.378,53,0.65,54,1.118,65,0.94,130,3.583,244,2.393,245,4.767,246,4.055,286,1.745,287,3.844,310,1.255,373,3.347,490,3.015,492,1.36,499,1.831,515,2.978,561,2.627,994,4.32,1000,4.966,1020,3.092,1073,4.557,1076,5.658,1100,4.727,1336,3.214,1337,4.858,1465,4.188,1549,4.596,1615,3.512,1617,2.627,1689,5.111,1690,3.733,1691,6.138,1692,4.105,1693,4.105,1694,7.006,1695,6.37,1696,5.032,1697,3.047,1698,3.047,1699,6.187,1700,7.006,1701,5.462,1702,5.462]],["title/injectables/QueryHelperService.html",[0,0.692,789,1.974]],["body/injectables/QueryHelperService.html",[0,0.893,2,1.289,3,0.071,4,0.081,5,0.071,8,0.196,16,0.794,21,0.011,27,0.251,28,0.653,31,0.162,32,0.091,33,0.006,34,0.006,41,0.59,42,1.114,49,0.669,51,1.513,52,0.92,53,0.566,54,1.051,58,1.578,65,0.936,68,2.549,70,1.527,82,0.93,83,1.569,85,2.219,115,1.683,116,1.825,175,5.813,236,2.462,258,3.816,281,1.666,283,1.536,286,1.824,310,1.628,351,1.536,420,1.713,421,2.353,481,1.761,789,2.549,832,2.31,890,3.624,905,2.559,1390,3.627,1393,3.579,1394,3.911,1396,4.28,1417,4.253,1421,2.206,1460,5.097,1464,4.074,1579,5.529,1652,6.407,1653,7.083,1654,4.757,1655,4.407,1656,6.081,1657,6.336,1667,4.407,1669,4.847,1671,5.117,1676,3.447,1677,3.447,1678,3.447,1724,6.081,1725,3.134,1726,4.078,1727,5.173,1728,6.377,1729,6.377,1730,5.514,1731,3.922,1732,7.29,1733,3.922,1734,5.514,1735,6.645,1736,5.514,1737,5.514,1738,6.919,1739,7.56,1740,3.922,1741,3.922,1742,7.56,1743,5.514,1744,4.078,1745,7.29,1746,5.514,1747,5.592,1748,5.117,1749,3.922,1750,6.081,1751,4.847,1752,5.514,1753,5.514,1754,5.514,1755,5.514,1756,3.922,1757,7.29,1758,3.922,1759,5.514,1760,3.922,1761,3.447,1762,3.922,1763,3.922,1764,5.514,1765,3.922,1766,3.922,1767,6.377,1768,3.922,1769,3.922,1770,5.514,1771,3.922,1772,3.922,1773,6.377]],["title/modules/RedisModule.html",[177,1.157,194,2.786]],["body/modules/RedisModule.html",[3,0.098,4,0.112,5,0.098,8,0.154,12,3.047,16,0.569,21,0.011,27,0.286,28,0.902,31,0.159,32,0.125,33,0.008,34,0.008,43,1.758,48,4.408,58,1.957,74,2.919,113,1.905,137,2.953,146,1.683,164,3.055,177,2.249,179,2.124,180,2.191,181,2.419,182,2.419,183,2.263,184,3.237,185,3.237,194,5.561,200,3.055,201,2.419,202,2.191,205,2.338,206,5.467,223,3.749,224,3.047,238,5.42,274,3.731,787,4.929,867,4.761,1132,6.013,1137,4.761,1140,5.06,1141,6.013,1144,5.546,1146,5.993,1774,4.761,1775,5.416,1776,4.761,1777,7.491,1778,5.416,1779,6.295,1780,5.416,1781,4.329,1782,4.761,1783,5.416,1784,4.761,1785,6.013,1786,6.841,1787,6.841,1788,6.841,1789,6.591]],["title/injectables/RedisService.html",[0,0.692,787,2.402]],["body/injectables/RedisService.html",[0,0.738,2,0.993,3,0.055,4,0.062,5,0.055,8,0.209,16,0.807,21,0.011,27,0.166,28,0.503,31,0.134,32,0.07,33,0.005,34,0.005,41,0.245,42,0.921,43,2.095,45,0.965,49,0.774,51,1.566,52,1.088,53,0.607,54,1.155,58,1.305,65,0.828,66,2.353,70,1.599,71,2.015,83,1.621,85,2.565,97,3.473,104,2.555,105,2.706,112,2.574,113,1.995,115,1.946,116,1.305,146,1.9,163,2.64,164,3.369,165,2.84,238,5.268,241,1.614,283,2.289,286,1.887,293,1.341,310,1.617,352,1.828,373,2.931,420,1.416,421,3.104,487,2.415,492,0.998,515,2.185,541,2.026,587,3.783,787,3.089,828,3.99,852,2.235,865,3.564,891,2.732,905,3.583,982,5.375,1030,2.64,1037,2.565,1140,2.235,1359,2.091,1410,4.887,1460,3.644,1465,3.44,1480,3.156,1481,5.645,1492,1.972,1495,2.975,1497,2.82,1523,4.245,1622,4.523,1623,4.887,1643,4.008,1744,3.372,1779,3.644,1781,2.415,1790,2.656,1791,3.644,1792,4.008,1793,4.56,1794,4.56,1795,4.56,1796,4.56,1797,4.56,1798,3.022,1799,4.56,1800,5.491,1801,4.56,1802,4.008,1803,4.008,1804,4.008,1805,4.56,1806,3.022,1807,5.375,1808,6.463,1809,4.56,1810,4.56,1811,4.56,1812,3.022,1813,4.56,1814,3.644,1815,4.56,1816,6.563,1817,3.022,1818,7.373,1819,5.375,1820,6.115,1821,4.855,1822,4.56,1823,4.56,1824,6.115,1825,4.56,1826,4.56,1827,3.022,1828,4.56,1829,4.56,1830,3.022,1831,4.008,1832,6.115,1833,4.887,1834,4.56,1835,4.56,1836,4.56,1837,3.022,1838,4.56,1839,4.56,1840,3.372,1841,5.491,1842,3.156,1843,3.022,1844,5.491,1845,5.491,1846,4.56,1847,3.022,1848,4.56,1849,3.022,1850,3.022,1851,3.022,1852,3.022,1853,3.022,1854,4.56,1855,3.022,1856,3.022,1857,3.022,1858,3.022,1859,4.008,1860,3.022,1861,3.022,1862,3.022,1863,3.022,1864,3.022]],["title/classes/RefreshTokenDto.html",[31,0.125,1865,3.158]],["body/classes/RefreshTokenDto.html",[3,0.11,4,0.125,5,0.11,8,0.172,16,0.771,21,0.011,27,0.221,31,0.232,32,0.141,33,0.009,34,0.009,41,0.492,49,0.638,53,0.571,65,0.825,93,4.246,116,2.103,123,1.74,263,4.526,267,1.889,281,2.479,283,2.046,286,1.729,300,4.243,352,2.199,492,1.609,886,3.173,890,3.522,891,3.656,893,4.546,908,4.615,912,2.915,1865,6.068,1866,6.459,1867,4.861,1868,6.459,1869,6.082]],["title/injectables/RefreshTokenStoreService.html",[0,0.692,384,2.515]],["body/injectables/RefreshTokenStoreService.html",[0,0.921,2,1.347,3,0.074,4,0.085,5,0.074,8,0.21,14,2.83,15,2.943,16,0.805,21,0.011,27,0.256,28,0.683,31,0.167,32,0.095,33,0.007,34,0.007,41,0.332,42,1.149,43,2.091,45,2.086,48,4.211,49,0.778,51,1.464,52,1.018,53,0.596,54,1.018,56,1.412,58,2.294,60,3.2,65,0.792,66,2.267,70,1.549,71,1.983,74,2.21,83,1.663,85,2.736,93,4.387,108,2.423,113,1.819,115,1.082,146,2.192,224,3.2,238,5.151,256,1.584,263,3.801,286,1.755,293,2.255,300,4.344,310,1.696,351,1.584,352,2.19,384,4.364,420,1.767,421,1.513,492,1.245,596,4.208,597,3.278,765,3.712,785,4.579,787,4.51,797,3.278,798,3.033,799,3.033,869,3.278,898,3.065,1155,3.519,1192,5,1194,4.208,1359,2.838,1385,3.712,1481,4.882,1523,4.579,1791,4.547,1842,3.937,1870,6.74,1871,3.278,1872,5.741,1873,5.689,1874,5.689,1875,5.689,1876,4.101,1877,5.689,1878,5,1879,5.689,1880,4.101,1881,5.689,1882,5.689,1883,4.101,1884,5,1885,5.689,1886,5.689,1887,4.101,1888,5.689,1889,6.532,1890,4.101,1891,4.101,1892,5,1893,5.689,1894,4.101,1895,4.101]],["title/entities/Reservation.html",[57,1.097,244,1.222]],["body/entities/Reservation.html",[3,0.071,4,0.081,5,0.071,8,0.111,16,0.888,21,0.011,27,0.275,31,0.162,32,0.091,33,0.006,34,0.006,41,0.59,49,0.832,52,1.052,53,0.67,56,1.49,57,1.778,65,0.95,69,2.464,81,1.695,82,0.931,108,1.667,167,3.413,170,3.413,172,3.174,212,2.115,242,1.714,244,2.486,247,4.054,248,3.534,267,2.463,279,2.854,284,2.036,310,1.289,420,2.349,455,3.148,456,3.763,488,1.539,490,2.382,492,1.208,494,3.722,495,3.495,496,3.413,498,2.745,499,2.164,504,3.249,505,3.424,506,3.496,510,2.745,515,3.801,518,2.428,519,3.104,520,5.047,521,5.108,523,4.102,528,2.551,529,3.413,533,4.719,554,4.85,556,3.45,559,5.376,582,1.92,627,3.776,628,2.312,629,2.312,630,2.312,1073,3.6,1078,3.819,1896,3.45,1897,3.926,1898,3.926,1899,3.926,1900,5.518,1901,4.85,1902,3.926,1903,3.926,1904,4.41,1905,3.926,1906,3.926,1907,3.926,1908,4.081,1909,3.926,1910,3.926,1911,4.85,1912,3.926,1913,5.518,1914,3.926,1915,3.926,1916,4.85,1917,3.926,1918,2.717,1919,3.926,1920,3.45,1921,3.45,1922,3.926,1923,3.45]],["title/entities/ReservationDetails.html",[57,1.097,627,1.974]],["body/entities/ReservationDetails.html",[3,0.068,4,0.078,5,0.068,8,0.204,16,0.893,21,0.011,27,0.247,31,0.157,32,0.087,33,0.006,34,0.006,41,0.505,49,0.838,52,0.773,53,0.676,57,1.746,65,0.955,82,0.893,100,3.315,172,2.667,241,2.218,244,2.546,267,2.48,279,2.772,284,1.978,286,1.634,310,1.507,420,2.318,455,3.1,456,3.713,488,1.477,490,2.314,492,1.173,495,3.441,496,3.315,498,2.667,499,2.102,504,4.002,505,3.388,506,3.45,510,2.667,512,3.011,515,3.257,519,3.015,520,4.318,521,4.442,523,4.694,530,3.01,531,3.1,539,3.311,541,1.978,547,4.021,549,2.772,550,2.772,559,4.318,561,2.119,562,2.03,563,2.219,564,2.219,581,2.99,582,2.959,627,2.478,629,4.769,832,3.674,899,3.142,923,3.51,925,3.82,932,3.964,977,5.284,1078,4.318,1109,3.964,1204,4.986,1205,4.986,1217,4.711,1232,4.284,1234,4.711,1904,3.011,1921,4.711,1924,3.011,1925,3.768,1926,5.36,1927,5.483,1928,3.768,1929,3.768,1930,3.768,1931,5.36,1932,3.768,1933,5.36,1934,3.768,1935,3.768,1936,3.768,1937,3.768,1938,5.36,1939,3.768,1940,5.36,1941,3.768,1942,5.36,1943,3.768]],["title/modules/ReservationDetailsModule.html",[177,1.157,1944,2.786]],["body/modules/ReservationDetailsModule.html",[3,0.105,4,0.12,5,0.105,8,0.164,21,0.011,27,0.318,28,0.966,31,0.17,32,0.134,33,0.008,34,0.008,77,1.851,177,2.287,179,2.273,180,2.345,181,2.588,182,2.588,183,2.421,184,3.338,185,2.502,189,5.034,192,4.809,200,3.186,201,2.588,202,2.345,205,3.081,212,3.123,213,3.413,214,4.632,216,4.287,241,1.883,244,2.212,256,1.987,387,3.42,398,3.26,488,2.273,562,3.123,582,2.483,623,4.606,627,3.575,630,3.413,631,3.413,632,4.011,735,4.632,977,3.781,1445,5.094,1944,5.713,1945,5.094,1946,5.795,1947,5.795,1948,5.094,1949,5.094]],["title/injectables/ReservationDetailsService.html",[0,0.692,623,2.301]],["body/injectables/ReservationDetailsService.html",[0,0.943,2,1.394,3,0.077,4,0.087,5,0.077,8,0.203,16,0.751,21,0.011,27,0.294,28,0.707,31,0.171,32,0.098,33,0.007,34,0.007,41,0.343,42,1.176,43,1.991,45,2.124,47,3.956,49,0.698,51,1.38,52,0.959,53,0.516,54,0.959,57,2.076,58,1.666,65,0.908,66,2.21,70,1.446,71,1.887,76,2.033,77,1.355,82,1.006,83,1.556,85,2.026,104,2.433,105,3.112,112,2.607,113,1.852,115,1.537,146,1.809,172,2.111,212,2.286,241,2.133,242,2.33,244,2.548,256,1.622,284,2.149,293,2.439,310,1.446,351,1.993,426,3.308,494,3.772,518,2.624,528,3.468,530,1.664,531,1.832,541,2.149,543,3.391,546,3.391,551,3.391,561,2.387,562,2.286,571,3.43,582,2.761,603,2.936,623,3.857,627,3.836,630,2.499,631,4.215,646,4.953,656,3.276,688,2.936,694,5.119,707,2.624,720,5.119,923,2.387,925,2.111,976,4.67,977,4.67,1076,5.178,1078,2.936,1240,3.729,1246,3.391,1398,4.03,1949,3.729,1950,3.391,1951,6.65,1952,4.243,1953,4.243,1954,6.65,1955,4.243,1956,4.243,1957,5.824,1958,4.243,1959,5.824,1960,3.391,1961,4.243,1962,4.243,1963,4.243,1964,4.243,1965,3.729,1966,4.243,1967,4.243,1968,3.729]],["title/controllers/ReservationsController.html",[250,1.974,1969,3.158]],["body/controllers/ReservationsController.html",[1,2.085,3,0.07,4,0.08,5,0.07,8,0.213,16,0.855,17,2.393,21,0.011,27,0.287,28,0.645,31,0.16,32,0.09,33,0.006,34,0.006,41,0.313,42,1.103,43,1.626,45,1.236,49,0.761,51,1.505,52,1.046,53,0.563,54,1.046,56,1.487,58,1.107,68,3.18,70,1.645,71,2.068,83,1.69,105,2.142,108,2.592,115,1.914,130,3.625,146,1.202,231,2.825,242,2.136,244,2.213,250,2.927,252,1.789,254,2.525,256,1.763,267,2.253,271,4.381,281,2.078,283,1.915,284,2.015,286,1.505,293,2.522,310,1.752,318,2.943,334,2.525,339,3.092,340,3.092,343,2.279,344,2.525,351,1.763,352,1.077,416,1.67,417,2.085,431,2.279,432,2.279,493,3.908,570,3.561,571,3.216,583,2.678,586,4.087,609,2.393,612,3.401,724,2.525,1336,3.894,1390,3.997,1391,3.072,1393,4.087,1394,2.825,1397,3.072,1398,2.678,1399,4.365,1401,3.78,1417,3.072,1418,2.862,1419,2.393,1421,2.177,1423,2.862,1428,3.092,1431,3.092,1464,2.943,1589,2.862,1628,4.05,1969,4.682,1970,3.401,1971,6.33,1972,4.801,1973,4.801,1974,3.869,1975,5.462,1976,3.869,1977,6.877,1978,6.944,1979,3.401,1980,3.869,1981,5.462,1982,5.462,1983,3.869,1984,3.869,1985,3.869,1986,6.877,1987,5.462,1988,3.401,1989,6.33,1990,5.462,1991,3.869,1992,5.462,1993,3.869,1994,4.271,1995,3.401,1996,2.862,1997,3.869,1998,3.869,1999,3.401,2000,3.869,2001,3.092,2002,3.869,2003,3.869,2004,3.869,2005,3.869,2006,3.869]],["title/modules/ReservationsModule.html",[177,1.157,195,2.301]],["body/modules/ReservationsModule.html",[3,0.089,4,0.102,5,0.089,8,0.14,21,0.011,27,0.324,28,0.821,31,0.145,32,0.149,33,0.007,34,0.007,77,1.574,130,2.995,177,2.193,179,1.932,180,1.993,181,2.2,182,2.2,183,2.058,184,3.282,185,3.095,189,4.854,190,4.636,192,4.636,195,4.809,197,4.033,198,4.854,200,2.874,201,2.2,202,1.993,205,2.779,210,3.644,212,2.655,213,2.902,214,3.938,216,3.644,217,3.644,219,3.644,241,1.892,244,1.842,252,2.976,256,1.793,387,3.085,398,3.621,488,1.932,562,2.655,623,4.36,625,4.455,627,3.315,628,3.791,629,2.902,630,2.902,631,2.902,632,3.41,634,3.644,635,3.644,789,3.741,792,3.938,800,2.772,801,2.772,1969,5.623,1994,5.119,1995,4.33,1996,3.644,2007,4.33,2008,4.33,2009,4.33,2010,4.927,2011,5.671,2012,4.927,2013,4.927,2014,4.33,2015,4.927]],["title/injectables/ReservationsProcessorService.html",[0,0.692,2011,2.786]],["body/injectables/ReservationsProcessorService.html",[0,0.638,2,0.821,3,0.045,4,0.052,5,0.045,8,0.202,16,0.816,21,0.011,27,0.288,28,0.416,31,0.116,32,0.058,33,0.005,34,0.005,41,0.202,42,0.795,43,2.112,45,1.922,47,3.093,49,0.728,51,1.438,52,1,53,0.538,54,1,56,1.56,57,2.087,58,2.308,65,0.912,66,2.357,70,1.551,71,1.991,76,1.198,77,0.798,81,1.079,82,0.593,83,1.723,85,2.984,104,1.044,105,0.98,108,2.021,112,0.98,113,1.357,115,1.286,130,3.591,131,3.111,137,1.7,162,2.751,168,2.216,212,2.122,213,1.472,231,2.037,241,1.459,242,2.637,243,3.499,244,2.308,245,2.122,248,3.62,256,2.21,284,2.358,293,2.097,310,1.603,318,2.98,351,1.54,352,1.93,401,4.861,402,3.385,405,2.436,433,1.998,435,1.156,481,1.767,493,3.735,494,3.766,518,1.546,528,3.755,541,1.453,582,1.37,605,4.2,606,1.998,613,2.197,623,3.843,628,1.472,631,1.472,632,1.73,657,4.63,685,2.197,766,1.116,786,4.2,788,3.689,795,2.197,834,1.243,865,1.243,1236,2.913,1315,4.654,1317,3.148,1334,2.913,1336,3.916,1337,4.17,1444,2.197,1482,3.462,1689,2.436,1696,1.546,1697,1.631,1698,1.631,1814,3.148,1918,1.73,1996,1.849,2011,3.609,2016,6.269,2017,1.998,2018,3.938,2019,4.874,2020,4.874,2021,3.938,2022,4.874,2023,3.938,2024,3.938,2025,2.197,2026,5.53,2027,3.926,2028,4.861,2029,3.385,2030,2.499,2031,4.284,2032,3.462,2033,3.938,2034,2.499,2035,3.462,2036,3.462,2037,3.938,2038,2.499,2039,2.499,2040,3.938,2041,2.499,2042,2.499,2043,3.462,2044,3.938,2045,3.938,2046,2.499,2047,3.462,2048,3.462,2049,2.319,2050,3.938,2051,2.499,2052,2.499,2053,2.499,2054,3.938,2055,3.938,2056,3.938,2057,2.499,2058,3.462,2059,4.874,2060,3.938,2061,3.938,2062,2.499,2063,3.938,2064,1.998,2065,2.499,2066,2.197,2067,2.197,2068,1.998,2069,3.938,2070,2.499,2071,2.499,2072,2.499,2073,2.499,2074,2.197,2075,2.197,2076,2.499,2077,2.499,2078,2.499,2079,2.499,2080,2.499,2081,2.499,2082,2.197,2083,3.938,2084,2.499,2085,3.938,2086,2.499,2087,2.499,2088,2.499,2089,2.499,2090,3.938,2091,2.197,2092,2.499,2093,2.499,2094,2.499,2095,2.499,2096,2.499]],["title/injectables/ReservationsService.html",[0,0.692,1994,2.515]],["body/injectables/ReservationsService.html",[0,0.68,2,0.892,3,0.049,4,0.056,5,0.049,8,0.202,16,0.846,21,0.011,27,0.259,28,0.452,31,0.123,32,0.063,33,0.005,34,0.005,41,0.22,42,0.848,43,2.102,45,1.641,47,3.382,49,0.768,51,1.431,52,0.995,53,0.536,54,0.995,56,1.486,57,1.486,58,1.892,65,0.935,66,2.279,68,2.674,70,1.628,71,1.993,76,1.301,77,0.867,82,0.644,83,1.603,85,2.647,104,2.146,105,2.594,108,2.455,112,2.014,113,1.431,115,1.88,116,1.892,130,3.627,146,1.305,167,1.679,170,1.679,172,3.432,231,2.172,234,4.07,241,1.108,242,1.796,244,2.437,246,2.74,247,2.013,248,2.613,256,1.169,276,1.598,278,1.598,281,1.748,283,1.61,284,1.55,293,2.389,299,2.598,310,1.703,318,2.263,351,1.169,352,1.169,353,1.527,426,2.556,481,1.847,493,3.37,530,1.064,531,1.171,541,1.55,570,3.518,571,2.473,583,1.878,586,3.421,627,2.892,643,3.356,656,2.362,665,4.002,676,3.106,679,3.356,707,3.178,724,2.674,789,3.382,800,1.527,801,1.527,865,2.556,919,1.878,923,1.527,924,1.679,925,2.089,994,2.598,1030,1.171,1096,1.598,1107,3.106,1108,2.007,1232,4.106,1292,2.385,1336,3.421,1390,3.639,1391,2.362,1393,3.686,1394,2.172,1396,4.525,1397,2.362,1417,3.721,1421,1.527,1464,2.263,1465,2.362,1480,2.906,1490,5.266,1491,2.007,1492,1.771,1493,2.007,1495,1.771,1497,1.679,1498,2.007,1628,3.406,1654,2.74,1655,3.356,1667,2.169,1727,2.74,1761,2.385,1968,2.385,1972,5.083,1973,3.691,1988,3.691,1994,3.406,1996,2.007,2011,4.081,2014,2.385,2025,2.385,2031,4.515,2067,2.385,2082,2.385,2091,2.385,2097,2.385,2098,4.2,2099,5.083,2100,5.783,2101,4.2,2102,5.783,2103,2.714,2104,3.691,2105,2.714,2106,4.2,2107,4.2,2108,2.714,2109,4.2,2110,2.714,2111,4.2,2112,4.2,2113,2.714,2114,4.2,2115,4.2,2116,2.714,2117,4.2,2118,2.714,2119,5.695,2120,5.083,2121,4.2,2122,2.714,2123,4.2,2124,4.2,2125,4.2,2126,2.714,2127,4.2,2128,4.2,2129,2.169,2130,2.714,2131,2.714,2132,3.691,2133,2.385,2134,2.385,2135,3.691,2136,2.714,2137,4.2,2138,2.714,2139,2.714,2140,2.714,2141,2.714,2142,2.385]],["title/guards/RoleGuard.html",[9,2.786,1419,2.641]],["body/guards/RoleGuard.html",[0,1.043,3,0.089,4,0.102,5,0.089,8,0.203,9,4.203,14,3.569,16,0.798,19,5.851,21,0.011,23,4.765,24,4.765,27,0.287,28,0.822,31,0.189,32,0.114,33,0.008,34,0.008,41,0.399,42,1.301,45,2.058,49,0.676,51,1.337,52,0.929,53,0.5,54,0.929,56,1.473,65,0.854,70,1.301,71,1.747,83,1.337,115,1.7,116,1.411,117,2.658,133,2.877,144,2.978,146,2.001,231,3.332,234,2.364,351,1.794,416,3.494,417,2.658,431,2.905,432,2.905,587,3.051,609,3.051,891,3.784,1030,3.097,1031,2.877,1123,4.965,1155,3.985,1418,3.648,1419,4.705,1423,4.765,1532,5.626,1584,3.648,1592,7.246,1593,4.335,1594,7.498,1596,5.662,1597,6.306,1599,5.662,1600,6.685,1601,5.148,1602,3.942,1603,4.335,1628,3.794,2001,5.148,2143,4.335,2144,6.442,2145,6.442,2146,4.933,2147,5.306,2148,4.933,2149,6.442,2150,7.606,2151,4.335,2152,3.942,2153,7.174,2154,4.933,2155,4.933,2156,4.933,2157,4.933,2158,4.933,2159,3.942,2160,3.942]],["title/classes/SignUpDto.html",[31,0.125,266,2.641]],["body/classes/SignUpDto.html",[3,0.072,4,0.082,5,0.072,8,0.112,16,0.859,21,0.011,27,0.202,31,0.188,32,0.092,33,0.006,34,0.006,41,0.32,49,0.768,52,1.002,53,0.635,54,1.204,56,1.471,65,0.822,116,1.588,123,1.132,137,2.396,266,4.816,267,2.272,273,5.062,274,4.153,276,4.819,277,3.841,278,4.819,279,2.871,281,2.353,283,1.545,286,1.874,352,2.372,353,4.696,373,3.329,416,3.274,417,4.086,421,2.048,431,2.331,432,2.331,492,1.215,602,4.948,886,2.396,890,3.921,891,3.456,898,3.743,899,2.566,908,4.115,909,5.138,912,1.897,952,6.06,953,6.539,962,4.808,963,5.608,967,4.525,968,4.435,969,5.122,970,5.138,1645,3.479,1647,5.138,1649,5.122,1650,5.846,1682,3.479,1744,5.41,2161,3.479,2162,4.435,2163,3.958,2164,5.55,2165,6.665,2166,6.665,2167,6.985,2168,6.106,2169,6.985,2170,3.958,2171,6.106,2172,6.106,2173,3.958,2174,3.958,2175,3.958,2176,4.435,2177,5.55,2178,5.633,2179,3.958,2180,5.633,2181,6.429,2182,6.429,2183,4.878,2184,4.878,2185,4.878,2186,3.479]],["title/modules/ThrollerModule.html",[177,1.157,196,2.955]],["body/modules/ThrollerModule.html",[3,0.117,4,0.133,5,0.117,21,0.01,27,0.277,28,1.077,31,0.19,32,0.15,33,0.009,34,0.009,177,2.197,179,2.535,180,2.616,181,2.887,182,2.887,183,2.701,184,2.791,185,2.791,196,5.989,200,3.403,201,2.887,202,2.616,205,3.291,832,3.808,1481,4.475,1654,4.219,2187,5.683,2188,5.683,2189,6.824,2190,6.465,2191,6.465,2192,5.683,2193,6.465,2194,6.465]],["title/entities/Ticket.html",[57,1.097,247,2.046]],["body/entities/Ticket.html",[3,0.09,4,0.103,5,0.09,8,0.141,16,0.88,21,0.011,27,0.236,31,0.191,32,0.116,33,0.008,34,0.008,41,0.584,49,0.831,52,0.72,53,0.664,57,1.963,65,0.941,82,1.183,97,2.996,170,4.462,172,3.229,234,3.111,244,2.502,247,4.191,267,2.46,286,1.855,310,1.457,488,1.957,490,2.802,492,1.421,498,3.94,499,2.545,512,3.988,515,3.111,519,4.298,520,4.993,521,4.462,523,4.766,561,2.807,874,4.801,1093,5.168,1095,5.168,1096,4.664,1171,5.187,1172,4.801,1908,3.691,1923,5.705,2195,4.386,2196,4.386,2197,4.99,2198,6.491,2199,6.491,2200,4.99,2201,6.491,2202,4.99,2203,4.99,2204,4.99,2205,6.491,2206,4.99,2207,4.99]],["title/modules/TicketsModule.html",[177,1.157,197,2.402]],["body/modules/TicketsModule.html",[3,0.101,4,0.115,5,0.101,8,0.159,21,0.011,27,0.318,28,0.933,31,0.164,32,0.13,33,0.008,34,0.008,56,1.231,77,1.789,81,2.417,130,2.918,131,4.485,147,2.918,177,2.345,179,2.196,180,3.08,181,2.5,182,2.5,183,2.339,184,3.287,185,3.287,195,4.508,197,4.866,198,4.927,200,3.119,201,2.5,202,2.266,205,3.442,211,3.875,219,4.142,247,2.684,248,2.918,259,2.577,387,2.684,625,5.678,628,3.298,631,3.298,1918,3.875,1944,4.558,2027,5.742,2208,4.922,2209,4.922,2210,4.922,2211,5.6,2212,5.6,2213,6.14,2214,6.985,2215,6.14,2216,5.6,2217,4.922,2218,5.6,2219,5.6]],["title/injectables/TicketsService.html",[0,0.692,2027,2.786]],["body/injectables/TicketsService.html",[0,0.872,2,1.247,3,0.069,4,0.078,5,0.069,8,0.204,16,0.785,21,0.011,27,0.298,28,0.632,31,0.158,32,0.088,33,0.006,34,0.006,41,0.307,42,1.088,43,2.055,45,2.3,47,3.557,49,0.716,51,1.414,52,0.983,53,0.529,54,0.983,56,1.46,57,1.922,58,2.32,65,0.938,66,2.371,70,1.511,71,1.948,76,1.818,77,1.212,81,1.638,82,0.9,83,1.683,85,2.906,104,1.585,105,2.112,108,2.176,112,1.488,113,1.744,115,1.421,130,3.341,131,4.66,162,2.68,168,3.03,172,3.116,244,2.53,247,4.004,248,2.25,256,2.258,284,1.988,293,2.004,299,4.217,310,1.588,351,1.5,403,4.947,406,3.984,426,2.68,430,3.032,454,3.335,481,1.721,561,2.134,587,3.332,625,2.626,788,4.137,1093,3.515,1095,3.515,1096,3.172,1140,2.806,1168,3.984,1336,3.526,1696,2.347,1697,2.476,1698,2.476,1718,3.984,1908,2.806,1965,4.734,1994,4.405,2027,4.448,2028,5.992,2029,4.05,2064,3.032,2066,3.335,2068,3.032,2075,3.335,2142,3.335,2217,3.335,2220,3.335,2221,5.387,2222,5.387,2223,6.263,2224,3.794,2225,6.817,2226,3.794,2227,6.263,2228,5.387,2229,3.794,2230,5.387,2231,5.387,2232,3.794,2233,3.728,2234,5.387,2235,3.794,2236,3.794,2237,5.387,2238,3.794,2239,3.794,2240,3.794,2241,3.794,2242,3.335,2243,3.794,2244,3.794,2245,3.794,2246,3.794,2247,3.794,2248,3.794,2249,3.794,2250,3.794,2251,3.794]],["title/interfaces/TokenConfig.html",[1615,1.843,2252,3.412]],["body/interfaces/TokenConfig.html",[3,0.091,4,0.103,5,0.091,8,0.142,14,3.806,15,4.386,16,0.88,21,0.011,32,0.116,33,0.008,34,0.008,41,0.405,53,0.651,60,2.817,65,0.942,96,5.658,97,3,102,5.294,147,3.196,286,1.929,300,3.957,490,2.162,492,1.424,830,7.372,868,7.617,1142,7.372,1615,2.808,1617,2.817,1622,5.658,2162,6.114,2252,6.835,2253,4.401,2254,8.666,2255,8.666,2256,8.666,2257,8.388,2258,8.388,2259,8.388]],["title/injectables/TokenManagementService.html",[0,0.692,385,2.641]],["body/injectables/TokenManagementService.html",[0,0.959,2,1.429,3,0.079,4,0.09,5,0.079,8,0.215,13,4.392,14,4.045,15,3.064,16,0.82,21,0.011,27,0.263,28,0.725,31,0.174,32,0.101,33,0.007,34,0.007,41,0.352,42,1.196,45,2.152,48,4.264,49,0.759,51,1.501,52,1.043,53,0.562,54,1.043,56,1.274,58,2.234,60,3.332,64,4.955,65,0.897,66,1.65,70,1.577,71,1.641,74,2.344,83,1.62,85,2.061,93,4.41,96,4.982,100,3.664,108,2.185,115,1.778,146,1.84,224,3.332,234,2.839,256,1.65,263,3.192,284,2.669,286,1.825,300,3.741,351,2.174,385,4.474,388,6.498,389,3.476,416,3.122,420,1.351,421,1.605,469,3.865,481,2.31,765,3.865,869,3.476,1123,5.005,1155,3.664,1174,6.357,1194,4.381,1619,4.1,1791,4.734,2260,6.651,2261,3.476,2262,5.924,2263,5.924,2264,5.924,2265,4.35,2266,4.35,2267,5.924,2268,4.35,2269,5.924,2270,5.924,2271,4.35,2272,5.924,2273,5.924,2274,7.232,2275,4.35,2276,5.924,2277,5.924,2278,3.823,2279,5.924,2280,5.924,2281,3.823,2282,5.924,2283,4.35,2284,5.924,2285,4.35]],["title/injectables/TokenService.html",[0,0.692,341,2.515]],["body/injectables/TokenService.html",[0,0.667,2,0.869,3,0.048,4,0.055,5,0.048,8,0.2,12,3.209,13,4.175,14,3.761,15,4.214,16,0.806,21,0.011,27,0.27,28,0.441,31,0.121,32,0.061,33,0.005,34,0.005,41,0.214,42,0.832,43,1.972,44,4.443,45,1.615,48,3.755,49,0.742,51,1.418,52,0.986,53,0.564,54,0.986,56,1.486,57,1.465,58,2.197,60,2.316,64,4.64,65,0.944,66,2.252,70,1.551,71,1.87,73,3.29,74,1.425,80,2.325,81,1.142,83,1.65,85,2.767,93,4.226,104,1.105,108,2.242,109,2.325,110,1.957,111,2.325,112,1.614,113,2.105,115,1.958,116,2.123,117,4.193,120,1.831,146,1.772,162,2.048,224,2.316,238,3.127,256,2.066,257,3.045,258,2.849,261,3.298,263,4.242,284,1.519,286,1.547,287,5.368,293,1.211,294,4.749,296,5.983,299,3.529,300,4.242,302,4.559,314,3.619,317,3.619,336,4.94,341,3.64,348,1.636,351,1.588,352,2.021,373,3.557,383,4.275,384,4.275,385,4.49,392,2.325,393,2.114,395,2.114,407,3.045,416,1.777,420,1.279,421,0.976,458,1.957,469,4.033,471,2.325,473,4.04,482,2.325,492,0.901,788,3.655,855,3.29,865,3.82,905,4.271,1100,3.527,1168,3.045,1172,3.045,1359,1.831,1495,3.722,1497,3.127,1499,3.045,1523,4.084,1549,3.045,1552,3.619,1583,3.619,1616,1.831,1619,1.831,1626,2.849,1627,2.547,1718,1.957,1842,2.849,1872,2.325,1884,3.619,1892,2.325,2064,2.114,2068,2.114,2160,2.114,2278,2.325,2281,2.325,2286,2.325,2287,4.117,2288,4.117,2289,4.117,2290,5.055,2291,2.645,2292,4.117,2293,4.117,2294,2.645,2295,4.117,2296,4.117,2297,2.645,2298,4.117,2299,4.117,2300,4.117,2301,4.117,2302,2.645,2303,4.117,2304,4.117,2305,2.645,2306,4.117,2307,2.645,2308,4.117,2309,2.645,2310,2.645,2311,3.619,2312,4.117,2313,4.117,2314,5.055,2315,2.645,2316,2.645,2317,2.645,2318,2.645,2319,2.645,2320,4.117,2321,4.117,2322,5.055,2323,5.704,2324,5.704,2325,2.645,2326,2.645,2327,2.645,2328,2.645,2329,2.645,2330,4.117,2331,2.645,2332,4.117,2333,4.117,2334,2.645,2335,4.117,2336,2.645,2337,2.645,2338,2.645,2339,2.645,2340,2.645,2341,3.619,2342,2.645,2343,2.645,2344,2.645,2345,2.645,2346,2.645,2347,2.645,2348,2.645,2349,2.645]],["title/entities/Transaction.html",[57,1.097,248,1.784]],["body/entities/Transaction.html",[3,0.075,4,0.085,5,0.075,8,0.117,16,0.894,21,0.011,27,0.257,31,0.168,32,0.095,33,0.007,34,0.007,41,0.53,49,0.843,52,0.594,53,0.678,56,1.501,57,1.816,65,0.957,81,1.779,82,0.977,108,1.725,130,2.953,167,4.051,244,2.36,245,3.809,248,3.65,267,2.493,279,2.952,284,2.106,310,1.646,420,2.386,455,3.205,456,3.821,488,1.616,490,2.464,492,1.249,495,3.558,496,3.531,498,2.84,499,2.772,500,2.852,504,4.163,505,3.465,506,3.551,510,2.84,515,3.388,519,3.211,521,4.051,522,4.532,523,4.728,533,3.048,559,4.532,561,2.318,581,2.736,724,2.639,832,3.361,994,4.592,1065,3.724,1100,3.076,1107,5.49,1108,5.49,1109,4.222,1204,4.562,1205,4.562,1696,4.373,1697,2.689,1698,2.689,1708,3.95,1911,5.017,2242,5.017,2350,3.622,2351,4.121,2352,5.708,2353,4.121,2354,5.708,2355,4.121,2356,5.708,2357,4.121,2358,4.121,2359,5.708,2360,4.121,2361,4.121,2362,5.708,2363,4.121,2364,4.121,2365,5.017,2366,4.121,2367,3.622]],["title/controllers/TransactionsController.html",[250,1.974,2368,2.955]],["body/controllers/TransactionsController.html",[1,3.017,3,0.101,4,0.115,5,0.101,8,0.198,16,0.733,17,3.464,21,0.011,27,0.298,28,0.933,31,0.205,32,0.13,33,0.008,34,0.008,41,0.453,42,1.411,49,0.588,51,1.162,52,0.808,53,0.435,54,0.808,56,1.405,68,3.23,70,1.411,71,1.854,83,1.58,108,2.301,115,1.478,168,4.774,248,2.339,250,3.52,252,2.589,254,3.654,256,1.945,267,1.739,281,2.111,283,1.945,293,2.054,310,1.61,334,3.654,343,3.298,344,3.654,352,1.559,570,4.283,583,3.875,586,3.613,609,3.464,724,3.23,1390,4.081,1391,3.93,1393,4.124,1394,3.613,1397,3.93,1417,3.93,1421,3.15,1428,4.475,1464,3.764,1589,4.142,1978,7.21,1979,4.922,1999,4.922,2029,4.283,2368,4.834,2369,4.922,2370,5.6,2371,6.985,2372,6.14,2373,4.922,2374,4.475,2375,5.6,2376,5.6]],["title/modules/TransactionsModule.html",[177,1.157,198,2.515]],["body/modules/TransactionsModule.html",[3,0.097,4,0.11,5,0.097,8,0.152,21,0.011,27,0.322,28,0.891,31,0.157,32,0.157,33,0.008,34,0.008,56,1.314,77,1.709,81,2.309,168,3.818,177,2.241,179,2.098,180,2.164,181,2.389,182,2.389,183,2.235,184,3.385,185,3.219,195,4.017,197,4.194,198,5.124,200,3.031,201,2.389,202,2.164,205,2.309,211,3.702,217,3.956,241,1.967,248,2.835,252,3.138,256,1.89,387,3.253,398,3.818,488,2.098,562,2.882,623,4.526,625,5.16,627,3.447,628,3.997,629,3.15,630,3.15,631,3.15,632,3.702,634,5.02,635,5.02,789,3.884,800,3.009,801,3.009,2029,4.961,2368,5.427,2373,4.702,2374,4.275,2377,4.702,2378,4.702,2379,4.702,2380,5.349,2381,5.349,2382,5.349]],["title/injectables/TransactionsService.html",[0,0.692,2029,2.402]],["body/injectables/TransactionsService.html",[0,0.73,2,0.978,3,0.054,4,0.061,5,0.054,8,0.194,16,0.828,21,0.011,27,0.273,28,0.496,31,0.132,32,0.069,33,0.005,34,0.005,41,0.241,42,0.91,43,1.93,45,1.738,47,3.69,49,0.748,51,1.353,52,0.94,53,0.553,54,0.94,56,1.479,57,1.762,58,1.736,65,0.914,66,2.167,68,2.084,70,1.547,71,1.83,76,1.426,77,0.951,81,1.285,82,0.706,83,1.589,84,2.201,85,2.777,104,1.883,105,2.379,108,1.97,112,1.767,113,2.044,115,1.72,116,1.556,146,1.885,167,2.788,168,4.379,170,1.841,172,3.244,212,1.604,234,4.041,241,0.785,242,1.885,243,2.908,244,2.15,245,2.429,247,1.426,248,3.551,256,1.255,276,1.753,278,1.753,281,1.362,283,1.255,284,1.663,293,2.095,310,1.643,351,1.69,352,1.984,420,0.925,421,1.098,426,2.242,455,1.946,481,1.44,492,0.987,494,2.911,518,1.841,528,1.376,530,1.167,531,1.285,541,1.098,570,3.668,583,2.06,586,2.331,627,1.376,656,2.536,657,3.119,665,3.119,684,2.378,707,1.841,724,3.84,789,3.474,800,1.674,801,1.674,834,1.481,865,2.706,919,2.06,923,1.674,924,1.841,925,1.481,934,3.119,994,1.841,1030,1.946,1093,1.942,1095,1.942,1096,1.753,1107,4.024,1108,3.334,1125,3.602,1126,2.378,1336,2.331,1359,2.06,1363,2.616,1364,2.616,1390,3.244,1391,2.536,1393,3.139,1394,2.331,1396,4.408,1397,2.536,1417,3.414,1421,1.674,1464,2.429,1465,3.414,1480,3.119,1490,4.2,1491,2.201,1492,1.942,1493,2.201,1495,1.942,1497,1.841,1498,2.201,1499,3.334,1523,4.379,1689,4.815,1708,4.748,1713,2.616,1726,3.334,1727,2.941,1747,2.201,1748,3.334,1904,2.378,1908,2.201,2029,3.668,2074,3.962,2099,5.333,2119,4.85,2120,3.962,2132,3.962,2133,2.616,2134,2.616,2135,2.616,2233,2.06,2374,2.378,2383,2.616,2384,3.962,2385,4.782,2386,3.962,2387,2.976,2388,6.068,2389,4.507,2390,5.44,2391,4.507,2392,2.976,2393,3.962,2394,4.507,2395,2.976,2396,2.976,2397,4.507,2398,2.976,2399,4.507,2400,4.507,2401,2.976,2402,4.507,2403,2.976,2404,4.507,2405,6.068,2406,2.976,2407,2.976,2408,2.976,2409,2.976,2410,4.507,2411,2.976,2412,4.507,2413,3.962,2414,2.616,2415,2.976,2416,2.976,2417,2.976,2418,2.976,2419,4.507,2420,4.507,2421,2.976,2422,2.976,2423,2.976,2424,2.976,2425,2.976,2426,2.976]],["title/classes/UpdateCartItemDto.html",[31,0.125,599,3.158]],["body/classes/UpdateCartItemDto.html",[3,0.117,4,0.133,5,0.117,8,0.183,21,0.01,25,4.506,27,0.276,31,0.223,32,0.149,33,0.009,34,0.009,54,1.097,116,2.177,123,1.844,242,2.598,259,2.378,281,2.299,283,2.119,492,1.666,526,3.987,528,3.518,575,5.282,599,5.628,604,5.152,885,4.768,886,3.285,2049,4.481,2427,5.666,2428,7.609,2429,4.461,2430,3.987]],["title/classes/UpdateEventDto.html",[31,0.125,1412,2.786]],["body/classes/UpdateEventDto.html",[3,0.118,4,0.135,5,0.118,8,0.185,21,0.01,25,4.387,27,0.279,31,0.225,32,0.178,33,0.009,34,0.009,116,2.194,123,1.869,241,2.024,259,2.411,283,2.136,886,3.311,915,4.263,917,4.833,1412,5.481,1420,5.222,2049,4.517,2429,4.522,2430,4.042,2431,5.743,2432,7.156]],["title/classes/UpdatePasswordDTO.html",[31,0.125,321,3.158]],["body/classes/UpdatePasswordDTO.html",[3,0.098,4,0.112,5,0.098,8,0.154,16,0.828,21,0.011,27,0.197,31,0.22,32,0.126,33,0.008,34,0.008,41,0.439,49,0.719,53,0.612,65,0.886,113,1.908,116,1.96,123,1.554,267,2.129,274,4.242,281,2.509,283,1.908,286,1.867,318,4.473,321,6.14,327,6.736,328,6.93,329,6.736,331,5.476,352,2.312,492,1.5,886,2.958,890,3.779,891,3.923,892,4.471,893,4.238,908,4.573,912,2.602,942,4.016,967,4.644,970,4.016,2049,4.035,2176,5.476,2180,6.598,2186,4.773,2433,6.598,2434,4.34,2435,5.43,2436,5.43,2437,7.884,2438,5.43]],["title/classes/UpdateReservationDetailsDto.html",[31,0.125,2439,3.158]],["body/classes/UpdateReservationDetailsDto.html",[3,0.117,4,0.133,5,0.117,8,0.183,21,0.01,25,4.506,27,0.276,31,0.223,32,0.149,33,0.009,34,0.009,54,1.097,116,2.177,123,1.844,244,2.393,259,2.378,281,2.299,283,2.119,492,1.666,582,2.647,886,3.285,976,5.282,977,4.206,979,4.768,1960,5.152,2049,4.481,2429,4.461,2430,3.987,2439,5.628,2440,5.666,2441,7.609]],["title/classes/UpdateReservationDto.html",[31,0.125,2442,3.412]],["body/classes/UpdateReservationDto.html",[3,0.118,4,0.134,5,0.118,8,0.184,21,0.01,25,4.517,27,0.278,31,0.224,32,0.15,33,0.009,34,0.009,54,1.102,116,2.187,123,1.858,244,2.187,259,2.396,281,2.309,283,2.128,492,1.673,886,3.299,991,6.006,993,4.804,2049,4.501,2429,4.495,2430,4.017,2442,6.108,2443,5.708,2444,7.642,2445,6.495]],["title/classes/UpdateTransactionDto.html",[31,0.125,2446,3.412]],["body/classes/UpdateTransactionDto.html",[3,0.123,4,0.14,5,0.123,21,0.01,25,4.223,27,0.285,31,0.199,32,0.157,33,0.009,34,0.009,123,1.94,259,2.502,1128,4.693,1130,5.015,2429,4.693,2430,4.194,2446,6.263,2447,5.96,2448,7.837,2449,6.781]],["title/classes/UpdateUserDto.html",[31,0.125,2450,2.955]],["body/classes/UpdateUserDto.html",[3,0.081,4,0.092,5,0.081,8,0.127,16,0.827,21,0.011,25,3.259,27,0.163,31,0.201,32,0.104,33,0.007,34,0.007,41,0.363,49,0.718,52,1.056,53,0.612,54,1.229,56,1.443,65,0.769,116,1.731,123,1.283,266,4.233,267,2.126,273,4.736,274,3.405,276,4.822,277,4.186,278,4.822,279,3.129,280,4.834,281,2.311,283,1.684,286,1.878,352,2.31,353,4.718,373,3.51,492,1.603,602,5.141,886,2.611,890,3.776,891,3.009,898,3.259,908,3.85,909,5.417,912,2.15,952,5.854,953,6.544,962,5.069,963,5.827,967,4.73,968,4.736,969,5.469,970,5.062,1647,5.417,1649,5.469,1650,5.469,1744,5.062,2049,3.562,2165,6.925,2166,6.925,2167,7.197,2168,6.438,2169,7.197,2171,6.438,2172,6.438,2181,6.015,2182,6.015,2183,5.316,2184,5.316,2185,5.316,2450,4.186,2451,6.438,2452,3.585,2453,4.486,2454,4.486,2455,6.049,2456,4.486,2457,4.486]],["title/entities/User.html",[56,0.752,57,1.097]],["body/entities/User.html",[3,0.054,4,0.061,5,0.054,8,0.085,16,0.91,21,0.011,27,0.249,31,0.16,32,0.069,33,0.005,34,0.005,41,0.241,49,0.861,52,0.99,53,0.685,56,1.545,57,1.561,65,0.974,82,0.707,93,2.246,97,1.77,100,3.758,108,1.646,110,3.339,130,2.979,168,4.229,234,2.911,242,2.506,244,2.04,248,2.979,267,2.547,274,3.548,276,3.843,277,3.124,278,3.843,279,3.142,284,1.666,286,1.781,310,1.629,353,4.011,374,3.968,416,3.078,417,3.273,420,2.452,422,3.608,431,1.756,432,1.756,453,5.215,455,2.817,456,3.416,459,3.608,462,3.608,466,3.968,478,3.968,481,1.74,488,1.169,490,1.949,491,2.792,492,0.988,496,2.792,498,3.548,499,1.77,500,3.124,504,4.043,505,3.17,506,3.174,515,2.164,517,3.968,519,2.54,520,3.77,522,4.516,523,4.856,525,3.968,560,2.621,561,1.678,724,2.087,890,2.911,1020,3.416,1065,5.001,1079,2.945,1121,3.968,1122,4.827,1123,3.77,1124,5.736,1125,5.215,1126,5.215,1127,5.736,1155,2.792,1179,3.608,1187,3.608,1200,3.968,1461,5.736,1507,2.621,1627,2.792,1647,3.339,1679,2.383,1708,3.124,1901,2.621,1916,3.968,1918,2.064,1920,3.968,1927,5.339,2160,3.608,2196,2.621,2365,3.968,2367,3.968,2413,3.968,2414,3.968,2458,2.621,2459,2.982,2460,2.982,2461,2.982,2462,4.514,2463,2.982,2464,4.514,2465,2.982,2466,4.514,2467,2.982,2468,4.514,2469,2.982,2470,2.982,2471,4.514,2472,4.514,2473,2.982,2474,6.075,2475,5.339,2476,2.982,2477,2.982,2478,2.982,2479,2.982,2480,3.968,2481,2.982,2482,2.982,2483,2.982,2484,2.982]],["title/controllers/UsersController.html",[250,1.974,2485,2.955]],["body/controllers/UsersController.html",[1,2.111,3,0.071,4,0.081,5,0.071,8,0.207,16,0.857,17,2.424,21,0.011,27,0.288,28,0.653,31,0.162,32,0.091,33,0.006,34,0.006,41,0.317,42,1.113,45,1.252,49,0.765,51,1.435,52,0.997,53,0.537,54,0.997,56,1.551,58,1.121,68,3.197,69,3.088,70,1.649,71,2.072,83,1.611,100,3.409,105,2.161,115,1.923,146,1.217,162,4.145,250,2.947,252,1.812,254,2.557,256,1.775,267,2.264,276,3.245,278,3.245,281,2.202,283,1.535,286,1.824,291,6.525,293,2.526,318,2.969,324,2.742,325,5.39,333,3.814,334,2.557,343,2.308,344,2.557,351,1.091,352,1.091,416,1.692,417,2.111,431,2.308,432,2.308,510,3.76,570,3.586,571,3.245,573,4.278,586,3.91,609,2.424,724,2.548,788,3.77,1122,4.076,1336,2.85,1380,7.177,1384,4.844,1385,4.512,1390,3.626,1391,3.1,1393,3.577,1394,2.85,1396,3.943,1397,3.1,1398,2.712,1399,3.132,1401,3.814,1411,3.132,1417,3.1,1418,2.898,1419,2.424,1421,2.204,1423,4.076,1431,3.132,1433,3.132,1434,3.444,1450,5.527,1464,2.969,1589,4.714,1612,4.404,1840,4.076,2001,4.404,2372,4.844,2450,5.651,2485,4.411,2486,3.444,2487,5.511,2488,3.444,2489,5.511,2490,3.918,2491,6.916,2492,3.918,2493,3.918,2494,3.918,2495,6.916,2496,3.918,2497,3.918,2498,5.511,2499,3.918,2500,4.404,2501,5.511,2502,5.511,2503,4.404,2504,3.918,2505,3.918,2506,3.444,2507,3.132,2508,3.918,2509,3.918,2510,3.918,2511,3.918,2512,3.918,2513,3.918,2514,3.918,2515,3.918]],["title/modules/UsersModule.html",[177,1.157,199,2.955]],["body/modules/UsersModule.html",[3,0.105,4,0.119,5,0.105,8,0.164,21,0.011,27,0.316,28,0.963,31,0.17,32,0.134,33,0.008,34,0.008,35,5.574,56,1.255,77,1.846,162,3.544,177,2.285,179,2.266,180,2.339,181,2.581,182,2.581,183,2.415,184,3.48,185,2.495,199,6.057,200,3.181,201,2.581,202,2.339,205,2.495,248,3.226,252,3.294,256,1.984,387,3.414,397,4.275,398,4.008,488,2.266,788,4.419,789,3.95,800,3.251,801,3.251,1918,4,2485,5.579,2506,5.08,2507,4.619,2516,5.08,2517,5.08,2518,5.78,2519,5.78,2520,5.78,2521,5.78]],["title/injectables/UsersService.html",[0,0.692,788,2.209]],["body/injectables/UsersService.html",[0,0.76,2,1.032,3,0.057,4,0.065,5,0.057,8,0.211,16,0.855,21,0.011,27,0.264,28,0.523,31,0.138,32,0.073,33,0.005,34,0.005,41,0.254,42,0.948,43,2.182,45,1.795,46,2.51,47,3.355,49,0.783,51,1.505,52,1.047,53,0.564,54,1.047,55,4.491,56,1.576,57,1.206,58,1.784,65,0.945,66,2.365,68,2.883,69,2.784,70,1.645,71,2.068,76,1.505,77,1.003,82,0.745,83,1.611,84,2.323,85,1.633,100,3.476,104,2.925,105,2.99,107,2.761,108,2.461,112,2.204,113,1.565,115,1.847,146,1.458,162,4.115,222,3.751,229,3.751,256,1.307,281,2.017,283,1.307,286,1.365,293,2.462,310,1.708,318,2.529,324,2.335,351,1.307,352,0.875,426,3.483,439,2.761,462,2.51,467,4.126,510,3.102,570,3.161,571,2.764,573,3.857,586,3.225,589,4.126,598,4.126,656,2.641,707,4.938,714,3.472,724,2.883,765,4.068,766,2.784,768,5.48,772,3.751,788,3.225,789,3.085,800,1.767,801,1.767,865,2.335,1030,1.356,1122,3.472,1336,2.428,1390,3.32,1391,2.641,1393,3.225,1394,2.428,1396,3.476,1397,2.641,1417,2.641,1421,1.767,1450,4.983,1451,5.48,1464,2.529,1465,2.641,1480,3.249,1491,2.323,1492,2.049,1493,2.323,1494,2.761,1495,2.049,1497,1.943,1498,2.323,1499,2.323,1612,3.751,1726,3.472,1727,3.063,1840,3.472,2450,5.524,2488,2.761,2500,3.751,2503,3.751,2507,2.51,2522,2.761,2523,4.694,2524,4.694,2525,4.694,2526,3.141,2527,3.141,2528,4.694,2529,3.141,2530,4.694,2531,3.141,2532,4.694,2533,4.694,2534,3.141,2535,4.694,2536,3.141,2537,4.694,2538,4.694,2539,4.694,2540,3.141,2541,4.694,2542,4.694,2543,3.141,2544,4.694,2545,4.694,2546,3.141,2547,3.141,2548,5.62,2549,3.141,2550,4.694]],["title/injectables/WinstonLoggerService.html",[0,0.692,2551,3.412]],["body/injectables/WinstonLoggerService.html",[0,0.987,2,1.491,3,0.139,4,0.094,5,0.082,8,0.224,12,3.429,16,0.882,21,0.011,27,0.25,28,0.756,31,0.179,32,0.105,33,0.007,34,0.007,41,0.367,42,1.231,49,0.806,51,1.593,52,1.107,53,0.596,54,1.107,58,1.744,70,1.551,83,1.64,133,2.722,286,1.947,307,5.816,373,4.336,804,3.977,852,5.678,865,4.084,1114,3.626,1523,3.429,2551,4.872,2552,3.988,2553,4.872,2554,5.091,2555,6.318,2556,6.824,2557,6.948,2558,5.881,2559,6.096,2560,4.538,2561,6.716,2562,6.096,2563,6.096,2564,7.31,2565,4.538,2566,6.096,2567,6.468,2568,6.096,2569,4.538,2570,6.096,2571,6.096,2572,4.538,2573,6.096,2574,6.096,2575,4.538,2576,6.096,2577,6.096,2578,6.883,2579,3.988,2580,4.538,2581,4.538,2582,4.538,2583,4.538,2584,4.538]],["title/coverage.html",[2585,5.141]],["body/coverage.html",[0,1.402,1,1.824,5,0.061,6,2.976,7,2.706,9,3.237,21,0.011,31,0.257,33,0.006,34,0.006,35,2.209,36,2.976,37,2.706,48,1.751,53,0.263,56,0.596,57,1.998,62,2.343,64,1.905,108,1.023,113,0.943,122,2.706,124,2.976,125,2.706,158,1.684,183,1.414,213,2.922,241,0.893,242,1.824,244,1.68,247,1.623,248,1.414,250,3.326,251,2.504,253,2.976,266,2.094,304,2.504,321,2.504,337,2.094,341,1.994,343,1.994,383,1.994,384,1.994,385,2.094,399,2.976,402,1.905,403,2.094,416,1.462,421,1.249,427,2.343,489,2.976,494,1.512,499,1.328,526,4.259,527,2.976,568,2.504,569,2.706,575,2.209,599,2.504,605,1.994,623,1.824,627,1.565,629,1.994,631,1.994,636,2.706,647,1.994,736,2.976,785,1.905,786,1.994,787,1.905,788,1.751,789,1.565,802,2.976,803,2.706,834,2.922,841,2.976,861,2.504,884,2.976,885,3.67,915,2.209,916,2.976,917,3.67,934,6.298,963,2.504,976,2.209,977,4.219,978,2.976,979,3.67,991,2.504,992,2.976,993,3.67,1005,2.706,1006,2.976,1007,2.706,1028,2.343,1039,2.706,1040,2.976,1041,2.706,1046,2.706,1047,2.976,1048,2.706,1054,2.706,1055,2.976,1056,2.706,1062,2.706,1069,2.706,1070,2.976,1071,2.706,1080,2.706,1081,2.976,1082,2.706,1086,2.706,1087,2.976,1088,2.706,1097,2.706,1098,2.976,1099,2.706,1104,2.706,1110,2.706,1111,2.976,1112,2.706,1118,2.706,1128,2.343,1129,2.976,1130,3.67,1158,2.976,1202,2.976,1221,2.209,1251,2.976,1252,2.706,1260,3.965,1261,2.706,1291,2.706,1315,2.209,1316,2.706,1324,2.094,1372,2.504,1373,2.976,1390,1.684,1412,2.209,1419,2.094,1446,2.976,1516,2.706,1517,2.976,1518,2.976,1519,2.706,1520,2.706,1523,1.905,1534,2.706,1569,2.504,1570,2.976,1574,2.976,1575,2.706,1585,2.976,1586,2.706,1615,3.209,1616,2.343,1618,3.965,1629,2.706,1630,2.976,1631,2.706,1644,2.976,1651,2.976,1681,2.976,1689,2.094,1690,3.965,1699,2.504,1703,2.976,1724,2.976,1725,2.706,1790,2.976,1821,3.67,1865,2.504,1866,2.976,1867,2.706,1870,2.976,1871,2.706,1896,2.976,1924,2.706,1950,2.706,1969,2.504,1970,2.976,1994,1.994,2011,2.209,2016,2.976,2017,2.706,2027,2.209,2029,1.905,2097,2.976,2129,2.706,2143,2.976,2152,2.706,2161,2.976,2195,2.976,2220,2.976,2252,2.706,2253,2.976,2260,2.976,2261,2.706,2286,2.976,2350,2.976,2368,2.343,2369,2.976,2383,2.976,2427,2.976,2431,2.976,2433,2.976,2434,2.706,2439,2.504,2440,2.976,2442,2.706,2443,2.976,2446,2.706,2447,2.976,2450,2.343,2451,2.976,2452,2.706,2458,2.976,2485,2.343,2486,2.976,2522,2.976,2551,2.706,2552,2.976,2561,2.706,2585,2.976,2586,2.976,2587,3.385,2588,4.361,2589,7.505,2590,8.854,2591,2.976,2592,2.706,2593,6.467,2594,5.873,2595,3.385,2596,7.623,2597,6.884,2598,6.051,2599,2.976,2600,2.976,2601,2.706,2602,7.433,2603,2.976,2604,2.706,2605,2.976,2606,8.256,2607,3.385,2608,3.385,2609,2.976,2610,2.706,2611,5.873,2612,5.873,2613,5.873,2614,2.976,2615,6.467,2616,4.962,2617,6.467,2618,4.962,2619,4.962,2620,3.385,2621,3.385,2622,3.385,2623,3.385,2624,4.361,2625,5.162,2626,2.976,2627,6.323,2628,2.976,2629,2.976,2630,3.385]],["title/dependencies.html",[180,2.08,2631,3.125]],["body/dependencies.html",[13,3.36,21,0.011,28,0.995,30,4.773,31,0.213,33,0.008,34,0.008,74,3.218,77,1.908,79,6.262,82,1.416,180,2.416,238,3.694,348,4.496,389,4.773,850,4.773,912,2.862,1024,2.971,1096,3.517,1166,5.249,1184,4.773,1602,4.773,1654,3.897,1679,4.773,1723,4.773,1781,4.773,1808,4.773,2147,4.417,2151,5.249,2192,5.249,2430,3.694,2554,4.417,2632,7.835,2633,5.972,2634,5.972,2635,5.972,2636,5.972,2637,5.972,2638,5.972,2639,4.417,2640,5.972,2641,5.972,2642,5.972,2643,5.972,2644,5.972,2645,5.972,2646,5.972,2647,5.972,2648,5.972,2649,5.972,2650,5.972,2651,5.972,2652,5.972,2653,5.249,2654,5.972,2655,7.268,2656,5.972,2657,5.972,2658,5.972,2659,5.972,2660,5.249,2661,5.972,2662,5.972,2663,5.972,2664,5.972,2665,5.249,2666,5.972,2667,5.972,2668,5.972,2669,5.972,2670,5.972,2671,5.972,2672,5.972,2673,5.972,2674,5.972,2675,5.972]],["title/miscellaneous/enumerations.html",[2676,2.32,2677,4.519]],["body/miscellaneous/enumerations.html",[21,0.011,33,0.008,34,0.008,41,0.448,56,1.334,175,3.83,241,1.46,244,1.584,417,3.737,421,3.347,547,3.737,549,2.863,941,5.542,1100,2.982,1273,3.83,1628,4.084,1657,5.542,1671,4.094,1696,4.29,1727,4.525,1747,5.129,1748,5.129,2159,4.423,2233,4.799,2639,4.094,2676,3.611,2677,4.865,2678,5.535,2679,6.095,2680,5.535,2681,6.095,2682,5.535,2683,6.095,2684,5.535,2685,6.095,2686,4.865,2687,6.095,2688,5.535,2689,8.176,2690,5.542,2691,4.865,2692,5.542,2693,5.542,2694,6.095,2695,6.095,2696,6.095,2697,6.095,2698,6.095,2699,6.095,2700,6.095,2701,6.095,2702,6.095,2703,6.095,2704,6.095,2705,6.095,2706,6.095,2707,6.095,2708,6.095,2709,6.095,2710,6.095,2711,6.095,2712,5.535,2713,5.542,2714,5.542,2715,5.542,2716,5.535,2717,5.535,2718,5.542,2719,5.535]],["title/miscellaneous/functions.html",[2676,2.32,2720,4.109]],["body/miscellaneous/functions.html",[12,3.809,21,0.009,33,0.009,34,0.009,41,0.548,59,3.245,82,1.606,137,2.923,152,5.411,164,3.023,183,3.549,236,3.023,959,5.008,1821,5.008,1842,4.686,2603,5.951,2604,6.258,2605,7.261,2614,5.951,2676,4.418,2720,5.411,2721,6.77,2722,6.77,2723,5.951]],["title/index.html",[41,0.288,2724,3.125,2725,3.125]],["body/index.html",[1,1.174,3,0.049,4,0.08,5,0.143,7,0.688,8,0.024,11,1.385,12,3.87,13,2.877,14,3.39,15,3.048,16,0.37,19,2.173,21,0.009,22,0.757,23,2.322,24,1.165,25,0.849,31,0.104,33,0.002,34,0.003,35,0.562,37,0.688,38,0.757,39,1.259,42,0.713,43,0.221,47,3.049,48,0.815,49,0.229,52,0.509,53,0.169,54,0.509,56,1.477,57,1.404,58,1.686,59,3.035,60,3.074,64,1.225,69,0.973,70,0.318,72,0.688,79,2.153,82,1.453,90,2.759,93,3.197,96,0.637,97,2.403,98,3.102,101,2.619,102,1.09,105,1.231,113,1.163,115,0.416,116,0.623,117,1.452,120,3.4,125,0.688,126,3.111,127,0.637,128,1.225,129,2.759,130,2.646,131,1.766,132,1.385,133,3.175,136,1.127,137,1.671,141,0.445,142,2.759,144,1.631,147,0.36,148,1.393,152,1.259,153,1.915,155,2.368,158,3.823,161,1.766,162,2.866,163,0.68,164,0.384,168,3.315,173,0.445,175,1.09,176,1.385,177,1.897,178,0.596,179,2.143,180,1.898,184,1.355,185,1.803,189,0.507,190,0.484,192,0.484,195,0.464,197,0.484,202,0.348,204,1.385,205,1.523,221,1.259,223,3.4,224,1.985,231,3.451,235,0.688,236,3.33,237,1.915,238,3.856,239,3.987,240,4.495,241,2.02,242,2.404,243,2.761,244,2.062,245,2.944,246,2.049,247,2.824,248,1.858,250,0.728,252,1.245,256,0.983,257,3.782,258,4.314,259,2.538,260,0.757,261,1.758,262,1.259,263,1.692,264,0.688,266,0.532,267,0.267,270,2.509,271,0.596,274,2.334,277,1.09,279,0.815,281,1.344,282,0.688,283,2.162,286,0.188,290,0.975,293,1.444,294,2.183,299,0.532,300,2.427,307,1.508,324,2.334,332,2.368,337,0.532,341,0.507,343,0.928,348,0.532,351,1.604,353,1.766,373,0.413,382,0.562,383,0.928,384,0.928,385,0.532,387,0.413,388,0.688,398,0.484,400,0.757,402,0.886,405,1.942,406,2.322,407,1.611,416,2.287,420,0.267,421,0.994,427,0.596,435,0.398,456,1.34,458,2.322,469,0.562,481,0.503,488,1.927,491,1.942,492,0.772,494,0.384,499,0.338,515,0.413,528,2.271,530,2.005,532,1.225,547,0.464,549,2.541,550,1.127,569,0.688,570,0.484,572,0.637,573,3.563,578,1.562,581,0.413,582,2.321,586,1.624,587,1.666,596,1.165,605,0.507,623,0.849,624,0.757,627,1.452,634,0.637,635,0.637,636,0.688,650,3.634,656,0.886,666,1.385,676,0.637,707,0.975,714,3.089,724,1.931,735,1.259,753,1.992,754,0.757,756,1.084,765,3.337,766,0.973,785,0.484,786,0.507,787,0.484,788,0.445,789,0.728,791,2.82,792,5.205,793,0.757,803,0.688,804,0.562,805,2.541,806,0.757,807,1.385,812,0.757,826,0.757,827,0.757,828,1.028,832,0.507,850,0.688,855,1.259,859,1.915,865,2.719,874,2.864,878,0.688,881,0.757,885,1.165,886,1.163,887,3.998,890,0.413,891,0.428,892,1.758,893,0.975,898,1.174,899,1.245,902,0.757,905,0.562,912,1.044,917,1.165,925,1.084,928,1.165,944,1.165,946,1.992,959,0.637,962,1.508,968,0.596,976,0.562,979,1.165,993,1.165,1007,0.688,1008,1.741,1009,1.901,1010,1.901,1012,2.755,1013,3.161,1014,4.367,1016,1.692,1017,0.464,1019,2.086,1022,0.464,1023,1.692,1024,0.784,1026,0.464,1027,3.412,1030,0.372,1031,0.704,1037,2.877,1041,0.688,1042,3.67,1048,0.688,1049,1.915,1056,0.688,1057,1.385,1058,1.915,1061,0.688,1071,0.688,1072,1.385,1073,1.758,1076,0.562,1082,0.688,1088,0.688,1089,5.989,1093,0.562,1095,0.562,1096,0.928,1099,0.688,1100,2.528,1112,0.688,1114,3.555,1128,0.596,1130,1.165,1133,1.385,1134,2.368,1136,2.759,1138,0.757,1143,0.757,1144,0.637,1146,1.259,1148,0.757,1156,1.992,1157,2.864,1159,1.915,1171,1.259,1172,3.471,1179,0.688,1184,1.741,1187,0.688,1191,0.757,1194,0.637,1236,1.992,1252,0.688,1261,0.688,1272,1.385,1273,1.864,1316,0.688,1317,1.741,1334,1.992,1336,0.445,1337,0.562,1349,1.259,1385,1.421,1391,0.484,1393,2.16,1394,0.445,1397,0.886,1401,0.596,1412,0.562,1417,2.349,1419,1.666,1458,5.179,1462,0.757,1464,2.528,1465,0.484,1481,1.508,1490,0.596,1492,2.302,1519,3.75,1520,0.688,1521,2.153,1523,0.484,1532,1.611,1546,1.915,1555,4.124,1556,1.385,1557,3.67,1569,0.637,1575,0.688,1576,1.741,1579,0.688,1584,2.61,1586,0.688,1587,2.368,1588,2.368,1601,1.741,1610,2.368,1615,0.94,1617,0.484,1619,0.596,1626,0.596,1627,1.666,1628,2.078,1631,0.688,1632,0.757,1633,0.757,1654,0.562,1671,0.637,1695,0.688,1705,0.757,1708,0.596,1715,1.385,1718,0.637,1723,1.259,1725,0.688,1726,3.29,1727,2.049,1735,2.368,1747,0.637,1748,0.637,1750,1.385,1751,2.368,1779,1.259,1782,2.759,1784,2.368,1785,0.757,1789,1.915,1792,2.368,1802,0.757,1803,1.385,1804,0.757,1807,1.385,1808,2.82,1814,1.741,1819,0.757,1821,0.637,1831,0.757,1833,1.259,1840,1.992,1842,5.298,1859,1.385,1865,0.637,1867,0.688,1868,1.385,1871,0.688,1878,1.385,1924,0.688,1944,0.562,1948,0.757,1950,0.688,1960,0.688,1994,0.507,2017,0.688,2029,1.225,2032,1.385,2035,0.757,2036,2.368,2043,0.757,2047,0.757,2048,0.757,2049,2.893,2058,1.385,2104,1.385,2119,2.509,2147,0.637,2159,3.337,2162,0.688,2176,0.688,2189,0.688,2213,6.293,2215,0.757,2233,1.864,2261,0.688,2311,4.655,2341,0.757,2368,1.09,2384,0.757,2385,0.757,2386,0.757,2393,1.385,2430,0.532,2432,0.757,2434,0.688,2439,0.637,2452,1.259,2475,1.915,2480,0.757,2485,0.596,2500,0.688,2503,0.688,2553,2.82,2554,1.165,2555,0.688,2556,2.153,2557,0.757,2558,0.688,2579,0.757,2586,1.385,2592,0.688,2601,1.259,2604,0.688,2610,0.688,2639,1.165,2653,0.757,2660,0.757,2665,1.385,2679,0.757,2681,0.757,2683,0.757,2685,0.757,2687,0.757,2690,2.82,2691,1.385,2692,0.688,2693,0.688,2713,0.688,2714,0.688,2715,0.688,2718,0.688,2720,2.153,2723,3.403,2724,1.385,2725,1.385,2726,6.672,2727,6.595,2728,1.576,2729,3.909,2730,0.861,2731,0.861,2732,1.741,2733,3.872,2734,6.513,2735,1.576,2736,3.14,2737,6.425,2738,6.814,2739,1.576,2740,2.178,2741,2.759,2742,1.576,2743,2.178,2744,2.178,2745,0.861,2746,0.861,2747,3.14,2748,4.448,2749,0.861,2750,1.576,2751,6.014,2752,0.861,2753,4.176,2754,1.576,2755,3.529,2756,0.861,2757,0.861,2758,1.576,2759,4.176,2760,2.178,2761,1.576,2762,3.14,2763,1.576,2764,1.915,2765,2.694,2766,2.178,2767,2.178,2768,2.178,2769,2.178,2770,2.178,2771,2.178,2772,3.529,2773,2.178,2774,3.529,2775,1.576,2776,0.861,2777,2.694,2778,0.861,2779,0.861,2780,0.861,2781,2.178,2782,2.178,2783,2.178,2784,0.861,2785,3.529,2786,7.789,2787,1.576,2788,4.692,2789,2.178,2790,0.861,2791,4.692,2792,1.576,2793,2.178,2794,2.178,2795,2.694,2796,2.178,2797,2.178,2798,0.861,2799,1.576,2800,3.529,2801,0.861,2802,0.861,2803,2.759,2804,0.861,2805,0.861,2806,0.861,2807,0.861,2808,0.861,2809,0.861,2810,3.14,2811,2.694,2812,0.861,2813,1.576,2814,0.861,2815,4.448,2816,0.861,2817,0.861,2818,4.448,2819,4.692,2820,0.861,2821,0.861,2822,0.861,2823,0.861,2824,0.861,2825,0.861,2826,0.861,2827,0.861,2828,0.861,2829,4.448,2830,0.861,2831,3.14,2832,1.576,2833,2.694,2834,0.861,2835,6.595,2836,2.178,2837,2.178,2838,0.861,2839,0.861,2840,0.861,2841,0.861,2842,2.694,2843,0.861,2844,2.178,2845,0.861,2846,0.861,2847,1.576,2848,0.861,2849,0.861,2850,0.861,2851,2.178,2852,0.861,2853,2.178,2854,0.861,2855,0.861,2856,0.861,2857,0.861,2858,0.861,2859,0.861,2860,1.576,2861,0.861,2862,2.178,2863,1.576,2864,1.576,2865,1.576,2866,1.576,2867,1.576,2868,1.576,2869,5.114,2870,1.576,2871,1.576,2872,1.576,2873,1.576,2874,7.738,2875,0.861,2876,0.861,2877,0.861,2878,0.861,2879,7.209,2880,7.859,2881,2.694,2882,0.861,2883,1.576,2884,3.529,2885,1.576,2886,0.861,2887,0.861,2888,1.576,2889,2.178,2890,0.861,2891,0.861,2892,0.861,2893,0.861,2894,0.861,2895,0.861,2896,1.385,2897,0.861,2898,0.861,2899,1.576,2900,0.861,2901,0.861,2902,3.529,2903,0.861,2904,2.694,2905,0.861,2906,2.694,2907,1.576,2908,2.694,2909,3.872,2910,0.861,2911,1.576,2912,1.576,2913,0.861,2914,1.576,2915,0.861,2916,0.861,2917,0.861,2918,3.872,2919,0.861,2920,6.879,2921,3.872,2922,0.861,2923,0.861,2924,0.861,2925,0.861,2926,2.694,2927,0.861,2928,1.576,2929,1.576,2930,0.861,2931,0.861,2932,0.861,2933,1.576,2934,0.861,2935,1.576,2936,0.861,2937,0.861,2938,0.861,2939,0.861,2940,2.178,2941,0.861,2942,0.861,2943,2.694,2944,2.694,2945,0.861,2946,2.694,2947,0.861,2948,0.861,2949,0.861,2950,0.861,2951,2.694,2952,3.14,2953,0.861,2954,2.694,2955,3.529,2956,1.576,2957,0.861,2958,0.861,2959,1.576,2960,0.861,2961,0.861,2962,0.861,2963,6.333,2964,0.861,2965,0.861,2966,0.757,2967,2.694,2968,0.861,2969,2.694,2970,0.861,2971,1.576,2972,2.178,2973,1.576,2974,0.861,2975,2.178,2976,5.114,2977,1.576,2978,3.14,2979,0.861,2980,0.861,2981,1.576,2982,2.694,2983,2.694,2984,0.861,2985,1.576,2986,0.861,2987,0.757,2988,0.861,2989,0.861,2990,0.757,2991,0.861,2992,0.861,2993,0.861,2994,0.861,2995,0.861,2996,0.861,2997,0.861,2998,0.861,2999,0.861,3000,0.861,3001,1.576,3002,1.576,3003,0.861,3004,0.861,3005,1.385,3006,0.861,3007,1.576,3008,0.861,3009,0.861,3010,5.297,3011,1.576,3012,3.529,3013,0.861,3014,0.861,3015,3.14,3016,0.861,3017,0.861,3018,2.178,3019,0.861,3020,0.861,3021,0.861,3022,5.76,3023,0.861,3024,0.861,3025,0.861,3026,1.576,3027,4.448,3028,0.861,3029,1.576,3030,4.176,3031,0.861,3032,2.178,3033,0.861,3034,1.576,3035,0.861,3036,0.861,3037,0.861,3038,0.861,3039,0.757,3040,0.757,3041,0.861,3042,0.861,3043,0.861,3044,3.872,3045,1.576,3046,1.576,3047,0.861,3048,2.694,3049,0.861,3050,0.861,3051,0.861,3052,2.178,3053,0.861,3054,5.114,3055,2.694,3056,0.861,3057,3.14,3058,0.861,3059,0.861,3060,2.694,3061,2.178,3062,0.861,3063,0.861,3064,2.694,3065,2.694,3066,0.861,3067,0.861,3068,0.861,3069,3.872,3070,0.861,3071,0.861,3072,0.861,3073,2.694,3074,0.861,3075,0.861,3076,2.178,3077,1.576,3078,2.178,3079,0.861,3080,0.861,3081,0.861,3082,0.861,3083,2.178,3084,2.178,3085,3.14,3086,0.861,3087,1.576,3088,2.178,3089,0.861,3090,0.861,3091,1.576,3092,0.861,3093,0.861,3094,2.178,3095,0.861,3096,0.861,3097,2.178,3098,2.178,3099,1.576,3100,0.861,3101,2.178,3102,0.861,3103,2.694,3104,2.694,3105,1.576,3106,0.861,3107,0.861,3108,0.861,3109,1.576,3110,0.861,3111,0.861,3112,0.861,3113,0.861,3114,1.576,3115,0.861,3116,3.14,3117,2.694,3118,0.861,3119,0.861,3120,1.576,3121,1.576,3122,1.576,3123,0.861,3124,0.861,3125,1.576,3126,0.861,3127,2.178,3128,1.576,3129,0.861,3130,0.861,3131,0.861,3132,0.861,3133,1.576,3134,0.861,3135,0.861,3136,0.861,3137,0.861,3138,0.861,3139,0.861,3140,0.861,3141,0.861,3142,3.529,3143,0.861,3144,0.861,3145,3.529,3146,0.861,3147,0.861,3148,0.861,3149,2.178,3150,0.861,3151,0.861,3152,0.861,3153,0.861,3154,0.861,3155,0.861,3156,2.694,3157,0.861,3158,1.576,3159,0.861,3160,1.576,3161,0.861,3162,0.861,3163,3.872,3164,0.861,3165,1.576,3166,0.861,3167,0.861,3168,0.861,3169,0.861,3170,0.861,3171,0.861,3172,0.861,3173,0.861,3174,0.861,3175,0.861,3176,0.861,3177,1.576,3178,0.861,3179,0.861,3180,0.861,3181,0.861,3182,0.861,3183,0.861,3184,0.861,3185,0.861,3186,0.861,3187,0.861,3188,0.861,3189,0.861,3190,0.861,3191,0.861,3192,0.861,3193,0.861,3194,0.861,3195,0.861,3196,0.861,3197,1.576,3198,0.861,3199,0.861,3200,0.861,3201,0.861,3202,0.861,3203,0.861,3204,0.861,3205,0.861,3206,0.861,3207,0.861,3208,0.861,3209,1.576,3210,0.861,3211,0.861,3212,0.861,3213,0.861,3214,0.861,3215,0.861,3216,1.576,3217,0.861,3218,1.576,3219,0.861,3220,0.861,3221,0.861,3222,0.861,3223,0.861,3224,0.861,3225,1.576,3226,0.861,3227,0.861,3228,0.861,3229,0.861,3230,0.861,3231,0.861,3232,1.576,3233,2.178,3234,0.861,3235,0.861,3236,1.576,3237,0.861,3238,1.576,3239,0.861,3240,0.757,3241,1.576,3242,0.861,3243,0.861,3244,0.861,3245,0.861,3246,0.861,3247,0.861,3248,0.861,3249,0.861,3250,0.861,3251,0.861,3252,1.576,3253,0.861,3254,0.861,3255,0.861,3256,0.861,3257,0.861,3258,0.861,3259,0.861,3260,0.861,3261,0.861,3262,1.385,3263,0.861,3264,0.861,3265,0.861,3266,0.861,3267,0.861,3268,0.861,3269,0.861,3270,0.861,3271,0.861,3272,0.861,3273,0.861,3274,0.861,3275,0.861,3276,0.861,3277,0.861,3278,0.861,3279,0.861,3280,0.861,3281,0.861,3282,0.861,3283,0.861,3284,0.861,3285,0.861,3286,0.861,3287,0.861,3288,0.861,3289,0.861,3290,0.861,3291,0.757,3292,0.861,3293,0.757,3294,0.861,3295,0.861,3296,0.861,3297,0.861,3298,0.861,3299,1.576,3300,0.861,3301,2.178,3302,0.861,3303,0.861,3304,0.861,3305,0.861,3306,2.178,3307,0.861,3308,0.861,3309,0.861,3310,0.861,3311,0.861,3312,0.861,3313,2.178,3314,0.861,3315,0.861,3316,0.861,3317,0.861,3318,0.861,3319,0.861,3320,1.576,3321,0.861,3322,0.861,3323,0.861,3324,0.861,3325,0.861,3326,0.861,3327,0.861,3328,0.861,3329,0.861,3330,1.576,3331,1.576,3332,0.861,3333,0.861,3334,0.861,3335,0.861,3336,0.861,3337,0.861,3338,0.861,3339,0.861,3340,0.757,3341,0.861,3342,0.861,3343,0.861,3344,0.861,3345,0.861,3346,0.861,3347,0.861,3348,1.576,3349,0.861,3350,0.861,3351,0.861,3352,0.861,3353,0.861,3354,0.861,3355,0.861,3356,0.861,3357,0.861,3358,0.861,3359,0.861,3360,0.861,3361,0.861,3362,0.861,3363,0.861,3364,0.861,3365,0.861,3366,0.861,3367,0.861,3368,0.861,3369,0.861,3370,0.861,3371,0.861,3372,0.861,3373,0.861,3374,0.861,3375,0.861,3376,0.861,3377,0.861,3378,0.861,3379,0.861,3380,0.861,3381,3.14,3382,3.529,3383,1.576,3384,1.576,3385,0.861,3386,0.861,3387,1.576,3388,2.178,3389,1.385,3390,1.576,3391,0.861,3392,0.861,3393,1.576,3394,1.576,3395,0.861,3396,0.861,3397,0.861,3398,0.861,3399,0.861,3400,0.861,3401,0.861,3402,2.694,3403,0.861,3404,1.576,3405,1.576,3406,1.576,3407,0.861,3408,0.861,3409,0.861,3410,0.861,3411,0.861,3412,0.861,3413,0.861,3414,0.861,3415,0.861,3416,0.861,3417,1.576,3418,1.576,3419,1.576,3420,0.861,3421,0.861,3422,2.178,3423,0.861,3424,0.861,3425,0.861,3426,0.861,3427,0.861,3428,0.861,3429,0.861,3430,2.178,3431,0.861,3432,2.178,3433,0.861,3434,0.861,3435,0.861,3436,0.861,3437,2.178,3438,0.861,3439,0.861,3440,1.576,3441,0.861,3442,0.861,3443,0.861,3444,0.861,3445,0.861,3446,0.861,3447,0.861,3448,0.861,3449,0.861,3450,0.861,3451,0.861,3452,0.757,3453,0.861,3454,0.861,3455,0.861,3456,0.861,3457,0.861]],["title/modules.html",[179,2.294]],["body/modules.html",[21,0.009,33,0.009,34,0.009,178,4.357,179,2.469,188,4.357,189,3.707,190,3.541,191,4.357,192,3.541,193,4.357,194,4.108,195,3.392,196,4.357,197,3.541,198,3.707,199,4.357,382,4.108,690,4.357,1944,4.108,3240,7.892,3452,5.533,3458,8.979,3459,8.979,3460,8.998]],["title/overview.html",[2732,4.675]],["body/overview.html",[2,1.308,21,0.011,33,0.006,34,0.006,35,4.194,123,1.139,177,1.079,178,6.111,179,1.561,180,1.61,181,1.777,182,1.777,183,1.663,184,1.718,185,1.718,186,3.498,187,3.498,188,5.958,189,4.992,190,4.549,191,4.449,192,4.843,193,5.782,194,5.192,195,4.716,196,5.073,197,4.549,198,4.959,199,5.596,200,2.488,201,1.777,202,1.61,252,1.84,337,3.976,341,3.785,379,3.498,380,3.498,381,3.498,382,5.711,383,3.785,384,3.785,385,3.976,402,4.387,403,4.824,488,1.561,581,1.907,605,4.593,619,3.498,620,3.498,622,3.498,623,4.093,647,4.593,728,3.498,729,3.498,730,3.498,781,3.498,782,3.498,784,3.498,785,4.387,786,4.824,787,4.608,788,4.116,789,3.606,1315,5.088,1324,4.824,1439,3.498,1440,3.498,1441,3.498,1584,2.944,1617,2.239,1774,3.498,1776,3.498,1777,6.12,1944,5.192,1945,3.498,1994,4.593,2007,3.498,2008,3.498,2009,3.498,2011,5.088,2027,5.088,2029,4.387,2178,3.498,2187,3.498,2188,3.498,2189,5.137,2208,3.498,2209,3.498,2210,3.498,2377,3.498,2378,3.498,2379,3.498,2516,3.498,2517,3.498,2732,3.181,3461,3.98,3462,3.98,3463,3.98,3464,3.98,3465,3.98]],["title/properties.html",[492,1.125,2631,3.125]],["body/properties.html",[8,0.197,21,0.01,33,0.009,34,0.009,492,1.52,1627,4.296,2741,6.104,3466,6.945,3467,6.945,3468,6.945]],["title/miscellaneous/variables.html",[224,2.892,2676,2.32]],["body/miscellaneous/variables.html",[3,0.069,19,2.633,21,0.011,33,0.006,34,0.006,41,0.308,48,3.244,53,0.67,56,1.203,58,1.544,60,2.14,65,0.809,89,3.04,97,1.492,108,1.631,113,1.747,115,1.655,116,1.544,117,2.908,147,1.589,164,1.699,223,4.988,224,2.14,227,3.344,228,4.743,231,1.968,234,1.823,236,1.699,241,1.004,244,1.088,259,2.659,286,1.814,293,1.118,294,2.353,299,2.353,307,2.633,310,0.768,352,1.059,373,3.006,416,3.324,417,2.05,420,2.699,421,3.215,435,1.759,481,2.003,488,1.492,505,2.33,530,1.492,581,1.823,587,2.353,602,2.482,756,3.586,766,1.699,791,3.04,814,3.344,815,3.344,816,6.153,834,1.893,861,3.992,865,3.12,887,2.482,899,2.495,946,3.992,1024,1.893,1025,3.992,1028,3.735,1031,3.048,1061,4.313,1062,4.313,1103,4.743,1104,4.313,1117,4.743,1118,4.313,1156,2.814,1157,3.992,1273,2.633,1291,4.313,1330,3.344,1350,4.743,1351,3.344,1352,3.344,1353,3.344,1385,3.521,1490,2.633,1523,3.528,1534,5.013,1536,3.344,1576,3.04,1597,3.04,1628,2.24,1833,3.04,2129,4.313,2147,3.992,2152,4.313,2233,2.633,2553,4.313,2554,2.814,2555,4.313,2556,4.313,2558,4.313,2561,6.287,2564,3.344,2567,4.743,2588,3.344,2589,3.344,2591,3.344,2592,4.313,2598,3.344,2599,5.513,2600,4.743,2601,5.455,2609,3.344,2610,4.313,2624,3.344,2625,3.344,2626,5.999,2627,3.344,2628,6.58,2629,4.743,2639,3.992,2676,2.482,2686,3.344,2690,4.313,2692,3.04,2693,3.04,2694,3.344,2695,3.344,2696,3.344,2697,3.344,2698,3.344,2699,3.344,2700,3.344,2701,3.344,2702,3.344,2703,3.344,2704,3.344,2705,3.344,2706,3.344,2707,3.344,2708,3.344,2709,3.344,2710,3.344,2711,3.344,2713,3.04,2714,3.04,2715,3.04,2718,3.04,2729,4.743,2764,3.344,2803,3.344,2896,3.344,2966,3.344,2987,4.743,2990,3.344,3005,3.344,3039,3.344,3040,3.344,3262,3.344,3291,3.344,3293,3.344,3340,3.344,3389,5.999,3469,7.207,3470,3.804,3471,7.486,3472,5.397,3473,6.272,3474,5.397,3475,5.397,3476,5.397,3477,3.804,3478,3.804,3479,3.804,3480,3.804,3481,3.804,3482,3.804,3483,3.804,3484,3.804,3485,3.804,3486,5.397,3487,3.804,3488,3.804,3489,5.397,3490,5.397,3491,3.804,3492,5.397,3493,5.397,3494,3.804,3495,6.272,3496,3.804,3497,3.804,3498,3.804,3499,3.804,3500,3.804,3501,7.207,3502,3.804,3503,3.804,3504,3.804,3505,3.804,3506,3.804,3507,3.804,3508,3.804,3509,3.804,3510,3.804,3511,3.804,3512,5.397,3513,3.804,3514,3.804,3515,3.804,3516,3.804,3517,6.272,3518,3.804,3519,3.804,3520,3.804,3521,3.804,3522,3.804,3523,3.804,3524,3.804,3525,3.804,3526,3.804,3527,3.804]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":834,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"injectables/PaymentService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":3466,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2650,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2671,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":2673,"title":{},"body":{"dependencies.html":{}}}],["0.40.1",{"_index":2646,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2649,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2663,"title":{},"body":{"dependencies.html":{}}}],["0.8",{"_index":1711,"title":{},"body":{"injectables/PaymentService.html":{}}}],["0/1",{"_index":2611,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1382,"title":{},"body":{"controllers/EventsController.html":{}}}],["01t10:00:00z",{"_index":938,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["01t18:00:00z",{"_index":939,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["02",{"_index":1383,"title":{},"body":{"controllers/EventsController.html":{}}}],["03",{"_index":1415,"title":{},"body":{"controllers/EventsController.html":{}}}],["04",{"_index":1416,"title":{},"body":{"controllers/EventsController.html":{}}}],["05",{"_index":818,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["06",{"_index":937,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["1",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventSalesService.html":{},"classes/IdDto.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2666,"title":{},"body":{"dependencies.html":{}}}],["1.3",{"_index":3518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.4.6",{"_index":2652,"title":{},"body":{"dependencies.html":{}}}],["1.5.3",{"_index":2669,"title":{},"body":{"dependencies.html":{}}}],["1.8",{"_index":3519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1/1",{"_index":2590,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":832,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"entities/Event.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"entities/ReservationDetails.html":{},"modules/ThrollerModule.html":{},"entities/Transaction.html":{},"index.html":{}}}],["10.0.2",{"_index":2645,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":2641,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":2637,"title":{},"body":{"dependencies.html":{}}}],["10.3.7",{"_index":2632,"title":{},"body":{"dependencies.html":{}}}],["10/10",{"_index":2616,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":934,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["100.00",{"_index":999,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/EventPrice.html":{}}}],["1000",{"_index":877,"title":{},"body":{"injectables/CookieService.html":{}}}],["1000000",{"_index":2409,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["12",{"_index":3513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12345",{"_index":1000,"title":{},"body":{"classes/CreateReservationDto.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["15",{"_index":3461,"title":{},"body":{"overview.html":{}}}],["150",{"_index":1289,"title":{},"body":{"injectables/EventPricesService.html":{},"controllers/EventsController.html":{}}}],["16.4.5",{"_index":2658,"title":{},"body":{"dependencies.html":{}}}],["1711085051379",{"_index":3254,"title":{},"body":{"index.html":{}}}],["1712572717258",{"_index":3253,"title":{},"body":{"index.html":{}}}],["1712642603000",{"_index":3258,"title":{},"body":{"index.html":{}}}],["1712661221574",{"_index":3256,"title":{},"body":{"index.html":{}}}],["1712661230450",{"_index":3243,"title":{},"body":{"index.html":{}}}],["1712661230451",{"_index":3246,"title":{},"body":{"index.html":{}}}],["1712661230452",{"_index":3255,"title":{},"body":{"index.html":{}}}],["1712717719010",{"_index":3249,"title":{},"body":{"index.html":{}}}],["1712751776641",{"_index":3242,"title":{},"body":{"index.html":{}}}],["1712751780000",{"_index":3259,"title":{},"body":{"index.html":{}}}],["1h",{"_index":2258,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["2",{"_index":581,"title":{},"body":{"controllers/CartItemsController.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.4",{"_index":2636,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":2640,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":2654,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":2593,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":2613,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":2595,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1669,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["200",{"_index":3374,"title":{},"body":{"index.html":{}}}],["2023",{"_index":822,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"controllers/EventsController.html":{}}}],["2024",{"_index":936,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["22",{"_index":819,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["24",{"_index":3463,"title":{},"body":{"overview.html":{}}}],["25",{"_index":971,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["255",{"_index":957,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["29",{"_index":3464,"title":{},"body":{"overview.html":{}}}],["3",{"_index":602,"title":{},"body":{"controllers/CartItemsController.html":{},"classes/CreateCartItemDto.html":{},"injectables/EventSalesService.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["3.0.1",{"_index":2648,"title":{},"body":{"dependencies.html":{}}}],["3.0.4",{"_index":2656,"title":{},"body":{"dependencies.html":{}}}],["3.13.0",{"_index":2675,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":2633,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2606,"title":{},"body":{"coverage.html":{}}}],["360",{"_index":1478,"title":{},"body":{"injectables/EventsService.html":{}}}],["3600",{"_index":1623,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/RedisService.html":{}}}],["4",{"_index":1353,"title":{},"body":{"injectables/EventSalesService.html":{},"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":2664,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":2596,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":2623,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["42",{"_index":1637,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["5",{"_index":684,"title":{},"body":{"injectables/CartItemsService.html":{},"classes/CreateEventDto.html":{},"injectables/TransactionsService.html":{}}}],["5.1.2",{"_index":2644,"title":{},"body":{"dependencies.html":{}}}],["5.3.2",{"_index":2662,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":2597,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":963,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["50.00",{"_index":983,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["500",{"_index":935,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventSalesService.html":{}}}],["6",{"_index":2178,"title":{},"body":{"classes/SignUpDto.html":{},"overview.html":{}}}],["6/6",{"_index":2602,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":2619,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":2194,"title":{},"body":{"modules/ThrollerModule.html":{}}}],["66",{"_index":2612,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":3465,"title":{},"body":{"overview.html":{}}}],["7.1.0",{"_index":2661,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2659,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":2643,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2672,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":2594,"title":{},"body":{"coverage.html":{}}}],["7d",{"_index":830,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"interfaces/TokenConfig.html":{}}}],["8",{"_index":3512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.11.5",{"_index":2668,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":2615,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":2608,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":2622,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":2620,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":2618,"title":{},"body":{"coverage.html":{}}}],["8601",{"_index":948,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["86400",{"_index":835,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["88",{"_index":2607,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":3462,"title":{},"body":{"overview.html":{}}}],["9.0.1",{"_index":2674,"title":{},"body":{"dependencies.html":{}}}],["9/11",{"_index":2621,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":2617,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":1153,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["abc123",{"_index":1620,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{}}}],["absent",{"_index":3273,"title":{},"body":{"index.html":{}}}],["access",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStoreService.html":{},"guards/RoleGuard.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["accessed",{"_index":1783,"title":{},"body":{"modules/RedisModule.html":{}}}],["accessible",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["accesstoken",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["accesstokenexpiration",{"_index":2254,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["accesstokensecret",{"_index":2255,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["accesstokenstrategy",{"_index":35,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["accordingly",{"_index":3325,"title":{},"body":{"index.html":{}}}],["account",{"_index":1179,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/User.html":{},"index.html":{}}}],["accountkey",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/User.html":{}}}],["accurate",{"_index":3060,"title":{},"body":{"index.html":{}}}],["achieves",{"_index":3042,"title":{},"body":{"index.html":{}}}],["acknowledgments",{"_index":2742,"title":{},"body":{"index.html":{}}}],["actionrequired",{"_index":2349,"title":{},"body":{"injectables/TokenService.html":{}}}],["actions",{"_index":3116,"title":{},"body":{"index.html":{}}}],["activate",{"_index":1600,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["active",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{},"classes/PaginationAndFilterDto.html":{},"entities/User.html":{}}}],["activity",{"_index":3089,"title":{},"body":{"index.html":{}}}],["adaptable",{"_index":3228,"title":{},"body":{"index.html":{}}}],["add",{"_index":127,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"injectables/EventSalesService.html":{},"guards/IsCreatorGuard.html":{},"index.html":{}}}],["added",{"_index":143,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{}}}],["addforeignkey.ts",{"_index":125,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"coverage.html":{},"index.html":{}}}],["addforeignkey.ts:18",{"_index":151,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["addforeignkey.ts:43",{"_index":140,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["addforeignkeyconstraints1712751780000",{"_index":122,"title":{"classes/AddForeignKeyConstraints1712751780000.html":{}},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"coverage.html":{}}}],["adding",{"_index":153,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["additemtocart",{"_index":637,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["additemtocart(userid",{"_index":651,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["addition",{"_index":176,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["additional",{"_index":1349,"title":{},"body":{"injectables/EventSalesService.html":{},"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["additionalrevenue",{"_index":1346,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["address",{"_index":1647,"title":{},"body":{"classes/LoginDTO.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["adds",{"_index":578,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["adhering",{"_index":3063,"title":{},"body":{"index.html":{}}}],["admin",{"_index":1628,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["admin?page=1&limit=10",{"_index":1987,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["admins",{"_index":1380,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["again",{"_index":2324,"title":{},"body":{"injectables/TokenService.html":{}}}],["against",{"_index":1191,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["aiding",{"_index":3289,"title":{},"body":{"index.html":{}}}],["aids",{"_index":3189,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":2915,"title":{},"body":{"index.html":{}}}],["aligns",{"_index":3209,"title":{},"body":{"index.html":{}}}],["all?page=1&limit=10&sortby=createdat&sortorder=asc",{"_index":2372,"title":{},"body":{"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["all?page=1&limit=10&sortby=date&sortorder=asc",{"_index":1982,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["allow",{"_index":2157,"title":{},"body":{"guards/RoleGuard.html":{}}}],["allowing",{"_index":3313,"title":{},"body":{"index.html":{}}}],["allows",{"_index":2985,"title":{},"body":{"index.html":{}}}],["already",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventsService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["alter",{"_index":157,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["always",{"_index":3423,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1708,"title":{},"body":{"injectables/PaymentService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"index.html":{}}}],["amounts",{"_index":3187,"title":{},"body":{"index.html":{}}}],["annual",{"_index":929,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["any).message",{"_index":1548,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["api",{"_index":2810,"title":{},"body":{"index.html":{}}}],["apis",{"_index":2849,"title":{},"body":{"index.html":{}}}],["app",{"_index":2908,"title":{},"body":{"index.html":{}}}],["app's",{"_index":3245,"title":{},"body":{"index.html":{}}}],["app.e2e",{"_index":2870,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":2864,"title":{},"body":{"index.html":{}}}],["application",{"_index":59,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/CommonModule.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applications",{"_index":2921,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1022,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["appmodule",{"_index":178,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["approval",{"_index":2956,"title":{},"body":{"index.html":{}}}],["approve",{"_index":1722,"title":{},"body":{"injectables/PaymentService.html":{}}}],["approved",{"_index":2233,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["apps",{"_index":3250,"title":{},"body":{"index.html":{}}}],["archery",{"_index":2692,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["architecture",{"_index":2786,"title":{},"body":{"index.html":{}}}],["argon2",{"_index":1184,"title":{},"body":{"injectables/EncryptionService.html":{},"dependencies.html":{},"index.html":{}}}],["argon2.hash(password",{"_index":1197,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["argon2.verify(hash",{"_index":1198,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["argumentshost",{"_index":1527,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["around",{"_index":2757,"title":{},"body":{"index.html":{}}}],["array",{"_index":3520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asc",{"_index":1747,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/TransactionsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["ascending",{"_index":1754,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["ask",{"_index":3412,"title":{},"body":{"index.html":{}}}],["associated",{"_index":515,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/RedisService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{},"index.html":{}}}],["association",{"_index":3197,"title":{},"body":{"index.html":{}}}],["associations",{"_index":3059,"title":{},"body":{"index.html":{}}}],["async",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["athletics",{"_index":2693,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["attached",{"_index":2942,"title":{},"body":{"index.html":{}}}],["attachment",{"_index":119,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["attempts",{"_index":2992,"title":{},"body":{"index.html":{}}}],["auth",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.controller.spec.ts",{"_index":3352,"title":{},"body":{"index.html":{}}}],["auth.controller.ts",{"_index":3351,"title":{},"body":{"index.html":{}}}],["auth.module.ts",{"_index":3362,"title":{},"body":{"index.html":{}}}],["auth.service",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.service.spec.ts",{"_index":3357,"title":{},"body":{"index.html":{}}}],["auth.service.ts",{"_index":3358,"title":{},"body":{"index.html":{}}}],["auth/access",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/change",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/delete/1",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/login",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/logout",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/refresh",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/signup",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller",{"_index":251,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":3323,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["authenticity",{"_index":3342,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":29,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["authguard('jwt",{"_index":26,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["authmodule",{"_index":188,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":3468,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":90,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"index.html":{}}}],["authservice",{"_index":337,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["authservice.delete(1",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.login('user@example.com",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.logout(1",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.signup(createuserdto",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.updatepassword(1",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["autre",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["availability",{"_index":3098,"title":{},"body":{"index.html":{}}}],["available",{"_index":690,"title":{},"body":{"injectables/CartItemsService.html":{},"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"modules.html":{}}}],["availableqty",{"_index":1227,"title":{},"body":{"entities/Event.html":{}}}],["avoiding",{"_index":3274,"title":{},"body":{"index.html":{}}}],["await",{"_index":66,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["b",{"_index":3429,"title":{},"body":{"index.html":{}}}],["badminton",{"_index":2694,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":1533,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["base",{"_index":928,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventPricesService.html":{},"index.html":{}}}],["based",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/PaymentService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["baseprice",{"_index":918,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{}}}],["basketball",{"_index":2695,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bearer",{"_index":92,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["before",{"_index":3145,"title":{},"body":{"index.html":{}}}],["begin",{"_index":3496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behavior",{"_index":3279,"title":{},"body":{"index.html":{}}}],["being",{"_index":997,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["below",{"_index":3390,"title":{},"body":{"index.html":{}}}],["between",{"_index":962,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/PaymentService.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["blade/nest",{"_index":3384,"title":{},"body":{"index.html":{}}}],["body",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"guards/IsCreatorGuard.html":{},"controllers/UsersController.html":{}}}],["booking",{"_index":2048,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["bookings",{"_index":3114,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":1123,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"injectables/TokenManagementService.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":2761,"title":{},"body":{"index.html":{}}}],["boxing",{"_index":2696,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["branch",{"_index":3422,"title":{},"body":{"index.html":{}}}],["broader",{"_index":3133,"title":{},"body":{"index.html":{}}}],["browse",{"_index":3460,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3458,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":3403,"title":{},"body":{"index.html":{}}}],["build",{"_index":1726,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["building",{"_index":2104,"title":{},"body":{"injectables/ReservationsService.html":{},"index.html":{}}}],["buildqueryoptions",{"_index":1728,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["buildqueryoptions(paginationfilterdto",{"_index":1731,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["buildwherecondition",{"_index":1729,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["buildwherecondition(filterby",{"_index":1740,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["built",{"_index":2745,"title":{},"body":{"index.html":{}}}],["cache",{"_index":1808,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{},"index.html":{}}}],["cache_ttl_one_hour",{"_index":1448,"title":{},"body":{"injectables/EventsService.html":{}}}],["cached",{"_index":1824,"title":{},"body":{"injectables/RedisService.html":{}}}],["caching",{"_index":1792,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["calculatecarttotal",{"_index":2384,"title":{},"body":{"injectables/TransactionsService.html":{},"index.html":{}}}],["calculatecarttotal(cartitems",{"_index":2391,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["calculates",{"_index":2393,"title":{},"body":{"injectables/TransactionsService.html":{},"index.html":{}}}],["calculation",{"_index":3191,"title":{},"body":{"index.html":{}}}],["calculations",{"_index":3143,"title":{},"body":{"index.html":{}}}],["calls",{"_index":3353,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":1592,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":1596,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["cancelled",{"_index":3509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canoe_kayak",{"_index":2697,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["capabilities",{"_index":3121,"title":{},"body":{"index.html":{}}}],["cart",{"_index":242,"title":{"entities/Cart.html":{}},"body":{"modules/AppModule.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableReservations1712661230451.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"injectables/PaymentService.html":{},"entities/Reservation.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["cart.cartid",{"_index":566,"title":{},"body":{"entities/CartItem.html":{}}}],["cart.cartid)@joincolumn({name",{"_index":534,"title":{},"body":{"entities/CartItem.html":{}}}],["cart.cartitem",{"_index":503,"title":{},"body":{"entities/Cart.html":{}}}],["cart.createdat",{"_index":508,"title":{},"body":{"entities/Cart.html":{}}}],["cart.entity.ts",{"_index":3213,"title":{},"body":{"index.html":{}}}],["cart.updatedat",{"_index":511,"title":{},"body":{"entities/Cart.html":{}}}],["cart.user",{"_index":517,"title":{},"body":{"entities/Cart.html":{},"entities/User.html":{}}}],["cart_items",{"_index":1008,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableReservations1712661230451.html":{},"index.html":{}}}],["cartid",{"_index":493,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["cartitem",{"_index":494,"title":{"entities/CartItem.html":{}},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"entities/Reservation.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["cartitem.cart",{"_index":501,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{}}}],["cartitem.createdat",{"_index":538,"title":{},"body":{"entities/CartItem.html":{}}}],["cartitem.event",{"_index":543,"title":{},"body":{"entities/CartItem.html":{},"entities/Event.html":{},"injectables/ReservationDetailsService.html":{}}}],["cartitem.event.eventid",{"_index":720,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["cartitem.event.quantityavailable",{"_index":721,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitem.price",{"_index":546,"title":{},"body":{"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["cartitem.priceformula",{"_index":551,"title":{},"body":{"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["cartitem.quantity",{"_index":553,"title":{},"body":{"entities/CartItem.html":{},"injectables/CartItemsService.html":{}}}],["cartitem.reservations",{"_index":556,"title":{},"body":{"entities/CartItem.html":{},"entities/Reservation.html":{}}}],["cartitem.reservations)@joincolumn({name",{"_index":1897,"title":{},"body":{"entities/Reservation.html":{}}}],["cartitem.updatedat",{"_index":558,"title":{},"body":{"entities/CartItem.html":{}}}],["cartitemid",{"_index":529,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableReservations1712661230451.html":{},"entities/Reservation.html":{}}}],["cartitemrepository",{"_index":649,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitems",{"_index":657,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"entities/Event.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{}}}],["cartitems.entity.ts",{"_index":3107,"title":{},"body":{"index.html":{}}}],["cartitems.filter(item",{"_index":2087,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["cartitems.reduce((sum",{"_index":2425,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["cartitemscontroller",{"_index":568,"title":{"controllers/CartItemsController.html":{}},"body":{"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"coverage.html":{}}}],["cartitemsmodule",{"_index":189,"title":{"modules/CartItemsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartItemsModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["cartitemsservice",{"_index":605,"title":{"injectables/CartItemsService.html":{}},"body":{"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"injectables/ReservationsProcessorService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["cartitemsservice.additemtocart(1",{"_index":653,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.findallitemsincart(1",{"_index":658,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.findoneitemincart(1",{"_index":661,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.removeallitemfromcart(1",{"_index":669,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.removeoneitemfromcart(1",{"_index":673,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.save(cartitem",{"_index":678,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartitemsservice.updatequantityincart(1",{"_index":683,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["cartrepository",{"_index":744,"title":{},"body":{"injectables/CartsService.html":{}}}],["carts",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["carts.migration.spec.ts",{"_index":3280,"title":{},"body":{"index.html":{}}}],["carts.module.ts",{"_index":3211,"title":{},"body":{"index.html":{}}}],["carts.service",{"_index":733,"title":{},"body":{"modules/CartsModule.html":{}}}],["carts.service.spec.ts",{"_index":3207,"title":{},"body":{"index.html":{}}}],["carts.service.ts",{"_index":3205,"title":{},"body":{"index.html":{}}}],["carts/1/items",{"_index":588,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["carts/1/items/1",{"_index":592,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["carts/items",{"_index":579,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["cartservice",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ReservationsProcessorService.html":{}}}],["cartsmodule",{"_index":190,"title":{"modules/CartsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/ReservationsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["cartsservice",{"_index":402,"title":{"injectables/CartsService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"injectables/ReservationsProcessorService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["cartsservice.deletecart(1",{"_index":747,"title":{},"body":{"injectables/CartsService.html":{}}}],["cartsservice.findcart(1",{"_index":750,"title":{},"body":{"injectables/CartsService.html":{}}}],["cartsservice.getorcreatecart(1",{"_index":757,"title":{},"body":{"injectables/CartsService.html":{}}}],["cartsservice.save(cart",{"_index":762,"title":{},"body":{"injectables/CartsService.html":{}}}],["cartsservice.verifycartoneby(1",{"_index":767,"title":{},"body":{"injectables/CartsService.html":{}}}],["cartsservice.verifycartrelation(1",{"_index":771,"title":{},"body":{"injectables/CartsService.html":{}}}],["carttotal",{"_index":1710,"title":{},"body":{"injectables/PaymentService.html":{}}}],["carttotalprice",{"_index":2069,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["cascade",{"_index":1036,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableTickets1712717719010.html":{}}}],["cases",{"_index":3122,"title":{},"body":{"index.html":{}}}],["catch",{"_index":1497,"title":{},"body":{"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":1526,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1535,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["categories",{"_index":2691,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["categorizes",{"_index":2980,"title":{},"body":{"index.html":{}}}],["category",{"_index":944,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"index.html":{}}}],["category_type",{"_index":3510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["category_type_enum",{"_index":1061,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["categoryeventtypeenum",{"_index":941,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"miscellaneous/enumerations.html":{}}}],["categoryeventtypeenum.conference",{"_index":940,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["categorytype",{"_index":919,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["caught",{"_index":1531,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cd",{"_index":3386,"title":{},"body":{"index.html":{}}}],["central",{"_index":3165,"title":{},"body":{"index.html":{}}}],["centralized",{"_index":3043,"title":{},"body":{"index.html":{}}}],["centralizes",{"_index":3092,"title":{},"body":{"index.html":{}}}],["centric",{"_index":3151,"title":{},"body":{"index.html":{}}}],["certain",{"_index":3322,"title":{},"body":{"index.html":{}}}],["change",{"_index":3385,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1019,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["characters",{"_index":953,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["check",{"_index":1031,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checkout",{"_index":3428,"title":{},"body":{"index.html":{}}}],["checks",{"_index":3163,"title":{},"body":{"index.html":{}}}],["choisir",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["circular",{"_index":2215,"title":{},"body":{"modules/TicketsModule.html":{},"index.html":{}}}],["clarity",{"_index":2977,"title":{},"body":{"index.html":{}}}],["class",{"_index":31,"title":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":123,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clauses",{"_index":3285,"title":{},"body":{"index.html":{}}}],["cleaner",{"_index":2913,"title":{},"body":{"index.html":{}}}],["cleans",{"_index":2035,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["cleanupafterpayment",{"_index":2018,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["cleanupafterpayment(cartid",{"_index":2033,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["clear",{"_index":1807,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["clearance",{"_index":3234,"title":{},"body":{"index.html":{}}}],["clearcacheevent",{"_index":1794,"title":{},"body":{"injectables/RedisService.html":{}}}],["clearcacheevent(eventid",{"_index":1805,"title":{},"body":{"injectables/RedisService.html":{}}}],["clearing",{"_index":3331,"title":{},"body":{"index.html":{}}}],["clearly",{"_index":3442,"title":{},"body":{"index.html":{}}}],["clearrefreshtokencookie",{"_index":842,"title":{},"body":{"injectables/CookieService.html":{}}}],["clearrefreshtokencookie(res",{"_index":847,"title":{},"body":{"injectables/CookieService.html":{}}}],["clears",{"_index":849,"title":{},"body":{"injectables/CookieService.html":{}}}],["cli",{"_index":2928,"title":{},"body":{"index.html":{}}}],["cli.config.ts",{"_index":2610,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["cli.json",{"_index":2770,"title":{},"body":{"index.html":{}}}],["client",{"_index":1779,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["client.example",{"_index":3421,"title":{},"body":{"index.html":{}}}],["clone",{"_index":3381,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cartitemsmodule",{"_index":619,"title":{},"body":{"modules/CartItemsModule.html":{},"overview.html":{}}}],["cluster_cartitemsmodule_exports",{"_index":620,"title":{},"body":{"modules/CartItemsModule.html":{},"overview.html":{}}}],["cluster_cartitemsmodule_imports",{"_index":621,"title":{},"body":{"modules/CartItemsModule.html":{}}}],["cluster_cartitemsmodule_providers",{"_index":622,"title":{},"body":{"modules/CartItemsModule.html":{},"overview.html":{}}}],["cluster_cartsmodule",{"_index":728,"title":{},"body":{"modules/CartsModule.html":{},"overview.html":{}}}],["cluster_cartsmodule_exports",{"_index":730,"title":{},"body":{"modules/CartsModule.html":{},"overview.html":{}}}],["cluster_cartsmodule_providers",{"_index":729,"title":{},"body":{"modules/CartsModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":781,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":782,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_imports",{"_index":783,"title":{},"body":{"modules/CommonModule.html":{}}}],["cluster_commonmodule_providers",{"_index":784,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":1439,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_exports",{"_index":1441,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_providers",{"_index":1440,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_paymentmodule",{"_index":1683,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_exports",{"_index":1684,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_imports",{"_index":1685,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_providers",{"_index":1686,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_redismodule",{"_index":1774,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":1776,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":1775,"title":{},"body":{"modules/RedisModule.html":{}}}],["cluster_reservationdetailsmodule",{"_index":1945,"title":{},"body":{"modules/ReservationDetailsModule.html":{},"overview.html":{}}}],["cluster_reservationdetailsmodule_imports",{"_index":1946,"title":{},"body":{"modules/ReservationDetailsModule.html":{}}}],["cluster_reservationdetailsmodule_providers",{"_index":1947,"title":{},"body":{"modules/ReservationDetailsModule.html":{}}}],["cluster_reservationsmodule",{"_index":2007,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule_exports",{"_index":2009,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule_imports",{"_index":2010,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["cluster_reservationsmodule_providers",{"_index":2008,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_throllermodule",{"_index":2187,"title":{},"body":{"modules/ThrollerModule.html":{},"overview.html":{}}}],["cluster_throllermodule_imports",{"_index":2188,"title":{},"body":{"modules/ThrollerModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule",{"_index":2208,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_exports",{"_index":2210,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_imports",{"_index":2211,"title":{},"body":{"modules/TicketsModule.html":{}}}],["cluster_ticketsmodule_providers",{"_index":2209,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":2377,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":2378,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_providers",{"_index":2379,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2516,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":2517,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1172,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/Ticket.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["codebase",{"_index":2796,"title":{},"body":{"index.html":{}}}],["codes",{"_index":3177,"title":{},"body":{"index.html":{}}}],["coding",{"_index":2804,"title":{},"body":{"index.html":{}}}],["collection",{"_index":1632,"title":{},"body":{"interfaces/KeyValuePairs.html":{},"index.html":{}}}],["colorize",{"_index":3484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":523,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["column('date",{"_index":1213,"title":{},"body":{"entities/Event.html":{}}}],["column('int",{"_index":544,"title":{},"body":{"entities/CartItem.html":{}}}],["column('text",{"_index":1217,"title":{},"body":{"entities/Event.html":{},"entities/ReservationDetails.html":{}}}],["column({type",{"_index":504,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["column({unique",{"_index":2196,"title":{},"body":{"entities/Ticket.html":{},"entities/User.html":{}}}],["columns",{"_index":1023,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["combined.log",{"_index":3494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["combining",{"_index":1178,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["command",{"_index":3389,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["commands",{"_index":2888,"title":{},"body":{"index.html":{}}}],["commerce",{"_index":3084,"title":{},"body":{"index.html":{}}}],["commit",{"_index":3432,"title":{},"body":{"index.html":{}}}],["commom.module.ts",{"_index":3050,"title":{},"body":{"index.html":{}}}],["common",{"_index":791,"title":{},"body":{"modules/CommonModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["common/decorators/role.decorator",{"_index":1418,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["common/decorators/user",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/ReservationsController.html":{}}}],["common/dto/pagination.dto",{"_index":1421,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["common/enums/category",{"_index":964,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["common/enums/price",{"_index":563,"title":{},"body":{"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{}}}],["common/enums/sort",{"_index":1677,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["common/enums/status",{"_index":1697,"title":{},"body":{"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{}}}],["common/enums/user",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventsController.html":{},"interfaces/Payload.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["common/exceptions/invalid",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["common/interfaces/jwt.interface",{"_index":80,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/TokenService.html":{}}}],["common/interfaces/payload.interface",{"_index":2278,"title":{},"body":{"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{}}}],["common/interfaces/payment.interface",{"_index":1713,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/TransactionsService.html":{}}}],["commonformat",{"_index":2599,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["commonmodule",{"_index":382,"title":{"modules/CommonModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["communication",{"_index":2950,"title":{},"body":{"index.html":{}}}],["compare",{"_index":2158,"title":{},"body":{"guards/RoleGuard.html":{}}}],["compares",{"_index":3318,"title":{},"body":{"index.html":{}}}],["compilation",{"_index":2878,"title":{},"body":{"index.html":{}}}],["compiler",{"_index":2900,"title":{},"body":{"index.html":{}}}],["component",{"_index":3320,"title":{},"body":{"index.html":{}}}],["components",{"_index":2777,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2793,"title":{},"body":{"index.html":{}}}],["compose.override.yml",{"_index":2768,"title":{},"body":{"index.html":{}}}],["compose.prod.yml",{"_index":2771,"title":{},"body":{"index.html":{}}}],["compose.yml",{"_index":2767,"title":{},"body":{"index.html":{}}}],["comprehensive",{"_index":2743,"title":{},"body":{"index.html":{}}}],["concerns",{"_index":2994,"title":{},"body":{"index.html":{}}}],["concert",{"_index":981,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["condition",{"_index":1742,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["conditionally",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["conditions",{"_index":1751,"title":{},"body":{"injectables/QueryHelperService.html":{},"index.html":{}}}],["conference",{"_index":931,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["config",{"_index":1142,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/TokenConfig.html":{}}}],["config.get('pgdatabase",{"_index":1151,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('pghost",{"_index":1145,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('pgpassowrd",{"_index":1150,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('pgport",{"_index":1147,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('pguser",{"_index":1149,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configmodule",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["configmodule.forroot",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/CookieService.html":{},"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":95,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["configservice.get('redis_host",{"_index":1786,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_password",{"_index":1788,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_port",{"_index":1787,"title":{},"body":{"modules/RedisModule.html":{}}}],["configurable",{"_index":2964,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":60,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/RefreshTokenStoreService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":3330,"title":{},"body":{"index.html":{}}}],["configure",{"_index":1132,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["configured",{"_index":867,"title":{},"body":{"injectables/CookieService.html":{},"modules/RedisModule.html":{}}}],["configures",{"_index":1134,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["confirmation",{"_index":1410,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{}}}],["conflictexception",{"_index":1479,"title":{},"body":{"injectables/EventsService.html":{}}}],["conflictexception('an",{"_index":1515,"title":{},"body":{"injectables/EventsService.html":{}}}],["congratulations",{"_index":3449,"title":{},"body":{"index.html":{}}}],["connect",{"_index":1135,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["connected",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["connecting",{"_index":3166,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1133,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["connections",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["connectivity",{"_index":3227,"title":{},"body":{"index.html":{}}}],["connects",{"_index":2927,"title":{},"body":{"index.html":{}}}],["consistency",{"_index":2978,"title":{},"body":{"index.html":{}}}],["consistent",{"_index":2803,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["console",{"_index":3040,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["consoleformat",{"_index":2600,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["const",{"_index":65,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":3262,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["constants.common.ts",{"_index":3290,"title":{},"body":{"index.html":{}}}],["constants.env.ts",{"_index":3288,"title":{},"body":{"index.html":{}}}],["constants.migrationdb.ts",{"_index":3294,"title":{},"body":{"index.html":{}}}],["constraint",{"_index":159,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["constraints",{"_index":129,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["constraints.migration.spec.ts",{"_index":3260,"title":{},"body":{"index.html":{}}}],["construct",{"_index":1551,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructed",{"_index":1739,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["constructor",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/CookieService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject('redis_client",{"_index":1843,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(@injectrepository(cart",{"_index":773,"title":{},"body":{"injectables/CartsService.html":{}}}],["constructor(cartitemrepository",{"_index":645,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["constructor(cartrepository",{"_index":742,"title":{},"body":{"injectables/CartsService.html":{}}}],["constructor(configservice",{"_index":845,"title":{},"body":{"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{}}}],["constructor(eventpricerepository",{"_index":1267,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["constructor(eventrepository",{"_index":1323,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/EventsService.html":{}}}],["constructor(jwtservice",{"_index":2265,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["constructor(private",{"_index":609,"title":{},"body":{"controllers/CartItemsController.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["constructor(redisclient",{"_index":1798,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(redisservice",{"_index":1876,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["constructor(reflector",{"_index":1593,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["constructor(reservationdetailsrepository",{"_index":1952,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["constructor(reservationrepository",{"_index":2025,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["constructor(ticketrepository",{"_index":2224,"title":{},"body":{"injectables/TicketsService.html":{}}}],["constructor(transactionrepository",{"_index":2387,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["constructor(usersrepository",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":2291,"title":{},"body":{"injectables/TokenService.html":{}}}],["constructs",{"_index":1579,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"injectables/QueryHelperService.html":{},"index.html":{}}}],["contain",{"_index":2167,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["container",{"_index":2899,"title":{},"body":{"index.html":{}}}],["containerization",{"_index":2792,"title":{},"body":{"index.html":{}}}],["containers",{"_index":2885,"title":{},"body":{"index.html":{}}}],["containing",{"_index":68,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["content",{"_index":1588,"title":{},"body":{"guards/IsCreatorGuard.html":{},"index.html":{}}}],["contentownerid",{"_index":1605,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["contents",{"_index":2731,"title":{},"body":{"index.html":{}}}],["context",{"_index":1532,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["context.getclass",{"_index":2156,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":2155,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1603,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["contribute",{"_index":3399,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":2740,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":3450,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":3395,"title":{},"body":{"index.html":{}}}],["contributor",{"_index":3451,"title":{},"body":{"index.html":{}}}],["contributors",{"_index":3455,"title":{},"body":{"index.html":{}}}],["control",{"_index":2918,"title":{},"body":{"index.html":{}}}],["controlled",{"_index":3333,"title":{},"body":{"index.html":{}}}],["controller",{"_index":250,"title":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('carts",{"_index":608,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["controller('events",{"_index":1422,"title":{},"body":{"controllers/EventsController.html":{}}}],["controller('reservations",{"_index":1997,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["controller('transactions",{"_index":2375,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["controller('users",{"_index":2508,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conversion",{"_index":3299,"title":{},"body":{"index.html":{}}}],["conversions",{"_index":807,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"index.html":{}}}],["convert",{"_index":1878,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"index.html":{}}}],["convertdatestringtodate",{"_index":808,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["convertdatestringtodate(datestr",{"_index":810,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["convertdaystoseconds",{"_index":809,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["convertdaystoseconds(duration",{"_index":824,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["converted",{"_index":823,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["converting",{"_index":3300,"title":{},"body":{"index.html":{}}}],["converts",{"_index":812,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"index.html":{}}}],["convertutilsservice",{"_index":785,"title":{"injectables/ConvertUtilsService.html":{}},"body":{"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["convertutilsservice.convertdatestringtodate('2023",{"_index":817,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["convertutilsservice.convertdaystoseconds('7d",{"_index":829,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["cookie",{"_index":850,"title":{},"body":{"injectables/CookieService.html":{},"dependencies.html":{},"index.html":{}}}],["cookie.service.spec.ts",{"_index":3328,"title":{},"body":{"index.html":{}}}],["cookie.service.ts",{"_index":3334,"title":{},"body":{"index.html":{}}}],["cookieoptions",{"_index":863,"title":{},"body":{"injectables/CookieService.html":{}}}],["cookies",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CookieService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["cookieservice",{"_index":383,"title":{"injectables/CookieService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["cookieservice.clearrefreshtokencookie(res",{"_index":851,"title":{},"body":{"injectables/CookieService.html":{}}}],["cookieservice.extractrefreshtokencookie(req",{"_index":856,"title":{},"body":{"injectables/CookieService.html":{}}}],["cookieservice.setrefreshtokencookie(res",{"_index":860,"title":{},"body":{"injectables/CookieService.html":{}}}],["core",{"_index":2754,"title":{},"body":{"index.html":{}}}],["correct",{"_index":2954,"title":{},"body":{"index.html":{}}}],["correctly",{"_index":3238,"title":{},"body":{"index.html":{}}}],["correctly.mocks",{"_index":3182,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":3278,"title":{},"body":{"index.html":{}}}],["cors",{"_index":2653,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["count",{"_index":1397,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["coupling",{"_index":2828,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2585,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"modules/TicketsModule.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{}}}],["create(createeventdto",{"_index":1376,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["create(createuserdto",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["create(userid",{"_index":574,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["createaccesstoken",{"_index":2262,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["createaccesstoken(payload",{"_index":2267,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["createcartitemdto",{"_index":575,"title":{"classes/CreateCartItemDto.html":{}},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["createcartitemdto.eventid",{"_index":693,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["createcartitemdto.priceformula",{"_index":701,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["createcartitemdto.quantity",{"_index":695,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["created",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["createdat",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["createenumtype",{"_index":2628,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createeventdto",{"_index":915,"title":{"classes/CreateEventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["createeventprices",{"_index":1262,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["createeventprices(eventid",{"_index":1270,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["createnestedorder",{"_index":1730,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["createnestedorder(sortby",{"_index":1746,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["createnewticket",{"_index":2221,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createnewticket(user",{"_index":2228,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createparamdecorator((_",{"_index":3524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpayload",{"_index":2287,"title":{},"body":{"injectables/TokenService.html":{}}}],["createpayload(user",{"_index":2293,"title":{},"body":{"injectables/TokenService.html":{}}}],["createrefreshtoken",{"_index":2263,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["createrefreshtoken(payload",{"_index":2270,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["createreservationdetailsdto",{"_index":976,"title":{"classes/CreateReservationDetailsDto.html":{}},"body":{"classes/CreateReservationDetailsDto.html":{},"injectables/ReservationDetailsService.html":{},"classes/UpdateReservationDetailsDto.html":{},"coverage.html":{},"index.html":{}}}],["createreservationdetailsfromreservation",{"_index":1951,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["createreservationdetailsfromreservation(reservation",{"_index":1955,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["createreservationdto",{"_index":991,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["createreservations",{"_index":1971,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["createreservations(userid",{"_index":1974,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["createreservationsforallcartitems",{"_index":2019,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["createreservationsforallcartitems(cartitems",{"_index":2038,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["createreservationsforeachcartitem",{"_index":2020,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["createreservationsforeachcartitem(item",{"_index":2041,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["creates",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createtablecartitems.ts",{"_index":1007,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"coverage.html":{},"index.html":{}}}],["createtablecartitems.ts:21",{"_index":1021,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{}}}],["createtablecartitems.ts:55",{"_index":1015,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{}}}],["createtablecartitems1712661230450",{"_index":1005,"title":{"classes/CreateTableCartItems1712661230450.html":{}},"body":{"classes/CreateTableCartItems1712661230450.html":{},"coverage.html":{}}}],["createtablecarts.ts",{"_index":1041,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{},"coverage.html":{},"index.html":{}}}],["createtablecarts.ts:18",{"_index":1044,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{}}}],["createtablecarts.ts:43",{"_index":1043,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{}}}],["createtablecarts1712661221574",{"_index":1039,"title":{"classes/CreateTableCarts1712661221574.html":{}},"body":{"classes/CreateTableCarts1712661221574.html":{},"coverage.html":{}}}],["createtableeventprices.ts",{"_index":1048,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{},"coverage.html":{},"index.html":{}}}],["createtableeventprices.ts:21",{"_index":1051,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{}}}],["createtableeventprices.ts:50",{"_index":1050,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{}}}],["createtableeventprices1712642603715",{"_index":1046,"title":{"classes/CreateTableEventPrices1712642603715.html":{}},"body":{"classes/CreateTableEventPrices1712642603715.html":{},"coverage.html":{}}}],["createtableevents.ts",{"_index":1056,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"coverage.html":{},"index.html":{}}}],["createtableevents.ts:20",{"_index":1060,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{}}}],["createtableevents.ts:56",{"_index":1059,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{}}}],["createtableevents1712572717258",{"_index":1054,"title":{"classes/CreateTableEvents1712572717258.html":{}},"body":{"classes/CreateTableEvents1712572717258.html":{},"coverage.html":{}}}],["createtablereservationdetails.ts",{"_index":1071,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"coverage.html":{},"index.html":{}}}],["createtablereservationdetails.ts:21",{"_index":1075,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{}}}],["createtablereservationdetails.ts:56",{"_index":1074,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{}}}],["createtablereservationdetails1712751776641",{"_index":1069,"title":{"classes/CreateTableReservationDetails1712751776641.html":{}},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"coverage.html":{}}}],["createtablereservations.ts",{"_index":1082,"title":{},"body":{"classes/CreateTableReservations1712661230451.html":{},"coverage.html":{},"index.html":{}}}],["createtablereservations.ts:19",{"_index":1084,"title":{},"body":{"classes/CreateTableReservations1712661230451.html":{}}}],["createtablereservations.ts:50",{"_index":1083,"title":{},"body":{"classes/CreateTableReservations1712661230451.html":{}}}],["createtablereservations1712661230451",{"_index":1080,"title":{"classes/CreateTableReservations1712661230451.html":{}},"body":{"classes/CreateTableReservations1712661230451.html":{},"coverage.html":{}}}],["createtabletickets.ts",{"_index":1088,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"coverage.html":{},"index.html":{}}}],["createtabletickets.ts:19",{"_index":1091,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{}}}],["createtabletickets.ts:46",{"_index":1090,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{}}}],["createtabletickets1712717719010",{"_index":1086,"title":{"classes/CreateTableTickets1712717719010.html":{}},"body":{"classes/CreateTableTickets1712717719010.html":{},"coverage.html":{}}}],["createtabletransactions.ts",{"_index":1099,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"coverage.html":{},"index.html":{}}}],["createtabletransactions.ts:21",{"_index":1102,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{}}}],["createtabletransactions.ts:53",{"_index":1101,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{}}}],["createtabletransactions1712661230452",{"_index":1097,"title":{"classes/CreateTableTransactions1712661230452.html":{}},"body":{"classes/CreateTableTransactions1712661230452.html":{},"coverage.html":{}}}],["createtableusers.ts",{"_index":1112,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"coverage.html":{},"index.html":{}}}],["createtableusers.ts:20",{"_index":1116,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{}}}],["createtableusers.ts:56",{"_index":1115,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{}}}],["createtableusers1711085051379",{"_index":1110,"title":{"classes/CreateTableUsers1711085051379.html":{}},"body":{"classes/CreateTableUsers1711085051379.html":{},"coverage.html":{}}}],["createtransaction",{"_index":2385,"title":{},"body":{"injectables/TransactionsService.html":{},"index.html":{}}}],["createtransaction(user",{"_index":2395,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtransactiondto",{"_index":1128,"title":{"classes/CreateTransactionDto.html":{}},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{},"coverage.html":{},"index.html":{}}}],["createuserdto",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{}}}],["createuserdto.email.tolowercase",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":887,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["creation",{"_index":1027,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["creation/update",{"_index":3216,"title":{},"body":{"index.html":{}}}],["creator",{"_index":1587,"title":{},"body":{"guards/IsCreatorGuard.html":{},"index.html":{}}}],["creator.guard.spec.ts",{"_index":3321,"title":{},"body":{"index.html":{}}}],["creator.guard.ts",{"_index":1586,"title":{},"body":{"guards/IsCreatorGuard.html":{},"coverage.html":{},"index.html":{}}}],["creator.guard.ts:17",{"_index":1595,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["creator.guard.ts:28",{"_index":1598,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["credential",{"_index":2997,"title":{},"body":{"index.html":{}}}],["credentials",{"_index":1577,"title":{},"body":{"classes/InvalidCredentialsException.html":{}}}],["credentials.exception",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials.exception.ts",{"_index":1575,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"coverage.html":{},"index.html":{}}}],["credentials.exception.ts:8",{"_index":1578,"title":{},"body":{"classes/InvalidCredentialsException.html":{}}}],["criteria",{"_index":3286,"title":{},"body":{"index.html":{}}}],["critical",{"_index":2971,"title":{},"body":{"index.html":{}}}],["cross",{"_index":3175,"title":{},"body":{"index.html":{}}}],["crucial",{"_index":2969,"title":{},"body":{"index.html":{}}}],["crud",{"_index":3078,"title":{},"body":{"index.html":{}}}],["csrf",{"_index":2655,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":1536,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1539,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":1538,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/IsCreatorGuard.html":{}}}],["current_timestamp",{"_index":506,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["currentfield",{"_index":1764,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["currentfield[field",{"_index":1767,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["currentpart",{"_index":1770,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["currentpart[part",{"_index":1773,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["custom",{"_index":1576,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["customizes",{"_index":3006,"title":{},"body":{"index.html":{}}}],["cycling",{"_index":2698,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/IdDto.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["data/1",{"_index":1992,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["data/:userid",{"_index":1990,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["database",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"injectables/QueryHelperService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database.module.ts",{"_index":3226,"title":{},"body":{"index.html":{}}}],["database/database.module",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["database/query/query",{"_index":800,"title":{},"body":{"modules/CommonModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["database/redis/redis.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{}}}],["database/redis/redis.service",{"_index":797,"title":{},"body":{"modules/CommonModule.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{}}}],["databasemodule",{"_index":191,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databases",{"_index":2945,"title":{},"body":{"index.html":{}}}],["datasource",{"_index":3221,"title":{},"body":{"index.html":{}}}],["date",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/ConvertUtilsService.html":{},"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"entities/User.html":{},"index.html":{}}}],["date().toisostring",{"_index":1554,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date(date.utc(+year",{"_index":840,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["dates",{"_index":1058,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"index.html":{}}}],["datestr",{"_index":820,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["datestr.split",{"_index":839,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["day",{"_index":838,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["days",{"_index":827,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"index.html":{}}}],["db",{"_index":3266,"title":{},"body":{"index.html":{}}}],["dd",{"_index":815,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"miscellaneous/variables.html":{}}}],["deactivate",{"_index":2503,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["deactivates",{"_index":2500,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["deactivation",{"_index":3080,"title":{},"body":{"index.html":{}}}],["debug",{"_index":2555,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":2559,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["debugging",{"_index":1556,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["decimal",{"_index":1109,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"entities/Event.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{}}}],["declarations",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoded",{"_index":2277,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["decorator",{"_index":2987,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"controllers/EventsController.html":{},"classes/IdDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"classes/RefreshTokenDto.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"controllers/ReservationsController.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["deduct",{"_index":1331,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deducteventquantity",{"_index":1319,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deducteventquantity(eventid",{"_index":1326,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deducting",{"_index":3153,"title":{},"body":{"index.html":{}}}],["deduction",{"_index":1340,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deductionfactor",{"_index":1343,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deductionmap",{"_index":1318,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["deducts",{"_index":1328,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["def456",{"_index":1621,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{}}}],["default",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_page_size",{"_index":2129,"title":{},"body":{"injectables/ReservationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_page_size.user",{"_index":2138,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["defaultmeta",{"_index":3488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["define",{"_index":3214,"title":{},"body":{"index.html":{}}}],["defined",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["defines",{"_index":2880,"title":{},"body":{"index.html":{}}}],["defining",{"_index":2760,"title":{},"body":{"index.html":{}}}],["del",{"_index":1795,"title":{},"body":{"injectables/RedisService.html":{}}}],["del(key",{"_index":1811,"title":{},"body":{"injectables/RedisService.html":{}}}],["delete",{"_index":163,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["delete('/delete/:id",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(':cartid/items/:cartitemid",{"_index":594,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["delete(':id",{"_index":1436,"title":{},"body":{"controllers/EventsController.html":{}}}],["delete(@param('id",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(id",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(userid",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["deletecart",{"_index":737,"title":{},"body":{"injectables/CartsService.html":{}}}],["deletecart(cartid",{"_index":745,"title":{},"body":{"injectables/CartsService.html":{}}}],["deleted",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{}}}],["deleteeventprices",{"_index":1263,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["deleteeventprices(eventid",{"_index":1275,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["deletes",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"index.html":{}}}],["deleting",{"_index":1814,"title":{},"body":{"injectables/RedisService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["deletion",{"_index":3142,"title":{},"body":{"index.html":{}}}],["deletions",{"_index":3361,"title":{},"body":{"index.html":{}}}],["denying",{"_index":3314,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":180,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1803,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["deployment",{"_index":2762,"title":{},"body":{"index.html":{}}}],["deployments",{"_index":2752,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1748,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/TransactionsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["descending",{"_index":1755,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["describe",{"_index":3443,"title":{},"body":{"index.html":{}}}],["describing",{"_index":3433,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"properties.html":{}}}],["descriptions",{"_index":1057,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"index.html":{}}}],["descriptive",{"_index":3426,"title":{},"body":{"index.html":{}}}],["design",{"_index":2852,"title":{},"body":{"index.html":{}}}],["detail",{"_index":1076,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationDetailsService.html":{},"index.html":{}}}],["detailed",{"_index":1073,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/Reservation.html":{},"index.html":{}}}],["detailederrors",{"_index":1545,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["details",{"_index":582,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"classes/UpdateReservationDetailsDto.html":{},"index.html":{}}}],["details.dto",{"_index":1960,"title":{},"body":{"injectables/ReservationDetailsService.html":{},"classes/UpdateReservationDetailsDto.html":{},"index.html":{}}}],["details.dto.ts",{"_index":979,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"coverage.html":{},"index.html":{}}}],["details.dto.ts:22",{"_index":987,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.dto.ts:36",{"_index":980,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.dto.ts:50",{"_index":989,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.dto.ts:64",{"_index":988,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.dto.ts:80",{"_index":985,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.dto.ts:92",{"_index":986,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["details.entities",{"_index":3058,"title":{},"body":{"index.html":{}}}],["details.entity",{"_index":630,"title":{},"body":{"modules/CartItemsModule.html":{},"entities/Event.html":{},"modules/EventsModule.html":{},"entities/Reservation.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{}}}],["details.entity.ts",{"_index":1924,"title":{},"body":{"entities/ReservationDetails.html":{},"coverage.html":{},"index.html":{}}}],["details.entity.ts:102",{"_index":1937,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:114",{"_index":1925,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:126",{"_index":1941,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:28",{"_index":1936,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:42",{"_index":1935,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:56",{"_index":1929,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:67",{"_index":1932,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:78",{"_index":1939,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.entity.ts:91",{"_index":1930,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["details.migration.spec.ts",{"_index":3264,"title":{},"body":{"index.html":{}}}],["details.module",{"_index":2218,"title":{},"body":{"modules/TicketsModule.html":{}}}],["details.module.ts",{"_index":1948,"title":{},"body":{"modules/ReservationDetailsModule.html":{},"index.html":{}}}],["details.service",{"_index":632,"title":{},"body":{"modules/CartItemsModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TransactionsModule.html":{}}}],["details.service.spec.ts",{"_index":3056,"title":{},"body":{"index.html":{}}}],["details.service.ts",{"_index":1950,"title":{},"body":{"injectables/ReservationDetailsService.html":{},"coverage.html":{},"index.html":{}}}],["details.service.ts:15",{"_index":1953,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["details.service.ts:42",{"_index":1956,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["details.service.ts:85",{"_index":1958,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["details/dto/create",{"_index":978,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{},"coverage.html":{}}}],["details/dto/update",{"_index":2440,"title":{},"body":{"classes/UpdateReservationDetailsDto.html":{},"coverage.html":{}}}],["details/entities/reservation",{"_index":629,"title":{},"body":{"modules/CartItemsModule.html":{},"entities/Event.html":{},"modules/EventsModule.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{},"coverage.html":{}}}],["details/reservation",{"_index":631,"title":{},"body":{"modules/CartItemsModule.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"coverage.html":{}}}],["determine",{"_index":1599,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["determines",{"_index":2966,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dev",{"_index":2931,"title":{},"body":{"index.html":{}}}],["dev_env",{"_index":2626,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["develop",{"_index":3431,"title":{},"body":{"index.html":{}}}],["developers",{"_index":2778,"title":{},"body":{"index.html":{}}}],["development",{"_index":2729,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":2690,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["direction",{"_index":1753,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["directories",{"_index":2916,"title":{},"body":{"index.html":{}}}],["directory",{"_index":2904,"title":{},"body":{"index.html":{}}}],["discussions",{"_index":3408,"title":{},"body":{"index.html":{}}}],["dist/main.js",{"_index":3391,"title":{},"body":{"index.html":{}}}],["diving",{"_index":2699,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["docker",{"_index":2751,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":2769,"title":{},"body":{"index.html":{}}}],["docs",{"_index":3203,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":2586,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documented",{"_index":2812,"title":{},"body":{"index.html":{}}}],["doe",{"_index":2181,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["does_enum_category_type_exist",{"_index":1062,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["does_enum_price_formule_type_exist",{"_index":1028,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["does_enum_status_reservation_exist",{"_index":1104,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["does_enum_user_role_exist",{"_index":1118,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["doesn't",{"_index":755,"title":{},"body":{"injectables/CartsService.html":{}}}],["doesnt",{"_index":3251,"title":{},"body":{"index.html":{}}}],["dont",{"_index":3296,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":2657,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":136,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["down(queryrunner",{"_index":138,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["drop",{"_index":173,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["dropping",{"_index":142,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["drops",{"_index":1016,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["dto",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/IdDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"classes/RefreshTokenDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["dto/create",{"_index":603,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["dto/login.dto",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/signup.dto",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["dtos",{"_index":3099,"title":{},"body":{"index.html":{}}}],["due",{"_index":2338,"title":{},"body":{"injectables/TokenService.html":{}}}],["duo",{"_index":2714,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["duplicate",{"_index":2059,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["duplicates",{"_index":3125,"title":{},"body":{"index.html":{}}}],["duration",{"_index":826,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"index.html":{}}}],["durations",{"_index":3302,"title":{},"body":{"index.html":{}}}],["during",{"_index":3252,"title":{},"body":{"index.html":{}}}],["dynamic",{"_index":3065,"title":{},"body":{"index.html":{}}}],["dynamically",{"_index":1138,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["déj",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["e",{"_index":3083,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":821,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["e2e",{"_index":2930,"title":{},"body":{"index.html":{}}}],["e2e.json",{"_index":2872,"title":{},"body":{"index.html":{}}}],["each",{"_index":2043,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["eager",{"_index":1223,"title":{},"body":{"entities/Event.html":{}}}],["easily",{"_index":2856,"title":{},"body":{"index.html":{}}}],["easy",{"_index":2794,"title":{},"body":{"index.html":{}}}],["edge",{"_index":3239,"title":{},"body":{"index.html":{}}}],["effectively",{"_index":1017,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["efficiency",{"_index":2784,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":2748,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":3104,"title":{},"body":{"index.html":{}}}],["element",{"_index":3200,"title":{},"body":{"index.html":{}}}],["email",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/LoginDTO.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"index.html":{}}}],["email.tolowercase",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["emitter",{"_index":2635,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":893,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/LoginDTO.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdatePasswordDTO.html":{},"index.html":{}}}],["en",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["enables",{"_index":2902,"title":{},"body":{"index.html":{}}}],["enabling",{"_index":2940,"title":{},"body":{"index.html":{}}}],["encapsulating",{"_index":2995,"title":{},"body":{"index.html":{}}}],["encode",{"_index":1174,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/TokenManagementService.html":{}}}],["encrypted",{"_index":3172,"title":{},"body":{"index.html":{}}}],["encryption",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EncryptionService.html":{},"injectables/TicketsService.html":{},"index.html":{}}}],["encryption.service.spec.ts",{"_index":3307,"title":{},"body":{"index.html":{}}}],["encryption.service.ts",{"_index":3304,"title":{},"body":{"index.html":{}}}],["encryptionservice",{"_index":403,"title":{"injectables/EncryptionService.html":{}},"body":{"injectables/AuthService.html":{},"modules/CommonModule.html":{},"injectables/EncryptionService.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["encryptionservice.generatedkeyuuid",{"_index":1167,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice.generatedqrcode(securekey",{"_index":1173,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice.generatedsecurekey(user",{"_index":1180,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice.hashpassword('password123",{"_index":1185,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice.verifypassword(hashedpassword",{"_index":1193,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["end",{"_index":946,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enddate",{"_index":920,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["endpoint",{"_index":3371,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":2811,"title":{},"body":{"index.html":{}}}],["enforce",{"_index":3034,"title":{},"body":{"index.html":{}}}],["enforced",{"_index":3315,"title":{},"body":{"index.html":{}}}],["enforces",{"_index":3026,"title":{},"body":{"index.html":{}}}],["enforcing",{"_index":3076,"title":{},"body":{"index.html":{}}}],["enhance",{"_index":2781,"title":{},"body":{"index.html":{}}}],["enhances",{"_index":2976,"title":{},"body":{"index.html":{}}}],["enhancing",{"_index":3030,"title":{},"body":{"index.html":{}}}],["enough",{"_index":689,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/EventSalesService.html":{}}}],["enriches",{"_index":3002,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":101,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["ensured",{"_index":2806,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":1458,"title":{},"body":{"injectables/EventsService.html":{},"index.html":{}}}],["ensuretitleunique",{"_index":1449,"title":{},"body":{"injectables/EventsService.html":{}}}],["ensuretitleunique(title",{"_index":1455,"title":{},"body":{"injectables/EventsService.html":{}}}],["ensuring",{"_index":2835,"title":{},"body":{"index.html":{}}}],["entities",{"_index":488,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"modules/CartItemsModule.html":{},"modules/DatabaseModule.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"modules/EventsModule.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"modules/TransactionsModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/cart.entity",{"_index":732,"title":{},"body":{"modules/CartsModule.html":{},"injectables/CartsService.html":{}}}],["entities/cartitems.entity",{"_index":607,"title":{},"body":{"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{}}}],["entities/event",{"_index":1290,"title":{},"body":{"injectables/EventPricesService.html":{},"modules/EventsModule.html":{}}}],["entities/event.entity",{"_index":1357,"title":{},"body":{"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["entities/reservation",{"_index":1949,"title":{},"body":{"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{}}}],["entities/reservation.entity",{"_index":1996,"title":{},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["entities/ticket.entity",{"_index":2217,"title":{},"body":{"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["entities/transaction.entity",{"_index":2374,"title":{},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{}}}],["entities/user.entity",{"_index":2507,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":57,"title":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["entity('cart",{"_index":524,"title":{},"body":{"entities/Cart.html":{}}}],["entity('cart_items",{"_index":565,"title":{},"body":{"entities/CartItem.html":{}}}],["entity('event_prices",{"_index":1259,"title":{},"body":{"entities/EventPrice.html":{}}}],["entity('events",{"_index":1250,"title":{},"body":{"entities/Event.html":{}}}],["entity('reservation_details",{"_index":1943,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["entity('reservations",{"_index":1919,"title":{},"body":{"entities/Reservation.html":{}}}],["entity('tickets",{"_index":2207,"title":{},"body":{"entities/Ticket.html":{}}}],["entity('transactions",{"_index":2366,"title":{},"body":{"entities/Transaction.html":{}}}],["entity('users",{"_index":2484,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":1154,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["entry",{"_index":2897,"title":{},"body":{"index.html":{}}}],["enum",{"_index":899,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/EventPrice.html":{},"entities/ReservationDetails.html":{},"classes/SignUpDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["enum(${values.map(value",{"_index":3499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum_types_db",{"_index":2629,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enum_types_db.category_type",{"_index":3502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum_types_db.status_reservation",{"_index":3504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum_types_db.type_price_formule",{"_index":3503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum_types_db.user_role",{"_index":3505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumeration",{"_index":2689,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":2677,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":2984,"title":{},"body":{"index.html":{}}}],["env",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":1557,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["error",{"_index":865,"title":{},"body":{"injectables/CookieService.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/RedisService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error('jwt_refresh_token_expiration",{"_index":870,"title":{},"body":{"injectables/CookieService.html":{}}}],["error('key",{"_index":1844,"title":{},"body":{"injectables/RedisService.html":{}}}],["error(`reservation",{"_index":2092,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["error(message",{"_index":2563,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["error.log",{"_index":3491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error.message",{"_index":1499,"title":{},"body":{"injectables/EventsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["error.stack",{"_index":2424,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["errorresponse",{"_index":1552,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TokenService.html":{}}}],["errorresponse(res",{"_index":2296,"title":{},"body":{"injectables/TokenService.html":{}}}],["errorresponse['errordetails",{"_index":1564,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errorresponse['method",{"_index":1560,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errorresponse['path",{"_index":1558,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errorresponse['stack",{"_index":1562,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errors",{"_index":1546,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["eslint",{"_index":2807,"title":{},"body":{"index.html":{}}}],["essential",{"_index":2906,"title":{},"body":{"index.html":{}}}],["est",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["establishes",{"_index":2881,"title":{},"body":{"index.html":{}}}],["etc",{"_index":3457,"title":{},"body":{"index.html":{}}}],["event",{"_index":241,"title":{"entities/Event.html":{}},"body":{"modules/AppModule.html":{},"entities/CartItem.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["event.baseprice",{"_index":1207,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{}}}],["event.cartitems",{"_index":567,"title":{},"body":{"entities/CartItem.html":{},"entities/Event.html":{}}}],["event.cartitems)@joincolumn({name",{"_index":540,"title":{},"body":{"entities/CartItem.html":{}}}],["event.categorytype",{"_index":1210,"title":{},"body":{"entities/Event.html":{}}}],["event.createdat",{"_index":1212,"title":{},"body":{"entities/Event.html":{}}}],["event.dto",{"_index":1420,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{}}}],["event.dto.ts",{"_index":917,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{},"index.html":{}}}],["event.dto.ts:100",{"_index":958,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:114",{"_index":945,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:128",{"_index":943,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:26",{"_index":961,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:42",{"_index":956,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:58",{"_index":950,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:72",{"_index":927,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:86",{"_index":954,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.enddate",{"_index":1215,"title":{},"body":{"entities/Event.html":{}}}],["event.entity.ts",{"_index":3167,"title":{},"body":{"index.html":{}}}],["event.longdescription",{"_index":1220,"title":{},"body":{"entities/Event.html":{}}}],["event.prices",{"_index":1225,"title":{},"body":{"entities/Event.html":{},"entities/EventPrice.html":{}}}],["event.prices)@joincolumn({name",{"_index":1253,"title":{},"body":{"entities/EventPrice.html":{}}}],["event.prices.find(p",{"_index":699,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["event.quantityavailable",{"_index":696,"title":{},"body":{"injectables/CartItemsService.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{}}}],["event.quantitysold",{"_index":1231,"title":{},"body":{"entities/Event.html":{},"injectables/EventSalesService.html":{}}}],["event.reservationsdetails",{"_index":1234,"title":{},"body":{"entities/Event.html":{},"entities/ReservationDetails.html":{}}}],["event.revenuegenerated",{"_index":1237,"title":{},"body":{"entities/Event.html":{},"injectables/EventSalesService.html":{}}}],["event.shortdescription",{"_index":1240,"title":{},"body":{"entities/Event.html":{},"injectables/ReservationDetailsService.html":{}}}],["event.startdate",{"_index":1242,"title":{},"body":{"entities/Event.html":{}}}],["event.title",{"_index":1246,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["event.updatedat",{"_index":1248,"title":{},"body":{"entities/Event.html":{}}}],["event_${id",{"_index":1501,"title":{},"body":{"injectables/EventsService.html":{}}}],["event_prices",{"_index":1049,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{},"index.html":{}}}],["eventid",{"_index":541,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["eventids",{"_index":2083,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["eventinstance",{"_index":1255,"title":{},"body":{"entities/EventPrice.html":{}}}],["eventprice",{"_index":1221,"title":{"entities/EventPrice.html":{}},"body":{"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventpriceid",{"_index":1053,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{},"entities/EventPrice.html":{}}}],["eventpricerepository",{"_index":1269,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventprices",{"_index":1302,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventprices.map(pricerecord",{"_index":1305,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventpricesservice",{"_index":647,"title":{"injectables/EventPricesService.html":{}},"body":{"injectables/CartItemsService.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{},"overview.html":{}}}],["eventpricesservice.createeventprices(1",{"_index":1274,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventpricesservice.deleteeventprices(1",{"_index":1277,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventpricesservice.findeventbyid(1",{"_index":1280,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventpricesservice.getpricebyeventandtype(1",{"_index":1283,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventpricesservice.updateeventprices(1",{"_index":1288,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["eventrepository",{"_index":646,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["events",{"_index":1037,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["events.controller",{"_index":1443,"title":{},"body":{"modules/EventsModule.html":{}}}],["events.controller.spec.ts",{"_index":3155,"title":{},"body":{"index.html":{}}}],["events.controller.ts",{"_index":3141,"title":{},"body":{"index.html":{}}}],["events.migration.spec.ts",{"_index":3271,"title":{},"body":{"index.html":{}}}],["events.module.ts",{"_index":3152,"title":{},"body":{"index.html":{}}}],["events.service",{"_index":1358,"title":{},"body":{"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{}}}],["events.service.spec.ts",{"_index":3146,"title":{},"body":{"index.html":{}}}],["events.service.ts",{"_index":3150,"title":{},"body":{"index.html":{}}}],["events/1",{"_index":1402,"title":{},"body":{"controllers/EventsController.html":{}}}],["events/1/price/standard",{"_index":1406,"title":{},"body":{"controllers/EventsController.html":{}}}],["events/create",{"_index":1381,"title":{},"body":{"controllers/EventsController.html":{}}}],["events/get",{"_index":1387,"title":{},"body":{"controllers/EventsController.html":{}}}],["eventsalesservice",{"_index":1315,"title":{"injectables/EventSalesService.html":{}},"body":{"injectables/EventSalesService.html":{},"modules/EventsModule.html":{},"injectables/ReservationsProcessorService.html":{},"coverage.html":{},"overview.html":{}}}],["eventsalesservice.deducteventquantity(1",{"_index":1329,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["eventsalesservice.processeventticketsandrevenue(cartitems",{"_index":1335,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["eventsalesservice.quantityperformula(priceformulaenum.solo",{"_index":1344,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["eventsalesservice.updaterevenue(1",{"_index":1348,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["eventscontroller",{"_index":1372,"title":{"controllers/EventsController.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventsmodule",{"_index":192,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartItemsModule.html":{},"modules/EventsModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["eventsservice",{"_index":1324,"title":{"injectables/EventsService.html":{}},"body":{"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{},"overview.html":{}}}],["eventsservice.cache_ttl_one_hour",{"_index":1502,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.create(createeventdto",{"_index":1454,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.ensuretitleunique('new",{"_index":1459,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.findallfiltered(paginationfilterdto",{"_index":1466,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.findallvalues",{"_index":1468,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.findeventbyid(1",{"_index":1470,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.findone(1",{"_index":1472,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.remove(1",{"_index":1474,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsservice.update(1",{"_index":1477,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventtitle",{"_index":1245,"title":{},"body":{"entities/Event.html":{}}}],["ex",{"_index":1849,"title":{},"body":{"injectables/RedisService.html":{}}}],["example",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["exception",{"_index":1521,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/InvalidCredentialsException.html":{},"index.html":{}}}],["exception.getresponse",{"_index":1544,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":1540,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":1566,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":1563,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1522,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptions",{"_index":1519,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{},"index.html":{}}}],["exclude",{"_index":1461,"title":{},"body":{"injectables/EventsService.html":{},"entities/User.html":{}}}],["exclude()@column({type",{"_index":2472,"title":{},"body":{"entities/User.html":{}}}],["excluded",{"_index":2474,"title":{},"body":{"entities/User.html":{}}}],["excludeid",{"_index":1456,"title":{},"body":{"injectables/EventsService.html":{}}}],["excluding",{"_index":2876,"title":{},"body":{"index.html":{}}}],["exclusive",{"_index":3144,"title":{},"body":{"index.html":{}}}],["execute",{"_index":1820,"title":{},"body":{"injectables/RedisService.html":{}}}],["executes",{"_index":2926,"title":{},"body":{"index.html":{}}}],["execution",{"_index":1601,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["executioncontext",{"_index":1597,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":756,"title":{},"body":{"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["existed",{"_index":3247,"title":{},"body":{"index.html":{}}}],["existence",{"_index":3054,"title":{},"body":{"index.html":{}}}],["existing",{"_index":753,"title":{},"body":{"injectables/CartsService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"index.html":{}}}],["existingcartitem",{"_index":705,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["existingcartitem.price",{"_index":709,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["existingcartitem.quantity",{"_index":708,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["existingevent",{"_index":1513,"title":{},"body":{"injectables/EventsService.html":{}}}],["existingevent.eventid",{"_index":1514,"title":{},"body":{"injectables/EventsService.html":{}}}],["existingreservation",{"_index":2090,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["existinguser",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":766,"title":{},"body":{"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["exiting",{"_index":3224,"title":{},"body":{"index.html":{}}}],["expected",{"_index":3183,"title":{},"body":{"index.html":{}}}],["experience",{"_index":3003,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":102,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenConfig.html":{},"index.html":{}}}],["expired",{"_index":2341,"title":{},"body":{"injectables/TokenService.html":{},"index.html":{}}}],["expiresin",{"_index":1619,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["export",{"_index":32,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{}}}],["exporting",{"_index":3132,"title":{},"body":{"index.html":{}}}],["exports",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["express",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"index.html":{}}}],["extending",{"_index":3064,"title":{},"body":{"index.html":{}}}],["extends",{"_index":25,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/InvalidCredentialsException.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["extensions",{"_index":3375,"title":{},"body":{"index.html":{}}}],["extensive",{"_index":2808,"title":{},"body":{"index.html":{}}}],["external",{"_index":2816,"title":{},"body":{"index.html":{}}}],["extract",{"_index":89,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["extracted",{"_index":2313,"title":{},"body":{"injectables/TokenService.html":{}}}],["extracting",{"_index":3335,"title":{},"body":{"index.html":{}}}],["extraction",{"_index":3329,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":78,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":88,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["extractrefreshtokencookie",{"_index":843,"title":{},"body":{"injectables/CookieService.html":{}}}],["extractrefreshtokencookie(req",{"_index":853,"title":{},"body":{"injectables/CookieService.html":{}}}],["extracts",{"_index":855,"title":{},"body":{"injectables/CookieService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["f.type",{"_index":1307,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["facilitate",{"_index":3046,"title":{},"body":{"index.html":{}}}],["facilitates",{"_index":2884,"title":{},"body":{"index.html":{}}}],["facilitating",{"_index":2912,"title":{},"body":{"index.html":{}}}],["factor",{"_index":1341,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["factors",{"_index":1356,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["failed",{"_index":1549,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/TokenService.html":{}}}],["fails",{"_index":1860,"title":{},"body":{"injectables/RedisService.html":{}}}],["failure",{"_index":2958,"title":{},"body":{"index.html":{}}}],["failures",{"_index":3222,"title":{},"body":{"index.html":{}}}],["false",{"_index":100,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/DatabaseModule.html":{},"entities/ReservationDetails.html":{},"injectables/TokenManagementService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false})@joincolumn({name",{"_index":1928,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["family",{"_index":2715,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":2785,"title":{},"body":{"index.html":{}}}],["features",{"_index":2733,"title":{},"body":{"index.html":{}}}],["feedback",{"_index":3411,"title":{},"body":{"index.html":{}}}],["fencing",{"_index":2700,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":1819,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["fetchcacheddata",{"_index":1796,"title":{},"body":{"injectables/RedisService.html":{}}}],["fetchcacheddata(key",{"_index":1815,"title":{},"body":{"injectables/RedisService.html":{}}}],["fetched",{"_index":1825,"title":{},"body":{"injectables/RedisService.html":{}}}],["fetchfn",{"_index":1816,"title":{},"body":{"injectables/RedisService.html":{}}}],["fetching",{"_index":3148,"title":{},"body":{"index.html":{}}}],["fetchuserfromdb",{"_index":1823,"title":{},"body":{"injectables/RedisService.html":{}}}],["field",{"_index":890,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"index.html":{}}}],["fields",{"_index":2119,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"index.html":{}}}],["file's",{"_index":2970,"title":{},"body":{"index.html":{}}}],["filename",{"_index":3490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":2764,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["filter",{"_index":1394,"title":{},"body":{"controllers/EventsController.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["filter.spec.ts",{"_index":2999,"title":{},"body":{"index.html":{}}}],["filter.ts",{"_index":1520,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{},"index.html":{}}}],["filter.ts:20",{"_index":1524,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["filter.ts:33",{"_index":1528,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["filter/http",{"_index":1518,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["filterby",{"_index":1652,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["filterby.split",{"_index":1763,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["filtered",{"_index":1391,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["filtered?page=1&limit=10&sortby=title&sortorder=asc",{"_index":1395,"title":{},"body":{"controllers/EventsController.html":{}}}],["filtering",{"_index":1464,"title":{},"body":{"injectables/EventsService.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["filters",{"_index":2935,"title":{},"body":{"index.html":{}}}],["filtervalue",{"_index":1653,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["finalizebooking",{"_index":2021,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["finalizebooking(cartitems",{"_index":2045,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["finalizes",{"_index":2047,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["finalizing",{"_index":3124,"title":{},"body":{"index.html":{}}}],["find",{"_index":3055,"title":{},"body":{"index.html":{}}}],["findall",{"_index":570,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["findall(@userid",{"_index":611,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["findall(paginationfilterdto",{"_index":2488,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(userid",{"_index":583,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["findalladmin",{"_index":1972,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["findalladmin(@query",{"_index":2002,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findalladmin(paginationdto",{"_index":1983,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findalladmin(paginationfilterdto",{"_index":2107,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["findalldata",{"_index":1973,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["findalldata(@param('userid",{"_index":2004,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findalldata(userid",{"_index":1988,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["findallfiltered",{"_index":1374,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["findallfiltered(paginationfilterdto",{"_index":1389,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["findallitemsincart",{"_index":638,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["findallitemsincart(userid",{"_index":654,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["findallvalues",{"_index":1450,"title":{},"body":{"injectables/EventsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findcart",{"_index":738,"title":{},"body":{"injectables/CartsService.html":{}}}],["findcart(userid",{"_index":748,"title":{},"body":{"injectables/CartsService.html":{}}}],["findeventbyid",{"_index":1264,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/EventsService.html":{}}}],["findeventbyid(eventid",{"_index":1278,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/EventsService.html":{}}}],["finding",{"_index":3073,"title":{},"body":{"index.html":{}}}],["findmanyoptions",{"_index":1738,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["findone",{"_index":571,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":1431,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":1398,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["findone(reservationid",{"_index":2112,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["findone(userid",{"_index":589,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/UsersService.html":{}}}],["findoneitemincart",{"_index":639,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["findoneitemincart(userid",{"_index":659,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["findoptionswhere",{"_index":1745,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["finds",{"_index":656,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["findtransactionbyreservationid",{"_index":2386,"title":{},"body":{"injectables/TransactionsService.html":{},"index.html":{}}}],["findtransactionbyreservationid(reservationid",{"_index":2400,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["first",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"index.html":{}}}],["firstname",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"injectables/TransactionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fk_reservations_tickets",{"_index":169,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["fk_reservations_transactions",{"_index":166,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["fk_reservations_users",{"_index":160,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["fk_tickets_reservations",{"_index":171,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["flag",{"_index":1612,"title":{},"body":{"guards/IsCreatorGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["flexibility",{"_index":3032,"title":{},"body":{"index.html":{}}}],["flows",{"_index":3344,"title":{},"body":{"index.html":{}}}],["followed",{"_index":2826,"title":{},"body":{"index.html":{}}}],["follows",{"_index":2787,"title":{},"body":{"index.html":{}}}],["football",{"_index":2701,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["foreign",{"_index":128,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"index.html":{}}}],["fork",{"_index":3415,"title":{},"body":{"index.html":{}}}],["forked",{"_index":3419,"title":{},"body":{"index.html":{}}}],["forking",{"_index":3416,"title":{},"body":{"index.html":{}}}],["format",{"_index":816,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"classes/CreateEventDto.html":{},"miscellaneous/variables.html":{}}}],["formats",{"_index":3001,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":2801,"title":{},"body":{"index.html":{}}}],["formula",{"_index":550,"title":{},"body":{"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{},"index.html":{}}}],["formula.enum",{"_index":564,"title":{},"body":{"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{}}}],["formula.enum.ts",{"_index":2681,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["formula.multiplier",{"_index":1298,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["formula.type",{"_index":1296,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["formulas",{"_index":1273,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["formule",{"_index":3295,"title":{},"body":{"index.html":{}}}],["forward",{"_index":634,"title":{},"body":{"modules/CartItemsModule.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["forwardref",{"_index":625,"title":{},"body":{"modules/CartItemsModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"modules/TransactionsModule.html":{}}}],["found",{"_index":105,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["foundation",{"_index":2947,"title":{},"body":{"index.html":{}}}],["framework",{"_index":2790,"title":{},"body":{"index.html":{}}}],["frameworks",{"_index":2830,"title":{},"body":{"index.html":{}}}],["free",{"_index":3062,"title":{},"body":{"index.html":{}}}],["french",{"_index":1580,"title":{},"body":{"classes/InvalidCredentialsException.html":{}}}],["function",{"_index":1821,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["functional",{"_index":3284,"title":{},"body":{"index.html":{}}}],["functionalities",{"_index":2755,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":2818,"title":{},"body":{"index.html":{}}}],["functions",{"_index":2720,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["funds",{"_index":1693,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["further",{"_index":1613,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["general",{"_index":1550,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["generate",{"_index":1718,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["generateaccesstokenfromrefreshtoken",{"_index":2288,"title":{},"body":{"injectables/TokenService.html":{}}}],["generateaccesstokenfromrefreshtoken(req",{"_index":2301,"title":{},"body":{"injectables/TokenService.html":{}}}],["generated",{"_index":1168,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/Event.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{}}}],["generatedkeyuuid",{"_index":1160,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generatedqrcode",{"_index":1161,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generatedqrcode(securekey",{"_index":1169,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generatedsecurekey",{"_index":1162,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generatedsecurekey(user",{"_index":1176,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generatereservation",{"_index":2098,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["generatereservation(userid",{"_index":2115,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["generates",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EncryptionService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["generateticketsforapprovedreservations",{"_index":2222,"title":{},"body":{"injectables/TicketsService.html":{}}}],["generateticketsforapprovedreservations(reservations",{"_index":2231,"title":{},"body":{"injectables/TicketsService.html":{}}}],["generateticketsforreservation",{"_index":2223,"title":{},"body":{"injectables/TicketsService.html":{}}}],["generateticketsforreservation(reservationid",{"_index":2235,"title":{},"body":{"injectables/TicketsService.html":{}}}],["generating",{"_index":3127,"title":{},"body":{"index.html":{}}}],["generation",{"_index":2819,"title":{},"body":{"index.html":{}}}],["get(':cartid/items",{"_index":584,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["get(':cartid/items/:cartitemid",{"_index":590,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["get(':id",{"_index":1399,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["get(':id/find",{"_index":1999,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{}}}],["get(':id/price/:priceformula",{"_index":1404,"title":{},"body":{"controllers/EventsController.html":{}}}],["get('admin",{"_index":2144,"title":{},"body":{"guards/RoleGuard.html":{}}}],["get('find",{"_index":1989,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["get('get",{"_index":1384,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["get('protected",{"_index":18,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["get(key",{"_index":1826,"title":{},"body":{"injectables/RedisService.html":{}}}],["getadmindata",{"_index":2145,"title":{},"body":{"guards/RoleGuard.html":{}}}],["getorcreatecart",{"_index":739,"title":{},"body":{"injectables/CartsService.html":{}}}],["getorcreatecart(userid",{"_index":751,"title":{},"body":{"injectables/CartsService.html":{}}}],["getorcreatecartitem",{"_index":640,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["getorcreatecartitem(cartid",{"_index":662,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["getpricebyeventandtype",{"_index":1265,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["getpricebyeventandtype(eventid",{"_index":1281,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["getprotecteddata",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["getrefreshtoken",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["getrefreshtoken(@req",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["getrefreshtoken(req",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["gets",{"_index":665,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventSalesService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["getselectfieldsfindall",{"_index":2099,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["getselectfieldsfindalladmin",{"_index":2100,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["getticketprice",{"_index":1375,"title":{},"body":{"controllers/EventsController.html":{}}}],["getticketprice(id",{"_index":1403,"title":{},"body":{"controllers/EventsController.html":{}}}],["getting",{"_index":2724,"title":{"index.html":{}},"body":{"index.html":{}}}],["gettokens",{"_index":2289,"title":{},"body":{"injectables/TokenService.html":{}}}],["gettokens(user",{"_index":2304,"title":{},"body":{"injectables/TokenService.html":{}}}],["git",{"_index":3382,"title":{},"body":{"index.html":{}}}],["github",{"_index":3417,"title":{},"body":{"index.html":{}}}],["given",{"_index":1342,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["giving",{"_index":3425,"title":{},"body":{"index.html":{}}}],["global",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"index.html":{}}}],["good",{"_index":2798,"title":{},"body":{"index.html":{}}}],["gracefully",{"_index":3223,"title":{},"body":{"index.html":{}}}],["graph",{"_index":3452,"title":{},"body":{"index.html":{},"modules.html":{}}}],["guard",{"_index":9,"title":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"coverage.html":{}}}],["guards",{"_index":1584,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{},"overview.html":{}}}],["guidelines",{"_index":3414,"title":{},"body":{"index.html":{}}}],["gymnastics",{"_index":2702,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["handball",{"_index":2703,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["handle",{"_index":804,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"injectables/EncryptionService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaymentService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["handler",{"_index":2990,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["handlers",{"_index":2988,"title":{},"body":{"index.html":{}}}],["handles",{"_index":2963,"title":{},"body":{"index.html":{}}}],["handling",{"_index":2213,"title":{},"body":{"modules/TicketsModule.html":{},"index.html":{}}}],["hash",{"_index":1187,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/User.html":{},"index.html":{}}}],["hashed",{"_index":1188,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashedpassword",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EncryptionService.html":{}}}],["hashes",{"_index":1183,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashing",{"_index":2844,"title":{},"body":{"index.html":{}}}],["hashpassword",{"_index":1163,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashpassword(password",{"_index":1181,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["header",{"_index":91,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["headers",{"_index":2846,"title":{},"body":{"index.html":{}}}],["hello",{"_index":3372,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":2660,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helper",{"_index":3193,"title":{},"body":{"index.html":{}}}],["helper.service",{"_index":801,"title":{},"body":{"modules/CommonModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["helper.service.spec.ts",{"_index":3283,"title":{},"body":{"index.html":{}}}],["helper.service.ts",{"_index":1725,"title":{},"body":{"injectables/QueryHelperService.html":{},"coverage.html":{},"index.html":{}}}],["helper.service.ts:22",{"_index":1733,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["helper.service.ts:56",{"_index":1741,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["helper.service.ts:87",{"_index":1749,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["here",{"_index":24,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["hh:mm:ss",{"_index":3479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["high",{"_index":2840,"title":{},"body":{"index.html":{}}}],["highly",{"_index":2821,"title":{},"body":{"index.html":{}}}],["hold",{"_index":2939,"title":{},"body":{"index.html":{}}}],["horizontal",{"_index":2854,"title":{},"body":{"index.html":{}}}],["host",{"_index":1144,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{},"index.html":{}}}],["host.switchtohttp",{"_index":1537,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["html",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDTO.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["http",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["httpcode",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('access",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('refresh",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"classes/InvalidCredentialsException.html":{}}}],["httpexception('forbidden",{"_index":1529,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception('invalid",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexceptionfilter",{"_index":1516,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httponly",{"_index":873,"title":{},"body":{"injectables/CookieService.html":{}}}],["https://github.com/binary",{"_index":3383,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"classes/InvalidCredentialsException.html":{},"injectables/TokenService.html":{}}}],["httpstatus.bad_request",{"_index":2300,"title":{},"body":{"injectables/TokenService.html":{}}}],["httpstatus.forbidden",{"_index":1530,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":2332,"title":{},"body":{"injectables/TokenService.html":{}}}],["httpstatus.unauthorized",{"_index":1583,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"injectables/TokenService.html":{}}}],["hyphens",{"_index":2169,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["id",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/IdDto.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id.decorator",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/ReservationsController.html":{}}}],["id.decorator.ts",{"_index":2592,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id.dto.ts",{"_index":3016,"title":{},"body":{"index.html":{}}}],["iddto",{"_index":1569,"title":{"classes/IdDto.html":{}},"body":{"classes/IdDto.html":{},"coverage.html":{},"index.html":{}}}],["iddto.id",{"_index":1573,"title":{},"body":{"classes/IdDto.html":{}}}],["identifier",{"_index":499,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["ignored",{"_index":103,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["ignoreexpiration",{"_index":99,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["image",{"_index":2893,"title":{},"body":{"index.html":{}}}],["images",{"_index":2887,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":3436,"title":{},"body":{"index.html":{}}}],["implements",{"_index":133,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["import",{"_index":27,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{}}}],["importing",{"_index":2944,"title":{},"body":{"index.html":{}}}],["imports",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["inactive/1",{"_index":2502,"title":{},"body":{"controllers/UsersController.html":{}}}],["inactive/:id",{"_index":2498,"title":{},"body":{"controllers/UsersController.html":{}}}],["include",{"_index":1555,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["includes",{"_index":3232,"title":{},"body":{"index.html":{}}}],["including",{"_index":1010,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["incorrect",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["increments",{"_index":3086,"title":{},"body":{"index.html":{}}}],["index",{"_index":41,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index()@column({unique",{"_index":1243,"title":{},"body":{"entities/Event.html":{}}}],["index()@manytoone(undefined",{"_index":533,"title":{},"body":{"entities/CartItem.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/Transaction.html":{}}}],["index()@onetoone(undefined",{"_index":512,"title":{},"body":{"entities/Cart.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{}}}],["index.ts",{"_index":3091,"title":{},"body":{"index.html":{}}}],["indexable",{"_index":1641,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["indicates",{"_index":2468,"title":{},"body":{"entities/User.html":{}}}],["individual",{"_index":3079,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":69,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/HttpExceptionFilter.html":{},"entities/Reservation.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["initial",{"_index":1113,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{}}}],["initializes",{"_index":2933,"title":{},"body":{"index.html":{}}}],["initiated",{"_index":2055,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["initiatereservation",{"_index":2022,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["initiatereservation(user",{"_index":2051,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["initiates",{"_index":2053,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["inject",{"_index":1140,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/TicketsService.html":{}}}],["inject(forwardref",{"_index":2240,"title":{},"body":{"injectables/TicketsService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"overview.html":{}}}],["injected",{"_index":1801,"title":{},"body":{"injectables/RedisService.html":{}}}],["injection",{"_index":1804,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["injectrepository",{"_index":76,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(cartitem",{"_index":687,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["injectrepository(event",{"_index":688,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["injectrepository(eventprice",{"_index":1293,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["injectrepository(reservation",{"_index":2067,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["injectrepository(reservationdetails",{"_index":1961,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["injectrepository(ticket",{"_index":2239,"title":{},"body":{"injectables/TicketsService.html":{}}}],["injectrepository(transaction",{"_index":2406,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["injectrepository(user",{"_index":84,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":3011,"title":{},"body":{"index.html":{}}}],["inputs",{"_index":3018,"title":{},"body":{"index.html":{}}}],["insert",{"_index":3393,"title":{},"body":{"index.html":{}}}],["insights",{"_index":3410,"title":{},"body":{"index.html":{}}}],["inspiration",{"_index":3456,"title":{},"body":{"index.html":{}}}],["install",{"_index":3387,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2735,"title":{},"body":{"index.html":{}}}],["instance",{"_index":146,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["instanceof",{"_index":1547,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["instances",{"_index":2858,"title":{},"body":{"index.html":{}}}],["instructions",{"_index":2809,"title":{},"body":{"index.html":{}}}],["insufficient",{"_index":1692,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["int",{"_index":1079,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"entities/Event.html":{},"entities/User.html":{}}}],["integer",{"_index":894,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["integers",{"_index":3019,"title":{},"body":{"index.html":{}}}],["integrated",{"_index":3306,"title":{},"body":{"index.html":{}}}],["integrates",{"_index":2815,"title":{},"body":{"index.html":{}}}],["integrating",{"_index":3201,"title":{},"body":{"index.html":{}}}],["integration",{"_index":2833,"title":{},"body":{"index.html":{}}}],["integrations",{"_index":2814,"title":{},"body":{"index.html":{}}}],["integrity",{"_index":3022,"title":{},"body":{"index.html":{}}}],["intended",{"_index":1011,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["inter",{"_index":3131,"title":{},"body":{"index.html":{}}}],["interact",{"_index":1791,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{}}}],["interaction",{"_index":2951,"title":{},"body":{"index.html":{}}}],["interactions",{"_index":2967,"title":{},"body":{"index.html":{}}}],["interacts",{"_index":3048,"title":{},"body":{"index.html":{}}}],["interceptors",{"_index":2936,"title":{},"body":{"index.html":{}}}],["interface",{"_index":1615,"title":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"interfaces/TokenConfig.html":{}},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"interfaces/TokenConfig.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":1617,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"interfaces/TokenConfig.html":{},"index.html":{},"overview.html":{}}}],["internal",{"_index":2339,"title":{},"body":{"injectables/TokenService.html":{}}}],["internalservererrorexception",{"_index":1480,"title":{},"body":{"injectables/EventsService.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception('error",{"_index":1862,"title":{},"body":{"injectables/RedisService.html":{}}}],["internalservererrorexception('failed",{"_index":1498,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["introduces",{"_index":3135,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"classes/InvalidCredentialsException.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["invalidated",{"_index":106,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["invalidcredentialsexception",{"_index":427,"title":{"classes/InvalidCredentialsException.html":{}},"body":{"injectables/AuthService.html":{},"classes/InvalidCredentialsException.html":{},"coverage.html":{},"index.html":{}}}],["invalides",{"_index":1582,"title":{},"body":{"classes/InvalidCredentialsException.html":{}}}],["ioredis",{"_index":1781,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{}}}],["isaccesstoken",{"_index":2274,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["isaccesstoken=false",{"_index":2283,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["isactive",{"_index":1122,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iscreator",{"_index":1608,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["iscreatorguard",{"_index":343,"title":{"guards/IsCreatorGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/IsCreatorGuard.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["iscreatorguard)@delete('/delete/:id",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["isdevelopment",{"_index":3486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isemail",{"_index":1649,"title":{},"body":{"classes/LoginDTO.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":906,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/PaginationAndFilterDto.html":{}}}],["isenum(priceformulaenum",{"_index":914,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{}}}],["isenum(sortorder",{"_index":1680,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["isglobal",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":907,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/IdDto.html":{},"classes/PaginationAndFilterDto.html":{}}}],["isint()@isoptional",{"_index":903,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["isint()@ispositive",{"_index":1571,"title":{},"body":{"classes/IdDto.html":{}}}],["isnan(days",{"_index":833,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["isnotempty",{"_index":908,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/LoginDTO.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isemail",{"_index":1645,"title":{},"body":{"classes/LoginDTO.html":{},"classes/SignUpDto.html":{}}}],["isnotempty()@isenum(priceformulaenum",{"_index":896,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["isnotempty()@isint",{"_index":888,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{}}}],["isnotempty()@isint()@ispositive()@min(1",{"_index":900,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["isnotempty()@isnumber",{"_index":926,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDto.html":{}}}],["isnotempty()@isnumber()@min(0",{"_index":984,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{}}}],["isnotempty()@isoptional()@isemail",{"_index":2453,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":942,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/UpdatePasswordDTO.html":{}}}],["isnotempty()@isstring()@maxlength(255",{"_index":955,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isnotempty()@isstring()@maxlength(500",{"_index":949,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isnotempty()@isstring()@minlength(5)@maxlength(25",{"_index":960,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isnotempty()@isstrongpassword()@minlength(6",{"_index":2174,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isnotempty()@minlength(6)@isstrongpassword",{"_index":2435,"title":{},"body":{"classes/UpdatePasswordDTO.html":{}}}],["isnotprod",{"_index":1541,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["isnumber",{"_index":966,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{}}}],["iso",{"_index":947,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isoptional",{"_index":909,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/PaginationAndFilterDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isenum(sortorder",{"_index":1673,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["isoptional()@isint()@type(undefined)@min(0",{"_index":1663,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["isoptional()@isstring",{"_index":1658,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["ispositive",{"_index":910,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/IdDto.html":{}}}],["isstring",{"_index":967,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/PaginationAndFilterDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(50)@matches(/^[a",{"_index":2455,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring()@minlength(3)@maxlength(50)@matches(/^[a",{"_index":2164,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isstrongpassword",{"_index":2180,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{}}}],["issues",{"_index":3401,"title":{},"body":{"index.html":{}}}],["isvalid",{"_index":1192,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RefreshTokenStoreService.html":{}}}],["item",{"_index":528,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableReservations1712661230451.html":{},"injectables/EventSalesService.html":{},"entities/Reservation.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"index.html":{}}}],["item.cartitemid",{"_index":2093,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["item.dto",{"_index":604,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/UpdateCartItemDto.html":{}}}],["item.dto.ts",{"_index":885,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{},"index.html":{}}}],["item.dto.ts:22",{"_index":904,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.dto.ts:36",{"_index":889,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.dto.ts:54",{"_index":901,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.dto.ts:68",{"_index":897,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.event.eventid",{"_index":2085,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["item.price",{"_index":1364,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/TransactionsService.html":{}}}],["item.priceformula",{"_index":1362,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["item.quantity",{"_index":1363,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/TransactionsService.html":{}}}],["items",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"entities/Cart.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["items.controller",{"_index":626,"title":{},"body":{"modules/CartItemsModule.html":{}}}],["items.controller.spec.ts",{"_index":3102,"title":{},"body":{"index.html":{}}}],["items.controller.ts",{"_index":569,"title":{},"body":{"controllers/CartItemsController.html":{},"coverage.html":{},"index.html":{}}}],["items.controller.ts:123",{"_index":595,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["items.controller.ts:39",{"_index":577,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["items.controller.ts:57",{"_index":585,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["items.controller.ts:73",{"_index":591,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["items.controller.ts:97",{"_index":601,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["items.dto",{"_index":3110,"title":{},"body":{"index.html":{}}}],["items.entities",{"_index":3106,"title":{},"body":{"index.html":{}}}],["items.length",{"_index":1365,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["items.migration.spec.ts",{"_index":3261,"title":{},"body":{"index.html":{}}}],["items.module",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{}}}],["items.module.ts",{"_index":624,"title":{},"body":{"modules/CartItemsModule.html":{},"index.html":{}}}],["items.service",{"_index":606,"title":{},"body":{"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/ReservationsProcessorService.html":{}}}],["items.service.spec.ts",{"_index":3100,"title":{},"body":{"index.html":{}}}],["items.service.ts",{"_index":636,"title":{},"body":{"injectables/CartItemsService.html":{},"coverage.html":{},"index.html":{}}}],["items.service.ts:111",{"_index":660,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:140",{"_index":655,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:15",{"_index":648,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:166",{"_index":681,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:202",{"_index":671,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:222",{"_index":668,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:240",{"_index":675,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:43",{"_index":652,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items.service.ts:69",{"_index":664,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["items/cart",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"coverage.html":{}}}],["items/dto/create",{"_index":884,"title":{},"body":{"classes/CreateCartItemDto.html":{},"coverage.html":{}}}],["items/dto/update",{"_index":2427,"title":{},"body":{"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["items/entities/cartitems.entity",{"_index":518,"title":{},"body":{"entities/Cart.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"entities/Reservation.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{}}}],["items/entities/cartitems.entity.ts",{"_index":527,"title":{},"body":{"entities/CartItem.html":{},"coverage.html":{}}}],["items/entities/cartitems.entity.ts:100",{"_index":552,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:112",{"_index":537,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:124",{"_index":557,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:29",{"_index":536,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:43",{"_index":535,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:56",{"_index":542,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:67",{"_index":555,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:78",{"_index":548,"title":{},"body":{"entities/CartItem.html":{}}}],["items/entities/cartitems.entity.ts:89",{"_index":545,"title":{},"body":{"entities/CartItem.html":{}}}],["itemsforevent",{"_index":2086,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["jest",{"_index":2831,"title":{},"body":{"index.html":{}}}],["jo",{"_index":2727,"title":{},"body":{"index.html":{}}}],["john",{"_index":1744,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["john.doe@example.com",{"_index":1650,"title":{},"body":{"classes/LoginDTO.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["join",{"_index":3407,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":521,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{}}}],["json",{"_index":1833,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["json.parse(jsonstring",{"_index":1861,"title":{},"body":{"injectables/RedisService.html":{}}}],["json.stringify(detailederrors",{"_index":1567,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["json.stringify(result",{"_index":1857,"title":{},"body":{"injectables/RedisService.html":{}}}],["json.stringify(value",{"_index":1847,"title":{},"body":{"injectables/RedisService.html":{}}}],["jsonstring",{"_index":1834,"title":{},"body":{"injectables/RedisService.html":{}}}],["jwt",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.interface.ts",{"_index":3035,"title":{},"body":{"index.html":{}}}],["jwt_refresh_token_expiration",{"_index":866,"title":{},"body":{"injectables/CookieService.html":{}}}],["jwtfromrequest",{"_index":87,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["jwtpayload",{"_index":62,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["jwtservice",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TokenManagementService.html":{},"index.html":{}}}],["jwttokens",{"_index":1616,"title":{"interfaces/JWTTokens.html":{}},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["karate",{"_index":2711,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["key",{"_index":97,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"interfaces/KeyValuePairs.html":{},"injectables/RedisService.html":{},"entities/Ticket.html":{},"interfaces/TokenConfig.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["key1",{"_index":1634,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["key2",{"_index":1636,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["key3",{"_index":1638,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["keys",{"_index":155,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["keyvaluepairs",{"_index":1629,"title":{"interfaces/KeyValuePairs.html":{}},"body":{"interfaces/KeyValuePairs.html":{},"coverage.html":{}}}],["last",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"classes/SignUpDto.html":{},"entities/Transaction.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"index.html":{}}}],["lastlogin",{"_index":1127,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"entities/User.html":{}}}],["lastname",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"injectables/TransactionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["later",{"_index":2340,"title":{},"body":{"injectables/TokenService.html":{}}}],["layer",{"_index":3036,"title":{},"body":{"index.html":{}}}],["layered",{"_index":3053,"title":{},"body":{"index.html":{}}}],["legend",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":952,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["letters",{"_index":2168,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["level",{"_index":2561,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["levels",{"_index":2601,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["leveraging",{"_index":3236,"title":{},"body":{"index.html":{}}}],["libraries",{"_index":2817,"title":{},"body":{"index.html":{}}}],["libs",{"_index":2865,"title":{},"body":{"index.html":{}}}],["libs/payment/payment.module",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["libs/payment/payment.service",{"_index":795,"title":{},"body":{"modules/CommonModule.html":{},"injectables/ReservationsProcessorService.html":{}}}],["license",{"_index":2741,"title":{},"body":{"index.html":{},"properties.html":{}}}],["limit",{"_index":1654,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{},"modules/ThrollerModule.html":{},"dependencies.html":{},"index.html":{}}}],["limiting",{"_index":3347,"title":{},"body":{"index.html":{}}}],["limitput",{"_index":1732,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["limits",{"_index":3013,"title":{},"body":{"index.html":{}}}],["linkage",{"_index":3215,"title":{},"body":{"index.html":{}}}],["linking",{"_index":3109,"title":{},"body":{"index.html":{}}}],["links",{"_index":3095,"title":{},"body":{"index.html":{}}}],["linting",{"_index":2799,"title":{},"body":{"index.html":{}}}],["list",{"_index":1336,"title":{},"body":{"injectables/EventSalesService.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["listed",{"_index":2923,"title":{},"body":{"index.html":{}}}],["listens",{"_index":2937,"title":{},"body":{"index.html":{}}}],["listing",{"_index":3128,"title":{},"body":{"index.html":{}}}],["live",{"_index":982,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{},"injectables/RedisService.html":{}}}],["load",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"injectables/CartsService.html":{},"injectables/UsersService.html":{}}}],["loaded",{"_index":772,"title":{},"body":{"injectables/CartsService.html":{},"modules/DatabaseModule.html":{},"injectables/UsersService.html":{}}}],["loads",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"injectables/CartsService.html":{},"injectables/UsersService.html":{}}}],["local",{"_index":2665,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["locally",{"_index":3418,"title":{},"body":{"index.html":{}}}],["located",{"_index":3020,"title":{},"body":{"index.html":{}}}],["log",{"_index":2556,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["log(message",{"_index":2568,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logged",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"entities/User.html":{}}}],["logger",{"_index":1523,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logger(httpexceptionfilter.name",{"_index":1525,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["logger(redisservice.name",{"_index":1841,"title":{},"body":{"injectables/RedisService.html":{}}}],["logger(refreshtokenstoreservice.name",{"_index":1889,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["logger(tokenservice.name",{"_index":2314,"title":{},"body":{"injectables/TokenService.html":{}}}],["logger(transactionsservice.name",{"_index":2405,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["logger.debug(message",{"_index":2583,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logger.error(message",{"_index":2581,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logger.info(message",{"_index":2580,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logger.verbose(message",{"_index":2584,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logger.warn(message",{"_index":2582,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["loggerservice",{"_index":2578,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["logging",{"_index":2553,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logic",{"_index":23,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["logically",{"_index":2823,"title":{},"body":{"index.html":{}}}],["login",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/InvalidCredentialsException.html":{},"classes/LoginDTO.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["login(@body",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(logindto",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["login.dto.ts",{"_index":3366,"title":{},"body":{"index.html":{}}}],["logindto",{"_index":304,"title":{"classes/LoginDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDTO.html":{},"coverage.html":{}}}],["logins",{"_index":3359,"title":{},"body":{"index.html":{}}}],["logout",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["logout(@userid",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logouts",{"_index":3360,"title":{},"body":{"index.html":{}}}],["logs",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["long",{"_index":933,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["longdesc",{"_index":1219,"title":{},"body":{"entities/Event.html":{}}}],["longdescription",{"_index":921,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{}}}],["loose",{"_index":2827,"title":{},"body":{"index.html":{}}}],["m",{"_index":3435,"title":{},"body":{"index.html":{}}}],["machine",{"_index":3420,"title":{},"body":{"index.html":{}}}],["made",{"_index":1020,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/User.html":{}}}],["main",{"_index":3448,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":2866,"title":{},"body":{"index.html":{}}}],["maintain",{"_index":3045,"title":{},"body":{"index.html":{}}}],["maintainability",{"_index":2983,"title":{},"body":{"index.html":{}}}],["maintainable",{"_index":3210,"title":{},"body":{"index.html":{}}}],["maintaining",{"_index":3088,"title":{},"body":{"index.html":{}}}],["maintains",{"_index":2797,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":2782,"title":{},"body":{"index.html":{}}}],["make",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"classes/InvalidCredentialsException.html":{},"index.html":{}}}],["makefile",{"_index":2860,"title":{},"body":{"index.html":{}}}],["makeinactive",{"_index":2487,"title":{},"body":{"controllers/UsersController.html":{}}}],["makeinactive(@param('id",{"_index":2514,"title":{},"body":{"controllers/UsersController.html":{}}}],["makeinactive(id",{"_index":2496,"title":{},"body":{"controllers/UsersController.html":{}}}],["making",{"_index":1004,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["manage",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"injectables/CookieService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["managed",{"_index":2859,"title":{},"body":{"index.html":{}}}],["management",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["management.service",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TokenService.html":{}}}],["management.service.spec.ts",{"_index":3337,"title":{},"body":{"index.html":{}}}],["management.service.ts",{"_index":2261,"title":{},"body":{"injectables/TokenManagementService.html":{},"coverage.html":{},"index.html":{}}}],["management.service.ts:11",{"_index":2266,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["management.service.ts:33",{"_index":2268,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["management.service.ts:49",{"_index":2271,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["management.service.ts:66",{"_index":2275,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["manager",{"_index":2647,"title":{},"body":{"dependencies.html":{}}}],["manages",{"_index":2920,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1013,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["manipulation",{"_index":3015,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":559,"title":{},"body":{"entities/CartItem.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{}}}],["manytoone(undefined",{"_index":539,"title":{},"body":{"entities/CartItem.html":{},"entities/ReservationDetails.html":{}}}],["map",{"_index":1355,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["mapping",{"_index":2911,"title":{},"body":{"index.html":{}}}],["maps",{"_index":3093,"title":{},"body":{"index.html":{}}}],["match",{"_index":3370,"title":{},"body":{"index.html":{}}}],["matched",{"_index":3319,"title":{},"body":{"index.html":{}}}],["matches",{"_index":968,"title":{},"body":{"classes/CreateEventDto.html":{},"guards/IsCreatorGuard.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["matches(/^[a",{"_index":2185,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["matching",{"_index":34,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":2408,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["math.random",{"_index":1717,"title":{},"body":{"injectables/PaymentService.html":{}}}],["math.round(baseprice",{"_index":1297,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["math.round(newbaseprice",{"_index":1310,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["maxage",{"_index":876,"title":{},"body":{"injectables/CookieService.html":{}}}],["maximum",{"_index":951,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/PaginationAndFilterDto.html":{}}}],["maxlength",{"_index":969,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["maxlength(25",{"_index":973,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["maxlength(255",{"_index":974,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["maxlength(50",{"_index":2184,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["maxlength(500",{"_index":975,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["measures",{"_index":2843,"title":{},"body":{"index.html":{}}}],["memberof",{"_index":1359,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{}}}],["merged",{"_index":3447,"title":{},"body":{"index.html":{}}}],["message",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/RedisService.html":{},"classes/SignUpDto.html":{},"injectables/TokenService.html":{},"classes/UpdateUserDto.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":3005,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":2147,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":144,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{}}}],["methoddecorator",{"_index":3522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["middleware",{"_index":2845,"title":{},"body":{"index.html":{}}}],["migrate",{"_index":2929,"title":{},"body":{"index.html":{}}}],["migrates",{"_index":3263,"title":{},"body":{"index.html":{}}}],["migration",{"_index":126,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["migrationinterface",{"_index":134,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["migrations",{"_index":2723,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["min",{"_index":911,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/PaginationAndFilterDto.html":{}}}],["min(0",{"_index":990,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{},"classes/PaginationAndFilterDto.html":{}}}],["min(1",{"_index":913,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["minimum",{"_index":2177,"title":{},"body":{"classes/SignUpDto.html":{}}}],["minlength",{"_index":970,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(3",{"_index":2183,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(5",{"_index":972,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["minlength(6",{"_index":2186,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{}}}],["minute",{"_index":3348,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":2676,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":814,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"miscellaneous/variables.html":{}}}],["mocked",{"_index":3332,"title":{},"body":{"index.html":{}}}],["mocks",{"_index":3158,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2938,"title":{},"body":{"index.html":{}}}],["model",{"_index":3108,"title":{},"body":{"index.html":{}}}],["modes",{"_index":2919,"title":{},"body":{"index.html":{}}}],["modification",{"_index":3075,"title":{},"body":{"index.html":{}}}],["modifications",{"_index":3310,"title":{},"body":{"index.html":{}}}],["modular",{"_index":2788,"title":{},"body":{"index.html":{}}}],["modularity",{"_index":2820,"title":{},"body":{"index.html":{}}}],["module",{"_index":177,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":179,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/cart",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"entities/Cart.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"entities/Reservation.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{}}}],["modules/carts/carts.module",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/ReservationsModule.html":{}}}],["modules/carts/carts.service",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/ReservationsProcessorService.html":{}}}],["modules/carts/entities/cart.entity",{"_index":560,"title":{},"body":{"entities/CartItem.html":{},"entities/User.html":{}}}],["modules/commom.module",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{}}}],["modules/events/entities/event.entity",{"_index":562,"title":{},"body":{"entities/CartItem.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{}}}],["modules/events/event",{"_index":685,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/ReservationsProcessorService.html":{}}}],["modules/events/events.module",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"modules/CartItemsModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{}}}],["modules/reservation",{"_index":628,"title":{},"body":{"modules/CartItemsModule.html":{},"entities/Event.html":{},"modules/EventsModule.html":{},"entities/Reservation.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{}}}],["modules/reservations/entities/reservation.entity",{"_index":561,"title":{},"body":{"entities/CartItem.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["modules/reservations/reservations.module",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"modules/CartItemsModule.html":{},"modules/PaymentModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{}}}],["modules/reservations/reservations.service",{"_index":2238,"title":{},"body":{"injectables/TicketsService.html":{}}}],["modules/tickets/entities/ticket.entity",{"_index":1917,"title":{},"body":{"entities/Reservation.html":{}}}],["modules/tickets/tickets.module",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{}}}],["modules/tickets/tickets.service",{"_index":2065,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["modules/transactions/entities/transaction.entity",{"_index":1918,"title":{},"body":{"entities/Reservation.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["modules/transactions/transactions.module",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{}}}],["modules/transactions/transactions.service",{"_index":2066,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{}}}],["modules/users/entities/user.entity",{"_index":81,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"classes/CreateReservationDto.html":{},"injectables/EncryptionService.html":{},"modules/PaymentModule.html":{},"entities/Reservation.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{}}}],["modules/users/users.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.service",{"_index":2064,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{}}}],["month",{"_index":837,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["more",{"_index":2946,"title":{},"body":{"index.html":{}}}],["motivations",{"_index":3444,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":2890,"title":{},"body":{"index.html":{}}}],["multiplier",{"_index":3517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multipliers",{"_index":3293,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["myaccesstokensecret",{"_index":2257,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["myrefreshtokensecret",{"_index":2259,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["name",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["name.example",{"_index":3427,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":3069,"title":{},"body":{"index.html":{}}}],["necessity",{"_index":3265,"title":{},"body":{"index.html":{}}}],["needed",{"_index":3160,"title":{},"body":{"index.html":{}}}],["nest",{"_index":2726,"title":{},"body":{"index.html":{}}}],["nest.js",{"_index":3027,"title":{},"body":{"index.html":{}}}],["nested",{"_index":1750,"title":{},"body":{"injectables/QueryHelperService.html":{},"index.html":{}}}],["nestedfields",{"_index":1762,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["nestedfields.foreach((field",{"_index":1765,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["nestedfields.length",{"_index":1766,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["nestedkey",{"_index":1639,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["nestedvalue",{"_index":1640,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["nestjs",{"_index":1842,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":74,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"injectables/CookieService.html":{},"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1602,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":2634,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TokenManagementService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2638,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":30,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2642,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":2430,"title":{},"body":{"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/throttler",{"_index":2192,"title":{},"body":{"modules/ThrollerModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":77,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PaymentModule.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["network",{"_index":2773,"title":{},"body":{"index.html":{}}}],["new",{"_index":113,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateReservationDto.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newaccesstoken",{"_index":2335,"title":{},"body":{"injectables/TokenService.html":{}}}],["newbaseprice",{"_index":1286,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["newly",{"_index":758,"title":{},"body":{"injectables/CartsService.html":{}}}],["newpassword",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDTO.html":{}}}],["newpassword123",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["newreservationdetails",{"_index":1963,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["newstrongpassword123",{"_index":2437,"title":{},"body":{"classes/UpdatePasswordDTO.html":{}}}],["newuser",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["node",{"_index":2896,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["node_env",{"_index":1534,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["non",{"_index":892,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/UpdatePasswordDTO.html":{},"index.html":{}}}],["none",{"_index":880,"title":{},"body":{"injectables/CookieService.html":{}}}],["normalizedemail",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('cart",{"_index":716,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{}}}],["notfoundexception('event",{"_index":694,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/ReservationDetailsService.html":{}}}],["notfoundexception('no",{"_index":2141,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["notfoundexception('not",{"_index":697,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/EventSalesService.html":{}}}],["notfoundexception('price",{"_index":702,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["notfoundexception('quantity",{"_index":722,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["notfoundexception('reservation",{"_index":2245,"title":{},"body":{"injectables/TicketsService.html":{}}}],["notfoundexception('user",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(`cart",{"_index":778,"title":{},"body":{"injectables/CartsService.html":{}}}],["notfoundexception(`content",{"_index":1609,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["notfoundexception(`event",{"_index":1314,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/EventsService.html":{}}}],["notfoundexception(`reservation",{"_index":1968,"title":{},"body":{"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{}}}],["notfoundexception(`transaction",{"_index":2416,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["notfoundexception(`user",{"_index":2550,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":3388,"title":{},"body":{"index.html":{}}}],["null",{"_index":165,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/RedisService.html":{}}}],["nullable",{"_index":1927,"title":{},"body":{"entities/ReservationDetails.html":{},"entities/User.html":{}}}],["number",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/IdDto.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":2171,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["object",{"_index":116,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"guards/IsCreatorGuard.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.assign(event",{"_index":1509,"title":{},"body":{"injectables/EventsService.html":{}}}],["object.assign(user",{"_index":2549,"title":{},"body":{"injectables/UsersService.html":{}}}],["objects",{"_index":2943,"title":{},"body":{"index.html":{}}}],["observable",{"_index":2150,"title":{},"body":{"guards/RoleGuard.html":{}}}],["occurs",{"_index":1491,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["offers",{"_index":2746,"title":{},"body":{"index.html":{}}}],["offset",{"_index":1655,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{}}}],["offsets",{"_index":3014,"title":{},"body":{"index.html":{}}}],["old",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDTO.html":{}}}],["oldpassword",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDTO.html":{}}}],["oldpassword123",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdatePasswordDTO.html":{}}}],["oldrefreshtoken",{"_index":2320,"title":{},"body":{"injectables/TokenService.html":{}}}],["olympics",{"_index":2979,"title":{},"body":{"index.html":{}}}],["once",{"_index":3445,"title":{},"body":{"index.html":{}}}],["one",{"_index":754,"title":{},"body":{"injectables/CartsService.html":{},"index.html":{}}}],["onetomany",{"_index":522,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":500,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["onetoone",{"_index":520,"title":{},"body":{"entities/Cart.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":1901,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["open",{"_index":2744,"title":{},"body":{"index.html":{}}}],["operations",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueryHelperService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["optimize",{"_index":2875,"title":{},"body":{"index.html":{}}}],["optimized",{"_index":2839,"title":{},"body":{"index.html":{}}}],["optimizing",{"_index":2758,"title":{},"body":{"index.html":{}}}],["optional",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["optionally",{"_index":1611,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["options",{"_index":1727,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["orchestrated",{"_index":2775,"title":{},"body":{"index.html":{}}}],["orchestrates",{"_index":2889,"title":{},"body":{"index.html":{}}}],["orchestrating",{"_index":2750,"title":{},"body":{"index.html":{}}}],["orchestration",{"_index":2730,"title":{},"body":{"index.html":{}}}],["order",{"_index":175,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["order.enum",{"_index":1678,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["order.enum.ts",{"_index":2683,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["ordercondition",{"_index":1759,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["orderparts",{"_index":1768,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["orderparts.foreach((part",{"_index":1771,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["orderparts.length",{"_index":1772,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["organization",{"_index":2914,"title":{},"body":{"index.html":{}}}],["organized",{"_index":2822,"title":{},"body":{"index.html":{}}}],["organizing",{"_index":2907,"title":{},"body":{"index.html":{}}}],["origin",{"_index":3439,"title":{},"body":{"index.html":{}}}],["original",{"_index":3441,"title":{},"body":{"index.html":{}}}],["orm",{"_index":2847,"title":{},"body":{"index.html":{}}}],["out",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outcomes",{"_index":2959,"title":{},"body":{"index.html":{}}}],["output",{"_index":2903,"title":{},"body":{"index.html":{}}}],["overall",{"_index":2783,"title":{},"body":{"index.html":{}}}],["override",{"_index":1737,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["overview",{"_index":2732,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner's",{"_index":1607,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["p.priceformula",{"_index":700,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["package",{"_index":2631,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":2862,"title":{},"body":{"index.html":{}}}],["packages",{"_index":2848,"title":{},"body":{"index.html":{}}}],["page",{"_index":3291,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["pagination",{"_index":1393,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["pagination.dto.ts",{"_index":3009,"title":{},"body":{"index.html":{}}}],["paginationandfilterdto",{"_index":1390,"title":{"classes/PaginationAndFilterDto.html":{}},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paginationandfilterdto.filterby",{"_index":1660,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationandfilterdto.filtervalue",{"_index":1662,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationandfilterdto.limit",{"_index":1665,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationandfilterdto.offset",{"_index":1668,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationandfilterdto.sortby",{"_index":1672,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationandfilterdto.sortorder",{"_index":1675,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["paginationdto",{"_index":1978,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{}}}],["paginationfilterdto",{"_index":1396,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["paginationfilterdto.sortby",{"_index":2419,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["paginationfilterdto.sortorder.touppercase",{"_index":2421,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["pair",{"_index":1643,"title":{},"body":{"interfaces/KeyValuePairs.html":{},"injectables/RedisService.html":{}}}],["pairs",{"_index":1633,"title":{},"body":{"interfaces/KeyValuePairs.html":{},"index.html":{}}}],["param",{"_index":83,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{}}}],["param('cartid",{"_index":612,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/ReservationsController.html":{}}}],["param('cartitemid",{"_index":614,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["param('id",{"_index":1428,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{}}}],["param('priceformula",{"_index":1429,"title":{},"body":{"controllers/EventsController.html":{}}}],["parameter",{"_index":3354,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{}}}],["parent",{"_index":3044,"title":{},"body":{"index.html":{}}}],["parse",{"_index":1832,"title":{},"body":{"injectables/RedisService.html":{}}}],["parsed",{"_index":1835,"title":{},"body":{"injectables/RedisService.html":{}}}],["parseint(duration.replace('d",{"_index":831,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["parser",{"_index":2651,"title":{},"body":{"dependencies.html":{}}}],["parses",{"_index":3000,"title":{},"body":{"index.html":{}}}],["parsing",{"_index":1859,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["part",{"_index":3340,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["partial",{"_index":3202,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":2429,"title":{},"body":{"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["partialtype(createcartitemdto",{"_index":2428,"title":{},"body":{"classes/UpdateCartItemDto.html":{}}}],["partialtype(createeventdto",{"_index":2432,"title":{},"body":{"classes/UpdateEventDto.html":{},"index.html":{}}}],["partialtype(createreservationdetailsdto",{"_index":2441,"title":{},"body":{"classes/UpdateReservationDetailsDto.html":{}}}],["partialtype(createreservationdto",{"_index":2444,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["partialtype(createtransactiondto",{"_index":2448,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["parts",{"_index":3096,"title":{},"body":{"index.html":{}}}],["passes",{"_index":121,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passing",{"_index":3355,"title":{},"body":{"index.html":{}}}],["passport",{"_index":79,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":75,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["password",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"classes/LoginDTO.html":{},"modules/RedisModule.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"index.html":{}}}],["password.dto",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto.ts",{"_index":2434,"title":{},"body":{"classes/UpdatePasswordDTO.html":{},"coverage.html":{},"index.html":{}}}],["password.dto.ts:21",{"_index":2438,"title":{},"body":{"classes/UpdatePasswordDTO.html":{}}}],["password.dto.ts:36",{"_index":2436,"title":{},"body":{"classes/UpdatePasswordDTO.html":{}}}],["password123",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EncryptionService.html":{},"classes/LoginDTO.html":{}}}],["passwordhash",{"_index":1121,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"entities/User.html":{}}}],["passwords",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["patch",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["patch(':cartid/items/:cartitemid",{"_index":600,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["patch(':id",{"_index":1433,"title":{},"body":{"controllers/EventsController.html":{},"guards/IsCreatorGuard.html":{},"controllers/UsersController.html":{}}}],["patch('change",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('make",{"_index":2513,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":878,"title":{},"body":{"injectables/CookieService.html":{},"modules/DatabaseModule.html":{},"index.html":{}}}],["paths",{"_index":3219,"title":{},"body":{"index.html":{}}}],["pattern",{"_index":2825,"title":{},"body":{"index.html":{}}}],["payload",{"_index":64,"title":{"interfaces/Payload.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"index.html":{}}}],["payload.interface.ts",{"_index":3033,"title":{},"body":{"index.html":{}}}],["payload.role",{"_index":2337,"title":{},"body":{"injectables/TokenService.html":{}}}],["payload.sub",{"_index":109,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/TokenService.html":{}}}],["payload.version",{"_index":111,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/TokenService.html":{}}}],["payment",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableTransactions1712661230452.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["payment.interface.ts",{"_index":3028,"title":{},"body":{"index.html":{}}}],["payment.module.ts",{"_index":2949,"title":{},"body":{"index.html":{}}}],["payment.service",{"_index":1688,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.service.spec.ts",{"_index":2953,"title":{},"body":{"index.html":{}}}],["payment.service.ts",{"_index":2962,"title":{},"body":{"index.html":{}}}],["paymentid",{"_index":994,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateTableTransactions1712661230452.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{}}}],["paymentmodule",{"_index":193,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentresponse",{"_index":1700,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["paymentresult",{"_index":1689,"title":{"interfaces/PaymentResult.html":{}},"body":{"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["paymentresult.status",{"_index":2074,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TransactionsService.html":{}}}],["payments",{"_index":2032,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["paymentservice",{"_index":786,"title":{"injectables/PaymentService.html":{}},"body":{"modules/CommonModule.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"injectables/ReservationsProcessorService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["paymentservice.processpayment(100",{"_index":1709,"title":{},"body":{"injectables/PaymentService.html":{}}}],["pending",{"_index":2960,"title":{},"body":{"index.html":{}}}],["per",{"_index":3007,"title":{},"body":{"index.html":{}}}],["performance",{"_index":2837,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":3077,"title":{},"body":{"index.html":{}}}],["persistent",{"_index":2882,"title":{},"body":{"index.html":{}}}],["pg",{"_index":2667,"title":{},"body":{"dependencies.html":{}}}],["pg_type",{"_index":3497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pipes",{"_index":2934,"title":{},"body":{"index.html":{}}}],["plain",{"_index":1186,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["please",{"_index":2323,"title":{},"body":{"injectables/TokenService.html":{}}}],["pnpm",{"_index":2894,"title":{},"body":{"index.html":{}}}],["point",{"_index":2898,"title":{},"body":{"index.html":{}}}],["port",{"_index":1146,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"index.html":{}}}],["ports",{"_index":2886,"title":{},"body":{"index.html":{}}}],["positive",{"_index":902,"title":{},"body":{"classes/CreateCartItemDto.html":{},"index.html":{}}}],["possible",{"_index":3511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"index.html":{}}}],["post('/:cartid",{"_index":1975,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["post('/items",{"_index":576,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["post('access",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('create",{"_index":1424,"title":{},"body":{"controllers/EventsController.html":{}}}],["post('login",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":1143,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["postgresql",{"_index":1136,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["pr",{"_index":3440,"title":{},"body":{"index.html":{}}}],["precision",{"_index":1204,"title":{},"body":{"entities/Event.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{}}}],["predefined",{"_index":1272,"title":{},"body":{"injectables/EventPricesService.html":{},"index.html":{}}}],["prefix",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["present",{"_index":3248,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":2802,"title":{},"body":{"index.html":{}}}],["preventduplicatereservation",{"_index":2023,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["preventduplicatereservation(item",{"_index":2056,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["prevents",{"_index":2058,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["price",{"_index":530,"title":{},"body":{"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["price.entity",{"_index":1249,"title":{},"body":{"entities/Event.html":{},"injectables/EventPricesService.html":{},"modules/EventsModule.html":{}}}],["price.entity.ts",{"_index":1252,"title":{},"body":{"entities/EventPrice.html":{},"coverage.html":{},"index.html":{}}}],["price.entity.ts:22",{"_index":1256,"title":{},"body":{"entities/EventPrice.html":{}}}],["price.entity.ts:36",{"_index":1254,"title":{},"body":{"entities/EventPrice.html":{}}}],["price.entity.ts:53",{"_index":1258,"title":{},"body":{"entities/EventPrice.html":{}}}],["price.entity.ts:64",{"_index":1257,"title":{},"body":{"entities/EventPrice.html":{}}}],["price.event",{"_index":1222,"title":{},"body":{"entities/Event.html":{}}}],["price.price",{"_index":1301,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["pricedetail",{"_index":698,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["pricedetail.price",{"_index":704,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["priceformula",{"_index":531,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["priceformulaenum",{"_index":547,"title":{},"body":{"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"entities/ReservationDetails.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["priceformulaenum.duo",{"_index":1351,"title":{},"body":{"injectables/EventSalesService.html":{},"miscellaneous/variables.html":{}}}],["priceformulaenum.family",{"_index":1352,"title":{},"body":{"injectables/EventSalesService.html":{},"miscellaneous/variables.html":{}}}],["priceformulaenum.fixed",{"_index":895,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/EventPrice.html":{}}}],["priceformulaenum.solo",{"_index":1330,"title":{},"body":{"injectables/EventSalesService.html":{},"miscellaneous/variables.html":{}}}],["priceformulaenum.standard",{"_index":1284,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["pricerecord",{"_index":1311,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["pricerecord.price",{"_index":1309,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["pricerecord.priceformula",{"_index":1308,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices",{"_index":650,"title":{},"body":{"injectables/CartItemsService.html":{},"entities/Event.html":{},"injectables/EventPricesService.html":{},"index.html":{}}}],["prices.migration.spec.ts",{"_index":3272,"title":{},"body":{"index.html":{}}}],["prices.service",{"_index":686,"title":{},"body":{"injectables/CartItemsService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["prices.service.spec.ts",{"_index":3162,"title":{},"body":{"index.html":{}}}],["prices.service.ts",{"_index":1261,"title":{},"body":{"injectables/EventPricesService.html":{},"coverage.html":{},"index.html":{}}}],["prices.service.ts:114",{"_index":1276,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices.service.ts:138",{"_index":1279,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices.service.ts:14",{"_index":1268,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices.service.ts:34",{"_index":1271,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices.service.ts:59",{"_index":1282,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices.service.ts:86",{"_index":1287,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["prices_formula",{"_index":1291,"title":{},"body":{"injectables/EventPricesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prices_formula.find(f",{"_index":1306,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["pricing",{"_index":549,"title":{},"body":{"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/EventPrice.html":{},"entities/ReservationDetails.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["primary",{"_index":1035,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["primarygeneratedcolumn",{"_index":519,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('increment",{"_index":496,"title":{},"body":{"entities/Cart.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["print",{"_index":3481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":85,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/CookieService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["proactively",{"_index":2965,"title":{},"body":{"index.html":{}}}],["probability",{"_index":1714,"title":{},"body":{"injectables/PaymentService.html":{}}}],["process",{"_index":1337,"title":{},"body":{"injectables/EventSalesService.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["process.env.node_env",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["processes",{"_index":1334,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/PaymentService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["processeventticketsandrevenue",{"_index":1320,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["processeventticketsandrevenue(items",{"_index":1332,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["processing",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsService.html":{},"index.html":{}}}],["processor.service",{"_index":2014,"title":{},"body":{"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{}}}],["processor.service.spec.ts",{"_index":3113,"title":{},"body":{"index.html":{}}}],["processor.service.ts",{"_index":2017,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"coverage.html":{},"index.html":{}}}],["processor.service.ts:120",{"_index":2042,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:154",{"_index":2052,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:179",{"_index":2046,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:202",{"_index":2057,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:223",{"_index":2034,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:23",{"_index":2030,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:60",{"_index":2062,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processor.service.ts:94",{"_index":2039,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processpayment",{"_index":1705,"title":{},"body":{"injectables/PaymentService.html":{},"index.html":{}}}],["processpayment(carttotal",{"_index":1706,"title":{},"body":{"injectables/PaymentService.html":{}}}],["processpaymentresponse",{"_index":1699,"title":{"interfaces/ProcessPaymentResponse.html":{}},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"coverage.html":{}}}],["processuserreservation",{"_index":2024,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["processuserreservation(userid",{"_index":2061,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["prod",{"_index":2932,"title":{},"body":{"index.html":{}}}],["prod_env",{"_index":861,"title":{},"body":{"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1157,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":2545,"title":{},"body":{"injectables/UsersService.html":{}}}],["project",{"_index":2738,"title":{},"body":{"index.html":{}}}],["projects",{"_index":2753,"title":{},"body":{"index.html":{}}}],["promise",{"_index":71,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promotes",{"_index":2910,"title":{},"body":{"index.html":{}}}],["proper",{"_index":3117,"title":{},"body":{"index.html":{}}}],["properties",{"_index":492,"title":{"properties.html":{}},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"index.html":{},"properties.html":{}}}],["property",{"_index":118,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["protect",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["protected",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"index.html":{}}}],["protection",{"_index":3308,"title":{},"body":{"index.html":{}}}],["provide",{"_index":1785,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["provided",{"_index":905,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateReservationDetailsDto.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["provider",{"_index":735,"title":{},"body":{"modules/CartsModule.html":{},"modules/ReservationDetailsModule.html":{},"index.html":{}}}],["providers",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":1782,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["providing",{"_index":2972,"title":{},"body":{"index.html":{}}}],["prs",{"_index":3406,"title":{},"body":{"index.html":{}}}],["public",{"_index":135,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["pull",{"_index":3404,"title":{},"body":{"index.html":{}}}],["purchase",{"_index":2198,"title":{},"body":{"entities/Ticket.html":{}}}],["purchasekey",{"_index":1093,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"injectables/EncryptionService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["purposes",{"_index":1793,"title":{},"body":{"injectables/RedisService.html":{}}}],["push",{"_index":3437,"title":{},"body":{"index.html":{}}}],["qr",{"_index":1171,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/Ticket.html":{},"index.html":{}}}],["qrcode",{"_index":1096,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"injectables/EncryptionService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["qrcode.todataurl(securekey",{"_index":1201,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["quality",{"_index":2795,"title":{},"body":{"index.html":{}}}],["quantities",{"_index":3101,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":532,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"index.html":{}}}],["quantityavailable",{"_index":922,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"injectables/EventsService.html":{}}}],["quantityperformula",{"_index":1321,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["quantityperformula(priceformula",{"_index":1338,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["quantitysold",{"_index":1067,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"injectables/EventsService.html":{}}}],["quantitytodeduct",{"_index":1369,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["queries",{"_index":149,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["query",{"_index":1417,"title":{},"body":{"controllers/EventsController.html":{},"injectables/QueryHelperService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["queryhelper",{"_index":1451,"title":{},"body":{"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["queryhelperservice",{"_index":789,"title":{"injectables/QueryHelperService.html":{}},"body":{"modules/CommonModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["queryhelperservice.buildqueryoptions(paginationdto",{"_index":1736,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["queryhelperservice.buildwherecondition('name",{"_index":1743,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["queryhelperservice.createnestedorder('address.city",{"_index":1752,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["queryoptions",{"_index":1493,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["queryoptions.order",{"_index":2420,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["queryoptions.relations",{"_index":2133,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["queryoptions.select",{"_index":2134,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["queryoptions.where",{"_index":2132,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["queryrunner",{"_index":139,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["queryrunner.down(queryrunner",{"_index":145,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["queryrunner.gettable('cart",{"_index":1045,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{}}}],["queryrunner.gettable('cart_items",{"_index":1032,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{}}}],["queryrunner.gettable('event_prices",{"_index":1052,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{}}}],["queryrunner.gettable('events",{"_index":1063,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{}}}],["queryrunner.gettable('reservation_details",{"_index":1077,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{}}}],["queryrunner.gettable('reservations",{"_index":1085,"title":{},"body":{"classes/CreateTableReservations1712661230451.html":{}}}],["queryrunner.gettable('tickets",{"_index":1092,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{}}}],["queryrunner.gettable('transactions",{"_index":1105,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{}}}],["queryrunner.gettable('users",{"_index":1119,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{}}}],["queryrunner.query",{"_index":156,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["queryrunner.query(`drop",{"_index":1038,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["queryrunner.query(does_enum_category_type_exist",{"_index":1064,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{}}}],["queryrunner.query(does_enum_price_formule_type_exist",{"_index":1033,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{}}}],["queryrunner.query(does_enum_status_reservation_exist",{"_index":1106,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{}}}],["queryrunner.query(does_enum_user_role_exist",{"_index":1120,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{}}}],["queryrunner.up(queryrunner",{"_index":154,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["questions",{"_index":3413,"title":{},"body":{"index.html":{}}}],["random",{"_index":1716,"title":{},"body":{"injectables/PaymentService.html":{}}}],["rate",{"_index":1723,"title":{},"body":{"injectables/PaymentService.html":{},"dependencies.html":{},"index.html":{}}}],["rates",{"_index":2961,"title":{},"body":{"index.html":{}}}],["readability",{"_index":2982,"title":{},"body":{"index.html":{}}}],["readme.md",{"_index":2861,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"classes/SignUpDto.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["readonlyarray",{"_index":3516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ready",{"_index":2892,"title":{},"body":{"index.html":{}}}],["recalculate",{"_index":723,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["recognition",{"_index":2941,"title":{},"body":{"index.html":{}}}],["record",{"_index":1350,"title":{},"body":{"injectables/EventSalesService.html":{},"miscellaneous/variables.html":{}}}],["records",{"_index":1756,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["redis",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"dependencies.html":{},"index.html":{}}}],["redis.interface.ts",{"_index":1631,"title":{},"body":{"interfaces/KeyValuePairs.html":{},"coverage.html":{},"index.html":{}}}],["redis.interface.ts:8",{"_index":1642,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["redis.module.ts",{"_index":3235,"title":{},"body":{"index.html":{}}}],["redis.service",{"_index":1780,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis.service.spec.ts",{"_index":3237,"title":{},"body":{"index.html":{}}}],["redis.service.ts",{"_index":3230,"title":{},"body":{"index.html":{}}}],["redis_client",{"_index":1777,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["redisclient",{"_index":1800,"title":{},"body":{"injectables/RedisService.html":{}}}],["redismodule",{"_index":194,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisservice",{"_index":787,"title":{"injectables/RedisService.html":{}},"body":{"modules/CommonModule.html":{},"injectables/EventsService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["redisservice.clearcacheevent",{"_index":1810,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisservice.clearcacheevent(123",{"_index":1809,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisservice.del('user:1",{"_index":1813,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisservice.fetchcacheddata('user:1",{"_index":1822,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisservice.get('user:1",{"_index":1828,"title":{},"body":{"injectables/RedisService.html":{}}}],["redisservice.set('user:1",{"_index":1838,"title":{},"body":{"injectables/RedisService.html":{}}}],["refer",{"_index":3453,"title":{},"body":{"index.html":{}}}],["reference",{"_index":635,"title":{},"body":{"modules/CartItemsModule.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["references",{"_index":161,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"index.html":{}}}],["referencing",{"_index":3185,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":2670,"title":{},"body":{"dependencies.html":{}}}],["reflection",{"_index":3311,"title":{},"body":{"index.html":{}}}],["reflector",{"_index":1594,"title":{},"body":{"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{}}}],["reflectors",{"_index":3317,"title":{},"body":{"index.html":{}}}],["refresh",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["refreshed",{"_index":2329,"title":{},"body":{"injectables/TokenService.html":{}}}],["refreshes",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["refreshing",{"_index":1868,"title":{},"body":{"classes/RefreshTokenDto.html":{},"index.html":{}}}],["refreshtoken",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["refreshtoken(@req",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(req",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["refreshtokendto",{"_index":1865,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{},"index.html":{}}}],["refreshtokenexpiration",{"_index":868,"title":{},"body":{"injectables/CookieService.html":{},"interfaces/TokenConfig.html":{}}}],["refreshtokenfromcookie",{"_index":2333,"title":{},"body":{"injectables/TokenService.html":{}}}],["refreshtokensecret",{"_index":2256,"title":{},"body":{"interfaces/TokenConfig.html":{}}}],["refreshtokenstoreservice",{"_index":384,"title":{"injectables/RefreshTokenStoreService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["refreshtokenstoreservice.removerefreshtokenredis(1",{"_index":1881,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["refreshtokenstoreservice.storerefreshtokeninredis(1",{"_index":1885,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["refreshtokenstoreservice.verifyrefreshtokeninredis(1",{"_index":1888,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["refreshtokenttl",{"_index":871,"title":{},"body":{"injectables/CookieService.html":{}}}],["regex",{"_index":3376,"title":{},"body":{"index.html":{}}}],["register",{"_index":398,"title":{},"body":{"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/EventsModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["registers",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["registration",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["registrations",{"_index":3070,"title":{},"body":{"index.html":{}}}],["reject",{"_index":1720,"title":{},"body":{"injectables/PaymentService.html":{}}}],["rejected",{"_index":2718,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rejection",{"_index":2957,"title":{},"body":{"index.html":{}}}],["related",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["relational",{"_index":3138,"title":{},"body":{"index.html":{}}}],["relations",{"_index":707,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["relationships",{"_index":3085,"title":{},"body":{"index.html":{}}}],["reliability",{"_index":2836,"title":{},"body":{"index.html":{}}}],["reliable",{"_index":3231,"title":{},"body":{"index.html":{}}}],["remarks",{"_index":1137,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["removal",{"_index":3097,"title":{},"body":{"index.html":{}}}],["remove",{"_index":572,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"index.html":{}}}],["remove(@param('id",{"_index":1437,"title":{},"body":{"controllers/EventsController.html":{}}}],["remove(id",{"_index":1407,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["remove(userid",{"_index":593,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["removeallitemfromcart",{"_index":641,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["removeallitemfromcart(userid",{"_index":667,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["removed",{"_index":597,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/RefreshTokenStoreService.html":{}}}],["removeditem",{"_index":672,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["removeoneitemfromcart",{"_index":642,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["removeoneitemfromcart(userid",{"_index":670,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["removerefreshtokenredis",{"_index":1873,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["removerefreshtokenredis(userid",{"_index":1879,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["removes",{"_index":596,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/RefreshTokenStoreService.html":{},"index.html":{}}}],["removeuseractive",{"_index":2523,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeuseractive(userid",{"_index":2533,"title":{},"body":{"injectables/UsersService.html":{}}}],["removing",{"_index":2036,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["report",{"_index":3400,"title":{},"body":{"index.html":{}}}],["repositories",{"_index":3057,"title":{},"body":{"index.html":{}}}],["repository",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository's",{"_index":2975,"title":{},"body":{"index.html":{}}}],["repository.example",{"_index":3438,"title":{},"body":{"index.html":{}}}],["repositorys",{"_index":2879,"title":{},"body":{"index.html":{}}}],["representing",{"_index":490,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"interfaces/TokenConfig.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["req",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CookieService.html":{},"injectables/TokenService.html":{}}}],["req.cookies['refreshtoken",{"_index":864,"title":{},"body":{"injectables/CookieService.html":{}}}],["request",{"_index":117,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"injectables/TokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.iscreator",{"_index":1614,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["request.method",{"_index":1561,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.params.id",{"_index":1606,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["request.url",{"_index":1559,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1604,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["request.user?.userid",{"_index":3527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":2842,"title":{},"body":{"index.html":{}}}],["required",{"_index":891,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/LoginDTO.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["requiredrole",{"_index":2153,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requirements",{"_index":3379,"title":{},"body":{"index.html":{}}}],["res",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"injectables/TokenService.html":{}}}],["res.clearcookie('refreshtoken",{"_index":883,"title":{},"body":{"injectables/CookieService.html":{}}}],["res.cookie('refreshtoken",{"_index":882,"title":{},"body":{"injectables/CookieService.html":{}}}],["res.json",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.status(200).send('logged",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.status(200).send('user",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.status(httpstatus.ok).json",{"_index":2330,"title":{},"body":{"injectables/TokenService.html":{}}}],["res.status(status).json",{"_index":2348,"title":{},"body":{"injectables/TokenService.html":{}}}],["reservation",{"_index":244,"title":{"entities/Reservation.html":{}},"body":{"modules/AppModule.html":{},"entities/CartItem.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"entities/Event.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["reservation.cartitem",{"_index":554,"title":{},"body":{"entities/CartItem.html":{},"entities/Reservation.html":{}}}],["reservation.createdat",{"_index":1900,"title":{},"body":{"entities/Reservation.html":{}}}],["reservation.dto",{"_index":2445,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["reservation.dto.ts",{"_index":993,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{},"index.html":{}}}],["reservation.dto.ts:22",{"_index":1003,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:36",{"_index":996,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:50",{"_index":1002,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:64",{"_index":1001,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.entity.ts",{"_index":3137,"title":{},"body":{"index.html":{}}}],["reservation.enum",{"_index":1698,"title":{},"body":{"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{}}}],["reservation.enum.ts",{"_index":2685,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["reservation.reservationdetails",{"_index":1904,"title":{},"body":{"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/TransactionsService.html":{}}}],["reservation.reservationdetails)@joincolumn({name",{"_index":1934,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservation.reservationdetails.event",{"_index":2418,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["reservation.reservationid",{"_index":1965,"title":{},"body":{"injectables/ReservationDetailsService.html":{},"injectables/TicketsService.html":{}}}],["reservation.ticket",{"_index":1908,"title":{},"body":{"entities/Reservation.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{}}}],["reservation.ticket)@joincolumn({name",{"_index":2202,"title":{},"body":{"entities/Ticket.html":{}}}],["reservation.transaction",{"_index":1911,"title":{},"body":{"entities/Reservation.html":{},"entities/Transaction.html":{}}}],["reservation.updatedat",{"_index":1913,"title":{},"body":{"entities/Reservation.html":{}}}],["reservation.user",{"_index":1916,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["reservation.user.userid",{"_index":2142,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{}}}],["reservation1",{"_index":1701,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["reservation2",{"_index":1702,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["reservation_details",{"_index":1072,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"index.html":{}}}],["reservationdetails",{"_index":627,"title":{"entities/ReservationDetails.html":{}},"body":{"modules/CartItemsModule.html":{},"entities/Event.html":{},"modules/EventsModule.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["reservationdetails.createdat",{"_index":1926,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetails.event",{"_index":1232,"title":{},"body":{"entities/Event.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationsService.html":{}}}],["reservationdetails.price",{"_index":1931,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetails.priceformula",{"_index":1933,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetails.reservation",{"_index":1921,"title":{},"body":{"entities/Reservation.html":{},"entities/ReservationDetails.html":{}}}],["reservationdetails.reservation)@joincolumn({name",{"_index":1902,"title":{},"body":{"entities/Reservation.html":{}}}],["reservationdetails.shortdescription",{"_index":1938,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetails.title",{"_index":1940,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetails.updatedat",{"_index":1942,"title":{},"body":{"entities/ReservationDetails.html":{}}}],["reservationdetailsid",{"_index":1078,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{}}}],["reservationdetailsmodule",{"_index":1944,"title":{"modules/ReservationDetailsModule.html":{}},"body":{"modules/ReservationDetailsModule.html":{},"modules/TicketsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["reservationdetailsrepository",{"_index":1954,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["reservationdetailsservice",{"_index":623,"title":{"injectables/ReservationDetailsService.html":{}},"body":{"modules/CartItemsModule.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TransactionsModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["reservationdetailsservice.createreservationdetailsfromreservation(reservation",{"_index":1957,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["reservationdetailsservice.findone(1",{"_index":1959,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["reservationid",{"_index":172,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{}}}],["reservationprocessorservice",{"_index":2102,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationrepository",{"_index":2031,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["reservations",{"_index":130,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"entities/User.html":{},"index.html":{}}}],["reservations.controller",{"_index":2013,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["reservations.controller.spec.ts",{"_index":3115,"title":{},"body":{"index.html":{}}}],["reservations.controller.ts",{"_index":3134,"title":{},"body":{"index.html":{}}}],["reservations.length",{"_index":2140,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservations.migration.spec.ts",{"_index":3269,"title":{},"body":{"index.html":{}}}],["reservations.module.ts",{"_index":3130,"title":{},"body":{"index.html":{}}}],["reservations.push(...(await",{"_index":2078,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservations.service",{"_index":1995,"title":{},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{}}}],["reservations.service.spec.ts",{"_index":3118,"title":{},"body":{"index.html":{}}}],["reservations.service.ts",{"_index":3126,"title":{},"body":{"index.html":{}}}],["reservations/1",{"_index":1977,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["reservations/1/find",{"_index":1981,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["reservations/find",{"_index":1986,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["reservationscontroller",{"_index":1969,"title":{"controllers/ReservationsController.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"coverage.html":{}}}],["reservationsdetails",{"_index":1203,"title":{},"body":{"entities/Event.html":{}}}],["reservationservice",{"_index":2225,"title":{},"body":{"injectables/TicketsService.html":{}}}],["reservationsmodule",{"_index":195,"title":{"modules/ReservationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartItemsModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["reservationsprocessorservice",{"_index":2011,"title":{"injectables/ReservationsProcessorService.html":{}},"body":{"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"coverage.html":{},"overview.html":{}}}],["reservationsprocessorservice.cleanupafterpayment(1",{"_index":2037,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.createreservationsforallcartitems(cartitems",{"_index":2040,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.createreservationsforeachcartitem(cartitem",{"_index":2044,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.finalizebooking(cartitems",{"_index":2050,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.initiatereservation(user",{"_index":2054,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.preventduplicatereservation(cartitem",{"_index":2060,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsprocessorservice.processuserreservation(1",{"_index":2063,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["reservationsservice",{"_index":1994,"title":{"injectables/ReservationsService.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["reservationsservice.findall(1",{"_index":2106,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.findalladmin(paginationfilterdto",{"_index":2109,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.findalldata(1",{"_index":2111,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.findone(1",{"_index":2114,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.generatereservation(1",{"_index":2117,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.getselectfieldsfindall",{"_index":2121,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.getselectfieldsfindalladmin",{"_index":2123,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationsservice.savereservation(reservation",{"_index":2128,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reserved",{"_index":998,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reset",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resides",{"_index":3267,"title":{},"body":{"index.html":{}}}],["resolve",{"_index":2214,"title":{},"body":{"modules/TicketsModule.html":{}}}],["resolving",{"_index":3174,"title":{},"body":{"index.html":{}}}],["resource",{"_index":2838,"title":{},"body":{"index.html":{}}}],["resources",{"_index":3454,"title":{},"body":{"index.html":{}}}],["respective",{"_index":3521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["respectively",{"_index":3192,"title":{},"body":{"index.html":{}}}],["respond",{"_index":3324,"title":{},"body":{"index.html":{}}}],["response",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/TokenService.html":{}}}],["response.status(status).json(errorresponse",{"_index":1568,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsemessage",{"_index":1543,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responses",{"_index":2475,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["result",{"_index":1465,"title":{},"body":{"injectables/EventsService.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["results",{"_index":33,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":3010,"title":{},"body":{"index.html":{}}}],["retrieve",{"_index":1030,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventsService.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["retrieves",{"_index":586,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/EventPricesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["retrieving",{"_index":1492,"title":{},"body":{"injectables/EventsService.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["return",{"_index":115,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":70,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCreatorGuard.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["reusability",{"_index":2824,"title":{},"body":{"index.html":{}}}],["revenue",{"_index":1236,"title":{},"body":{"entities/Event.html":{},"injectables/EventSalesService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["revenuegenerated",{"_index":1068,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"injectables/EventsService.html":{}}}],["revenues",{"_index":3168,"title":{},"body":{"index.html":{}}}],["reversal",{"_index":3275,"title":{},"body":{"index.html":{}}}],["reverse",{"_index":174,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{}}}],["reversible",{"_index":3244,"title":{},"body":{"index.html":{}}}],["revert",{"_index":3257,"title":{},"body":{"index.html":{}}}],["reverting",{"_index":2925,"title":{},"body":{"index.html":{}}}],["reverts",{"_index":141,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["review",{"_index":3405,"title":{},"body":{"index.html":{}}}],["reviewed",{"_index":3446,"title":{},"body":{"index.html":{}}}],["revolve",{"_index":2756,"title":{},"body":{"index.html":{}}}],["roadmap",{"_index":2739,"title":{},"body":{"index.html":{}}}],["robust",{"_index":2747,"title":{},"body":{"index.html":{}}}],["robustness",{"_index":3356,"title":{},"body":{"index.html":{}}}],["role",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTableUsers1711085051379.html":{},"controllers/EventsController.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["role(userrole.admin",{"_index":1423,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["role(userrole.admin)@useguards(accesstokenguard",{"_index":1377,"title":{},"body":{"controllers/EventsController.html":{}}}],["role(userrole.admin)@useguards(roleguard)@get('get",{"_index":2489,"title":{},"body":{"controllers/UsersController.html":{}}}],["role.decorator.ts",{"_index":2989,"title":{},"body":{"index.html":{}}}],["role.enum",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventsController.html":{},"interfaces/Payload.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["role.enum.ts",{"_index":2687,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["role.guard.spec.ts",{"_index":3312,"title":{},"body":{"index.html":{}}}],["role.guard.ts",{"_index":3316,"title":{},"body":{"index.html":{}}}],["role=userrole.user",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["role_key",{"_index":2152,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguard",{"_index":1419,"title":{"guards/RoleGuard.html":{}},"body":{"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["roleguard)@delete(':id",{"_index":1408,"title":{},"body":{"controllers/EventsController.html":{}}}],["roleguard)@patch(':id",{"_index":1413,"title":{},"body":{"controllers/EventsController.html":{}}}],["roleguard)@post('create",{"_index":1378,"title":{},"body":{"controllers/EventsController.html":{}}}],["roleguard.canactivate(context",{"_index":2149,"title":{},"body":{"guards/RoleGuard.html":{}}}],["roles",{"_index":2159,"title":{},"body":{"guards/RoleGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["root",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["route",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/IsCreatorGuard.html":{},"guards/RoleGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"index.html":{}}}],["rowing",{"_index":2704,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rules",{"_index":2800,"title":{},"body":{"index.html":{}}}],["run",{"_index":148,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["runmigrations",{"_index":2605,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["runner.ts",{"_index":2604,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["running",{"_index":2924,"title":{},"body":{"index.html":{}}}],["runs",{"_index":152,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["runtime",{"_index":2917,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2151,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{}}}],["safe",{"_index":3233,"title":{},"body":{"index.html":{}}}],["safeguard",{"_index":3326,"title":{},"body":{"index.html":{}}}],["safely",{"_index":1831,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["safeparse",{"_index":1797,"title":{},"body":{"injectables/RedisService.html":{}}}],["safeparse(jsonstring",{"_index":1829,"title":{},"body":{"injectables/RedisService.html":{}}}],["sailing",{"_index":2705,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sales",{"_index":1317,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/ReservationsProcessorService.html":{},"index.html":{}}}],["sales.service",{"_index":1444,"title":{},"body":{"modules/EventsModule.html":{},"injectables/ReservationsProcessorService.html":{}}}],["sales.service.spec.ts",{"_index":3157,"title":{},"body":{"index.html":{}}}],["sales.service.ts",{"_index":1316,"title":{},"body":{"injectables/EventSalesService.html":{},"coverage.html":{},"index.html":{}}}],["sales.service.ts:114",{"_index":1339,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["sales.service.ts:23",{"_index":1354,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["sales.service.ts:27",{"_index":1325,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["sales.service.ts:44",{"_index":1333,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["sales.service.ts:67",{"_index":1347,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["sales.service.ts:88",{"_index":1327,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["same",{"_index":1482,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ReservationsProcessorService.html":{}}}],["samesite",{"_index":879,"title":{},"body":{"injectables/CookieService.html":{}}}],["sanitizes",{"_index":3017,"title":{},"body":{"index.html":{}}}],["satisfaction",{"_index":3206,"title":{},"body":{"index.html":{}}}],["satisfies",{"_index":3514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["save",{"_index":643,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ReservationsService.html":{}}}],["save(cart",{"_index":759,"title":{},"body":{"injectables/CartsService.html":{}}}],["save(item",{"_index":674,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["saved",{"_index":679,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ReservationsService.html":{}}}],["savedcart",{"_index":761,"title":{},"body":{"injectables/CartsService.html":{}}}],["saveditem",{"_index":677,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["savedreservation",{"_index":2127,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["savedtransaction",{"_index":2410,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["savereservation",{"_index":2101,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["savereservation(reservation",{"_index":2125,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["saves",{"_index":676,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ReservationsService.html":{},"index.html":{}}}],["saving",{"_index":3120,"title":{},"body":{"index.html":{}}}],["scalability",{"_index":2851,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":2789,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1205,"title":{},"body":{"entities/Event.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{}}}],["scaled",{"_index":2857,"title":{},"body":{"index.html":{}}}],["scaling",{"_index":2855,"title":{},"body":{"index.html":{}}}],["scenarios",{"_index":2955,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1012,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"index.html":{}}}],["schematics",{"_index":2901,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":2922,"title":{},"body":{"index.html":{}}}],["seamless",{"_index":2772,"title":{},"body":{"index.html":{}}}],["seamlessly",{"_index":3111,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":828,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"injectables/EventsService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["secret",{"_index":96,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"index.html":{}}}],["secretkey",{"_index":2284,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["secretorkey",{"_index":94,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["secure",{"_index":874,"title":{},"body":{"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"entities/Ticket.html":{},"index.html":{}}}],["securekey",{"_index":1095,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"injectables/EncryptionService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["securely",{"_index":3103,"title":{},"body":{"index.html":{}}}],["security",{"_index":1089,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"index.html":{}}}],["security/cookie/cookie.service",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["security/encryption/encryption.service",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{},"modules/CommonModule.html":{},"injectables/TicketsService.html":{}}}],["security/guards",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["security/strategies/access",{"_index":2520,"title":{},"body":{"modules/UsersModule.html":{}}}],["security/throttler/throttler.module",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["security/token/refreshtoken",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["security/token/token",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{}}}],["security/token/token.service",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["select",{"_index":1490,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["selected",{"_index":1388,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["selectfields",{"_index":2120,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["selection",{"_index":3188,"title":{},"body":{"index.html":{}}}],["sends",{"_index":2298,"title":{},"body":{"injectables/TokenService.html":{}}}],["separates",{"_index":2895,"title":{},"body":{"index.html":{}}}],["separation",{"_index":2993,"title":{},"body":{"index.html":{}}}],["serial",{"_index":1034,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["server",{"_index":1789,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["service",{"_index":58,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"injectables/EncryptionService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["services",{"_index":792,"title":{},"body":{"modules/CommonModule.html":{},"modules/ReservationsModule.html":{},"index.html":{}}}],["set",{"_index":164,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["set(cartitems.map(item",{"_index":2084,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["set(key",{"_index":1836,"title":{},"body":{"injectables/RedisService.html":{}}}],["setmetadata(role_key",{"_index":3523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setrefreshtokencookie",{"_index":844,"title":{},"body":{"injectables/CookieService.html":{}}}],["setrefreshtokencookie(res",{"_index":857,"title":{},"body":{"injectables/CookieService.html":{}}}],["sets",{"_index":859,"title":{},"body":{"injectables/CookieService.html":{},"index.html":{}}}],["setting",{"_index":1840,"title":{},"body":{"injectables/RedisService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["settings",{"_index":2909,"title":{},"body":{"index.html":{}}}],["setup",{"_index":1114,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["several",{"_index":3397,"title":{},"body":{"index.html":{}}}],["share",{"_index":3409,"title":{},"body":{"index.html":{}}}],["sharing",{"_index":3051,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":491,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableCarts1712661221574.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"index.html":{}}}],["short",{"_index":932,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"entities/Event.html":{},"entities/ReservationDetails.html":{}}}],["shortdesc",{"_index":1239,"title":{},"body":{"entities/Event.html":{}}}],["shortdescription",{"_index":923,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/Event.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["sign",{"_index":2162,"title":{},"body":{"classes/SignUpDto.html":{},"interfaces/TokenConfig.html":{},"index.html":{}}}],["signaling",{"_index":2996,"title":{},"body":{"index.html":{}}}],["signup",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["signup(createuserdto",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup.dto.ts",{"_index":3364,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":266,"title":{"classes/SignUpDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"index.html":{}}}],["single",{"_index":1401,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["situated",{"_index":3367,"title":{},"body":{"index.html":{}}}],["size",{"_index":3515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sizes",{"_index":3292,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1667,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{}}}],["skips",{"_index":1026,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["smooth",{"_index":3031,"title":{},"body":{"index.html":{}}}],["sold",{"_index":1229,"title":{},"body":{"entities/Event.html":{}}}],["soldqty",{"_index":1230,"title":{},"body":{"entities/Event.html":{}}}],["solo",{"_index":2713,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["solution",{"_index":2749,"title":{},"body":{"index.html":{}}}],["sort",{"_index":1671,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["sortby",{"_index":1656,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["sortby.split",{"_index":1769,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["sorting",{"_index":1735,"title":{},"body":{"injectables/QueryHelperService.html":{},"index.html":{}}}],["sortorder",{"_index":1657,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{},"miscellaneous/enumerations.html":{}}}],["sortorder.asc",{"_index":1676,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"injectables/QueryHelperService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"modules/CartsModule.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"classes/CreateTransactionDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/ThrollerModule.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["spec.ts",{"_index":2871,"title":{},"body":{"index.html":{}}}],["special",{"_index":2172,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["specific",{"_index":587,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/EventSalesService.html":{},"injectables/RedisService.html":{},"guards/RoleGuard.html":{},"injectables/TicketsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":714,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specifies",{"_index":3218,"title":{},"body":{"index.html":{}}}],["specifying",{"_index":3365,"title":{},"body":{"index.html":{}}}],["speed",{"_index":2841,"title":{},"body":{"index.html":{}}}],["spent",{"_index":2480,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["sports",{"_index":2981,"title":{},"body":{"index.html":{}}}],["sql",{"_index":3501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src",{"_index":2863,"title":{},"body":{"index.html":{}}}],["src.common.decorators",{"_index":2986,"title":{},"body":{"index.html":{}}}],["src.common.dto",{"_index":3008,"title":{},"body":{"index.html":{}}}],["src.common.enums",{"_index":2968,"title":{},"body":{"index.html":{}}}],["src.common.exceptions",{"_index":2991,"title":{},"body":{"index.html":{}}}],["src.common.globals",{"_index":2998,"title":{},"body":{"index.html":{}}}],["src.common.interfaces",{"_index":3023,"title":{},"body":{"index.html":{}}}],["src.common.logger",{"_index":3037,"title":{},"body":{"index.html":{}}}],["src.database",{"_index":3217,"title":{},"body":{"index.html":{}}}],["src.database.migrations",{"_index":3241,"title":{},"body":{"index.html":{}}}],["src.database.query",{"_index":3282,"title":{},"body":{"index.html":{}}}],["src.database.redis",{"_index":3229,"title":{},"body":{"index.html":{}}}],["src.libs.payment",{"_index":2948,"title":{},"body":{"index.html":{}}}],["src.modules",{"_index":3049,"title":{},"body":{"index.html":{}}}],["src.modules.cart",{"_index":3094,"title":{},"body":{"index.html":{}}}],["src.modules.carts",{"_index":3204,"title":{},"body":{"index.html":{}}}],["src.modules.carts.entities",{"_index":3212,"title":{},"body":{"index.html":{}}}],["src.modules.events",{"_index":3140,"title":{},"body":{"index.html":{}}}],["src.modules.events.dto",{"_index":3169,"title":{},"body":{"index.html":{}}}],["src.modules.events.entities",{"_index":3164,"title":{},"body":{"index.html":{}}}],["src.modules.reservation",{"_index":3052,"title":{},"body":{"index.html":{}}}],["src.modules.reservations",{"_index":3112,"title":{},"body":{"index.html":{}}}],["src.modules.reservations.dto",{"_index":3139,"title":{},"body":{"index.html":{}}}],["src.modules.reservations.entities",{"_index":3136,"title":{},"body":{"index.html":{}}}],["src.modules.tickets",{"_index":3170,"title":{},"body":{"index.html":{}}}],["src.modules.tickets.entities",{"_index":3178,"title":{},"body":{"index.html":{}}}],["src.modules.transactions",{"_index":3180,"title":{},"body":{"index.html":{}}}],["src.modules.transactions.dto",{"_index":3199,"title":{},"body":{"index.html":{}}}],["src.modules.transactions.entities",{"_index":3195,"title":{},"body":{"index.html":{}}}],["src.modules.users",{"_index":3066,"title":{},"body":{"index.html":{}}}],["src.modules.users.dto",{"_index":3090,"title":{},"body":{"index.html":{}}}],["src.modules.users.entities",{"_index":3081,"title":{},"body":{"index.html":{}}}],["src.security.auth",{"_index":3350,"title":{},"body":{"index.html":{}}}],["src.security.auth.dto",{"_index":3363,"title":{},"body":{"index.html":{}}}],["src.security.auth.strategies",{"_index":3368,"title":{},"body":{"index.html":{}}}],["src.security.cookie",{"_index":3327,"title":{},"body":{"index.html":{}}}],["src.security.encryption",{"_index":3303,"title":{},"body":{"index.html":{}}}],["src.security.guards",{"_index":3309,"title":{},"body":{"index.html":{}}}],["src.security.throttler",{"_index":3345,"title":{},"body":{"index.html":{}}}],["src.security.token",{"_index":3336,"title":{},"body":{"index.html":{}}}],["src.utils.constants",{"_index":3287,"title":{},"body":{"index.html":{}}}],["src.utils.services",{"_index":3297,"title":{},"body":{"index.html":{}}}],["src/.../category",{"_index":2678,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../constants.common.ts",{"_index":3472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.env.ts",{"_index":3473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.migrationdb.ts",{"_index":3471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../migration",{"_index":2722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../price",{"_index":2680,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.decorator.ts",{"_index":3474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sort",{"_index":2682,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status",{"_index":2684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../typeorm",{"_index":3470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":2686,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../winston.config.ts",{"_index":3469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/decorators/role.decorator.ts",{"_index":2588,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/user",{"_index":2591,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dto",{"_index":3021,"title":{},"body":{"index.html":{}}}],["src/common/dto/id.dto.ts",{"_index":1570,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["src/common/dto/id.dto.ts:20",{"_index":1572,"title":{},"body":{"classes/IdDto.html":{}}}],["src/common/dto/pagination.dto.ts",{"_index":1651,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"coverage.html":{}}}],["src/common/dto/pagination.dto.ts:23",{"_index":1664,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/dto/pagination.dto.ts:38",{"_index":1666,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/dto/pagination.dto.ts:51",{"_index":1670,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/dto/pagination.dto.ts:64",{"_index":1674,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/dto/pagination.dto.ts:77",{"_index":1659,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/dto/pagination.dto.ts:89",{"_index":1661,"title":{},"body":{"classes/PaginationAndFilterDto.html":{}}}],["src/common/enums/category",{"_index":2688,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/price",{"_index":2712,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/sort",{"_index":2716,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/status",{"_index":2717,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/user",{"_index":2719,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/exceptions/invalid",{"_index":1574,"title":{},"body":{"classes/InvalidCredentialsException.html":{},"coverage.html":{}}}],["src/common/globals",{"_index":1517,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interfaces/jwt.interface.ts",{"_index":1618,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/common/interfaces/key",{"_index":1630,"title":{},"body":{"interfaces/KeyValuePairs.html":{},"coverage.html":{}}}],["src/common/interfaces/payload.interface.ts",{"_index":1681,"title":{},"body":{"interfaces/Payload.html":{},"coverage.html":{}}}],["src/common/interfaces/payment.interface.ts",{"_index":1690,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"coverage.html":{}}}],["src/common/interfaces/token.interface.ts",{"_index":2253,"title":{},"body":{"interfaces/TokenConfig.html":{},"coverage.html":{}}}],["src/common/logger/winston.config.ts",{"_index":2598,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/logger/winston.service.ts",{"_index":2552,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"coverage.html":{}}}],["src/common/logger/winston.service.ts:19",{"_index":2569,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["src/common/logger/winston.service.ts:32",{"_index":2565,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["src/common/logger/winston.service.ts:44",{"_index":2575,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["src/common/logger/winston.service.ts:56",{"_index":2560,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["src/common/logger/winston.service.ts:68",{"_index":2572,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["src/database/database.module.ts",{"_index":1131,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/migration",{"_index":2603,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/migrations",{"_index":3268,"title":{},"body":{"index.html":{}}}],["src/database/migrations/1711085051379",{"_index":1111,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"coverage.html":{}}}],["src/database/migrations/1712572717258",{"_index":1055,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"coverage.html":{}}}],["src/database/migrations/1712642603000",{"_index":1047,"title":{},"body":{"classes/CreateTableEventPrices1712642603715.html":{},"coverage.html":{}}}],["src/database/migrations/1712661221574",{"_index":1040,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{},"coverage.html":{}}}],["src/database/migrations/1712661230450",{"_index":1006,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"coverage.html":{}}}],["src/database/migrations/1712661230451",{"_index":1081,"title":{},"body":{"classes/CreateTableReservations1712661230451.html":{},"coverage.html":{}}}],["src/database/migrations/1712661230452",{"_index":1098,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"coverage.html":{}}}],["src/database/migrations/1712717719010",{"_index":1087,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{},"coverage.html":{}}}],["src/database/migrations/1712751776641",{"_index":1070,"title":{},"body":{"classes/CreateTableReservationDetails1712751776641.html":{},"coverage.html":{}}}],["src/database/migrations/1712751780000",{"_index":124,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"coverage.html":{}}}],["src/database/query/query",{"_index":1724,"title":{},"body":{"injectables/QueryHelperService.html":{},"coverage.html":{}}}],["src/database/redis/redis.module.ts",{"_index":1778,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/database/redis/redis.service.ts",{"_index":1790,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/database/redis/redis.service.ts:109",{"_index":1817,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:129",{"_index":1830,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:147",{"_index":1806,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:19",{"_index":1799,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:39",{"_index":1837,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:61",{"_index":1827,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/redis/redis.service.ts:85",{"_index":1812,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/database/typeorm",{"_index":2609,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/libs/payment/payment.module.ts",{"_index":1687,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/libs/payment/payment.service.ts",{"_index":1703,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{}}}],["src/libs/payment/payment.service.ts:11",{"_index":1712,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/libs/payment/payment.service.ts:22",{"_index":1707,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/main.ts",{"_index":2614,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:121",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:137",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:153",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:170",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:58",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:77",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:98",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:126",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:153",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:177",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:25",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:58",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:90",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dto/login.dto.ts",{"_index":1644,"title":{},"body":{"classes/LoginDTO.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts:21",{"_index":1646,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/modules/auth/dto/login.dto.ts:33",{"_index":1648,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/modules/auth/dto/refresh",{"_index":1866,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/signup.dto.ts",{"_index":2161,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/signup.dto.ts:36",{"_index":2170,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/modules/auth/dto/signup.dto.ts:55",{"_index":2173,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/modules/auth/dto/signup.dto.ts:69",{"_index":2163,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/modules/auth/dto/signup.dto.ts:85",{"_index":2175,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/modules/auth/dto/signup.dto.ts:97",{"_index":2179,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/modules/auth/dto/update",{"_index":2433,"title":{},"body":{"classes/UpdatePasswordDTO.html":{},"coverage.html":{}}}],["src/modules/cart",{"_index":526,"title":{},"body":{"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"modules/CartItemsModule.html":{},"injectables/CartItemsService.html":{},"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["src/modules/carts/carts.module.ts",{"_index":731,"title":{},"body":{"modules/CartsModule.html":{}}}],["src/modules/carts/carts.service.ts",{"_index":736,"title":{},"body":{"injectables/CartsService.html":{},"coverage.html":{}}}],["src/modules/carts/carts.service.ts:11",{"_index":743,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:112",{"_index":760,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:127",{"_index":746,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:32",{"_index":749,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:49",{"_index":752,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:72",{"_index":764,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/carts.service.ts:92",{"_index":770,"title":{},"body":{"injectables/CartsService.html":{}}}],["src/modules/carts/entities/cart.entity.ts",{"_index":489,"title":{},"body":{"entities/Cart.html":{},"coverage.html":{}}}],["src/modules/carts/entities/cart.entity.ts:27",{"_index":497,"title":{},"body":{"entities/Cart.html":{}}}],["src/modules/carts/entities/cart.entity.ts:41",{"_index":514,"title":{},"body":{"entities/Cart.html":{}}}],["src/modules/carts/entities/cart.entity.ts:52",{"_index":502,"title":{},"body":{"entities/Cart.html":{}}}],["src/modules/carts/entities/cart.entity.ts:64",{"_index":507,"title":{},"body":{"entities/Cart.html":{}}}],["src/modules/carts/entities/cart.entity.ts:76",{"_index":509,"title":{},"body":{"entities/Cart.html":{}}}],["src/modules/commom.module.ts",{"_index":790,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/modules/events/dto/create",{"_index":916,"title":{},"body":{"classes/CreateEventDto.html":{},"coverage.html":{}}}],["src/modules/events/dto/update",{"_index":2431,"title":{},"body":{"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["src/modules/events/entities/event",{"_index":1251,"title":{},"body":{"entities/EventPrice.html":{},"coverage.html":{}}}],["src/modules/events/entities/event.entity.ts",{"_index":1202,"title":{},"body":{"entities/Event.html":{},"coverage.html":{}}}],["src/modules/events/entities/event.entity.ts:101",{"_index":1214,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:113",{"_index":1226,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:125",{"_index":1228,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:137",{"_index":1235,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:149",{"_index":1224,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:160",{"_index":1233,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:171",{"_index":1208,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:183",{"_index":1211,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:195",{"_index":1247,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:21",{"_index":1216,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:35",{"_index":1244,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:46",{"_index":1238,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:57",{"_index":1218,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:68",{"_index":1209,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:79",{"_index":1206,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/entities/event.entity.ts:90",{"_index":1241,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/events/event",{"_index":1260,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"coverage.html":{}}}],["src/modules/events/events.controller.ts",{"_index":1373,"title":{},"body":{"controllers/EventsController.html":{},"coverage.html":{}}}],["src/modules/events/events.controller.ts:115",{"_index":1400,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:139",{"_index":1414,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:155",{"_index":1409,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:53",{"_index":1379,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:67",{"_index":1392,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:82",{"_index":1386,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:97",{"_index":1405,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.module.ts",{"_index":1442,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/modules/events/events.service.ts",{"_index":1446,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{}}}],["src/modules/events/events.service.ts:113",{"_index":1471,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:136",{"_index":1475,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:163",{"_index":1473,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:185",{"_index":1457,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:203",{"_index":1469,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:24",{"_index":1452,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:45",{"_index":1453,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:68",{"_index":1467,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:89",{"_index":1463,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/reservation",{"_index":977,"title":{},"body":{"classes/CreateReservationDetailsDto.html":{},"entities/ReservationDetails.html":{},"modules/ReservationDetailsModule.html":{},"injectables/ReservationDetailsService.html":{},"classes/UpdateReservationDetailsDto.html":{},"coverage.html":{}}}],["src/modules/reservations",{"_index":3119,"title":{},"body":{"index.html":{}}}],["src/modules/reservations/dto/create",{"_index":992,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["src/modules/reservations/dto/update",{"_index":2443,"title":{},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts",{"_index":1896,"title":{},"body":{"entities/Reservation.html":{},"coverage.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:110",{"_index":1899,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:122",{"_index":1912,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:30",{"_index":1905,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:44",{"_index":1915,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:57",{"_index":1903,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:71",{"_index":1910,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:85",{"_index":1898,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/entities/reservation.entity.ts:98",{"_index":1907,"title":{},"body":{"entities/Reservation.html":{}}}],["src/modules/reservations/reservations",{"_index":2016,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"coverage.html":{}}}],["src/modules/reservations/reservations.controller.ts",{"_index":1970,"title":{},"body":{"controllers/ReservationsController.html":{},"coverage.html":{}}}],["src/modules/reservations/reservations.controller.ts:104",{"_index":1993,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/modules/reservations/reservations.controller.ts:36",{"_index":1976,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/modules/reservations/reservations.controller.ts:56",{"_index":1980,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/modules/reservations/reservations.controller.ts:75",{"_index":1985,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/modules/reservations/reservations.controller.ts:89",{"_index":1991,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/modules/reservations/reservations.module.ts",{"_index":2012,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["src/modules/reservations/reservations.service.ts",{"_index":2097,"title":{},"body":{"injectables/ReservationsService.html":{},"coverage.html":{}}}],["src/modules/reservations/reservations.service.ts:108",{"_index":2108,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:136",{"_index":2113,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:15",{"_index":2103,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:166",{"_index":2126,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:180",{"_index":2118,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:216",{"_index":2122,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:40",{"_index":2116,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:56",{"_index":2105,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/reservations/reservations.service.ts:89",{"_index":2110,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts",{"_index":2195,"title":{},"body":{"entities/Ticket.html":{},"coverage.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts:18",{"_index":2206,"title":{},"body":{"entities/Ticket.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts:32",{"_index":2203,"title":{},"body":{"entities/Ticket.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts:43",{"_index":2197,"title":{},"body":{"entities/Ticket.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts:54",{"_index":2204,"title":{},"body":{"entities/Ticket.html":{}}}],["src/modules/tickets/entities/ticket.entity.ts:65",{"_index":2200,"title":{},"body":{"entities/Ticket.html":{}}}],["src/modules/tickets/tickets.module.ts",{"_index":2212,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/modules/tickets/tickets.service.ts",{"_index":2220,"title":{},"body":{"injectables/TicketsService.html":{},"coverage.html":{}}}],["src/modules/tickets/tickets.service.ts:103",{"_index":2229,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:18",{"_index":2226,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:47",{"_index":2232,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:75",{"_index":2236,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/transactions/dto/create",{"_index":1129,"title":{},"body":{"classes/CreateTransactionDto.html":{},"coverage.html":{}}}],["src/modules/transactions/dto/update",{"_index":2447,"title":{},"body":{"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts",{"_index":2350,"title":{},"body":{"entities/Transaction.html":{},"coverage.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:110",{"_index":2361,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:28",{"_index":2360,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:42",{"_index":2364,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:53",{"_index":2355,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:64",{"_index":2357,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:75",{"_index":2353,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:86",{"_index":2358,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:98",{"_index":2351,"title":{},"body":{"entities/Transaction.html":{}}}],["src/modules/transactions/transactions.controller.ts",{"_index":2369,"title":{},"body":{"controllers/TransactionsController.html":{},"coverage.html":{}}}],["src/modules/transactions/transactions.controller.ts:28",{"_index":2370,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/modules/transactions/transactions.module.ts",{"_index":2380,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/modules/transactions/transactions.service.ts",{"_index":2383,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/modules/transactions/transactions.service.ts:121",{"_index":2398,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/transactions/transactions.service.ts:167",{"_index":2392,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/transactions/transactions.service.ts:181",{"_index":2403,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/transactions/transactions.service.ts:32",{"_index":2389,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/transactions/transactions.service.ts:59",{"_index":2396,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/transactions/transactions.service.ts:96",{"_index":2401,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/modules/users/dto/update",{"_index":2451,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":2458,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:102",{"_index":2473,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:113",{"_index":2459,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:125",{"_index":2477,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:140",{"_index":2478,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:151",{"_index":2467,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:162",{"_index":2482,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:173",{"_index":2479,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:185",{"_index":2461,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:197",{"_index":2469,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:22",{"_index":2483,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:33",{"_index":2460,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:44",{"_index":2476,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:55",{"_index":2481,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:66",{"_index":2463,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:77",{"_index":2465,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:88",{"_index":2470,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/users.controller.ts",{"_index":2486,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:104",{"_index":2499,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:37",{"_index":2490,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:54",{"_index":2492,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:69",{"_index":2494,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:89",{"_index":2505,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":2518,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service.ts",{"_index":2522,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:109",{"_index":2534,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:126",{"_index":2540,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:14",{"_index":2526,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:146",{"_index":2543,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:39",{"_index":2527,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:60",{"_index":2529,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:75",{"_index":2531,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:92",{"_index":2536,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/security/cookie/cookie.service.ts",{"_index":841,"title":{},"body":{"injectables/CookieService.html":{},"coverage.html":{}}}],["src/security/cookie/cookie.service.ts:12",{"_index":846,"title":{},"body":{"injectables/CookieService.html":{}}}],["src/security/cookie/cookie.service.ts:27",{"_index":854,"title":{},"body":{"injectables/CookieService.html":{}}}],["src/security/cookie/cookie.service.ts:41",{"_index":858,"title":{},"body":{"injectables/CookieService.html":{}}}],["src/security/cookie/cookie.service.ts:66",{"_index":848,"title":{},"body":{"injectables/CookieService.html":{}}}],["src/security/encryption/encryption.service.ts",{"_index":1158,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/security/encryption/encryption.service.ts:22",{"_index":1182,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/security/encryption/encryption.service.ts:36",{"_index":1190,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/security/encryption/encryption.service.ts:48",{"_index":1165,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/security/encryption/encryption.service.ts:61",{"_index":1177,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/security/encryption/encryption.service.ts:75",{"_index":1170,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/security/guards/access",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/security/guards/is",{"_index":1585,"title":{},"body":{"guards/IsCreatorGuard.html":{},"coverage.html":{}}}],["src/security/guards/role.guard.ts",{"_index":2143,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/security/guards/role.guard.ts:21",{"_index":2146,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/security/guards/role.guard.ts:39",{"_index":2148,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/security/strategies/access",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{}}}],["src/security/throttler/throttler.module.ts",{"_index":2190,"title":{},"body":{"modules/ThrollerModule.html":{}}}],["src/security/token/refreshtoken",{"_index":1870,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"coverage.html":{}}}],["src/security/token/token",{"_index":2260,"title":{},"body":{"injectables/TokenManagementService.html":{},"coverage.html":{}}}],["src/security/token/token.service.ts",{"_index":2286,"title":{},"body":{"injectables/TokenService.html":{},"coverage.html":{}}}],["src/security/token/token.service.ts:128",{"_index":2302,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:172",{"_index":2310,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:199",{"_index":2297,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:27",{"_index":2292,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:56",{"_index":2305,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:78",{"_index":2294,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/security/token/token.service.ts:92",{"_index":2307,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/utils/constants/constants.common.ts",{"_index":2624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/constants/constants.env.ts",{"_index":2625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/constants/constants.migrationdb.ts",{"_index":2627,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/services/convert",{"_index":802,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"coverage.html":{}}}],["stack",{"_index":2567,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"miscellaneous/variables.html":{}}}],["stages",{"_index":2891,"title":{},"body":{"index.html":{}}}],["standard",{"_index":580,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["start",{"_index":959,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["startdate",{"_index":924,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["started",{"_index":2725,"title":{"index.html":{}},"body":{"index.html":{}}}],["statements",{"_index":2587,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1447,"title":{},"body":{"injectables/EventsService.html":{}}}],["status",{"_index":1100,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["status_reservation",{"_index":3508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["status_reservation_enum",{"_index":1103,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":1553,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuspayment",{"_index":1107,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"injectables/ReservationsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{}}}],["statusreservation",{"_index":1696,"title":{},"body":{"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"miscellaneous/enumerations.html":{}}}],["statusreservation.approved",{"_index":2075,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{}}}],["statusreservation.failed",{"_index":1691,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["statusreservation.paid",{"_index":1694,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{}}}],["statusreservation.rejected",{"_index":1721,"title":{},"body":{"injectables/PaymentService.html":{}}}],["storage",{"_index":2774,"title":{},"body":{"index.html":{}}}],["store",{"_index":1024,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["store.service",{"_index":395,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["store.service.spec.ts",{"_index":3339,"title":{},"body":{"index.html":{}}}],["store.service.ts",{"_index":1871,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"coverage.html":{},"index.html":{}}}],["store.service.ts:21",{"_index":1877,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["store.service.ts:47",{"_index":1883,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["store.service.ts:65",{"_index":1887,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["store.service.ts:79",{"_index":1880,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["stored",{"_index":1872,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{}}}],["storedtoken",{"_index":1893,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["storerefreshtokeninredis",{"_index":1874,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["storerefreshtokeninredis(userid",{"_index":1882,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["stores",{"_index":1884,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{}}}],["storing",{"_index":1009,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["strategies",{"_index":2850,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"index.html":{}}}],["streamline",{"_index":2905,"title":{},"body":{"index.html":{}}}],["streamlining",{"_index":2728,"title":{},"body":{"index.html":{}}}],["strict",{"_index":881,"title":{},"body":{"injectables/CookieService.html":{},"index.html":{}}}],["string",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/ReservationDetails.html":{},"controllers/ReservationsController.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["stringified",{"_index":1839,"title":{},"body":{"injectables/RedisService.html":{}}}],["strings",{"_index":3301,"title":{},"body":{"index.html":{}}}],["stringvalue",{"_index":1845,"title":{},"body":{"injectables/RedisService.html":{}}}],["strong",{"_index":2176,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"index.html":{}}}],["strongpassword123",{"_index":2182,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["structure",{"_index":2734,"title":{},"body":{"index.html":{}}}],["structured",{"_index":2973,"title":{},"body":{"index.html":{}}}],["structures",{"_index":3029,"title":{},"body":{"index.html":{}}}],["style",{"_index":2805,"title":{},"body":{"index.html":{}}}],["sub",{"_index":1626,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["subject",{"_index":1624,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{}}}],["submit",{"_index":3402,"title":{},"body":{"index.html":{}}}],["success",{"_index":1715,"title":{},"body":{"injectables/PaymentService.html":{},"index.html":{}}}],["success_rate",{"_index":1704,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successful",{"_index":1695,"title":{},"body":{"interfaces/PaymentResult.html":{},"interfaces/ProcessPaymentResponse.html":{},"index.html":{}}}],["successfully",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EventsService.html":{}}}],["such",{"_index":2765,"title":{},"body":{"index.html":{}}}],["suite",{"_index":3392,"title":{},"body":{"index.html":{}}}],["sum",{"_index":2426,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["summary",{"_index":2874,"title":{},"body":{"index.html":{}}}],["super",{"_index":86,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["super('identifiants",{"_index":1581,"title":{},"body":{"classes/InvalidCredentialsException.html":{}}}],["supertest",{"_index":2832,"title":{},"body":{"index.html":{}}}],["support",{"_index":3240,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supporting",{"_index":2853,"title":{},"body":{"index.html":{}}}],["supports",{"_index":3012,"title":{},"body":{"index.html":{}}}],["svg",{"_index":3459,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2813,"title":{},"body":{"index.html":{}}}],["swimming",{"_index":2706,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["synchronization",{"_index":3220,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":1152,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":2952,"title":{},"body":{"index.html":{}}}],["t",{"_index":1818,"title":{},"body":{"injectables/RedisService.html":{}}}],["table",{"_index":158,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"coverage.html":{},"index.html":{}}}],["table_tennis",{"_index":2707,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tables",{"_index":132,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2630,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":3004,"title":{},"body":{"index.html":{}}}],["take",{"_index":1761,"title":{},"body":{"injectables/QueryHelperService.html":{},"injectables/ReservationsService.html":{}}}],["task",{"_index":3394,"title":{},"body":{"index.html":{}}}],["tasks",{"_index":1159,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["teardown",{"_index":3270,"title":{},"body":{"index.html":{}}}],["tech",{"_index":930,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["template",{"_index":1854,"title":{},"body":{"injectables/RedisService.html":{}}}],["tennis",{"_index":2708,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":2869,"title":{},"body":{"index.html":{}}}],["testing",{"_index":2829,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2737,"title":{},"body":{"index.html":{}}}],["text",{"_index":1066,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableTickets1712717719010.html":{},"injectables/EncryptionService.html":{}}}],["this.authservice.delete(+id",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(email",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.buildwherecondition(filterby",{"_index":1758,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["this.cartitemrepository.create",{"_index":711,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.find",{"_index":715,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.findone",{"_index":706,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.remove(cartitem",{"_index":725,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.remove(cartitems",{"_index":726,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.save(cartitem",{"_index":712,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.save(existingcartitem",{"_index":710,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemrepository.save(item",{"_index":727,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartitemsservice.additemtocart(userid",{"_index":610,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["this.cartitemsservice.findallitemsincart(userid",{"_index":613,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/ReservationsProcessorService.html":{}}}],["this.cartitemsservice.findoneitemincart(userid",{"_index":615,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["this.cartitemsservice.removeallitemfromcart(userid",{"_index":2094,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.cartitemsservice.removeoneitemfromcart(userid",{"_index":618,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["this.cartitemsservice.updatequantityincart",{"_index":616,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["this.cartrepository.create",{"_index":775,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.cartrepository.findone",{"_index":774,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.cartrepository.findoneby",{"_index":777,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.cartrepository.remove(cart",{"_index":780,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.cartrepository.save(cart",{"_index":776,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.cartservice.deletecart(cartid",{"_index":2095,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.cartservice.getorcreatecart(user.userid",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cartservice.getorcreatecart(userid",{"_index":2096,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.cartsservice.findcart(userid",{"_index":713,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cartsservice.getorcreatecart(userid",{"_index":691,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.cleanupafterpayment(cartid",{"_index":2077,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.configservice.get('jwt_access_token_expiration",{"_index":2281,"title":{},"body":{"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":2280,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["this.configservice.get('jwt_refresh_token_expiration",{"_index":869,"title":{},"body":{"injectables/CookieService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":2282,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["this.configservice.get('node_env",{"_index":875,"title":{},"body":{"injectables/CookieService.html":{}}}],["this.configservice.get(node_env",{"_index":1542,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.convertutilsservice.convertdatestringtodate(createeventdto.enddate",{"_index":1484,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.convertutilsservice.convertdatestringtodate(createeventdto.startdate",{"_index":1483,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.convertutilsservice.convertdaystoseconds",{"_index":1890,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["this.convertutilsservice.convertdaystoseconds(refreshtokenexpiration",{"_index":872,"title":{},"body":{"injectables/CookieService.html":{}}}],["this.cookieservice.clearrefreshtokencookie(res",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cookieservice.extractrefreshtokencookie(req",{"_index":2321,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.cookieservice.setrefreshtokencookie(res",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["this.createnestedorder(sortby",{"_index":1760,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["this.createnewticket(user",{"_index":2246,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.createpayload(user",{"_index":2315,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.createreservationsforallcartitems(cartitems",{"_index":2073,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.createreservationsforeachcartitem(item",{"_index":2079,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.deducteventquantity(item.event.eventid",{"_index":1361,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["this.deductionmap[priceformula",{"_index":1371,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["this.del('events_all",{"_index":1864,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.del(`event_${eventid",{"_index":1863,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.encryptionservice.generatedkeyuuid",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TicketsService.html":{}}}],["this.encryptionservice.generatedqrcode(securekey",{"_index":2249,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.encryptionservice.generatedsecurekey(user",{"_index":2248,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.encryptionservice.hashpassword(createuserdto.password",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.encryptionservice.hashpassword(newpassword",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.encryptionservice.verifypassword(user.password",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ensuretitleunique(createeventdto.title",{"_index":1485,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.ensuretitleunique(updateeventdto.title",{"_index":1505,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.errorresponse",{"_index":2322,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.errorresponse(res",{"_index":2331,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.eventpricerepository.create",{"_index":1295,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricerepository.find",{"_index":1303,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricerepository.findone",{"_index":1300,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricerepository.remove(price",{"_index":1313,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricerepository.save(price",{"_index":1299,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricerepository.save(updatedprices",{"_index":1312,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.eventpricesservice.createeventprices(event.eventid",{"_index":1487,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventpricesservice.deleteeventprices(id",{"_index":1511,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventpricesservice.getpricebyeventandtype",{"_index":719,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.eventpricesservice.getpricebyeventandtype(+id",{"_index":1430,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventpricesservice.updateeventprices(event.eventid",{"_index":1508,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.create",{"_index":1486,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.find",{"_index":1489,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.findandcount(queryoptions",{"_index":1496,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.findone",{"_index":1962,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["this.eventrepository.findoneby",{"_index":692,"title":{},"body":{"injectables/CartItemsService.html":{},"injectables/EventPricesService.html":{},"injectables/EventsService.html":{}}}],["this.eventrepository.remove(event",{"_index":1512,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.save(event",{"_index":1368,"title":{},"body":{"injectables/EventSalesService.html":{},"injectables/EventsService.html":{}}}],["this.eventsalesservice.processeventticketsandrevenue(itemsforevent",{"_index":2088,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.eventsservice.create(createeventdto",{"_index":1425,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findallfiltered(paginationfilterdto",{"_index":1426,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findallvalues",{"_index":1427,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findeventbyid(eventid",{"_index":1367,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["this.eventsservice.findone(+id",{"_index":1432,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.remove(+id",{"_index":1438,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.update(+id",{"_index":1435,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.finalizebooking(cartitems",{"_index":2076,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.findeventbyid(eventid",{"_index":1294,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["this.findone(id",{"_index":1503,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.findoneitemincart(userid",{"_index":717,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.generatedkeyuuid",{"_index":1199,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.generateticketsforreservation",{"_index":2243,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.get(key",{"_index":1855,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.getorcreatecartitem(cart.cartid",{"_index":703,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["this.getselectfieldsfindall",{"_index":2135,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{}}}],["this.getselectfieldsfindalladmin",{"_index":2139,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.gettokens(user",{"_index":2326,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.jwtservice.sign(payload",{"_index":2279,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":2285,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["this.logger.error",{"_index":1565,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.logger.error(`error",{"_index":1851,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.logger.error(`failed",{"_index":2423,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.logger.error(`token",{"_index":2345,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.logger.error(message",{"_index":2347,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.logger.log(`access",{"_index":2319,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.logger.log(`refresh",{"_index":1892,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{},"injectables/TokenService.html":{}}}],["this.logger.log(`tokens",{"_index":2328,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.logger.warn(`key",{"_index":1853,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.paymentservice.processpayment(carttotalprice",{"_index":2071,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.preventduplicatereservation(item",{"_index":2080,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.quantityperformula(priceformula",{"_index":1370,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["this.queryhelper.buildqueryoptions(paginationfilterdto",{"_index":1494,"title":{},"body":{"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["this.queryhelperservice.buildqueryoptions",{"_index":2417,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.queryhelperservice.buildqueryoptions(paginationfilterdto",{"_index":2131,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.redisclient.del(key",{"_index":1852,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisclient.get(key",{"_index":1850,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisclient.set(key",{"_index":1848,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisservice.clearcacheevent",{"_index":1488,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.redisservice.clearcacheevent(id",{"_index":1510,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.redisservice.del(`refresh_token_${userid",{"_index":1895,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["this.redisservice.fetchcacheddata",{"_index":1500,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.redisservice.get(`refresh_token_${userid",{"_index":1894,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["this.redisservice.set(`refresh_token_${userid",{"_index":1891,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["this.reflector.getallandoverride(role_key",{"_index":2154,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.refreshtokenstoreservice.removerefreshtokenredis(userid",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["this.refreshtokenstoreservice.storerefreshtokeninredis(user.userid",{"_index":2318,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.refreshtokenstoreservice.storerefreshtokeninredis(userid",{"_index":2327,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.refreshtokenstoreservice.verifyrefreshtokeninredis(userid",{"_index":2343,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.reservationdetailsrepository.create",{"_index":1964,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["this.reservationdetailsrepository.findone",{"_index":1967,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["this.reservationdetailsrepository.save(newreservationdetails",{"_index":1966,"title":{},"body":{"injectables/ReservationDetailsService.html":{}}}],["this.reservationprocessorservice.processuserreservation(userid",{"_index":2130,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.create",{"_index":2081,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.reservationrepository.find",{"_index":2137,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.findandcount(queryoptions",{"_index":2136,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.findone",{"_index":2091,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["this.reservationrepository.save(reservation",{"_index":2082,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{}}}],["this.reservationservice.findone(reservationid",{"_index":2244,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.reservationservice.savereservation(reservation",{"_index":2247,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.reservationsservice.findall(userid",{"_index":2000,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.findalladmin(paginationdto",{"_index":2003,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.findalldata(userid",{"_index":2005,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.findone(+id",{"_index":2006,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.generatereservation(userid",{"_index":1998,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.safeparse(data",{"_index":1858,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.set(key",{"_index":1856,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.ticketrepository.create",{"_index":2250,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketrepository.save(ticket",{"_index":2251,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketservice.generateticketsforapprovedreservations(reservations",{"_index":2089,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.tokenmanagementservice.createaccesstoken",{"_index":2336,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.tokenmanagementservice.createaccesstoken(payload",{"_index":2316,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.tokenmanagementservice.createrefreshtoken(payload",{"_index":2317,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.tokenmanagementservice.verifytoken(refreshtoken",{"_index":2342,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.tokenservice.generateaccesstokenfromrefreshtoken(req",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.tokenservice.gettokens(user",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tokenservice.refreshtoken(req",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.transactionrepository.create",{"_index":2407,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionrepository.findandcount(queryoptions",{"_index":2422,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionrepository.findone",{"_index":2415,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionrepository.save(transaction",{"_index":2411,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionservice.calculatecarttotal(cartitems",{"_index":2070,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.transactionservice.createtransaction",{"_index":2072,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["this.transactionservice.findtransactionbyreservationid",{"_index":2241,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.transactionsservice.findall(userid",{"_index":2376,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.updaterevenue(items[0].event.eventid",{"_index":1366,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["this.userrepository.update(user.userid",{"_index":2412,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.usersrepository.create",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.find",{"_index":2547,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findandcount(queryoptions",{"_index":2546,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":107,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.remove(user",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.save(newuser",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.save(user",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.usersservice.findall(paginationfilterdto",{"_index":2509,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findallvalues",{"_index":2510,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":2511,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.removeuseractive(+id",{"_index":2515,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":2512,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.verifyuseroneby(userid",{"_index":2068,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{}}}],["this.validate(payload",{"_index":67,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["this.validateandextractfromrefreshtoken(oldrefreshtoken",{"_index":2325,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.validateandextractfromrefreshtoken(refreshtokenfromcookie",{"_index":2334,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.verifycartoneby(cartid",{"_index":779,"title":{},"body":{"injectables/CartsService.html":{}}}],["this.verifyuseroneby(userid",{"_index":2548,"title":{},"body":{"injectables/UsersService.html":{}}}],["throllermodule",{"_index":196,"title":{"modules/ThrollerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ThrollerModule.html":{},"modules.html":{},"overview.html":{}}}],["throttler",{"_index":2189,"title":{},"body":{"modules/ThrollerModule.html":{},"index.html":{},"overview.html":{}}}],["throttler.forroot",{"_index":2193,"title":{},"body":{"modules/ThrollerModule.html":{}}}],["throttler.module.ts",{"_index":3346,"title":{},"body":{"index.html":{}}}],["throttlermodule",{"_index":2191,"title":{},"body":{"modules/ThrollerModule.html":{}}}],["throttling",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["through",{"_index":1784,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["throughout",{"_index":793,"title":{},"body":{"modules/CommonModule.html":{},"index.html":{}}}],["throw",{"_index":112,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/CookieService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/InvalidCredentialsException.html":{},"guards/IsCreatorGuard.html":{},"injectables/RedisService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["throwing",{"_index":3105,"title":{},"body":{"index.html":{}}}],["throws",{"_index":104,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/CookieService.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"injectables/RedisService.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["ticket",{"_index":247,"title":{"entities/Ticket.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"controllers/EventsController.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["ticket.entity.ts",{"_index":3179,"title":{},"body":{"index.html":{}}}],["ticket.purchasekey",{"_index":2199,"title":{},"body":{"entities/Ticket.html":{}}}],["ticket.qrcode",{"_index":2201,"title":{},"body":{"entities/Ticket.html":{}}}],["ticket.reservation",{"_index":1923,"title":{},"body":{"entities/Reservation.html":{},"entities/Ticket.html":{}}}],["ticket.reservation)@joincolumn({name",{"_index":1906,"title":{},"body":{"entities/Reservation.html":{}}}],["ticket.securekey",{"_index":2205,"title":{},"body":{"entities/Ticket.html":{}}}],["ticketid",{"_index":170,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TransactionsService.html":{}}}],["ticketing",{"_index":3161,"title":{},"body":{"index.html":{}}}],["ticketprice",{"_index":718,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["ticketrepository",{"_index":2227,"title":{},"body":{"injectables/TicketsService.html":{}}}],["tickets",{"_index":131,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"injectables/CartItemsService.html":{},"classes/CreateEventDto.html":{},"classes/CreateTableTickets1712717719010.html":{},"injectables/EventSalesService.html":{},"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"index.html":{}}}],["tickets.migration.spec.ts",{"_index":3276,"title":{},"body":{"index.html":{}}}],["tickets.module.ts",{"_index":3173,"title":{},"body":{"index.html":{}}}],["tickets.service",{"_index":2216,"title":{},"body":{"modules/TicketsModule.html":{}}}],["tickets.service.spec.ts",{"_index":3176,"title":{},"body":{"index.html":{}}}],["tickets.service.ts",{"_index":3171,"title":{},"body":{"index.html":{}}}],["ticketservice",{"_index":2026,"title":{},"body":{"injectables/ReservationsProcessorService.html":{}}}],["ticketsmodule",{"_index":197,"title":{"modules/TicketsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["ticketsservice",{"_index":2027,"title":{"injectables/TicketsService.html":{}},"body":{"injectables/ReservationsProcessorService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["ticketsservice.createnewticket(user",{"_index":2230,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketsservice.generateticketsforapprovedreservations(reservations",{"_index":2234,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketsservice.generateticketsforreservation(1",{"_index":2237,"title":{},"body":{"injectables/TicketsService.html":{}}}],["time",{"_index":1622,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/RedisService.html":{},"interfaces/TokenConfig.html":{}}}],["times",{"_index":3025,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":505,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"classes/HttpExceptionFilter.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["timestamps",{"_index":1042,"title":{},"body":{"classes/CreateTableCarts1712661221574.html":{},"index.html":{}}}],["title",{"_index":925,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["token",{"_index":93,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/CookieService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"index.html":{}}}],["token.dto.ts",{"_index":1867,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{},"index.html":{}}}],["token.dto.ts:19",{"_index":1869,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{},"index.html":{}}}],["token.interface.ts",{"_index":3024,"title":{},"body":{"index.html":{}}}],["token.service.spec.ts",{"_index":3343,"title":{},"body":{"index.html":{}}}],["token.service.ts",{"_index":3338,"title":{},"body":{"index.html":{}}}],["token.strategy",{"_index":2521,"title":{},"body":{"modules/UsersModule.html":{}}}],["token.strategy.spec.ts",{"_index":3369,"title":{},"body":{"index.html":{}}}],["token.strategy.ts",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"index.html":{}}}],["token.strategy.ts:17",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:44",{"_index":63,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["tokenconfig",{"_index":2252,"title":{"interfaces/TokenConfig.html":{}},"body":{"interfaces/TokenConfig.html":{},"coverage.html":{}}}],["tokenmanagementservice",{"_index":385,"title":{"injectables/TokenManagementService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["tokenmanagementservice.createaccesstoken",{"_index":2269,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["tokenmanagementservice.createrefreshtoken",{"_index":2272,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["tokenmanagementservice.verifytoken(token",{"_index":2276,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["tokens",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStoreService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["tokenservice",{"_index":341,"title":{"injectables/TokenService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["tokenservice.createpayload(user",{"_index":2295,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenservice.errorresponse(res",{"_index":2299,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenservice.generateaccesstokenfromrefreshtoken(req",{"_index":2303,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenservice.gettokens(user",{"_index":2306,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenservice.refreshtoken(req",{"_index":2308,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenservice.validateandextractfromrefreshtoken(refreshtoken",{"_index":2312,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenversion",{"_index":1124,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"entities/User.html":{}}}],["toolset",{"_index":2780,"title":{},"body":{"index.html":{}}}],["total",{"_index":724,"title":{},"body":{"injectables/CartItemsService.html":{},"classes/CreateReservationDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PaymentService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["totalamount",{"_index":1108,"title":{},"body":{"classes/CreateTableTransactions1712661230452.html":{},"injectables/ReservationsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{}}}],["totalnewrevenue",{"_index":1360,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["totalprice",{"_index":995,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["totalspent",{"_index":1126,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["trace",{"_index":2564,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"miscellaneous/variables.html":{}}}],["tracking",{"_index":3154,"title":{},"body":{"index.html":{}}}],["tracks",{"_index":3087,"title":{},"body":{"index.html":{}}}],["traffic",{"_index":3349,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":248,"title":{"entities/Transaction.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"entities/Reservation.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{}}}],["transaction.createdat",{"_index":2352,"title":{},"body":{"entities/Transaction.html":{}}}],["transaction.dto",{"_index":2449,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["transaction.dto.ts",{"_index":1130,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{},"coverage.html":{},"index.html":{}}}],["transaction.entity.ts",{"_index":3196,"title":{},"body":{"index.html":{}}}],["transaction.paymentid",{"_index":2354,"title":{},"body":{"entities/Transaction.html":{}}}],["transaction.reservation",{"_index":1922,"title":{},"body":{"entities/Reservation.html":{}}}],["transaction.reservation)@joincolumn({name",{"_index":1909,"title":{},"body":{"entities/Reservation.html":{}}}],["transaction.reservations",{"_index":2356,"title":{},"body":{"entities/Transaction.html":{}}}],["transaction.statuspayment",{"_index":2242,"title":{},"body":{"injectables/TicketsService.html":{},"entities/Transaction.html":{}}}],["transaction.totalamount",{"_index":2359,"title":{},"body":{"entities/Transaction.html":{}}}],["transaction.updatedat",{"_index":2362,"title":{},"body":{"entities/Transaction.html":{}}}],["transaction.user",{"_index":2365,"title":{},"body":{"entities/Transaction.html":{},"entities/User.html":{}}}],["transactional",{"_index":3198,"title":{},"body":{"index.html":{}}}],["transactionid",{"_index":167,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{}}}],["transactionrepository",{"_index":2390,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":168,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableTransactions1712661230452.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"index.html":{}}}],["transactions.controller",{"_index":2381,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions.controller.spec.ts",{"_index":3181,"title":{},"body":{"index.html":{}}}],["transactions.controller.ts",{"_index":3194,"title":{},"body":{"index.html":{}}}],["transactions.migration.spec.ts",{"_index":3277,"title":{},"body":{"index.html":{}}}],["transactions.module.ts",{"_index":3184,"title":{},"body":{"index.html":{}}}],["transactions.service",{"_index":2373,"title":{},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{}}}],["transactions.service.spec.ts",{"_index":3190,"title":{},"body":{"index.html":{}}}],["transactions.service.ts",{"_index":3186,"title":{},"body":{"index.html":{}}}],["transactions/1/find",{"_index":2371,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["transactionscontroller",{"_index":2368,"title":{"controllers/TransactionsController.html":{}},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"coverage.html":{},"index.html":{}}}],["transactionscount",{"_index":1125,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["transactionservice",{"_index":2028,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{}}}],["transactionsmodule",{"_index":198,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsservice",{"_index":2029,"title":{"injectables/TransactionsService.html":{}},"body":{"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactionsservice.calculatecarttotal(cartitems",{"_index":2394,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionsservice.createtransaction(user",{"_index":2397,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionsservice.findall(1",{"_index":2399,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionsservice.findtransactionbyreservationid(1",{"_index":2402,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionsservice.getselectfieldsfindall",{"_index":2404,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transfer",{"_index":886,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/IdDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["transformer",{"_index":1679,"title":{},"body":{"classes/PaginationAndFilterDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transforms",{"_index":3377,"title":{},"body":{"index.html":{}}}],["transport",{"_index":3041,"title":{},"body":{"index.html":{}}}],["transports",{"_index":3039,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["trigger",{"_index":3123,"title":{},"body":{"index.html":{}}}],["triggers",{"_index":3159,"title":{},"body":{"index.html":{}}}],["true",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"injectables/CookieService.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"entities/Ticket.html":{},"injectables/TokenManagementService.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":1495,"title":{},"body":{"injectables/EventsService.html":{},"injectables/RedisService.html":{},"injectables/ReservationsService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["ts",{"_index":3378,"title":{},"body":{"index.html":{}}}],["tsconfig.build.json",{"_index":2766,"title":{},"body":{"index.html":{}}}],["tsconfig.json",{"_index":2873,"title":{},"body":{"index.html":{}}}],["ttl",{"_index":1481,"title":{},"body":{"injectables/EventsService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"modules/ThrollerModule.html":{},"index.html":{}}}],["type",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"injectables/ConvertUtilsService.html":{},"injectables/CookieService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IdDto.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/KeyValuePairs.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"interfaces/Payload.html":{},"interfaces/PaymentResult.html":{},"injectables/PaymentService.html":{},"interfaces/ProcessPaymentResponse.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"interfaces/TokenConfig.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WinstonLoggerService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["type.d.ts",{"_index":2867,"title":{},"body":{"index.html":{}}}],["type.enum",{"_index":965,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["type.enum.ts",{"_index":2679,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["type_price_formule",{"_index":3506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type_price_formule_enum",{"_index":1025,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"miscellaneous/variables.html":{}}}],["typeentity",{"_index":1734,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["typename",{"_index":3495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeof",{"_index":1846,"title":{},"body":{"injectables/RedisService.html":{}}}],["typeorm",{"_index":82,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"entities/CartItem.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"injectables/ReservationDetailsService.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"entities/Ticket.html":{},"injectables/TicketsService.html":{},"entities/Transaction.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["typeormmodule",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["typeormmodule.forfeature([cart",{"_index":734,"title":{},"body":{"modules/CartsModule.html":{}}}],["typeormmodule.forfeature([cartitem",{"_index":633,"title":{},"body":{"modules/CartItemsModule.html":{}}}],["typeormmodule.forfeature([event",{"_index":1445,"title":{},"body":{"modules/EventsModule.html":{},"modules/ReservationDetailsModule.html":{}}}],["typeormmodule.forfeature([reservation",{"_index":2015,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["typeormmodule.forfeature([ticket",{"_index":2219,"title":{},"body":{"modules/TicketsModule.html":{}}}],["typeormmodule.forfeature([transaction",{"_index":2382,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":397,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/PaymentModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1139,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":2639,"title":{},"body":{"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":2759,"title":{},"body":{"index.html":{}}}],["typname",{"_index":3498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["un",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorized",{"_index":1610,"title":{},"body":{"guards/IsCreatorGuard.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":73,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["unauthorizedexception('cet",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('failed",{"_index":2346,"title":{},"body":{"injectables/TokenService.html":{}}}],["unauthorizedexception('invalid",{"_index":2344,"title":{},"body":{"injectables/TokenService.html":{}}}],["unauthorizedexception('token",{"_index":114,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["unauthorizedexception('user",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":1507,"title":{},"body":{"injectables/EventsService.html":{},"entities/User.html":{}}}],["under",{"_index":3061,"title":{},"body":{"index.html":{}}}],["undoing",{"_index":1018,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["unique",{"_index":498,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"entities/EventPrice.html":{},"injectables/EventsService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Ticket.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["uniqueness",{"_index":1462,"title":{},"body":{"injectables/EventsService.html":{},"index.html":{}}}],["unit",{"_index":666,"title":{},"body":{"injectables/CartItemsService.html":{},"index.html":{}}}],["unitprice",{"_index":663,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["unknown",{"_index":3525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":3467,"title":{},"body":{"properties.html":{}}}],["unnecessary",{"_index":2877,"title":{},"body":{"index.html":{}}}],["up",{"_index":137,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"injectables/ReservationsProcessorService.html":{},"classes/SignUpDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["up(queryrunner",{"_index":150,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["update",{"_index":573,"title":{},"body":{"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"guards/IsCreatorGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["update(@param('id",{"_index":1434,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":1411,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/UsersController.html":{}}}],["update(userid",{"_index":598,"title":{},"body":{"controllers/CartItemsController.html":{},"injectables/UsersService.html":{}}}],["updatecartitemdto",{"_index":599,"title":{"classes/UpdateCartItemDto.html":{}},"body":{"controllers/CartItemsController.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["updatecartitemdto.quantity",{"_index":617,"title":{},"body":{"controllers/CartItemsController.html":{}}}],["updatecontent(@param('id",{"_index":1590,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["updatecontentdto",{"_index":1591,"title":{},"body":{"guards/IsCreatorGuard.html":{}}}],["updated",{"_index":510,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"entities/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatedat",{"_index":495,"title":{},"body":{"entities/Cart.html":{},"entities/CartItem.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"entities/Reservation.html":{},"entities/ReservationDetails.html":{},"entities/Transaction.html":{}}}],["updatedevent",{"_index":1476,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateditem",{"_index":682,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["updatedprices",{"_index":1304,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["updateduser",{"_index":2537,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateeventdto",{"_index":1412,"title":{"classes/UpdateEventDto.html":{}},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{},"index.html":{}}}],["updateeventdto.baseprice",{"_index":1506,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventdto.title",{"_index":1504,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventprices",{"_index":1266,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["updateeventprices(eventid",{"_index":1285,"title":{},"body":{"injectables/EventPricesService.html":{}}}],["updatepassword",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["updatepassword(userid",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":321,"title":{"classes/UpdatePasswordDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdatePasswordDTO.html":{},"coverage.html":{}}}],["updatepassworddto.newpassword",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassworddto.oldpassword",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatequantityincart",{"_index":644,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["updatequantityincart(userid",{"_index":680,"title":{},"body":{"injectables/CartItemsService.html":{}}}],["updatereservationdetailsdto",{"_index":2439,"title":{"classes/UpdateReservationDetailsDto.html":{}},"body":{"classes/UpdateReservationDetailsDto.html":{},"coverage.html":{},"index.html":{}}}],["updatereservationdto",{"_index":2442,"title":{"classes/UpdateReservationDto.html":{}},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["updaterevenue",{"_index":1322,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["updaterevenue(eventid",{"_index":1345,"title":{},"body":{"injectables/EventSalesService.html":{}}}],["updates",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"classes/CreateTableCarts1712661221574.html":{},"injectables/EventPricesService.html":{},"injectables/EventSalesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["updates.example",{"_index":3434,"title":{},"body":{"index.html":{}}}],["updatetransactiondto",{"_index":2446,"title":{"classes/UpdateTransactionDto.html":{}},"body":{"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":2450,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":2049,"title":{},"body":{"injectables/ReservationsProcessorService.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateReservationDetailsDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["url",{"_index":1175,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["usage",{"_index":2736,"title":{},"body":{"index.html":{}}}],["use",{"_index":1156,"title":{},"body":{"modules/DatabaseModule.html":{},"guards/IsCreatorGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":147,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EventSalesService.html":{},"modules/TicketsModule.html":{},"interfaces/TokenConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":1141,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["useguards",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/CartItemsController.html":{},"controllers/EventsController.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch('change",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(accesstokenguard)@post('logout",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(iscreatorguard",{"_index":1589,"title":{},"body":{"guards/IsCreatorGuard.html":{},"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["useguards(iscreatorguard)@get(':id",{"_index":2493,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(iscreatorguard)@get(':id/find",{"_index":1979,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/TransactionsController.html":{}}}],["useguards(iscreatorguard)@patch(':id",{"_index":2504,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(iscreatorguard)@patch('make",{"_index":2497,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(roleguard",{"_index":2001,"title":{},"body":{"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["useguards(roleguard)@role(userrole.admin)@get('find",{"_index":1984,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["user",{"_index":56,"title":{"entities/User.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"modules/CommonModule.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/EncryptionService.html":{},"guards/IsCreatorGuard.html":{},"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDTO.html":{},"interfaces/Payload.html":{},"modules/PaymentModule.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"injectables/EncryptionService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"classes/UpdatePasswordDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.accountkey",{"_index":1200,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/User.html":{}}}],["user.cart",{"_index":525,"title":{},"body":{"entities/Cart.html":{},"entities/User.html":{}}}],["user.cart)@joincolumn({name",{"_index":513,"title":{},"body":{"entities/Cart.html":{}}}],["user.createdat",{"_index":2462,"title":{},"body":{"entities/User.html":{}}}],["user.dto.ts",{"_index":2452,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{},"index.html":{}}}],["user.dto.ts:36",{"_index":2456,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:56",{"_index":2457,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:71",{"_index":2454,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":2464,"title":{},"body":{"entities/User.html":{}}}],["user.entity.ts",{"_index":3082,"title":{},"body":{"index.html":{}}}],["user.firstname",{"_index":2466,"title":{},"body":{"entities/User.html":{}}}],["user.isactive",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["user.lastlogin",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["user.lastname",{"_index":2471,"title":{},"body":{"entities/User.html":{}}}],["user.password",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["user.reservations",{"_index":1920,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["user.reservations)@joincolumn({name",{"_index":1914,"title":{},"body":{"entities/Reservation.html":{}}}],["user.role",{"_index":2160,"title":{},"body":{"guards/RoleGuard.html":{},"injectables/TokenService.html":{},"entities/User.html":{}}}],["user.tokenversion",{"_index":110,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{},"entities/User.html":{}}}],["user.totalspent",{"_index":2414,"title":{},"body":{"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["user.transactions",{"_index":2367,"title":{},"body":{"entities/Transaction.html":{},"entities/User.html":{}}}],["user.transactions)@joincolumn({name",{"_index":2363,"title":{},"body":{"entities/Transaction.html":{}}}],["user.transactionscount",{"_index":2413,"title":{},"body":{"injectables/TransactionsService.html":{},"entities/User.html":{}}}],["user.userid",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"guards/IsCreatorGuard.html":{},"injectables/TokenService.html":{}}}],["user@example.com",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["user_role",{"_index":3507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_role_enum",{"_index":1117,"title":{},"body":{"classes/CreateTableUsers1711085051379.html":{},"miscellaneous/variables.html":{}}}],["usercart",{"_index":516,"title":{},"body":{"entities/Cart.html":{}}}],["userid",{"_index":108,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/AddForeignKeyConstraints1712751780000.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Cart.html":{},"controllers/CartItemsController.html":{},"injectables/CartItemsService.html":{},"injectables/CartsService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/RefreshTokenStoreService.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/ReservationsService.html":{},"injectables/TicketsService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"entities/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":1148,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["userrepository",{"_index":2388,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["userrole",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventsController.html":{},"interfaces/Payload.html":{},"controllers/ReservationsController.html":{},"guards/RoleGuard.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["userrole.admin",{"_index":1682,"title":{},"body":{"interfaces/Payload.html":{},"classes/SignUpDto.html":{}}}],["userrole.user",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Payload.html":{},"entities/User.html":{}}}],["users",{"_index":162,"title":{},"body":{"classes/AddForeignKeyConstraints1712751780000.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["users.controller",{"_index":2519,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.controller.spec.ts",{"_index":3067,"title":{},"body":{"index.html":{}}}],["users.controller.ts",{"_index":3074,"title":{},"body":{"index.html":{}}}],["users.migration.spec.ts",{"_index":3281,"title":{},"body":{"index.html":{}}}],["users.module.ts",{"_index":3068,"title":{},"body":{"index.html":{}}}],["users.service",{"_index":2506,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.service.spec.ts",{"_index":3072,"title":{},"body":{"index.html":{}}}],["users.service.ts",{"_index":3071,"title":{},"body":{"index.html":{}}}],["users/1",{"_index":2495,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/entities/user.entity",{"_index":796,"title":{},"body":{"modules/CommonModule.html":{}}}],["users/get",{"_index":2491,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/make",{"_index":2501,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/users.service",{"_index":794,"title":{},"body":{"modules/CommonModule.html":{}}}],["userscontroller",{"_index":2485,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{}}}],["usersmodule",{"_index":199,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":55,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":788,"title":{"injectables/UsersService.html":{}},"body":{"modules/CommonModule.html":{},"injectables/ReservationsProcessorService.html":{},"injectables/TicketsService.html":{},"injectables/TokenService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["usersservice.findall(paginationfilterdto",{"_index":2528,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.findallvalues",{"_index":2530,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.findone(1",{"_index":2532,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.removeuseractive(1",{"_index":2535,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.update(1",{"_index":2538,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.verifyuseroneby(1",{"_index":2541,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.verifyuseronerelation(1",{"_index":2544,"title":{},"body":{"injectables/UsersService.html":{}}}],["uses",{"_index":3156,"title":{},"body":{"index.html":{}}}],["using",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"modules/RedisModule.html":{},"injectables/TokenService.html":{},"injectables/WinstonLoggerService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["usually",{"_index":1625,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{}}}],["utilis",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["utilities",{"_index":3149,"title":{},"body":{"index.html":{}}}],["utility",{"_index":806,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"index.html":{}}}],["utilizes",{"_index":2791,"title":{},"body":{"index.html":{}}}],["utilizing",{"_index":2776,"title":{},"body":{"index.html":{}}}],["utils",{"_index":2868,"title":{},"body":{"index.html":{}}}],["utils.service",{"_index":799,"title":{},"body":{"modules/CommonModule.html":{},"injectables/CookieService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{}}}],["utils.service.spec.ts",{"_index":3298,"title":{},"body":{"index.html":{}}}],["utils.service.ts",{"_index":803,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"coverage.html":{},"index.html":{}}}],["utils.service.ts:18",{"_index":825,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["utils.service.ts:32",{"_index":811,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["utils/constants/constants.common",{"_index":1292,"title":{},"body":{"injectables/EventPricesService.html":{},"injectables/ReservationsService.html":{}}}],["utils/constants/constants.env",{"_index":862,"title":{},"body":{"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{}}}],["utils/constants/constants.migrationdb",{"_index":1029,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{}}}],["utils/services/convert",{"_index":798,"title":{},"body":{"modules/CommonModule.html":{},"injectables/CookieService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{}}}],["uuid",{"_index":1166,"title":{},"body":{"injectables/EncryptionService.html":{},"dependencies.html":{}}}],["uuids",{"_index":3305,"title":{},"body":{"index.html":{}}}],["uuidv4",{"_index":1196,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["v4",{"_index":1195,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["valid",{"_index":898,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"injectables/EncryptionService.html":{},"classes/LoginDTO.html":{},"injectables/RefreshTokenStoreService.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["validate",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/TokenService.html":{}}}],["validate(payload",{"_index":61,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validateandextractfromrefreshtoken",{"_index":2290,"title":{},"body":{"injectables/TokenService.html":{}}}],["validateandextractfromrefreshtoken(refreshtoken",{"_index":2309,"title":{},"body":{"injectables/TokenService.html":{}}}],["validated",{"_index":72,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/IdDto.html":{},"index.html":{}}}],["validates",{"_index":2311,"title":{},"body":{"injectables/TokenService.html":{},"index.html":{}}}],["validating",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/IdDto.html":{},"index.html":{}}}],["validation",{"_index":120,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TokenService.html":{},"index.html":{}}}],["validations",{"_index":3147,"title":{},"body":{"index.html":{}}}],["validator",{"_index":912,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"classes/CreateReservationDto.html":{},"classes/IdDto.html":{},"classes/LoginDTO.html":{},"classes/PaginationAndFilterDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{},"index.html":{}}}],["validity",{"_index":3341,"title":{},"body":{"index.html":{}}}],["validpassword",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["valuable",{"_index":2779,"title":{},"body":{"index.html":{}}}],["value",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateReservationDetailsDto.html":{},"injectables/EventSalesService.html":{},"injectables/EventsService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/KeyValuePairs.html":{},"classes/PaginationAndFilterDto.html":{},"injectables/PaymentService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenStoreService.html":{},"classes/SignUpDto.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value1",{"_index":1635,"title":{},"body":{"interfaces/KeyValuePairs.html":{}}}],["values",{"_index":1385,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenStoreService.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value}'`).join",{"_index":3500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":1065,"title":{},"body":{"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableUsers1711085051379.html":{},"entities/Event.html":{},"entities/Transaction.html":{},"entities/User.html":{}}}],["varchar(255",{"_index":1094,"title":{},"body":{"classes/CreateTableTickets1712717719010.html":{}}}],["variable",{"_index":2589,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":224,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/TokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":805,"title":{},"body":{"injectables/ConvertUtilsService.html":{},"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableCarts1712661221574.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["verbose",{"_index":2557,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["verbose(message",{"_index":2571,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["verification",{"_index":3208,"title":{},"body":{"index.html":{}}}],["verified",{"_index":768,"title":{},"body":{"injectables/CartsService.html":{},"injectables/UsersService.html":{}}}],["verifies",{"_index":765,"title":{},"body":{"injectables/CartsService.html":{},"injectables/EncryptionService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["verify",{"_index":1194,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RefreshTokenStoreService.html":{},"injectables/TokenManagementService.html":{},"index.html":{}}}],["verifycartoneby",{"_index":740,"title":{},"body":{"injectables/CartsService.html":{}}}],["verifycartoneby(cartid",{"_index":763,"title":{},"body":{"injectables/CartsService.html":{}}}],["verifycartrelation",{"_index":741,"title":{},"body":{"injectables/CartsService.html":{}}}],["verifycartrelation(cartid",{"_index":769,"title":{},"body":{"injectables/CartsService.html":{}}}],["verifying",{"_index":98,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"index.html":{}}}],["verifypassword",{"_index":1164,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["verifypassword(hash",{"_index":1189,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["verifyrefreshtokeninredis",{"_index":1875,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["verifyrefreshtokeninredis(userid",{"_index":1886,"title":{},"body":{"injectables/RefreshTokenStoreService.html":{}}}],["verifytoken",{"_index":2264,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["verifytoken(token",{"_index":2273,"title":{},"body":{"injectables/TokenManagementService.html":{}}}],["verifyuseroneby",{"_index":2524,"title":{},"body":{"injectables/UsersService.html":{}}}],["verifyuseroneby(userid",{"_index":2539,"title":{},"body":{"injectables/UsersService.html":{}}}],["verifyuseronerelation",{"_index":2525,"title":{},"body":{"injectables/UsersService.html":{}}}],["verifyuseronerelation(userid",{"_index":2542,"title":{},"body":{"injectables/UsersService.html":{}}}],["version",{"_index":1627,"title":{},"body":{"interfaces/JWTTokens.html":{},"interfaces/JwtPayload.html":{},"interfaces/Payload.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"index.html":{},"properties.html":{}}}],["veuillez",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["via",{"_index":1802,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["view",{"_index":2124,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["views",{"_index":3129,"title":{},"body":{"index.html":{}}}],["vital",{"_index":3225,"title":{},"body":{"index.html":{}}}],["void",{"_index":852,"title":{},"body":{"injectables/CookieService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/RedisService.html":{},"injectables/WinstonLoggerService.html":{}}}],["volleyball",{"_index":2709,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["volumes",{"_index":2883,"title":{},"body":{"index.html":{}}}],["warn",{"_index":2558,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["warn(message",{"_index":2574,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["warning",{"_index":2577,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["way",{"_index":2974,"title":{},"body":{"index.html":{}}}],["ways",{"_index":3398,"title":{},"body":{"index.html":{}}}],["weightlifting",{"_index":2710,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["welcome",{"_index":3396,"title":{},"body":{"index.html":{}}}],["wherecondition",{"_index":1757,"title":{},"body":{"injectables/QueryHelperService.html":{}}}],["whether",{"_index":1155,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"guards/IsCreatorGuard.html":{},"injectables/RefreshTokenStoreService.html":{},"guards/RoleGuard.html":{},"injectables/TokenManagementService.html":{},"entities/User.html":{}}}],["winston",{"_index":2554,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["winston.config",{"_index":2579,"title":{},"body":{"injectables/WinstonLoggerService.html":{},"index.html":{}}}],["winston.config.ts",{"_index":3038,"title":{},"body":{"index.html":{}}}],["winston.createlogger",{"_index":3487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.colorize",{"_index":3483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.combine",{"_index":3476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.combine(commonformat",{"_index":3492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.errors",{"_index":3480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.json",{"_index":3493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.printf",{"_index":3485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.splat",{"_index":3482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.timestamp",{"_index":3477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.logform.format",{"_index":3475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.service.ts",{"_index":3047,"title":{},"body":{"index.html":{}}}],["winston.transports.file",{"_index":3489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winstonloggerservice",{"_index":2551,"title":{"injectables/WinstonLoggerService.html":{}},"body":{"injectables/WinstonLoggerService.html":{},"coverage.html":{}}}],["winstonloggerservice.debug('this",{"_index":2562,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["winstonloggerservice.error('this",{"_index":2566,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["winstonloggerservice.log('this",{"_index":2570,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["winstonloggerservice.verbose('this",{"_index":2573,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["winstonloggerservice.warn('this",{"_index":2576,"title":{},"body":{"injectables/WinstonLoggerService.html":{}}}],["within",{"_index":1014,"title":{},"body":{"classes/CreateTableCartItems1712661230450.html":{},"classes/CreateTableEventPrices1712642603715.html":{},"classes/CreateTableEvents1712572717258.html":{},"classes/CreateTableReservationDetails1712751776641.html":{},"classes/CreateTableReservations1712661230451.html":{},"classes/CreateTableTickets1712717719010.html":{},"classes/CreateTableTransactions1712661230452.html":{},"classes/CreateTableUsers1711085051379.html":{},"index.html":{}}}],["work",{"_index":3424,"title":{},"body":{"index.html":{}}}],["workflow",{"_index":2763,"title":{},"body":{"index.html":{}}}],["world",{"_index":3373,"title":{},"body":{"index.html":{}}}],["written",{"_index":2834,"title":{},"body":{"index.html":{}}}],["x",{"_index":3430,"title":{},"body":{"index.html":{}}}],["x.y.z",{"_index":3380,"title":{},"body":{"index.html":{}}}],["year",{"_index":836,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["yes",{"_index":1460,"title":{},"body":{"injectables/EventsService.html":{},"injectables/QueryHelperService.html":{},"injectables/RedisService.html":{}}}],["yy",{"_index":3478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yyyy",{"_index":813,"title":{},"body":{"injectables/ConvertUtilsService.html":{}}}],["z",{"_index":2166,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["za",{"_index":2165,"title":{},"body":{"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{}}}],["zero",{"_index":1719,"title":{},"body":{"injectables/PaymentService.html":{}}}],["zoom",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartItemsModule.html":{},"modules/CartsModule.html":{},"modules/CommonModule.html":{},"modules/EventsModule.html":{},"modules/PaymentModule.html":{},"modules/RedisModule.html":{},"modules/ReservationDetailsModule.html":{},"modules/ReservationsModule.html":{},"modules/ThrollerModule.html":{},"modules/TicketsModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/guards/access-token.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard to protect routes using JWT access tokens.\nExample :\\@UseGuards(AccessTokenGuard)\n\\@Get('protected-route')\ngetProtectedData() {\n  // Protected route logic here\n}\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * Guard to protect routes using JWT access tokens.\n * @class\n * @extends {AuthGuard('jwt')}\n *\n * @example\n * \\@UseGuards(AccessTokenGuard)\n * \\@Get('protected-route')\n * getProtectedData() {\n *   // Protected route logic here\n * }\n */\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/strategies/access-token.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Strategy for validating access tokens.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/security/strategies/access-token.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the User entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to access application configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/strategies/access-token.strategy.ts:44\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload.\nExample :const user = await this.validate(payload);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT payload containing user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe validated user.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayload } from '@common/interfaces/jwt.interface';\nimport { User } from '@modules/users/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n/**\n * Strategy for validating access tokens.\n *\n * @class\n * @extends PassportStrategy\n */\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  /**\n   * @param {Repository} usersRepository - Repository for the User entity.\n   * @param {ConfigService} configService - Service to access application configuration.\n   */\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    configService: ConfigService\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Extract JWT from the Authorization header as a Bearer token\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET') ?? '', // Get the secret key for verifying the token from configuration\n      ignoreExpiration: false // Ensure the expiration is not ignored\n    });\n  }\n\n  /**\n   * Validate the JWT payload.\n   *\n   * @param {JwtPayload} payload - The JWT payload containing user information.\n   * @returns {Promise} - The validated user.\n   * @throws {UnauthorizedException} - If the user is not found or token is invalidated.\n   *\n   * @example\n   * const user = await this.validate(payload);\n   */\n  async validate(payload: JwtPayload): Promise {\n    const user = await this.usersRepository.findOne({ where: { userId: payload.sub } });\n    if (!user || user.tokenVersion !== payload.version) {\n      throw new UnauthorizedException('Token has been invalidated');\n    }\n\n    // Return the user object for request property attachment if validation passes\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddForeignKeyConstraints1712751780000.html":{"url":"classes/AddForeignKeyConstraints1712751780000.html","title":"class - AddForeignKeyConstraints1712751780000","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddForeignKeyConstraints1712751780000\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712751780000-AddForeignKey.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration to add foreign key constraints to the reservations and tickets tables.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712751780000-AddForeignKey.ts:43\n                        \n                    \n\n\n            \n                \n                        Reverts the migration, dropping the foreign key constraints added in the up method.\nExample :await queryRunner.down(queryRunner);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe QueryRunner instance used to run the migration queries.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712751780000-AddForeignKey.ts:18\n                        \n                    \n\n\n            \n                \n                        Runs the migration, adding foreign key constraints to the reservations and tickets tables.\nExample :await queryRunner.up(queryRunner);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe QueryRunner instance used to run the migration queries.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration to add foreign key constraints to the reservations and tickets tables.\n *\n * @class\n */\nexport class AddForeignKeyConstraints1712751780000 implements MigrationInterface {\n  /**\n   * Runs the migration, adding foreign key constraints to the reservations and tickets tables.\n   *\n   * @param {QueryRunner} queryRunner - The QueryRunner instance used to run the migration queries.\n   * @returns {Promise}\n   *\n   * @example\n   * await queryRunner.up(queryRunner);\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Add foreign keys to reservations\n    await queryRunner.query(`\n      ALTER TABLE \"reservations\"\n      ADD CONSTRAINT \"fk_reservations_users\" FOREIGN KEY (\"userId\") REFERENCES \"users\" (\"userId\") ON DELETE SET NULL,\n      ADD CONSTRAINT \"fk_reservations_transactions\" FOREIGN KEY (\"transactionId\") REFERENCES \"transactions\" (\"transactionId\") ON DELETE SET NULL, \n      ADD CONSTRAINT \"fk_reservations_tickets\" FOREIGN KEY (\"ticketId\") REFERENCES \"tickets\" (\"ticketId\") ON DELETE SET NULL;\n    `);\n\n    // Add foreign key to tickets\n    await queryRunner.query(`\n      ALTER TABLE \"tickets\"\n      ADD CONSTRAINT \"fk_tickets_reservations\" FOREIGN KEY (\"reservationId\") REFERENCES \"reservations\" (\"reservationId\") ON DELETE SET NULL;\n    `);\n  }\n\n  /**\n   * Reverts the migration, dropping the foreign key constraints added in the up method.\n   *\n   * @param {QueryRunner} queryRunner - The QueryRunner instance used to run the migration queries.\n   * @returns {Promise}\n   *\n   * @example\n   * await queryRunner.down(queryRunner);\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop foreign keys in reverse order of addition\n    await queryRunner.query(`\n      ALTER TABLE \"tickets\"\n      DROP CONSTRAINT \"fk_tickets_reservations\";\n    `);\n\n    await queryRunner.query(`\n      ALTER TABLE \"reservations\"\n      DROP CONSTRAINT \"fk_reservations_users\",\n      DROP CONSTRAINT \"fk_reservations_transactions\",\n      DROP CONSTRAINT \"fk_reservations_tickets\";\n    `);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCartItemsModule\n\nCartItemsModule\n\nAppModule -->\n\nCartItemsModule->AppModule\n\n\n\n\n\nCartsModule\n\nCartsModule\n\nAppModule -->\n\nCartsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nAppModule -->\n\nReservationsModule->AppModule\n\n\n\n\n\nThrollerModule\n\nThrollerModule\n\nAppModule -->\n\nThrollerModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nAppModule -->\n\nTransactionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The root module of the application.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CartItemsModule\n                        \n                        \n                            CartsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            ReservationsModule\n                        \n                        \n                            ThrollerModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            TransactionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from '@modules/users/users.module';\nimport { RedisModule } from '@database/redis/redis.module';\nimport { DatabaseModule } from '@database/database.module';\nimport { CartsModule } from '@modules/carts/carts.module';\nimport { ReservationsModule } from '@modules/reservations/reservations.module';\nimport { CartItemsModule } from '@modules/cart-items/cart-items.module';\nimport { PaymentModule } from '@libs/payment/payment.module';\nimport { EventsModule } from '@modules/events/events.module';\nimport { TicketsModule } from '@modules/tickets/tickets.module';\nimport { ThrollerModule } from '@security/throttler/throttler.module';\nimport { TransactionsModule } from '@modules/transactions/transactions.module';\nimport { AuthModule } from '@modules/auth/auth.module';\n\n/**\n * The root module of the application.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Global configuration module that loads environment variables.\n    ConfigModule.forRoot({\n      envFilePath: `./.${process.env.NODE_ENV || ''}.env`, // Load conditionally the environment variables based on the current environment\n      isGlobal: true // Make the configuration module global\n    }),\n    DatabaseModule, // Import DatabaseModule for database connections\n    RedisModule, // Import RedisModule for Redis connections\n    AuthModule, // Import AuthModule for authentication\n    UsersModule, // Import UsersModule for user management\n    EventsModule, // Import EventsModule for event management\n    CartsModule, // Import CartsModule for cart management\n    CartItemsModule, // Import CartItemsModule for cart items management\n    ReservationsModule, // Import ReservationsModule for reservation management\n    PaymentModule, // Import PaymentModule for payment processing\n    TicketsModule, // Import TicketsModule for ticket management\n    TransactionsModule, // Import TransactionsModule for transaction management\n    ThrollerModule // Import ThrollerModule for request throttling\n  ]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage authentication and user-related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getRefreshToken\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\nExample :POST /auth/signup\n{\n```html\n  \"password\": \"password123\",\n  \"firstName\": \"First\",\n  \"lastName\": \"Last\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing user registration data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard, IsCreatorGuard)@Delete('/delete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:170\n                        \n                    \n\n\n            \n                \n                        Deletes a user. Only accessible by the user.\nExample :DELETE /auth/delete/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRefreshToken(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('access-token')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Generates a new access token using a refresh token.\nExample :POST /auth/access-token\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP request object.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDTO, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Logs in a user.\nExample :POST /auth/login\n{\n```html\n  \"password\": \"password123\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing user login data.\n\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(userId: number, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:153\n                        \n                    \n\n\n            \n                \n                        Logs out a user. Only accessible by the user.\nExample :POST /auth/logout\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('refresh-token')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Refreshes the user's tokens.\nExample :POST /auth/refresh-token\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP request object.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(userId: number, updatePasswordDto: UpdatePasswordDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch('change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Updates a user's password. Only accessible by the user.\nExample :PATCH /auth/change-password\n{\n  \"oldPassword\": \"oldPassword123\",\n  \"newPassword\": \"newPassword123\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                updatePasswordDto\n                                            \n                                                            UpdatePasswordDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing old and new passwords.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UseGuards,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Res,\n  Req,\n  Delete,\n  Param\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UserId } from '@common/decorators/user-id.decorator';\nimport { TokenService } from '@security/token/token.service';\nimport { AccessTokenGuard, IsCreatorGuard } from '@security/guards';\nimport { LoginDTO } from './dto/login.dto';\nimport { UpdatePasswordDTO } from './dto/update-password.dto';\nimport { Request, Response } from 'express';\nimport { User } from '@modules/users/entities/user.entity';\nimport { SignUpDto } from './dto/signup.dto';\n\n/**\n * Controller to manage authentication and user-related operations.\n * @class\n */\n@Controller('auth')\nexport class AuthController {\n  /**\n   * Creates an instance of AuthController.\n   *\n   * @constructor\n   * @param {AuthService} authService - Service to manage authentication.\n   * @param {TokenService} tokenService - Service to manage tokens.\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly tokenService: TokenService\n  ) {}\n\n  /**\n   * Registers a new user.\n   *\n   * @param {CreateUserDto} createUserDto - DTO containing user registration data.\n   * @returns {Promise} - The created user.\n   *\n   * @example\n   * POST /auth/signup\n   * {\n   *   \"email\": \"user@example.com\",\n   *   \"password\": \"password123\",\n   *   \"firstName\": \"First\",\n   *   \"lastName\": \"Last\"\n   * }\n   */\n  @Post('signup')\n  create(@Body() createUserDto: SignUpDto): Promise {\n    return this.authService.signup(createUserDto);\n  }\n\n  /**\n   * Logs in a user.\n   *\n   * @param {LoginDTO} loginDto - DTO containing user login data.\n   * @param {Response} response - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * POST /auth/login\n   * {\n   *   \"email\": \"user@example.com\",\n   *   \"password\": \"password123\"\n   * }\n   */\n  @Post('login')\n  async login(@Body() loginDto: LoginDTO, @Res() response: Response): Promise {\n    const { email, password } = loginDto;\n    return await this.authService.login(email, password, response);\n  }\n\n  /**\n   * Updates a user's password. Only accessible by the user.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {UpdatePasswordDTO} updatePasswordDto - DTO containing old and new passwords.\n   * @returns {Promise}\n   *\n   * @example\n   * PATCH /auth/change-password\n   * {\n   *   \"oldPassword\": \"oldPassword123\",\n   *   \"newPassword\": \"newPassword123\"\n   * }\n   */\n  @UseGuards(AccessTokenGuard)\n  @Patch('change-password')\n  async updatePassword(\n    @UserId() userId: number,\n    @Body() updatePasswordDto: UpdatePasswordDTO\n  ): Promise {\n    return await this.authService.updatePassword(\n      userId,\n      updatePasswordDto.oldPassword,\n      updatePasswordDto.newPassword\n    );\n  }\n\n  /**\n   * Generates a new access token using a refresh token.\n   *\n   * @param {Request} req - HTTP request object.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * POST /auth/access-token\n   */\n  @HttpCode(HttpStatus.OK)\n  @Post('access-token')\n  async getRefreshToken(@Req() req: Request, @Res() res: Response): Promise {\n    await this.tokenService.generateAccessTokenFromRefreshToken(req, res);\n  }\n\n  /**\n   * Refreshes the user's tokens.\n   *\n   * @param {Request} req - HTTP request object.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * POST /auth/refresh-token\n   */\n  @HttpCode(HttpStatus.OK)\n  @Post('refresh-token')\n  async refreshToken(@Req() req: Request, @Res() res: Response): Promise {\n    return await this.tokenService.refreshToken(req, res);\n  }\n\n  /**\n   * Logs out a user. Only accessible by the user.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {Response} response - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * POST /auth/logout\n   */\n  @UseGuards(AccessTokenGuard)\n  @Post('logout')\n  async logout(@UserId() userId: number, @Res() response: Response): Promise {\n    await this.authService.logout(userId, response);\n    return { message: 'Logged out successfully' };\n  }\n\n  /**\n   * Deletes a user. Only accessible by the user.\n   *\n   * @param {string} id - ID of the user.\n   * @param {Response} response - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * DELETE /auth/delete/1\n   */\n  @UseGuards(AccessTokenGuard, IsCreatorGuard)\n  @Delete('/delete/:id')\n  delete(@Param('id') id: string, @Res() response: Response): Promise {\n    return this.authService.delete(+id, response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCartsModule\n\nCartsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCartsModule->AuthModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCookieService\n\nCookieService\n\nAuthModule -->\n\nCookieService->AuthModule\n\n\n\n\n\nRefreshTokenStoreService\n\nRefreshTokenStoreService\n\nAuthModule -->\n\nRefreshTokenStoreService->AuthModule\n\n\n\n\n\nTokenManagementService\n\nTokenManagementService\n\nAuthModule -->\n\nTokenManagementService->AuthModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage authentication.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CookieService\n                        \n                        \n                            RefreshTokenStoreService\n                        \n                        \n                            TokenManagementService\n                        \n                        \n                            TokenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartsModule\n                        \n                        \n                            CommonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthService } from './auth.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { TokenService } from '@security/token/token.service';\nimport { AuthController } from './auth.controller';\nimport { User } from '@modules/users/entities/user.entity';\nimport { TokenManagementService } from '@security/token/token-management.service';\nimport { CookieService } from '@security/cookie/cookie.service';\nimport { RefreshTokenStoreService } from '@security/token/refreshtoken-store.service';\nimport { CartsModule } from '@modules/carts/carts.module';\nimport { CommonModule } from '@modules/commom.module';\n\n/**\n * Module to manage authentication.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for User entity\n    TypeOrmModule.forFeature([User]),\n    CartsModule, // Import CartsModule\n    CommonModule // Import CommonModule\n  ],\n  controllers: [\n    // Register AuthController\n    AuthController\n  ],\n  providers: [\n    // Register AuthService, TokenService, CookieService, JwtService, TokenManagementService, and RefreshTokenStoreService as providers\n    AuthService,\n    TokenService,\n    CookieService,\n    JwtService,\n    TokenManagementService,\n    RefreshTokenStoreService\n  ]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage authentication and user-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, cartService: CartsService, encryptionService: EncryptionService, tokenService: TokenService, cookieService: CookieService, refreshTokenStoreService: RefreshTokenStoreService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the User entity.\n\n\n                                                        \n                                                \n                                                \n                                                        cartService\n                                                  \n                                                        \n                                                                        CartsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage carts.\n\n\n                                                        \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage encryption.\n\n\n                                                        \n                                                \n                                                \n                                                        tokenService\n                                                  \n                                                        \n                                                                        TokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage tokens.\n\n\n                                                        \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                        CookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage cookies.\n\n\n                                                        \n                                                \n                                                \n                                                        refreshTokenStoreService\n                                                  \n                                                        \n                                                                        RefreshTokenStoreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage refresh tokens.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(userId: number, res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Deletes a user.\nExample :await authService.delete(1, res);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Logs in a user.\nExample :```html\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email.\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(userId: number, res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:153\n                        \n                    \n\n\n            \n                \n                        Logs out a user.\nExample :await authService.logout(1, res);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(createUserDto: SignUpDto, role: UserRole)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\nExample :const user = await authService.signup(createUserDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nDTO containing user registration data.\n\n\n                                            \n                                        \n                                        \n                                                role\n                                            \n                                                            UserRole\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    UserRole.USER\n                                            \n\n                                            \n                                                    \nRole of the new user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(userId: number, oldPassword: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:126\n                        \n                    \n\n\n            \n                \n                        Updates a user's password.\nExample :await authService.updatePassword(1, 'oldPassword', 'newPassword');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                oldPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's current password.\n\n\n                                            \n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's new password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '@modules/users/entities/user.entity';\nimport { InvalidCredentialsException } from '@common/exceptions/invalid-credentials.exception';\nimport { TokenService } from '@security/token/token.service';\nimport { EncryptionService } from '@security/encryption/encryption.service';\nimport { UserRole } from '@common/enums/user-role.enum';\nimport { Response } from 'express';\nimport { CookieService } from '@security/cookie/cookie.service';\nimport { RefreshTokenStoreService } from '@security/token/refreshtoken-store.service';\nimport { CartsService } from '@modules/carts/carts.service';\nimport { SignUpDto } from './dto/signup.dto';\n\n/**\n * Service to manage authentication and user-related operations.\n * @class\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Creates an instance of AuthService.\n   *\n   * @constructor\n   * @param {Repository} usersRepository - Repository for the User entity.\n   * @param {CartsService} cartService - Service to manage carts.\n   * @param {EncryptionService} encryptionService - Service to manage encryption.\n   * @param {TokenService} tokenService - Service to manage tokens.\n   * @param {CookieService} cookieService - Service to manage cookies.\n   * @param {RefreshTokenStoreService} refreshTokenStoreService - Service to manage refresh tokens.\n   */\n  constructor(\n    @InjectRepository(User) private usersRepository: Repository,\n    private cartService: CartsService,\n    private encryptionService: EncryptionService,\n    private tokenService: TokenService,\n    private cookieService: CookieService,\n    private refreshTokenStoreService: RefreshTokenStoreService\n  ) {}\n\n  /**\n   * Registers a new user.\n   *\n   * @param {CreateUserDto} createUserDto - DTO containing user registration data.\n   * @param {UserRole} [role=UserRole.USER] - Role of the new user.\n   * @returns {Promise} - The created user.\n   *\n   * @throws {UnauthorizedException} If the email is already used.\n   *\n   * @example\n   * const user = await authService.signup(createUserDto);\n   */\n  async signup(createUserDto: SignUpDto, role: UserRole = UserRole.USER): Promise {\n    const normalizedEmail = createUserDto.email.toLowerCase();\n    const existingUser = await this.usersRepository.findOneBy({ email: normalizedEmail });\n    if (existingUser) {\n      throw new UnauthorizedException('Cet email est déjà utilisé. Veuillez en choisir un autre.');\n    }\n    const hashedPassword = await this.encryptionService.hashPassword(createUserDto.password);\n    const newUser = this.usersRepository.create({\n      ...createUserDto,\n      email: normalizedEmail,\n      password: hashedPassword,\n      role,\n      accountKey: await this.encryptionService.generatedKeyUuid(),\n      createdAt: new Date()\n    });\n    return this.usersRepository.save(newUser);\n  }\n\n  /**\n   * Logs in a user.\n   *\n   * @param {string} email - User's email.\n   * @param {string} password - User's password.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise}\n   *\n   * @throws {InvalidCredentialsException} If the email or password is invalid.\n   * @throws {UnauthorizedException} If the user is not active.\n   *\n   * @example\n   * await authService.login('user@example.com', 'password123', res);\n   */\n  async login(email: string, password: string, res: Response): Promise {\n    const normalizedEmail = email.toLowerCase();\n    const user = await this.usersRepository.findOneBy({ email: normalizedEmail });\n    if (!user) {\n      throw new InvalidCredentialsException();\n    }\n    if (!user.isActive) {\n      throw new UnauthorizedException('User is not active');\n    }\n    const validPassword = await this.encryptionService.verifyPassword(user.password, password);\n    if (!validPassword) {\n      throw new InvalidCredentialsException();\n    }\n    user.lastLogin = new Date();\n    await this.usersRepository.save(user);\n    await this.cartService.getOrCreateCart(user.userId);\n\n    const { accessToken, refreshToken } = await this.tokenService.getTokens(user);\n    this.cookieService.setRefreshTokenCookie(res, refreshToken);\n    res.json({ accessToken, userId: user.userId });\n  }\n\n  /**\n   * Updates a user's password.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} oldPassword - User's current password.\n   * @param {string} newPassword - User's new password.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the user is not found.\n   * @throws {HttpException} If the old password is incorrect.\n   *\n   * @example\n   * await authService.updatePassword(1, 'oldPassword', 'newPassword');\n   */\n  async updatePassword(userId: number, oldPassword: string, newPassword: string): Promise {\n    const user = await this.usersRepository.findOneBy({ userId });\n    if (!user) {\n      throw new NotFoundException();\n    }\n    const validPassword = await this.encryptionService.verifyPassword(user.password, oldPassword);\n    if (!validPassword) {\n      throw new HttpException('Invalid password', 400);\n    }\n\n    const hashedPassword = await this.encryptionService.hashPassword(newPassword);\n    user.password = hashedPassword;\n    await this.usersRepository.save(user);\n  }\n\n  /**\n   * Logs out a user.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * await authService.logout(1, res);\n   */\n  async logout(userId: number, res: Response): Promise {\n    const user = await this.usersRepository.findOneBy({ userId });\n    if (!user) {\n      throw new NotFoundException('User not connected');\n    }\n\n    user.tokenVersion += 1;\n    await this.refreshTokenStoreService.removeRefreshTokenRedis(userId);\n    await this.usersRepository.save(user);\n\n    this.cookieService.clearRefreshTokenCookie(res);\n    res.status(200).send('Logged out successfully');\n  }\n\n  /**\n   * Deletes a user.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise}\n   *\n   * @example\n   * await authService.delete(1, res);\n   */\n  async delete(userId: number, res: Response): Promise {\n    const user = await this.usersRepository.findOneBy({ userId });\n    await this.refreshTokenStoreService.removeRefreshTokenRedis(userId);\n    await this.usersRepository.remove(user);\n    this.cookieService.clearRefreshTokenCookie(res);\n    res.status(200).send('User deleted successfully');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Cart.html":{"url":"entities/Cart.html","title":"entity - Cart","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Cart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/carts/entities/cart.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a shopping cart.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                cartId\n                            \n                            \n                                    \n                                cartItem\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cartId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/carts/entities/cart.entity.ts:27\n                        \n                    \n\n            \n                \n                    Unique identifier for the cart.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cartItem\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.cart)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/carts/entities/cart.entity.ts:52\n                        \n                    \n\n            \n                \n                    Items in the cart.\nExample :const items = cart.cartItem;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/carts/entities/cart.entity.ts:64\n                        \n                    \n\n            \n                \n                    Timestamp when the cart was created.\nExample :const createdAt = cart.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/carts/entities/cart.entity.ts:76\n                        \n                    \n\n            \n                \n                    Timestamp when the cart was last updated.\nExample :const updatedAt = cart.updatedAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@OneToOne(undefined, user => user.cart)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/carts/entities/cart.entity.ts:41\n                        \n                    \n\n            \n                \n                    User associated with the cart.\nExample :const userCart = cart.user;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  OneToOne,\n  JoinColumn,\n  OneToMany,\n  Column,\n  Index\n} from 'typeorm';\n\n/**\n * Entity representing a shopping cart.\n *\n * @class\n * @entity\n */\n@Entity('cart')\nexport class Cart {\n  /**\n   * Unique identifier for the cart.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  cartId: number;\n\n  /**\n   * User associated with the cart.\n   * @type {User}\n   * @oneToOne\n   * @joinColumn\n   *\n   * @example\n   * const userCart = cart.user;\n   */\n  @Index()\n  @OneToOne(() => User, user => user.cart)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  /**\n   * Items in the cart.\n   * @type {CartItem[]}\n   * @oneToMany\n   *\n   * @example\n   * const items = cart.cartItem;\n   */\n  @OneToMany(() => CartItem, cartItem => cartItem.cart)\n  cartItem: CartItem[];\n\n  /**\n   * Timestamp when the cart was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = cart.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the cart was last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = cart.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CartItem.html":{"url":"entities/CartItem.html","title":"entity - CartItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cart-items/entities/cartitems.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing an item in a shopping cart.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                cart\n                            \n                            \n                                    \n                                cartItemId\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                event\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                priceFormula\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                reservations\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        cart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cart\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, cart => cart.cartId)@JoinColumn({name: 'cartId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:43\n                        \n                    \n\n            \n                \n                    Cart associated with the cart item.\nExample :const cart = cartItem.cart;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cartItemId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:29\n                        \n                    \n\n            \n                \n                    Unique identifier for the cart item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:112\n                        \n                    \n\n            \n                \n                    Timestamp when the cart item was created.\nExample :const createdAt = cartItem.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, event => event.cartItems)@JoinColumn({name: 'eventId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:56\n                        \n                    \n\n            \n                \n                    Event associated with the cart item.\nExample :const event = cartItem.event;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:89\n                        \n                    \n\n            \n                \n                    Price of the cart item.\nExample :const price = cartItem.price;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priceFormula\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceFormulaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:78\n                        \n                    \n\n            \n                \n                    Pricing formula for the cart item.\nExample :const priceFormula = cartItem.priceFormula;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:100\n                        \n                    \n\n            \n                \n                    Quantity of the cart item.\nExample :const quantity = cartItem.quantity;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.cartItem)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:67\n                        \n                    \n\n            \n                \n                    Reservations for the cart item.\nExample :const reservations = cartItem.reservations;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/entities/cartitems.entity.ts:124\n                        \n                    \n\n            \n                \n                    Timestamp when the cart item was last updated.\nExample :const updatedAt = cartItem.updatedAt;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n  Index\n} from 'typeorm';\nimport { Cart } from '@modules/carts/entities/cart.entity';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { PriceFormulaEnum } from '@common/enums/price-formula.enum';\n\n/**\n * Entity representing an item in a shopping cart.\n *\n * @class\n * @entity\n */\n@Entity('cart_items')\nexport class CartItem {\n  /**\n   * Unique identifier for the cart item.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn()\n  cartItemId: number;\n\n  /**\n   * Cart associated with the cart item.\n   * @type {Cart}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const cart = cartItem.cart;\n   */\n  @Index()\n  @ManyToOne(() => Cart, cart => cart.cartId)\n  @JoinColumn({ name: 'cartId' })\n  cart: Cart;\n\n  /**\n   * Event associated with the cart item.\n   * @type {Event}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const event = cartItem.event;\n   */\n  @ManyToOne(() => Event, event => event.cartItems)\n  @JoinColumn({ name: 'eventId' })\n  event: Event;\n\n  /**\n   * Reservations for the cart item.\n   * @type {Reservation[]}\n   * @oneToMany\n   *\n   * @example\n   * const reservations = cartItem.reservations;\n   */\n  @OneToMany(() => Reservation, reservation => reservation.cartItem)\n  reservations: Reservation[];\n\n  /**\n   * Pricing formula for the cart item.\n   * @type {PriceFormulaEnum}\n   * @column\n   *\n   * @example\n   * const priceFormula = cartItem.priceFormula;\n   */\n  @Column()\n  priceFormula: PriceFormulaEnum;\n\n  /**\n   * Price of the cart item.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const price = cartItem.price;\n   */\n  @Column('int')\n  price: number;\n\n  /**\n   * Quantity of the cart item.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const quantity = cartItem.quantity;\n   */\n  @Column('int')\n  quantity: number;\n\n  /**\n   * Timestamp when the cart item was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = cartItem.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the cart item was last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = cartItem.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CartItemsController.html":{"url":"controllers/CartItemsController.html","title":"controller - CartItemsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CartItemsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cart-items/cart-items.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                carts\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage cart items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: number, createCartItemDto: CreateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/items')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Adds an item to the cart.\nExample :POST /carts/items\n{\n  \"eventId\": 1,\n  \"priceFormula\": \"standard\",\n  \"quantity\": 2\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing cart item details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe added cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, cartId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':cartId/items')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Retrieves all items in a specific cart.\nExample :GET /carts/1/items\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe cart items.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(userId: number, cartId: string, cartItemId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':cartId/items/:cartItemId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific item in a cart.\nExample :GET /carts/1/items/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(userId: number, cartId: string, cartItemId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':cartId/items/:cartItemId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.controller.ts:123\n                        \n                    \n\n\n            \n                \n                        Removes a specific item from the cart.\nExample :DELETE /carts/1/items/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe removed cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(userId: number, cartId: string, cartItemId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':cartId/items/:cartItemId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Updates the quantity of a specific item in the cart.\nExample :PATCH /carts/1/items/1\n{\n  \"quantity\": 3\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing updated quantity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe updated cart item.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { UserId } from '@common/decorators/user-id.decorator';\nimport { CreateCartItemDto } from './dto/create-cart-item.dto';\nimport { UpdateCartItemDto } from './dto/update-cart-item.dto';\nimport { AccessTokenGuard } from '@security/guards';\nimport { CartItemsService } from './cart-items.service';\nimport { CartItem } from './entities/cartitems.entity';\n\n/**\n * Controller to manage cart items.\n * @class\n */\n@UseGuards(AccessTokenGuard)\n@Controller('carts')\nexport class CartItemsController {\n  /**\n   * Creates an instance of CartItemsController.\n   *\n   * @param {CartItemsService} cartItemsService - Service to manage cart items.\n   */\n  constructor(private readonly cartItemsService: CartItemsService) {}\n\n  /**\n   * Adds an item to the cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {CreateCartItemDto} createCartItemDto - DTO containing cart item details.\n   * @returns {Promise} - The added cart item.\n   *\n   * @example\n   * POST /carts/items\n   * {\n   *   \"eventId\": 1,\n   *   \"priceFormula\": \"standard\",\n   *   \"quantity\": 2\n   * }\n   */\n  @Post('/items')\n  create(\n    @UserId() userId: number,\n    @Body() createCartItemDto: CreateCartItemDto\n  ): Promise {\n    return this.cartItemsService.addItemToCart(userId, createCartItemDto);\n  }\n\n  /**\n   * Retrieves all items in a specific cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} cartId - ID of the cart.\n   * @returns {Promise} - The cart items.\n   *\n   * @example\n   * GET /carts/1/items\n   */\n  @Get(':cartId/items')\n  findAll(@UserId() userId: number, @Param('cartId') cartId: string): Promise {\n    return this.cartItemsService.findAllItemsInCart(userId, +cartId);\n  }\n\n  /**\n   * Retrieves a specific item in a cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} cartId - ID of the cart.\n   * @param {string} cartItemId - ID of the cart item.\n   * @returns {Promise} - The cart item.\n   *\n   * @example\n   * GET /carts/1/items/1\n   */\n  @Get(':cartId/items/:cartItemId')\n  findOne(\n    @UserId() userId: number,\n    @Param('cartId') cartId: string,\n    @Param('cartItemId') cartItemId: string\n  ): Promise {\n    return this.cartItemsService.findOneItemInCart(userId, +cartId, +cartItemId);\n  }\n\n  /**\n   * Updates the quantity of a specific item in the cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} cartId - ID of the cart.\n   * @param {string} cartItemId - ID of the cart item.\n   * @param {UpdateCartItemDto} updateCartItemDto - DTO containing updated quantity.\n   * @returns {Promise} - The updated cart item.\n   *\n   * @example\n   * PATCH /carts/1/items/1\n   * {\n   *   \"quantity\": 3\n   * }\n   */\n  @Patch(':cartId/items/:cartItemId')\n  update(\n    @UserId() userId: number,\n    @Param('cartId') cartId: string,\n    @Param('cartItemId') cartItemId: string,\n    @Body() updateCartItemDto: UpdateCartItemDto\n  ): Promise {\n    return this.cartItemsService.updateQuantityInCart(\n      userId,\n      +cartId,\n      +cartItemId,\n      updateCartItemDto.quantity\n    );\n  }\n\n  /**\n   * Removes a specific item from the cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} cartId - ID of the cart.\n   * @param {string} cartItemId - ID of the cart item.\n   * @returns {Promise} - The removed cart item.\n   *\n   * @example\n   * DELETE /carts/1/items/1\n   */\n  @Delete(':cartId/items/:cartItemId')\n  remove(\n    @UserId() userId: number,\n    @Param('cartId') cartId: string,\n    @Param('cartItemId') cartItemId: string\n  ): Promise {\n    return this.cartItemsService.removeOneItemFromCart(userId, +cartId, +cartItemId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CartItemsModule.html":{"url":"modules/CartItemsModule.html","title":"module - CartItemsModule","body":"\n                   \n\n\n\n\n    Modules\n    CartItemsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CartItemsModule\n\n\n\ncluster_CartItemsModule_exports\n\n\n\ncluster_CartItemsModule_imports\n\n\n\ncluster_CartItemsModule_providers\n\n\n\n\nCartsModule\n\nCartsModule\n\n\n\nCartItemsModule\n\nCartItemsModule\n\nCartItemsModule -->\n\nCartsModule->CartItemsModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nCartItemsModule -->\n\nEventsModule->CartItemsModule\n\n\n\n\n\nCartItemsService \n\nCartItemsService \n\nCartItemsService  -->\n\nCartItemsModule->CartItemsService \n\n\n\n\n\nCartItemsService\n\nCartItemsService\n\nCartItemsModule -->\n\nCartItemsService->CartItemsModule\n\n\n\n\n\nReservationDetailsService\n\nReservationDetailsService\n\nCartItemsModule -->\n\nReservationDetailsService->CartItemsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/cart-items/cart-items.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage cart items.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CartItemsService\n                        \n                        \n                            ReservationDetailsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CartItemsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartsModule\n                        \n                        \n                            EventsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CartItemsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CartItem } from './entities/cartitems.entity';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { CartItemsController } from './cart-items.controller';\nimport { CartItemsService } from './cart-items.service';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\nimport { ReservationDetailsService } from '@modules/reservation-details/reservation-details.service';\nimport { EventsModule } from '@modules/events/events.module';\nimport { ReservationsModule } from '@modules/reservations/reservations.module';\nimport { CartsModule } from '@modules/carts/carts.module';\n\n/**\n * Module to manage cart items.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for CartItem, Event, and ReservationDetails entities\n    TypeOrmModule.forFeature([CartItem, Event, ReservationDetails]),\n    EventsModule, // Import EventsModule\n    CartsModule, // Import CartsModule\n    forwardRef(() => ReservationsModule) // Import ReservationsModule with forward reference\n  ],\n  controllers: [CartItemsController], // Register CartItemsController\n  providers: [CartItemsService, ReservationDetailsService], // Register CartItemsService and ReservationDetailsService as providers\n  exports: [CartItemsService] // Export CartItemsService\n})\nexport class CartItemsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CartItemsService.html":{"url":"injectables/CartItemsService.html","title":"injectable - CartItemsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CartItemsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cart-items/cart-items.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage cart items.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addItemToCart\n                            \n                            \n                                    Async\n                                findAllItemsInCart\n                            \n                            \n                                    Async\n                                findOneItemInCart\n                            \n                            \n                                    Private\n                                    Async\n                                getOrCreateCartItem\n                            \n                            \n                                    Async\n                                removeAllItemFromCart\n                            \n                            \n                                    Async\n                                removeOneItemFromCart\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                updateQuantityInCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartItemRepository: Repository, eventRepository: Repository, cartsService: CartsService, eventPricesService: EventPricesService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/cart-items/cart-items.service.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of CartItemsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the CartItem entity.\n\n\n                                                        \n                                                \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Event entity.\n\n\n                                                        \n                                                \n                                                \n                                                        cartsService\n                                                  \n                                                        \n                                                                        CartsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage shopping carts.\n\n\n                                                        \n                                                \n                                                \n                                                        eventPricesService\n                                                  \n                                                        \n                                                                        EventPricesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage event prices.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addItemToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addItemToCart(userId: number, createCartItemDto: CreateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Adds an item to the cart.\nExample :const cartItem = await cartItemsService.addItemToCart(1, createCartItemDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing cart item details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe added cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllItemsInCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllItemsInCart(userId: number, cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Finds all items in a cart.\nExample :const cartItems = await cartItemsService.findAllItemsInCart(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe found cart items.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneItemInCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneItemInCart(userId: number, cartId: number, cartItemId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Finds a cart item by its ID.\nExample :const cartItem = await cartItemsService.findOneItemInCart(1, 1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe found cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getOrCreateCartItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrCreateCartItem(cartId: number, createCartItemDto: CreateCartItemDto, unitPrice: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Gets or creates a cart item.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing cart item details.\n\n\n                                            \n                                        \n                                        \n                                                unitPrice\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUnit price of the item.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe found or created cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeAllItemFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeAllItemFromCart(userId: number, cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:222\n                        \n                    \n\n\n            \n                \n                        Removes all items from a cart.\nExample :await cartItemsService.removeAllItemFromCart(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeOneItemFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOneItemFromCart(userId: number, cartId: number, cartItemId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Removes an item from the cart.\nExample :const removedItem = await cartItemsService.removeOneItemFromCart(1, 1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe removed cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(item: CartItem)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:240\n                        \n                    \n\n\n            \n                \n                        Saves a cart item to the repository.\nExample :const savedItem = await cartItemsService.save(cartItem);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart item to save.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe saved cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateQuantityInCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateQuantityInCart(userId: number, cartId: number, cartItemId: number, quantity: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/cart-items/cart-items.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Updates the quantity of a cart item.\nExample :const updatedItem = await cartItemsService.updateQuantityInCart(1, 1, 1, 5);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                cartItemId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart item.\n\n\n                                            \n                                        \n                                        \n                                                quantity\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new quantity to set.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe updated cart item.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CartItem } from './entities/cartitems.entity';\nimport { CreateCartItemDto } from './dto/create-cart-item.dto';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { CartsService } from '@modules/carts/carts.service';\nimport { EventPricesService } from '@modules/events/event-prices.service';\n\n/**\n * Service to manage cart items.\n * @class\n */\n@Injectable()\nexport class CartItemsService {\n  /**\n   * Creates an instance of CartItemsService.\n   *\n   * @param {Repository} cartItemRepository - Repository for the CartItem entity.\n   * @param {Repository} eventRepository - Repository for the Event entity.\n   * @param {CartsService} cartsService - Service to manage shopping carts.\n   * @param {EventPricesService} eventPricesService - Service to manage event prices.\n   */\n  constructor(\n    @InjectRepository(CartItem) private readonly cartItemRepository: Repository,\n    @InjectRepository(Event) private readonly eventRepository: Repository,\n    private readonly cartsService: CartsService,\n    private readonly eventPricesService: EventPricesService\n  ) {}\n\n  /**\n   * Adds an item to the cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {CreateCartItemDto} createCartItemDto - DTO containing cart item details.\n   * @returns {Promise} - The added cart item.\n   *\n   * @throws {NotFoundException} If the event is not found or not enough tickets are available.\n   *\n   * @example\n   * const cartItem = await cartItemsService.addItemToCart(1, createCartItemDto);\n   */\n  async addItemToCart(userId: number, createCartItemDto: CreateCartItemDto): Promise {\n    const cart = await this.cartsService.getOrCreateCart(userId);\n    const event = await this.eventRepository.findOneBy({ eventId: createCartItemDto.eventId });\n    if (!event) throw new NotFoundException('Event not found');\n\n    if (createCartItemDto.quantity > event.quantityAvailable) {\n      throw new NotFoundException('Not enough tickets available');\n    }\n\n    const priceDetail = event.prices.find(p => p.priceFormula === createCartItemDto.priceFormula);\n    if (!priceDetail) {\n      throw new NotFoundException('Price formula not found for event');\n    }\n    return this.getOrCreateCartItem(cart.cartId, createCartItemDto, priceDetail.price);\n  }\n\n  /**\n   * Gets or creates a cart item.\n   *\n   * @param {number} cartId - ID of the cart.\n   * @param {CreateCartItemDto} createCartItemDto - DTO containing cart item details.\n   * @param {number} unitPrice - Unit price of the item.\n   * @returns {Promise} - The found or created cart item.\n   *\n   * @private\n   */\n  private async getOrCreateCartItem(\n    cartId: number,\n    createCartItemDto: CreateCartItemDto,\n    unitPrice: number\n  ): Promise {\n    const existingCartItem = await this.cartItemRepository.findOne({\n      where: {\n        cart: { cartId },\n        event: { eventId: createCartItemDto.eventId },\n        priceFormula: createCartItemDto.priceFormula\n      },\n      relations: ['cart', 'event']\n    });\n\n    if (existingCartItem) {\n      existingCartItem.quantity += createCartItemDto.quantity;\n      existingCartItem.price = unitPrice;\n      return await this.cartItemRepository.save(existingCartItem);\n    } else {\n      const cartItem = this.cartItemRepository.create({\n        ...createCartItemDto,\n        price: unitPrice,\n        cart: { cartId },\n        event: { eventId: createCartItemDto.eventId }\n      });\n      return await this.cartItemRepository.save(cartItem);\n    }\n  }\n\n  /**\n   * Finds a cart item by its ID.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @param {number} cartItemId - ID of the cart item.\n   * @returns {Promise} - The found cart item.\n   *\n   * @throws {NotFoundException} If the cart item is not found.\n   *\n   * @example\n   * const cartItem = await cartItemsService.findOneItemInCart(1, 1, 1);\n   */\n  async findOneItemInCart(userId: number, cartId: number, cartItemId: number): Promise {\n    await this.cartsService.findCart(userId, cartId);\n    const cartItem = await this.cartItemRepository.findOne({\n      where: {\n        cartItemId,\n        cart: { cartId }\n      },\n      relations: ['event', 'cart']\n    });\n    if (!cartItem) {\n      throw new NotFoundException(\n        `CartItem with ID ${cartItemId} not found in the specified cart.`\n      );\n    }\n    return cartItem;\n  }\n\n  /**\n   * Finds all items in a cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @returns {Promise} - The found cart items.\n   *\n   * @throws {NotFoundException} If no cart items are found.\n   *\n   * @example\n   * const cartItems = await cartItemsService.findAllItemsInCart(1, 1);\n   */\n  async findAllItemsInCart(userId: number, cartId: number): Promise {\n    await this.cartsService.findCart(userId, cartId);\n    const cartItems = await this.cartItemRepository.find({\n      where: { cart: { cartId } },\n      relations: ['event', 'cart']\n    });\n    if (!cartItems) {\n      throw new NotFoundException('Cart items not found');\n    }\n    return cartItems;\n  }\n\n  /**\n   * Updates the quantity of a cart item.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @param {number} cartItemId - ID of the cart item.\n   * @param {number} quantity - The new quantity to set.\n   * @returns {Promise} - The updated cart item.\n   *\n   * @throws {NotFoundException} If the cart item is not found or the quantity is not available.\n   *\n   * @example\n   * const updatedItem = await cartItemsService.updateQuantityInCart(1, 1, 1, 5);\n   */\n  async updateQuantityInCart(\n    userId: number,\n    cartId: number,\n    cartItemId: number,\n    quantity: number\n  ): Promise {\n    const cartItem = await this.findOneItemInCart(userId, cartId, cartItemId);\n    if (!cartItem) throw new NotFoundException('Cart item not found');\n\n    const ticketPrice = await this.eventPricesService.getPriceByEventAndType(\n      cartItem.event.eventId,\n      cartItem.priceFormula\n    );\n\n    if (quantity > cartItem.event.quantityAvailable) {\n      throw new NotFoundException('Quantity not available');\n    }\n    cartItem.quantity = quantity;\n    cartItem.price = ticketPrice; // Recalculate the total price\n\n    return await this.cartItemRepository.save(cartItem);\n  }\n\n  /**\n   * Removes an item from the cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @param {number} cartItemId - ID of the cart item.\n   * @returns {Promise} - The removed cart item.\n   *\n   * @throws {NotFoundException} If the cart item is not found.\n   *\n   * @example\n   * const removedItem = await cartItemsService.removeOneItemFromCart(1, 1, 1);\n   */\n  async removeOneItemFromCart(\n    userId: number,\n    cartId: number,\n    cartItemId: number\n  ): Promise {\n    const cartItem = await this.findOneItemInCart(userId, cartId, cartItemId);\n    await this.cartItemRepository.remove(cartItem);\n    return cartItem;\n  }\n\n  /**\n   * Removes all items from a cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @returns {Promise}\n   *\n   * @example\n   * await cartItemsService.removeAllItemFromCart(1, 1);\n   */\n  async removeAllItemFromCart(userId: number, cartId: number): Promise {\n    await this.cartsService.findCart(userId, cartId);\n    const cartItems = await this.cartItemRepository.find({\n      where: { cart: { cartId } },\n      relations: ['reservations']\n    });\n    await this.cartItemRepository.remove(cartItems);\n  }\n\n  /**\n   * Saves a cart item to the repository.\n   *\n   * @param {CartItem} item - The cart item to save.\n   * @returns {Promise} - The saved cart item.\n   *\n   * @example\n   * const savedItem = await cartItemsService.save(cartItem);\n   */\n  async save(item: CartItem): Promise {\n    return await this.cartItemRepository.save(item);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CartsModule.html":{"url":"modules/CartsModule.html","title":"module - CartsModule","body":"\n                   \n\n\n\n\n    Modules\n    CartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CartsModule\n\n\n\ncluster_CartsModule_providers\n\n\n\ncluster_CartsModule_exports\n\n\n\n\nCartsService \n\nCartsService \n\n\n\nCartsModule\n\nCartsModule\n\nCartsService  -->\n\nCartsModule->CartsService \n\n\n\n\n\nCartsService\n\nCartsService\n\nCartsModule -->\n\nCartsService->CartsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/carts/carts.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage carts.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CartsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CartsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Cart } from './entities/cart.entity';\nimport { CartsService } from './carts.service';\n\n/**\n * Module to manage carts.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for Cart entity\n    TypeOrmModule.forFeature([Cart])\n  ],\n  providers: [\n    // Register CartsService as a provider\n    CartsService\n  ],\n  exports: [\n    // Export CartsService\n    CartsService\n  ]\n})\nexport class CartsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CartsService.html":{"url":"injectables/CartsService.html","title":"injectable - CartsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CartsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/carts/carts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage carts.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteCart\n                            \n                            \n                                    Async\n                                findCart\n                            \n                            \n                                    Async\n                                getOrCreateCart\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                verifyCartOneBy\n                            \n                            \n                                    Async\n                                verifyCartRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/carts/carts.service.ts:11\n                            \n                        \n\n                \n                    \n                            Creates an instance of CartsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        cartRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Cart entity.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCart(cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Deletes a cart by its ID.\nExample :await cartsService.deleteCart(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCart(userId: number, cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Finds a cart by user ID and cart ID.\nExample :const cart = await cartsService.findCart(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found cart.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOrCreateCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrCreateCart(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Gets an existing cart or creates a new one if it doesn't exist.\nExample :const cart = await cartsService.getOrCreateCart(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found or newly created cart.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(cart: Cart)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:112\n                        \n                    \n\n\n            \n                \n                        Saves a cart to the repository.\nExample :const savedCart = await cartsService.save(cart);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cart\n                                            \n                                                            Cart\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart to save.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe saved cart.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyCartOneBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyCartOneBy(cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Verifies a cart exists by its ID.\nExample :const cart = await cartsService.verifyCartOneBy(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe verified cart.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyCartRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyCartRelation(cartId: number, relations: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/carts/carts.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Verifies a cart exists by its ID and loads specified relations.\nExample :const cart = await cartsService.verifyCartRelation(1, 'cartItems');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                relations\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRelations to load.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe verified cart with relations loaded.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Cart } from './entities/cart.entity';\nimport { Repository } from 'typeorm';\n\n/**\n * Service to manage carts.\n * @class\n */\n@Injectable()\nexport class CartsService {\n  /**\n   * Creates an instance of CartsService.\n   *\n   * @constructor\n   * @param {Repository} cartRepository - Repository for the Cart entity.\n   */\n  constructor(@InjectRepository(Cart) private readonly cartRepository: Repository) {}\n\n  /**\n   * Finds a cart by user ID and cart ID.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the cart.\n   * @returns {Promise} - The found cart.\n   *\n   * @throws {NotFoundException} If the cart is not found.\n   *\n   * @example\n   * const cart = await cartsService.findCart(1, 1);\n   */\n  async findCart(userId: number, cartId: number): Promise {\n    const cart = await this.cartRepository.findOne({\n      where: { cartId, user: { userId } }\n    });\n    if (!cart) throw new NotFoundException('Cart not found');\n    return cart;\n  }\n\n  /**\n   * Gets an existing cart or creates a new one if it doesn't exist.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - The found or newly created cart.\n   *\n   * @example\n   * const cart = await cartsService.getOrCreateCart(1);\n   */\n  async getOrCreateCart(userId: number): Promise {\n    let cart = await this.cartRepository.findOne({\n      where: { user: { userId } },\n      relations: ['cartItem']\n    });\n    if (!cart) {\n      cart = this.cartRepository.create({ user: { userId } });\n      await this.cartRepository.save(cart);\n    }\n    return cart;\n  }\n\n  /**\n   * Verifies a cart exists by its ID.\n   *\n   * @param {number} cartId - ID of the cart.\n   * @returns {Promise} - The verified cart.\n   *\n   * @throws {NotFoundException} If the cart is not found.\n   *\n   * @example\n   * const cart = await cartsService.verifyCartOneBy(1);\n   */\n  async verifyCartOneBy(cartId: number): Promise {\n    const cart = await this.cartRepository.findOneBy({ cartId });\n    if (!cart) {\n      throw new NotFoundException(`Cart with ID ${cartId} not found.`);\n    }\n    return cart;\n  }\n\n  /**\n   * Verifies a cart exists by its ID and loads specified relations.\n   *\n   * @param {number} cartId - ID of the cart.\n   * @param {string} relations - Relations to load.\n   * @returns {Promise} - The verified cart with relations loaded.\n   *\n   * @throws {NotFoundException} If the cart is not found.\n   *\n   * @example\n   * const cart = await cartsService.verifyCartRelation(1, 'cartItems');\n   */\n  async verifyCartRelation(cartId: number, relations: string): Promise {\n    const cart = await this.cartRepository.findOne({\n      where: { cartId },\n      relations: [relations]\n    });\n    if (!cart) {\n      throw new NotFoundException(`Cart with ID ${cartId} not found.`);\n    }\n    return cart;\n  }\n\n  /**\n   * Saves a cart to the repository.\n   *\n   * @param {Cart} cart - The cart to save.\n   * @returns {Promise} - The saved cart.\n   *\n   * @example\n   * const savedCart = await cartsService.save(cart);\n   */\n  async save(cart: Cart): Promise {\n    return await this.cartRepository.save(cart);\n  }\n\n  /**\n   * Deletes a cart by its ID.\n   *\n   * @param {number} cartId - ID of the cart to delete.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the cart is not found.\n   *\n   * @example\n   * await cartsService.deleteCart(1);\n   */\n  async deleteCart(cartId: number): Promise {\n    const cart = await this.verifyCartOneBy(cartId);\n    await this.cartRepository.remove(cart);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_imports\n\n\n\ncluster_CommonModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nCommonModule\n\nCommonModule\n\nCommonModule -->\n\nRedisModule->CommonModule\n\n\n\n\n\nConvertUtilsService \n\nConvertUtilsService \n\nConvertUtilsService  -->\n\nCommonModule->ConvertUtilsService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCommonModule->EncryptionService \n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nCommonModule->PaymentService \n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nCommonModule->RedisService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nCommonModule->UsersService \n\n\n\n\n\nConvertUtilsService\n\nConvertUtilsService\n\nCommonModule -->\n\nConvertUtilsService->CommonModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCommonModule -->\n\nEncryptionService->CommonModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nCommonModule -->\n\nPaymentService->CommonModule\n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nCommonModule -->\n\nQueryHelperService->CommonModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nCommonModule -->\n\nRedisService->CommonModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nCommonModule -->\n\nUsersService->CommonModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/commom.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for common services.\nThis module is used to import and export common services used throughout the application.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConvertUtilsService\n                        \n                        \n                            EncryptionService\n                        \n                        \n                            PaymentService\n                        \n                        \n                            QueryHelperService\n                        \n                        \n                            RedisService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConvertUtilsService\n                        \n                        \n                            EncryptionService\n                        \n                        \n                            PaymentService\n                        \n                        \n                            RedisService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { EncryptionService } from '@security/encryption/encryption.service';\nimport { UsersService } from './users/users.service';\nimport { PaymentService } from '@libs/payment/payment.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/entities/user.entity';\nimport { RedisModule } from '@database/redis/redis.module';\nimport { RedisService } from '@database/redis/redis.service';\nimport { ConvertUtilsService } from '@utils/services/convert-utils.service';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Module for common services.\n * This module is used to import and export common services used throughout the application.\n */\n@Global()\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), RedisModule],\n  providers: [\n    ConvertUtilsService,\n    UsersService,\n    EncryptionService,\n    PaymentService,\n    RedisService,\n    QueryHelperService\n  ],\n  exports: [UsersService, ConvertUtilsService, EncryptionService, PaymentService, RedisService]\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConvertUtilsService.html":{"url":"injectables/ConvertUtilsService.html","title":"injectable - ConvertUtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConvertUtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/services/convert-utils.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle various utility conversions.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertDateStringToDate\n                            \n                            \n                                convertDaysToSeconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        convertDateStringToDate\n                        \n                    \n                \n            \n            \n                \nconvertDateStringToDate(dateStr: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/services/convert-utils.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Converts a date string in 'YYYY-MM-DD' format to a Date object.\nExample :const date = convertUtilsService.convertDateStringToDate('2023-05-22');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dateStr\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe date string (e.g., '2023-05-22').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \nThe converted Date object.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        convertDaysToSeconds\n                        \n                    \n                \n            \n            \n                \nconvertDaysToSeconds(duration: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/services/convert-utils.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Converts a duration string in days to seconds.\nExample :const seconds = convertUtilsService.convertDaysToSeconds('7d');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                duration\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe duration string (e.g., '7d').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \nThe duration in seconds.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Service to handle various utility conversions.\n * @class\n */\n@Injectable()\nexport class ConvertUtilsService {\n  /**\n   * Converts a duration string in days to seconds.\n   *\n   * @param {string} duration - The duration string (e.g., '7d').\n   * @returns {number} - The duration in seconds.\n   *\n   * @example\n   * const seconds = convertUtilsService.convertDaysToSeconds('7d');\n   */\n  convertDaysToSeconds(duration: string): number {\n    const days = parseInt(duration.replace('d', ''), 10);\n    return isNaN(days) ? 0 : days * 86400;\n  }\n\n  /**\n   * Converts a date string in 'YYYY-MM-DD' format to a Date object.\n   *\n   * @param {string} dateStr - The date string (e.g., '2023-05-22').\n   * @returns {Date} - The converted Date object.\n   *\n   * @example\n   * const date = convertUtilsService.convertDateStringToDate('2023-05-22');\n   */\n  convertDateStringToDate(dateStr: string): Date {\n    const [year, month, day] = dateStr.split('-');\n    return new Date(Date.UTC(+year, +month - 1, +day));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CookieService.html":{"url":"injectables/CookieService.html","title":"injectable - CookieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CookieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/cookie/cookie.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage cookies.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearRefreshTokenCookie\n                            \n                            \n                                extractRefreshTokenCookie\n                            \n                            \n                                setRefreshTokenCookie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, convertUtilsService: ConvertUtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/security/cookie/cookie.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        convertUtilsService\n                                                  \n                                                        \n                                                                        ConvertUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearRefreshTokenCookie\n                        \n                    \n                \n            \n            \n                \nclearRefreshTokenCookie(res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/cookie/cookie.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Clears the refresh token cookie.\nExample :cookieService.clearRefreshTokenCookie(res);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractRefreshTokenCookie\n                        \n                    \n                \n            \n            \n                \nextractRefreshTokenCookie(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/cookie/cookie.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Extracts the refresh token from the request cookies.\nExample :const refreshToken = cookieService.extractRefreshTokenCookie(req);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP request object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe refresh token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRefreshTokenCookie\n                        \n                    \n                \n            \n            \n                \nsetRefreshTokenCookie(res: Response, refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/cookie/cookie.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Sets the refresh token as an HTTP-only cookie.\nExample :cookieService.setRefreshTokenCookie(res, refreshToken);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe refresh token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PROD_ENV } from '@utils/constants/constants.env';\nimport { ConvertUtilsService } from '@utils/services/convert-utils.service';\nimport { CookieOptions, Request, Response } from 'express';\n\n/**\n * Service to manage cookies.\n * @class\n */\n@Injectable()\nexport class CookieService {\n  constructor(\n    private configService: ConfigService,\n    private convertUtilsService: ConvertUtilsService\n  ) {}\n\n  /**\n   * Extracts the refresh token from the request cookies.\n   *\n   * @param {Request} req - HTTP request object.\n   * @returns {string} - The refresh token.\n   *\n   * @example\n   * const refreshToken = cookieService.extractRefreshTokenCookie(req);\n   */\n  extractRefreshTokenCookie(req: Request): string {\n    return req.cookies['RefreshToken'];\n  }\n\n  /**\n   * Sets the refresh token as an HTTP-only cookie.\n   *\n   * @param {Response} res - HTTP response object.\n   * @param {string} refreshToken - The refresh token.\n   * @throws {Error} If JWT_REFRESH_TOKEN_EXPIRATION is not configured.\n   *\n   * @example\n   * cookieService.setRefreshTokenCookie(res, refreshToken);\n   */\n  setRefreshTokenCookie(res: Response, refreshToken: string): void {\n    const refreshTokenExpiration = this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION');\n    if (!refreshTokenExpiration) {\n      throw new Error('JWT_REFRESH_TOKEN_EXPIRATION is not configured.');\n    }\n\n    const refreshTokenTTL = this.convertUtilsService.convertDaysToSeconds(refreshTokenExpiration);\n    const cookieOptions: CookieOptions = {\n      httpOnly: true,\n      secure: this.configService.get('NODE_ENV') === PROD_ENV,\n      maxAge: refreshTokenTTL * 1000,\n      path: '/',\n      sameSite: this.configService.get('NODE_ENV') === PROD_ENV ? 'none' : 'strict'\n    };\n    res.cookie('RefreshToken', refreshToken, cookieOptions);\n  }\n\n  /**\n   * Clears the refresh token cookie.\n   *\n   * @param {Response} res - HTTP response object.\n   *\n   * @example\n   * cookieService.clearRefreshTokenCookie(res);\n   */\n  clearRefreshTokenCookie(res: Response): void {\n    const cookieOptions: CookieOptions = {\n      httpOnly: true,\n      secure: this.configService.get('NODE_ENV') === PROD_ENV,\n      path: '/',\n      sameSite: this.configService.get('NODE_ENV') === PROD_ENV ? 'none' : 'strict'\n    };\n    res.clearCookie('RefreshToken', cookieOptions);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCartItemDto.html":{"url":"classes/CreateCartItemDto.html","title":"class - CreateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cart-items/dto/create-cart-item.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a cart item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                eventId\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                priceFormula\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                quantity\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/dto/create-cart-item.dto.ts:36\n                        \n                    \n\n            \n                \n                    Identifier for the event.\nThis field is required and must be a non-empty integer.\nExample :const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        priceFormula\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceFormulaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(PriceFormulaEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/dto/create-cart-item.dto.ts:68\n                        \n                    \n\n            \n                \n                    Pricing formula for the cart item.\nThis field is required and must be a valid enum value of PriceFormulaEnum.\nExample :const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()@IsPositive()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/dto/create-cart-item.dto.ts:54\n                        \n                    \n\n            \n                \n                    Quantity of the cart item.\nThis field is required, must be a non-empty positive integer, and must be at least 1.\nExample :const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/cart-items/dto/create-cart-item.dto.ts:22\n                        \n                    \n\n            \n                \n                    Identifier for the user.\nThis field is optional and must be a non-empty integer if provided.\nExample :const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { IsEnum, IsInt, IsNotEmpty, IsOptional, IsPositive, Min } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating a cart item.\n *\n * @class\n */\nexport class CreateCartItemDto {\n  /**\n   * Identifier for the user.\n   * This field is optional and must be a non-empty integer if provided.\n   * @type {number}\n   * @isInt\n   * @isOptional\n   *\n   * @example\n   * const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsInt()\n  @IsOptional()\n  readonly userId: number;\n\n  /**\n   * Identifier for the event.\n   * This field is required and must be a non-empty integer.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  readonly eventId: number;\n\n  /**\n   * Quantity of the cart item.\n   * This field is required, must be a non-empty positive integer, and must be at least 1.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   * @isPositive\n   * @min 1\n   *\n   * @example\n   * const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  @IsPositive()\n  @Min(1)\n  readonly quantity: number;\n\n  /**\n   * Pricing formula for the cart item.\n   * This field is required and must be a valid enum value of PriceFormulaEnum.\n   * @type {PriceFormulaEnum}\n   * @isNotEmpty\n   * @isEnum\n   *\n   * @example\n   * const dto: CreateCartItemDto = { userId: 1, eventId: 2, quantity: 3, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsEnum(PriceFormulaEnum)\n  readonly priceFormula: PriceFormulaEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDto.html":{"url":"classes/CreateEventDto.html","title":"class - CreateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/dto/create-event.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating an event.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                basePrice\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                categoryType\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                longDescription\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                quantityAvailable\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                shortDescription\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                startDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:72\n                        \n                    \n\n            \n                \n                    Base price of the event.\nThis field is required and must be a number.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        categoryType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryEventTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:128\n                        \n                    \n\n            \n                \n                    Category type of the event.\nThis field is required and must be a valid enum value of CategoryEventTypeEnum.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:114\n                        \n                    \n\n            \n                \n                    End date of the event in ISO 8601 format.\nThis field is required and must be a string.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        longDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:58\n                        \n                    \n\n            \n                \n                    Long description of the event.\nThis field is required, must be a string, and have a maximum length of 500 characters.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        quantityAvailable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:86\n                        \n                    \n\n            \n                \n                    Quantity of tickets available for the event.\nThis field is required and must be a number.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        shortDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:42\n                        \n                    \n\n            \n                \n                    Short description of the event.\nThis field is required, must be a string, and have a maximum length of 255 characters.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:100\n                        \n                    \n\n            \n                \n                    Start date of the event in ISO 8601 format.\nThis field is required and must be a string.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(5)@MaxLength(25)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:26\n                        \n                    \n\n            \n                \n                    Title of the event.\nThis field is required, must be a string, and have a length between 5 and 50 characters.\nExample :const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CategoryEventTypeEnum } from '@common/enums/category-type.enum';\nimport { IsNotEmpty, IsNumber, IsString, Matches, MaxLength, MinLength } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating an event.\n *\n * @class\n */\nexport class CreateEventDto {\n  /**\n   * Title of the event.\n   * This field is required, must be a string, and have a length between 5 and 50 characters.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   * @minLength 5\n   * @maxLength 25\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(25)\n  readonly title: string;\n\n  /**\n   * Short description of the event.\n   * This field is required, must be a string, and have a maximum length of 255 characters.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   * @maxLength 255\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(255)\n  readonly shortDescription: string;\n\n  /**\n   * Long description of the event.\n   * This field is required, must be a string, and have a maximum length of 500 characters.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   * @maxLength 500\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(500)\n  readonly longDescription: string;\n\n  /**\n   * Base price of the event.\n   * This field is required and must be a number.\n   * @type {number}\n   * @isNotEmpty\n   * @isNumber\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  readonly basePrice: number;\n\n  /**\n   * Quantity of tickets available for the event.\n   * This field is required and must be a number.\n   * @type {number}\n   * @isNotEmpty\n   * @isNumber\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  readonly quantityAvailable: number;\n\n  /**\n   * Start date of the event in ISO 8601 format.\n   * This field is required and must be a string.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly startDate: string;\n\n  /**\n   * End date of the event in ISO 8601 format.\n   * This field is required and must be a string.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly endDate: string;\n\n  /**\n   * Category type of the event.\n   * This field is required and must be a valid enum value of CategoryEventTypeEnum.\n   * @type {CategoryEventTypeEnum}\n   * @isNotEmpty\n   * @isString\n   *\n   * @example\n   * const dto: CreateEventDto = { title: 'Annual Tech Conference', shortDescription: 'A short description...', longDescription: 'A long description...', basePrice: 100, quantityAvailable: 500, startDate: '2024-06-01T10:00:00Z', endDate: '2024-06-01T18:00:00Z', categoryType: CategoryEventTypeEnum.CONFERENCE };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly categoryType: CategoryEventTypeEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDetailsDto.html":{"url":"classes/CreateReservationDetailsDto.html","title":"class - CreateReservationDetailsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDetailsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservation-details/dto/create-reservation-details.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating reservation details.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                eventId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                price\n                            \n                            \n                                    \n                                    Readonly\n                                priceFormula\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                reservationId\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                shortDescription\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:36\n                        \n                    \n\n            \n                \n                    Identifier for the event.\nThis field is optional and must be a non-empty integer if provided.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:80\n                        \n                    \n\n            \n                \n                    Price of the reservation.\nThis field is required, must be a number, and must be at least 0.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        priceFormula\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceFormulaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(PriceFormulaEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:92\n                        \n                    \n\n            \n                \n                    Pricing formula for the reservation.\nThis field is required and must be a valid enum value of PriceFormulaEnum.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        reservationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:22\n                        \n                    \n\n            \n                \n                    Identifier for the reservation.\nThis field is optional and must be a non-empty integer if provided.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        shortDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:64\n                        \n                    \n\n            \n                \n                    Short description of the reservation details.\nThis field is required and must be a non-empty string.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/dto/create-reservation-details.dto.ts:50\n                        \n                    \n\n            \n                \n                    Title of the reservation details.\nThis field is required and must be a non-empty string.\nExample :const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { IsEnum, IsInt, IsNotEmpty, IsNumber, IsString, Min } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating reservation details.\n *\n * @class\n */\nexport class CreateReservationDetailsDto {\n  /**\n   * Identifier for the reservation.\n   * This field is optional and must be a non-empty integer if provided.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  readonly reservationId?: number;\n\n  /**\n   * Identifier for the event.\n   * This field is optional and must be a non-empty integer if provided.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  readonly eventId?: number;\n\n  /**\n   * Title of the reservation details.\n   * This field is required and must be a non-empty string.\n   * @type {string}\n   * @isString\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly title: string;\n\n  /**\n   * Short description of the reservation details.\n   * This field is required and must be a non-empty string.\n   * @type {string}\n   * @isString\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly shortDescription: string;\n\n  /**\n   * Price of the reservation.\n   * This field is required, must be a number, and must be at least 0.\n   * @type {number}\n   * @isNumber\n   * @min 0\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  @Min(0)\n  readonly price: number;\n\n  /**\n   * Pricing formula for the reservation.\n   * This field is required and must be a valid enum value of PriceFormulaEnum.\n   * @type {PriceFormulaEnum}\n   * @isEnum\n   *\n   * @example\n   * const dto: CreateReservationDetailsDto = { reservationId: 1, eventId: 2, title: 'Concert', shortDescription: 'Live concert event', price: 50.00, priceFormula: PriceFormulaEnum.FIXED };\n   */\n  @IsEnum(PriceFormulaEnum)\n  readonly priceFormula: PriceFormulaEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/dto/create-reservation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a reservation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                cartItemId\n                            \n                            \n                                    \n                                    \n                                paymentId\n                            \n                            \n                                    \n                                    \n                                totalPrice\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        cartItemId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/dto/create-reservation.dto.ts:36\n                        \n                    \n\n            \n                \n                    Identifier for the cart item being reserved.\nThis field is required and must be a non-empty integer.\nExample :const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        paymentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/dto/create-reservation.dto.ts:64\n                        \n                    \n\n            \n                \n                    Payment identifier for the reservation.\nThis field is required and must be a non-empty integer.\nExample :const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        totalPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/dto/create-reservation.dto.ts:50\n                        \n                    \n\n            \n                \n                    Total price of the reservation.\nThis field is required and must be a non-empty number.\nExample :const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/dto/create-reservation.dto.ts:22\n                        \n                    \n\n            \n                \n                    The user making the reservation.\nThis field is required and must be a valid User object.\nExample :const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@modules/users/entities/user.entity';\nimport { IsInt, IsNotEmpty, IsString, IsNumber } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating a reservation.\n *\n * @class\n */\nexport class CreateReservationDto {\n  /**\n   * The user making the reservation.\n   * This field is required and must be a valid User object.\n   * @type {User}\n   * @isNotEmpty\n   * @isString\n   *\n   * @example\n   * const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n   */\n  @IsNotEmpty()\n  @IsString()\n  user: User;\n\n  /**\n   * Identifier for the cart item being reserved.\n   * This field is required and must be a non-empty integer.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  cartItemId: number;\n\n  /**\n   * Total price of the reservation.\n   * This field is required and must be a non-empty number.\n   * @type {number}\n   * @isNotEmpty\n   * @isNumber\n   *\n   * @example\n   * const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  totalPrice: number;\n\n  /**\n   * Payment identifier for the reservation.\n   * This field is required and must be a non-empty integer.\n   * @type {number}\n   * @isInt\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: CreateReservationDto = { user: new User(), cartItemId: 1, totalPrice: 100.00, paymentId: 12345 };\n   */\n  @IsNotEmpty()\n  @IsInt()\n  paymentId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableCartItems1712661230450.html":{"url":"classes/CreateTableCartItems1712661230450.html","title":"class - CreateTableCartItems1712661230450","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableCartItems1712661230450\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712661230450-CreateTableCartItems.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"cart_items\" table.\nThis migration adds a table for storing items in a user's cart, including references to the cart,\nevent, and pricing information. This is intended to set up the schema for managing cart items\nwithin the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230450-CreateTableCartItems.ts:55\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"cart_items\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230450-CreateTableCartItems.ts:21\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"cart_items\" table with various columns to store\ncart item details. If the table or the \"type_price_formule_enum\" type\nalready exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_PRICE_FORMULE_TYPE_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"cart_items\" table.\n *\n * This migration adds a table for storing items in a user's cart, including references to the cart,\n * event, and pricing information. This is intended to set up the schema for managing cart items\n * within the application.\n */\nexport class CreateTableCartItems1712661230450 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"cart_items\" table with various columns to store\n   * cart item details. If the table or the \"type_price_formule_enum\" type\n   * already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"cart_items\" table to check if it already exists.\n    const table = await queryRunner.getTable('cart_items');\n\n    // Ensure the \"type_price_formule_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_PRICE_FORMULE_TYPE_EXIST);\n\n    // Create the \"cart_items\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"cart_items\" (\n          \"cartItemId\" SERIAL PRIMARY KEY,\n          \"cartId\" INTEGER NULL,\n          \"eventId\" INTEGER NULL,\n          \"priceFormula\" \"type_price_formule_enum\" NOT NULL,\n          \"price\" INTEGER NOT NULL,\n          \"quantity\" INTEGER NOT NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (\"cartId\") REFERENCES \"cart\" (\"cartId\") ON DELETE CASCADE,\n          FOREIGN KEY (\"eventId\") REFERENCES \"events\" (\"eventId\")\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"cart_items\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"cart_items\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"cart_items\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableCarts1712661221574.html":{"url":"classes/CreateTableCarts1712661221574.html","title":"class - CreateTableCarts1712661221574","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableCarts1712661221574\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712661221574-CreateTableCarts.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"cart\" table.\nThis migration adds a table for storing shopping cart information, including\nreferences to the user and timestamps for creation and updates.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661221574-CreateTableCarts.ts:43\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"cart\" table, effectively undoing the changes made in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661221574-CreateTableCarts.ts:18\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"cart\" table with various columns to store cart details.\nIf the table already exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"cart\" table.\n *\n * This migration adds a table for storing shopping cart information, including\n * references to the user and timestamps for creation and updates.\n */\nexport class CreateTableCarts1712661221574 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"cart\" table with various columns to store cart details.\n   * If the table already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"cart\" table to check if it already exists.\n    const table = await queryRunner.getTable('cart');\n\n    // Create the \"cart\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"cart\" (\n          \"cartId\" SERIAL PRIMARY KEY,\n          \"userId\" INTEGER NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (\"userId\") REFERENCES \"users\" (\"userId\") ON DELETE CASCADE\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"cart\" table, effectively undoing the changes made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"cart\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"cart\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableEventPrices1712642603715.html":{"url":"classes/CreateTableEventPrices1712642603715.html","title":"class - CreateTableEventPrices1712642603715","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableEventPrices1712642603715\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712642603000-CreateTableEventPrices.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"event_prices\" table.\nThis migration adds a table for storing pricing information for events,\nincluding the event ID, price formula, and price. This is intended to set up\nthe schema for managing event pricing within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712642603000-CreateTableEventPrices.ts:50\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"event_prices\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712642603000-CreateTableEventPrices.ts:21\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"event_prices\" table with various columns to store\nevent pricing details. If the table or the \"type_price_formule_enum\" type\nalready exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_PRICE_FORMULE_TYPE_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"event_prices\" table.\n *\n * This migration adds a table for storing pricing information for events,\n * including the event ID, price formula, and price. This is intended to set up\n * the schema for managing event pricing within the application.\n */\nexport class CreateTableEventPrices1712642603715 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"event_prices\" table with various columns to store\n   * event pricing details. If the table or the \"type_price_formule_enum\" type\n   * already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"event_prices\" table to check if it already exists.\n    const table = await queryRunner.getTable('event_prices');\n\n    // Ensure the \"type_price_formule_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_PRICE_FORMULE_TYPE_EXIST);\n\n    // Create the \"event_prices\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"event_prices\" (\n          \"eventPriceId\" SERIAL PRIMARY KEY,\n          \"eventId\" INTEGER NOT NULL,\n          \"priceFormula\" \"type_price_formule_enum\" NOT NULL,\n          \"price\" INTEGER NOT NULL,\n          FOREIGN KEY (\"eventId\") REFERENCES \"events\" (\"eventId\") ON DELETE CASCADE\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"event_prices\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"event_prices\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"event_prices\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableEvents1712572717258.html":{"url":"classes/CreateTableEvents1712572717258.html","title":"class - CreateTableEvents1712572717258","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableEvents1712572717258\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712572717258-CreateTableEvents.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"events\" table.\nThis migration adds a table for storing event information, including title, descriptions,\ncategory, pricing, and dates. This is intended to set up the schema for managing events\nwithin the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712572717258-CreateTableEvents.ts:56\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"events\" table, effectively undoing the changes made in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712572717258-CreateTableEvents.ts:20\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"events\" table with various columns to store event details.\nIf the table or the \"category_type_enum\" type already exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_CATEGORY_TYPE_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"events\" table.\n *\n * This migration adds a table for storing event information, including title, descriptions,\n * category, pricing, and dates. This is intended to set up the schema for managing events\n * within the application.\n */\nexport class CreateTableEvents1712572717258 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"events\" table with various columns to store event details.\n   * If the table or the \"category_type_enum\" type already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"events\" table to check if it already exists.\n    const table = await queryRunner.getTable('events');\n\n    // Ensure the \"category_type_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_CATEGORY_TYPE_EXIST);\n\n    // Create the \"events\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"events\" (\n          \"eventId\" SERIAL PRIMARY KEY,\n          \"title\" VARCHAR NOT NULL UNIQUE,\n          \"shortDescription\" TEXT NOT NULL,\n          \"longDescription\" TEXT NOT NULL,\n          \"categoryType\" \"category_type_enum\" NOT NULL,\n          \"basePrice\" INTEGER NOT NULL DEFAULT 0,\n          \"quantityAvailable\" INTEGER DEFAULT 0,\n          \"quantitySold\" INTEGER DEFAULT 0,\n          \"revenueGenerated\" INTEGER DEFAULT 0,\n          \"startDate\" TIMESTAMP NOT NULL,\n          \"endDate\" TIMESTAMP NOT NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"events\" table, effectively undoing the changes made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"events\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"events\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableReservationDetails1712751776641.html":{"url":"classes/CreateTableReservationDetails1712751776641.html","title":"class - CreateTableReservationDetails1712751776641","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableReservationDetails1712751776641\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712751776641-CreateTableReservationDetails.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"reservation_details\" table.\nThis migration adds a table for storing detailed information about reservations,\nincluding references to the event and pricing information. This is intended\nto set up the schema for managing reservation details within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712751776641-CreateTableReservationDetails.ts:56\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"reservation_details\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712751776641-CreateTableReservationDetails.ts:21\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"reservation_details\" table with various columns to store\nreservation detail information. If the table or the \"type_price_formule_enum\" type\nalready exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_PRICE_FORMULE_TYPE_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"reservation_details\" table.\n *\n * This migration adds a table for storing detailed information about reservations,\n * including references to the event and pricing information. This is intended\n * to set up the schema for managing reservation details within the application.\n */\nexport class CreateTableReservationDetails1712751776641 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"reservation_details\" table with various columns to store\n   * reservation detail information. If the table or the \"type_price_formule_enum\" type\n   * already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"reservation_details\" table to check if it already exists.\n    const table = await queryRunner.getTable('reservation_details');\n\n    // Ensure the \"type_price_formule_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_PRICE_FORMULE_TYPE_EXIST);\n\n    // Create the \"reservation_details\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"reservation_details\" (\n          \"reservationDetailsId\" SERIAL PRIMARY KEY,\n          \"eventId\" INT NOT NULL,\n          \"reservationId\" INT NOT NULL,\n          \"priceFormula\" \"type_price_formule_enum\" NOT NULL,\n          \"price\" INT NOT NULL DEFAULT 0,\n          \"title\" VARCHAR NOT NULL,\n          \"shortDescription\" TEXT NOT NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (\"eventId\") REFERENCES \"events\" (\"eventId\") ON DELETE CASCADE,\n          FOREIGN KEY (\"reservationId\") REFERENCES \"reservations\" (\"reservationId\") ON DELETE CASCADE\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"reservation_details\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"reservation_details\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"reservation_details\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableReservations1712661230451.html":{"url":"classes/CreateTableReservations1712661230451.html","title":"class - CreateTableReservations1712661230451","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableReservations1712661230451\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712661230451-CreateTableReservations.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"reservations\" table.\nThis migration adds a table for storing reservation information, including references\nto the user, cart item, transaction, reservation details, and ticket. This is intended\nto set up the schema for managing reservations within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230451-CreateTableReservations.ts:50\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"reservations\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230451-CreateTableReservations.ts:19\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"reservations\" table with various columns to store\nreservation details. If the table already exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"reservations\" table.\n *\n * This migration adds a table for storing reservation information, including references\n * to the user, cart item, transaction, reservation details, and ticket. This is intended\n * to set up the schema for managing reservations within the application.\n */\nexport class CreateTableReservations1712661230451 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"reservations\" table with various columns to store\n   * reservation details. If the table already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"reservations\" table to check if it already exists.\n    const table = await queryRunner.getTable('reservations');\n\n    // Create the \"reservations\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"reservations\" (\n          \"reservationId\" SERIAL PRIMARY KEY,\n          \"userId\" INT NULL,\n          \"cartItemId\" INT NULL,\n          \"transactionId\" INT NULL,\n          \"reservationDetailsId\" INT NULL, \n          \"ticketId\" INT NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (\"userId\") REFERENCES \"users\" (\"userId\") ON DELETE SET NULL,\n          FOREIGN KEY (\"cartItemId\") REFERENCES \"cart_items\" (\"cartItemId\") ON DELETE SET NULL\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"reservations\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"reservations\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"reservations\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableTickets1712717719010.html":{"url":"classes/CreateTableTickets1712717719010.html","title":"class - CreateTableTickets1712717719010","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableTickets1712717719010\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712717719010-CreateTableTickets.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"tickets\" table.\nThis migration adds a table for storing ticket information, including references\nto the reservation and security details for ticket validation. This is intended\nto set up the schema for managing tickets within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712717719010-CreateTableTickets.ts:46\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"tickets\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712717719010-CreateTableTickets.ts:19\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"tickets\" table with various columns to store\nticket details. If the table already exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"tickets\" table.\n *\n * This migration adds a table for storing ticket information, including references\n * to the reservation and security details for ticket validation. This is intended\n * to set up the schema for managing tickets within the application.\n */\nexport class CreateTableTickets1712717719010 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"tickets\" table with various columns to store\n   * ticket details. If the table already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"tickets\" table to check if it already exists.\n    const table = await queryRunner.getTable('tickets');\n\n    // Create the \"tickets\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"tickets\" (\n          \"ticketId\" SERIAL PRIMARY KEY,\n          \"reservationId\" INT NOT NULL,\n          \"purchaseKey\" VARCHAR(255) NOT NULL,\n          \"secureKey\" VARCHAR(255) NOT NULL,\n          \"qrCode\" TEXT NOT NULL,\n          FOREIGN KEY (\"reservationId\") REFERENCES \"reservations\" (\"reservationId\") ON DELETE CASCADE\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"tickets\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"tickets\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"tickets\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableTransactions1712661230452.html":{"url":"classes/CreateTableTransactions1712661230452.html","title":"class - CreateTableTransactions1712661230452","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableTransactions1712661230452\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1712661230452-CreateTableTransactions.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"transactions\" table.\nThis migration adds a table for storing transaction information, including\nreferences to the user, payment status, and payment details. This is intended\nto set up the schema for managing transactions within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230452-CreateTableTransactions.ts:53\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"transactions\" table, effectively undoing the changes\nmade in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1712661230452-CreateTableTransactions.ts:21\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"transactions\" table with various columns to store\ntransaction details. If the table or the \"status_reservation_enum\" type\nalready exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_STATUS_RESERVATION_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"transactions\" table.\n *\n * This migration adds a table for storing transaction information, including\n * references to the user, payment status, and payment details. This is intended\n * to set up the schema for managing transactions within the application.\n */\nexport class CreateTableTransactions1712661230452 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"transactions\" table with various columns to store\n   * transaction details. If the table or the \"status_reservation_enum\" type\n   * already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"transactions\" table to check if it already exists.\n    const table = await queryRunner.getTable('transactions');\n\n    // Ensure the \"status_reservation_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_STATUS_RESERVATION_EXIST);\n\n    // Create the \"transactions\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"transactions\" (\n          \"transactionId\" SERIAL PRIMARY KEY,\n          \"userId\" INT NULL,\n          \"statusPayment\" \"status_reservation_enum\",\n          \"paymentId\" INT NOT NULL,\n          \"totalAmount\" DECIMAL NOT NULL,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"updatedAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (\"userId\") REFERENCES \"users\" (\"userId\") ON DELETE SET NULL\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"transactions\" table, effectively undoing the changes\n   * made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"transactions\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"transactions\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTableUsers1711085051379.html":{"url":"classes/CreateTableUsers1711085051379.html","title":"class - CreateTableUsers1711085051379","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTableUsers1711085051379\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1711085051379-CreateTableUsers.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration: Create \"users\" table.\nThis migration adds a table for storing user information, including their\nemail, password, and role. This is intended to be the initial schema setup\nfor managing user data within the application.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1711085051379-CreateTableUsers.ts:56\n                        \n                    \n\n\n            \n                \n                        Reverts the migration.\nThis method drops the \"users\" table, effectively undoing the changes made in the \"up\" method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1711085051379-CreateTableUsers.ts:20\n                        \n                    \n\n\n            \n                \n                        Applies the migration.\nThis method creates the \"users\" table with various columns to store user details.\nIf the table or the \"user_role_enum\" type already exists, it skips the creation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The QueryRunner instance used to run database queries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DOES_ENUM_USER_ROLE_EXIST } from '@utils/constants/constants.migrationdb';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\n/**\n * Migration: Create \"users\" table.\n *\n * This migration adds a table for storing user information, including their\n * email, password, and role. This is intended to be the initial schema setup\n * for managing user data within the application.\n */\nexport class CreateTableUsers1711085051379 implements MigrationInterface {\n  /**\n   * Applies the migration.\n   *\n   * This method creates the \"users\" table with various columns to store user details.\n   * If the table or the \"user_role_enum\" type already exists, it skips the creation.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async up(queryRunner: QueryRunner): Promise {\n    // Retrieve the \"users\" table to check if it already exists.\n    const table = await queryRunner.getTable('users');\n\n    // Ensure the \"user_role_enum\" enum type exists in the database.\n    await queryRunner.query(DOES_ENUM_USER_ROLE_EXIST);\n\n    // Create the \"users\" table only if it does not exist.\n    if (!table) {\n      await queryRunner.query(`\n        CREATE TABLE \"users\" (\n          \"userId\" SERIAL PRIMARY KEY,\n          \"email\" VARCHAR NOT NULL UNIQUE,\n          \"firstName\" VARCHAR NOT NULL,\n          \"lastName\" VARCHAR NOT NULL,\n          \"passwordHash\" VARCHAR NOT NULL,\n          \"accountKey\" VARCHAR UNIQUE,\n          \"role\" \"user_role_enum\" DEFAULT 'USER',\n          \"isActive\" BOOLEAN DEFAULT TRUE,\n          \"tokenVersion\" INTEGER DEFAULT 1,\n          \"transactionsCount\" INTEGER DEFAULT 0,\n          \"totalSpent\" INTEGER DEFAULT 0,\n          \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          \"lastLogin\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    }\n  }\n\n  /**\n   * Reverts the migration.\n   *\n   * This method drops the \"users\" table, effectively undoing the changes made in the \"up\" method.\n   *\n   * @param queryRunner The QueryRunner instance used to run database queries.\n   */\n  public async down(queryRunner: QueryRunner): Promise {\n    // Drop the \"users\" table if it exists.\n    await queryRunner.query(`DROP TABLE \"users\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTransactionDto.html":{"url":"classes/CreateTransactionDto.html","title":"class - CreateTransactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTransactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/dto/create-transaction.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateTransactionDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to set up and configure the database connection using TypeORM.\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n/**\n * Module to set up and configure the database connection using TypeORM.\n * @module\n */\n@Module({\n  imports: [\n    /**\n     * Configures TypeORM to connect to a PostgreSQL database using async configuration.\n     *\n     * @remarks\n     * The configuration is dynamically loaded from environment variables using the ConfigService.\n     *\n     * @example\n     * TypeOrmModule.forRootAsync({\n     *   imports: [ConfigModule],\n     *   inject: [ConfigService],\n     *   useFactory: (config: ConfigService) => ({\n     *     type: 'postgres',\n     *     host: config.get('PGHOST'),\n     *     port: config.get('PGPORT'),\n     *     username: config.get('PGUSER'),\n     *     password: config.get('PGPASSOWRD'),\n     *     database: config.get('PGDATABASE'),\n     *     synchronize: false,\n     *     entities: [__dirname + '/*.entity{.ts,.js}']\n     *   })\n     * })\n     */\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        type: 'postgres',\n        host: config.get('PGHOST'), // Database host\n        port: config.get('PGPORT'), // Database port\n        username: config.get('PGUSER'), // Database username\n        password: config.get('PGPASSOWRD'), // Database password\n        database: config.get('PGDATABASE'), // Database name\n        synchronize: false, // Whether to synchronize the database schema (use false in production)\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'] // Path to the entities\n      })\n    })\n  ]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle encryption tasks.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatedKeyUuid\n                            \n                            \n                                    Async\n                                generatedQRCode\n                            \n                            \n                                    Async\n                                generatedSecureKey\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generatedKeyUuid\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatedKeyUuid()\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/encryption/encryption.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Generates a UUID.\nExample :const uuid = await encryptionService.generatedKeyUuid();\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe generated UUID.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generatedQRCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatedQRCode(secureKey: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/encryption/encryption.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Generates a QR code from a secure key.\nExample :const qrCode = await encryptionService.generatedQRCode(secureKey);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                secureKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe secure key to encode in the QR code.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe generated QR code as a data URL.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generatedSecureKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatedSecureKey(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/encryption/encryption.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Generates a secure key for a user by combining the user's account key with a new UUID.\nExample :const secureKey = await encryptionService.generatedSecureKey(user);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe generated secure key.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/encryption/encryption.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Hashes a password using Argon2.\nExample :const hashedPassword = await encryptionService.hashPassword('password123');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to hash.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe hashed password.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPassword(hash: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/encryption/encryption.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Verifies a password against a hash using Argon2.\nExample :const isValid = await encryptionService.verifyPassword(hashedPassword, 'password123');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hashed password.\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to verify.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nWhether the password is valid.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { User } from '@modules/users/entities/user.entity';\nimport { Injectable } from '@nestjs/common';\nimport * as argon2 from 'argon2';\nimport * as qrcode from 'qrcode';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Service to handle encryption tasks.\n * @class\n */\n@Injectable()\nexport class EncryptionService {\n  /**\n   * Hashes a password using Argon2.\n   *\n   * @param {string} password - The plain text password to hash.\n   * @returns {Promise} - The hashed password.\n   *\n   * @example\n   * const hashedPassword = await encryptionService.hashPassword('password123');\n   */\n  async hashPassword(password: string): Promise {\n    return argon2.hash(password);\n  }\n\n  /**\n   * Verifies a password against a hash using Argon2.\n   *\n   * @param {string} hash - The hashed password.\n   * @param {string} password - The plain text password to verify.\n   * @returns {Promise} - Whether the password is valid.\n   *\n   * @example\n   * const isValid = await encryptionService.verifyPassword(hashedPassword, 'password123');\n   */\n  async verifyPassword(hash: string, password: string): Promise {\n    return argon2.verify(hash, password);\n  }\n\n  /**\n   * Generates a UUID.\n   *\n   * @returns {Promise} - The generated UUID.\n   *\n   * @example\n   * const uuid = await encryptionService.generatedKeyUuid();\n   */\n  async generatedKeyUuid(): Promise {\n    return uuidv4();\n  }\n\n  /**\n   * Generates a secure key for a user by combining the user's account key with a new UUID.\n   *\n   * @param {User} user - The user entity.\n   * @returns {Promise} - The generated secure key.\n   *\n   * @example\n   * const secureKey = await encryptionService.generatedSecureKey(user);\n   */\n  async generatedSecureKey(user: User): Promise {\n    const purchaseKey = await this.generatedKeyUuid();\n    return `${user.accountKey}-${purchaseKey}`;\n  }\n\n  /**\n   * Generates a QR code from a secure key.\n   *\n   * @param {string} secureKey - The secure key to encode in the QR code.\n   * @returns {Promise} - The generated QR code as a data URL.\n   *\n   * @example\n   * const qrCode = await encryptionService.generatedQRCode(secureKey);\n   */\n  async generatedQRCode(secureKey: string): Promise {\n    return await qrcode.toDataURL(secureKey);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Event.html":{"url":"entities/Event.html","title":"entity - Event","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Event\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/entities/event.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing an event.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                basePrice\n                            \n                            \n                                    \n                                cartItems\n                            \n                            \n                                    \n                                categoryType\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                endDate\n                            \n                            \n                                    \n                                eventId\n                            \n                            \n                                    \n                                longDescription\n                            \n                            \n                                    \n                                prices\n                            \n                            \n                                    \n                                quantityAvailable\n                            \n                            \n                                    \n                                quantitySold\n                            \n                            \n                                    \n                                reservationsDetails\n                            \n                            \n                                    \n                                revenueGenerated\n                            \n                            \n                                    \n                                shortDescription\n                            \n                            \n                                    \n                                startDate\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        basePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:79\n                        \n                    \n\n            \n                \n                    Base price of the event.\nExample :const basePrice = event.basePrice;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.event)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:171\n                        \n                    \n\n            \n                \n                    Cart items associated with the event.\nExample :const cartItems = event.cartItems;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categoryType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryEventTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:68\n                        \n                    \n\n            \n                \n                    Category type of the event.\nExample :const category = event.categoryType;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:183\n                        \n                    \n\n            \n                \n                    Timestamp when the event was created.\nExample :const createdAt = event.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:101\n                        \n                    \n\n            \n                \n                    End date of the event.\nExample :const endDate = event.endDate;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the event.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        longDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:57\n                        \n                    \n\n            \n                \n                    Long description of the event.\nExample :const longDesc = event.longDescription;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        prices\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EventPrice[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, price => price.event, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:149\n                        \n                    \n\n            \n                \n                    Prices associated with the event.\nExample :const prices = event.prices;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantityAvailable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:113\n                        \n                    \n\n            \n                \n                    Quantity available for the event.\nExample :const availableQty = event.quantityAvailable;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantitySold\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:125\n                        \n                    \n\n            \n                \n                    Quantity sold for the event.\nExample :const soldQty = event.quantitySold;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationsDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReservationDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservationDetails => reservationDetails.event)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:160\n                        \n                    \n\n            \n                \n                    Reservation details associated with the event.\nExample :const reservationDetails = event.reservationsDetails;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revenueGenerated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:137\n                        \n                    \n\n            \n                \n                    Revenue generated from the event.\nExample :const revenue = event.revenueGenerated;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shortDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:46\n                        \n                    \n\n            \n                \n                    Short description of the event.\nExample :const shortDesc = event.shortDescription;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:90\n                        \n                    \n\n            \n                \n                    Start date of the event.\nExample :const startDate = event.startDate;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@Column({unique: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:35\n                        \n                    \n\n            \n                \n                    Title of the event.\nExample :const eventTitle = event.title;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event.entity.ts:195\n                        \n                    \n\n            \n                \n                    Timestamp when the event was last updated.\nExample :const updatedAt = event.updatedAt;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { CategoryEventTypeEnum } from '@common/enums/category-type.enum';\nimport { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany, Index } from 'typeorm';\nimport { EventPrice } from './event-price.entity';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\n\n/**\n * Entity representing an event.\n *\n * @class\n * @entity\n */\n@Entity('events')\nexport class Event {\n  /**\n   * Unique identifier for the event.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  eventId: number;\n\n  /**\n   * Title of the event.\n   * @type {string}\n   * @column\n   * @index\n   * @unique\n   *\n   * @example\n   * const eventTitle = event.title;\n   */\n  @Index()\n  @Column({ unique: true, type: 'varchar' })\n  title: string;\n\n  /**\n   * Short description of the event.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const shortDesc = event.shortDescription;\n   */\n  @Column('text')\n  shortDescription: string;\n\n  /**\n   * Long description of the event.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const longDesc = event.longDescription;\n   */\n  @Column('text')\n  longDescription: string;\n\n  /**\n   * Category type of the event.\n   * @type {CategoryEventTypeEnum}\n   * @column\n   *\n   * @example\n   * const category = event.categoryType;\n   */\n  @Column()\n  categoryType: CategoryEventTypeEnum;\n\n  /**\n   * Base price of the event.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const basePrice = event.basePrice;\n   */\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  basePrice: number;\n\n  /**\n   * Start date of the event.\n   * @type {Date}\n   * @column\n   *\n   * @example\n   * const startDate = event.startDate;\n   */\n  @Column('date')\n  startDate: Date;\n\n  /**\n   * End date of the event.\n   * @type {Date}\n   * @column\n   *\n   * @example\n   * const endDate = event.endDate;\n   */\n  @Column('date')\n  endDate: Date;\n\n  /**\n   * Quantity available for the event.\n   * @type {number}\n   * @column\n   * @default 1\n   *\n   * @example\n   * const availableQty = event.quantityAvailable;\n   */\n  @Column({ type: 'int', default: 1 })\n  quantityAvailable: number;\n\n  /**\n   * Quantity sold for the event.\n   * @type {number}\n   * @column\n   * @default 0\n   *\n   * @example\n   * const soldQty = event.quantitySold;\n   */\n  @Column({ type: 'int', default: 0 })\n  quantitySold: number;\n\n  /**\n   * Revenue generated from the event.\n   * @type {number}\n   * @column\n   * @default 0\n   *\n   * @example\n   * const revenue = event.revenueGenerated;\n   */\n  @Column({ type: 'int', default: 0 })\n  revenueGenerated: number;\n\n  /**\n   * Prices associated with the event.\n   * @type {EventPrice[]}\n   * @oneToMany\n   * @eager\n   *\n   * @example\n   * const prices = event.prices;\n   */\n  @OneToMany(() => EventPrice, price => price.event, { eager: true })\n  prices: EventPrice[];\n\n  /**\n   * Reservation details associated with the event.\n   * @type {ReservationDetails[]}\n   * @oneToMany\n   *\n   * @example\n   * const reservationDetails = event.reservationsDetails;\n   */\n  @OneToMany(() => ReservationDetails, reservationDetails => reservationDetails.event)\n  reservationsDetails: ReservationDetails[];\n\n  /**\n   * Cart items associated with the event.\n   * @type {CartItem[]}\n   * @oneToMany\n   *\n   * @example\n   * const cartItems = event.cartItems;\n   */\n  @OneToMany(() => CartItem, cartItem => cartItem.event)\n  cartItems: CartItem[];\n\n  /**\n   * Timestamp when the event was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = event.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the event was last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = event.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventPrice.html":{"url":"entities/EventPrice.html","title":"entity - EventPrice","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventPrice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/entities/event-price.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a price associated with an event.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                event\n                            \n                            \n                                    \n                                eventPriceId\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                priceFormula\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, event => event.prices)@JoinColumn({name: 'eventId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event-price.entity.ts:36\n                        \n                    \n\n            \n                \n                    Event associated with the event price.\nExample :const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        eventPriceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event-price.entity.ts:22\n                        \n                    \n\n            \n                \n                    Unique identifier for the event price.\nExample :const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event-price.entity.ts:64\n                        \n                    \n\n            \n                \n                    Price of the event.\nExample :const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priceFormula\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceFormulaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PriceFormulaEnum, name: 'priceFormula'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/entities/event-price.entity.ts:53\n                        \n                    \n\n            \n                \n                    Pricing formula for the event.\nExample :const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn, Index } from 'typeorm';\n\n/**\n * Entity representing a price associated with an event.\n *\n * @class\n * @entity\n */\n@Entity('event_prices')\nexport class EventPrice {\n  /**\n   * Unique identifier for the event price.\n   * @type {number}\n   * @primaryGeneratedColumn\n   *\n   * @example\n   * const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n   */\n  @PrimaryGeneratedColumn('increment')\n  eventPriceId: number;\n\n  /**\n   * Event associated with the event price.\n   * @type {Event}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n   */\n  @Index()\n  @ManyToOne(() => Event, event => event.prices)\n  @JoinColumn({ name: 'eventId' })\n  event: Event;\n\n  /**\n   * Pricing formula for the event.\n   * @type {PriceFormulaEnum}\n   * @column\n   * @enum {PriceFormulaEnum}\n   * @name priceFormula\n   *\n   * @example\n   * const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n   */\n  @Column({\n    type: 'enum',\n    enum: PriceFormulaEnum,\n    name: 'priceFormula'\n  })\n  priceFormula: PriceFormulaEnum;\n\n  /**\n   * Price of the event.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const eventPrice: EventPrice = { eventPriceId: 1, event: eventInstance, priceFormula: PriceFormulaEnum.FIXED, price: 100.00 };\n   */\n  @Column()\n  price: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventPricesService.html":{"url":"injectables/EventPricesService.html","title":"injectable - EventPricesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventPricesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/event-prices.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage event prices.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEventPrices\n                            \n                            \n                                    Async\n                                deleteEventPrices\n                            \n                            \n                                    Private\n                                    Async\n                                findEventById\n                            \n                            \n                                    Async\n                                getPriceByEventAndType\n                            \n                            \n                                    Async\n                                updateEventPrices\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventPriceRepository: Repository, eventRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/events/event-prices.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventPriceRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEventPrices\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEventPrices(eventId: number, basePrice: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-prices.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Creates event prices based on a base price and predefined price formulas.\nExample :await eventPricesService.createEventPrices(1, 100);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                basePrice\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe base price of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteEventPrices\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteEventPrices(eventId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-prices.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Deletes all prices of an event.\nExample :await eventPricesService.deleteEventPrices(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        findEventById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEventById(eventId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-prices.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Finds an event by its ID.\nExample :const event = await eventPricesService.findEventById(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPriceByEventAndType\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPriceByEventAndType(eventId: number, priceFormula: PriceFormulaEnum)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-prices.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Retrieves the price of an event by its ID and price formula.\nExample :const price = await eventPricesService.getPriceByEventAndType(1, PriceFormulaEnum.STANDARD);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                priceFormula\n                                            \n                                                            PriceFormulaEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe price formula type.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe price of the event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateEventPrices\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEventPrices(eventId: number, newBasePrice: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-prices.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Updates the prices of an event based on a new base price and predefined price formulas.\nExample :await eventPricesService.updateEventPrices(1, 150);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                newBasePrice\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new base price of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { EventPrice } from './entities/event-price.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { PRICES_FORMULA } from '@utils/constants/constants.common';\n\n/**\n * Service to manage event prices.\n * @class\n */\n@Injectable()\nexport class EventPricesService {\n  constructor(\n    @InjectRepository(EventPrice)\n    private readonly eventPriceRepository: Repository,\n    @InjectRepository(Event)\n    private readonly eventRepository: Repository\n  ) {}\n\n  /**\n   * Creates event prices based on a base price and predefined price formulas.\n   *\n   * @param {number} eventId - ID of the event.\n   * @param {number} basePrice - The base price of the event.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @example\n   * await eventPricesService.createEventPrices(1, 100);\n   */\n  async createEventPrices(eventId: number, basePrice: number): Promise {\n    await this.findEventById(eventId);\n\n    for (const formula of PRICES_FORMULA) {\n      const price = this.eventPriceRepository.create({\n        event: { eventId },\n        priceFormula: formula.type,\n        price: Math.round(basePrice * formula.multiplier)\n      });\n      await this.eventPriceRepository.save(price);\n    }\n  }\n\n  /**\n   * Retrieves the price of an event by its ID and price formula.\n   *\n   * @param {number} eventId - ID of the event.\n   * @param {PriceFormulaEnum} priceFormula - The price formula type.\n   * @returns {Promise} - The price of the event.\n   *\n   * @throws {NotFoundException} If the price is not found.\n   *\n   * @example\n   * const price = await eventPricesService.getPriceByEventAndType(1, PriceFormulaEnum.STANDARD);\n   */\n  async getPriceByEventAndType(eventId: number, priceFormula: PriceFormulaEnum): Promise {\n    const price = await this.eventPriceRepository.findOne({\n      where: {\n        event: { eventId: eventId },\n        priceFormula: priceFormula\n      }\n    });\n    if (!price) {\n      throw new NotFoundException(\n        `Price not found for event ID ${eventId} and type ${priceFormula}`\n      );\n    }\n    return price.price;\n  }\n\n  /**\n   * Updates the prices of an event based on a new base price and predefined price formulas.\n   *\n   * @param {number} eventId - ID of the event.\n   * @param {number} newBasePrice - The new base price of the event.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @example\n   * await eventPricesService.updateEventPrices(1, 150);\n   */\n  async updateEventPrices(eventId: number, newBasePrice: number): Promise {\n    await this.findEventById(eventId);\n    const eventPrices = await this.eventPriceRepository.find({\n      where: { event: { eventId } }\n    });\n\n    const updatedPrices = eventPrices.map(priceRecord => {\n      const formula = PRICES_FORMULA.find(f => f.type === priceRecord.priceFormula);\n      if (formula) {\n        priceRecord.price = Math.round(newBasePrice * formula.multiplier);\n      }\n      return priceRecord;\n    });\n\n    await this.eventPriceRepository.save(updatedPrices);\n  }\n\n  /**\n   * Deletes all prices of an event.\n   *\n   * @param {number} eventId - ID of the event.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @example\n   * await eventPricesService.deleteEventPrices(1);\n   */\n  async deleteEventPrices(eventId: number): Promise {\n    await this.findEventById(eventId);\n    const prices = await this.eventPriceRepository.find({\n      where: { event: { eventId: eventId } }\n    });\n\n    for (const price of prices) {\n      await this.eventPriceRepository.remove(price);\n    }\n  }\n\n  /**\n   * Finds an event by its ID.\n   *\n   * @param {number} eventId - ID of the event.\n   * @returns {Promise} - The found event.\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @private\n   *\n   * @example\n   * const event = await eventPricesService.findEventById(1);\n   */\n  private async findEventById(eventId: number): Promise {\n    const event = await this.eventRepository.findOneBy({ eventId });\n    if (!event) throw new NotFoundException(`Event with ID ${eventId} not found.`);\n    return event;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventSalesService.html":{"url":"injectables/EventSalesService.html","title":"injectable - EventSalesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventSalesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/event-sales.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage event sales and revenue.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                deductionMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                deductEventQuantity\n                            \n                            \n                                    Async\n                                processEventTicketsAndRevenue\n                            \n                            \n                                    Private\n                                quantityPerFormula\n                            \n                            \n                                    Private\n                                    Async\n                                updateRevenue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventRepository: Repository, eventsService: EventsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/events/event-sales.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventsService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        deductEventQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    deductEventQuantity(eventId: number, priceFormula: string, quantity: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-sales.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Deducts the quantity of tickets available for a specific event.\nExample :await eventSalesService.deductEventQuantity(1, PriceFormulaEnum.SOLO, 3);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                priceFormula\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe price formula used.\n\n\n                                            \n                                        \n                                        \n                                                quantity\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe quantity of tickets to deduct.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processEventTicketsAndRevenue\n                        \n                    \n                \n            \n            \n                \n                        \n                    processEventTicketsAndRevenue(items: CartItem[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-sales.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Processes event tickets and updates revenue based on cart items.\nExample :await eventSalesService.processEventTicketsAndRevenue(cartItems);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                        CartItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of cart items to process.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        quantityPerFormula\n                        \n                    \n                \n            \n            \n                \n                        \n                    quantityPerFormula(priceFormula: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-sales.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Gets the quantity deduction factor for a given price formula.\nExample :const deductionFactor = eventSalesService.quantityPerFormula(PriceFormulaEnum.SOLO);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                priceFormula\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe price formula.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \nThe quantity deduction factor.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        updateRevenue\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRevenue(eventId: number, additionalRevenue: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-sales.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Updates the revenue for a specific event.\nExample :await eventSalesService.updateRevenue(1, 500);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                additionalRevenue\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe additional revenue to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        deductionMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n    [PriceFormulaEnum.SOLO]: 1,\n    [PriceFormulaEnum.DUO]: 2,\n    [PriceFormulaEnum.FAMILY]: 4\n  }\n                    \n                \n                    \n                        \n                                Defined in src/modules/events/event-sales.service.ts:23\n                        \n                    \n\n            \n                \n                    Map of price formulas to quantity deduction factors.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Event } from './entities/event.entity';\nimport { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { EventsService } from './events.service';\n\n/**\n * Service to manage event sales and revenue.\n * @class\n */\n@Injectable()\nexport class EventSalesService {\n  /**\n   * Map of price formulas to quantity deduction factors.\n   *\n   * @private\n   * @readonly\n   * @type {Record}\n   * @memberof EventSalesService\n   */\n  private readonly deductionMap: Record = {\n    [PriceFormulaEnum.SOLO]: 1,\n    [PriceFormulaEnum.DUO]: 2,\n    [PriceFormulaEnum.FAMILY]: 4\n  };\n\n  constructor(\n    @InjectRepository(Event)\n    private eventRepository: Repository,\n    private readonly eventsService: EventsService\n  ) {}\n\n  /**\n   * Processes event tickets and updates revenue based on cart items.\n   *\n   * @param {CartItem[]} items - List of cart items to process.\n   * @returns {Promise}\n   *\n   * @example\n   * await eventSalesService.processEventTicketsAndRevenue(cartItems);\n   */\n  async processEventTicketsAndRevenue(items: CartItem[]): Promise {\n    let totalNewRevenue = 0;\n    for (const item of items) {\n      await this.deductEventQuantity(item.event.eventId, item.priceFormula, item.quantity);\n      totalNewRevenue += item.price * item.quantity;\n    }\n    if (items.length > 0) {\n      await this.updateRevenue(items[0].event.eventId, totalNewRevenue);\n    }\n  }\n\n  /**\n   * Updates the revenue for a specific event.\n   *\n   * @param {number} eventId - ID of the event.\n   * @param {number} additionalRevenue - The additional revenue to add.\n   * @returns {Promise}\n   *\n   * @private\n   *\n   * @example\n   * await eventSalesService.updateRevenue(1, 500);\n   */\n  private async updateRevenue(eventId: number, additionalRevenue: number): Promise {\n    const event = await this.eventsService.findEventById(eventId);\n    event.revenueGenerated += additionalRevenue;\n    await this.eventRepository.save(event);\n  }\n\n  /**\n   * Deducts the quantity of tickets available for a specific event.\n   *\n   * @param {number} eventId - ID of the event.\n   * @param {string} priceFormula - The price formula used.\n   * @param {number} quantity - The quantity of tickets to deduct.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If not enough tickets are available.\n   *\n   * @private\n   *\n   * @example\n   * await eventSalesService.deductEventQuantity(1, PriceFormulaEnum.SOLO, 3);\n   */\n  private async deductEventQuantity(\n    eventId: number,\n    priceFormula: string,\n    quantity: number\n  ): Promise {\n    const event = await this.eventsService.findEventById(eventId);\n    const quantityToDeduct = this.quantityPerFormula(priceFormula) * quantity;\n    if (quantityToDeduct > event.quantityAvailable) {\n      throw new NotFoundException('Not enough tickets available');\n    }\n    event.quantityAvailable -= quantityToDeduct;\n    event.quantitySold += quantityToDeduct;\n    await this.eventRepository.save(event);\n  }\n\n  /**\n   * Gets the quantity deduction factor for a given price formula.\n   *\n   * @param {string} priceFormula - The price formula.\n   * @returns {number} - The quantity deduction factor.\n   *\n   * @private\n   *\n   * @example\n   * const deductionFactor = eventSalesService.quantityPerFormula(PriceFormulaEnum.SOLO);\n   */\n  private quantityPerFormula(priceFormula: string): number {\n    return this.deductionMap[priceFormula] || 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventsController.html":{"url":"controllers/EventsController.html","title":"controller - EventsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/events.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                events\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage events.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findAllFiltered\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getTicketPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEventDto: CreateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(UserRole.ADMIN)@UseGuards(AccessTokenGuard, RoleGuard)@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Creates a new event. Only accessible to admins.\nExample :POST /events/create\n{\n  \"title\": \"Event Title\",\n  \"description\": \"Event Description\",\n  \"startDate\": \"2023-01-01\",\n  \"endDate\": \"2023-01-02\",\n  \"basePrice\": 100\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing event details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('get-events-values')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Retrieves all event values.\nExample :GET /events/get-events-values\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nAll events with selected values.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAllFiltered\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllFiltered(paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('get-all-filtered')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        Retrieves filtered events based on pagination and filter parameters.\nExample :GET /events/get-all-filtered?page=1&limit=10&sortBy=title&sortOrder=ASC\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered events and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:115\n                        \n                    \n\n\n            \n                \n                        Retrieves a single event by its ID.\nExample :GET /events/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getTicketPrice\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTicketPrice(id: number, priceFormula: PriceFormulaEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/price/:priceFormula')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Retrieves the price of a ticket for an event by its ID and price formula.\nExample :GET /events/1/price/STANDARD\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                        \n                                                priceFormula\n                                            \n                                                            PriceFormulaEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe price formula type.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe event ID, price formula, and price.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(UserRole.ADMIN)@UseGuards(AccessTokenGuard, RoleGuard)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:155\n                        \n                    \n\n\n            \n                \n                        Deletes an event by its ID. Only accessible to admins.\nExample :DELETE /events/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nConfirmation message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateEventDto: UpdateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(UserRole.ADMIN)@UseGuards(AccessTokenGuard, RoleGuard)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:139\n                        \n                    \n\n\n            \n                \n                        Updates an existing event. Only accessible to admins.\nExample :PATCH /events/1\n{\n  \"title\": \"Updated Title\",\n  \"description\": \"Updated Description\",\n  \"startDate\": \"2023-01-03\",\n  \"endDate\": \"2023-01-04\",\n  \"basePrice\": 150\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event to update.\n\n\n                                            \n                                        \n                                        \n                                                updateEventDto\n                                            \n                                                            UpdateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing updated event details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated event.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query\n} from '@nestjs/common';\nimport { UserRole } from '@common/enums/user-role.enum';\nimport { Role } from '@common/decorators/role.decorator';\nimport { AccessTokenGuard, RoleGuard } from '@security/guards';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { EventsService } from './events.service';\nimport { UpdateEventDto } from './dto/update-event.dto';\nimport { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { EventPricesService } from './event-prices.service';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { Event } from './entities/event.entity';\n\n/**\n * Controller to manage events.\n * @class\n */\n@Controller('events')\nexport class EventsController {\n  constructor(\n    private readonly eventsService: EventsService,\n    private readonly eventPricesService: EventPricesService\n  ) {}\n\n  /**\n   * Creates a new event. Only accessible to admins.\n   *\n   * @param {CreateEventDto} createEventDto - DTO containing event details.\n   * @returns {Promise} - The created event.\n   *\n   * @example\n   * POST /events/create\n   * {\n   *   \"title\": \"Event Title\",\n   *   \"description\": \"Event Description\",\n   *   \"startDate\": \"2023-01-01\",\n   *   \"endDate\": \"2023-01-02\",\n   *   \"basePrice\": 100\n   * }\n   */\n  @Role(UserRole.ADMIN)\n  @UseGuards(AccessTokenGuard, RoleGuard)\n  @Post('create')\n  create(@Body() createEventDto: CreateEventDto): Promise {\n    return this.eventsService.create(createEventDto);\n  }\n\n  /**\n   * Retrieves filtered events based on pagination and filter parameters.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered events and total count.\n   *\n   * @example\n   * GET /events/get-all-filtered?page=1&limit=10&sortBy=title&sortOrder=ASC\n   */\n  @Get('get-all-filtered')\n  findAllFiltered(\n    @Query() paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    return this.eventsService.findAllFiltered(paginationFilterDto);\n  }\n\n  /**\n   * Retrieves all event values.\n   *\n   * @returns {Promise} - All events with selected values.\n   *\n   * @example\n   * GET /events/get-events-values\n   */\n  @Get('get-events-values')\n  findAll(): Promise {\n    return this.eventsService.findAllValues();\n  }\n\n  /**\n   * Retrieves the price of a ticket for an event by its ID and price formula.\n   *\n   * @param {number} id - ID of the event.\n   * @param {PriceFormulaEnum} priceFormula - The price formula type.\n   * @returns {Promise} - The event ID, price formula, and price.\n   *\n   * @example\n   * GET /events/1/price/STANDARD\n   */\n  @Get(':id/price/:priceFormula')\n  async getTicketPrice(\n    @Param('id') id: number,\n    @Param('priceFormula') priceFormula: PriceFormulaEnum\n  ): Promise {\n    const price = await this.eventPricesService.getPriceByEventAndType(+id, priceFormula);\n    return { eventId: +id, priceFormula, price };\n  }\n\n  /**\n   * Retrieves a single event by its ID.\n   *\n   * @param {string} id - ID of the event.\n   * @returns {Promise} - The found event.\n   *\n   * @example\n   * GET /events/1\n   */\n  @Get(':id')\n  findOne(@Param('id') id: string): Promise {\n    return this.eventsService.findOne(+id);\n  }\n\n  /**\n   * Updates an existing event. Only accessible to admins.\n   *\n   * @param {string} id - ID of the event to update.\n   * @param {UpdateEventDto} updateEventDto - DTO containing updated event details.\n   * @returns {Promise} - The updated event.\n   *\n   * @example\n   * PATCH /events/1\n   * {\n   *   \"title\": \"Updated Title\",\n   *   \"description\": \"Updated Description\",\n   *   \"startDate\": \"2023-01-03\",\n   *   \"endDate\": \"2023-01-04\",\n   *   \"basePrice\": 150\n   * }\n   */\n  @Role(UserRole.ADMIN)\n  @UseGuards(AccessTokenGuard, RoleGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateEventDto: UpdateEventDto): Promise {\n    return this.eventsService.update(+id, updateEventDto);\n  }\n\n  /**\n   * Deletes an event by its ID. Only accessible to admins.\n   *\n   * @param {string} id - ID of the event to delete.\n   * @returns {Promise} - Confirmation message.\n   *\n   * @example\n   * DELETE /events/1\n   */\n  @Role(UserRole.ADMIN)\n  @UseGuards(AccessTokenGuard, RoleGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string): Promise {\n    return this.eventsService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_EventsModule_exports\n\n\n\n\nEventPricesService \n\nEventPricesService \n\n\n\nEventSalesService \n\nEventSalesService \n\n\n\nEventsService \n\nEventsService \n\n\n\nEventsModule\n\nEventsModule\n\nEventPricesService  -->\n\nEventsModule->EventPricesService \n\n\n\nEventSalesService  -->\n\nEventsModule->EventSalesService \n\n\n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\n\n\nEventPricesService\n\nEventPricesService\n\nEventsModule -->\n\nEventPricesService->EventsModule\n\n\n\n\n\nEventSalesService\n\nEventSalesService\n\nEventsModule -->\n\nEventSalesService->EventsModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nEventsModule -->\n\nQueryHelperService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/events/events.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage events.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventPricesService\n                        \n                        \n                            EventSalesService\n                        \n                        \n                            EventsService\n                        \n                        \n                            QueryHelperService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventPricesService\n                        \n                        \n                            EventSalesService\n                        \n                        \n                            EventsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EventsService } from './events.service';\nimport { Event } from './entities/event.entity';\nimport { EventsController } from './events.controller';\nimport { EventPrice } from './entities/event-price.entity';\nimport { EventPricesService } from './event-prices.service';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\nimport { EventSalesService } from './event-sales.service';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Module to manage events.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for Event, EventPrice, and ReservationDetails entities\n    TypeOrmModule.forFeature([Event, EventPrice, ReservationDetails])\n  ],\n  controllers: [\n    // Register EventsController\n    EventsController\n  ],\n  providers: [\n    // Register EventsService, EventPricesService, EventSalesService, and QueryHelperService as providers\n    EventsService,\n    EventPricesService,\n    EventSalesService,\n    QueryHelperService\n  ],\n  exports: [\n    // Export EventsService, EventPricesService, and EventSalesService\n    EventsService,\n    EventPricesService,\n    EventSalesService\n  ]\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsService.html":{"url":"injectables/EventsService.html","title":"injectable - EventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/events.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage events.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                CACHE_TTL_ONE_HOUR\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                    Async\n                                ensureTitleUnique\n                            \n                            \n                                    Async\n                                findAllFiltered\n                            \n                            \n                                    Async\n                                findAllValues\n                            \n                            \n                                    Async\n                                findEventById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventRepository: Repository, redisService: RedisService, eventPricesService: EventPricesService, convertUtilsService: ConvertUtilsService, queryHelper: QueryHelperService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/events/events.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventPricesService\n                                                  \n                                                        \n                                                                        EventPricesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        convertUtilsService\n                                                  \n                                                        \n                                                                        ConvertUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryHelper\n                                                  \n                                                        \n                                                                        QueryHelperService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEventDto: CreateEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Creates a new event.\nExample :const event = await eventsService.create(createEventDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing event details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        ensureTitleUnique\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureTitleUnique(title: string, excludeId?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Ensures that the event title is unique.\nExample :await eventsService.ensureTitleUnique('New Event');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTitle of the event.\n\n\n                                            \n                                        \n                                        \n                                                excludeId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional ID to exclude from the uniqueness check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllFiltered\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllFiltered(paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Retrieves events with pagination and filtering.\nExample :const result = await eventsService.findAllFiltered(paginationFilterDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filtering data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered events and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllValues\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllValues()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Retrieves all event values.\nExample :const events = await eventsService.findAllValues();\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nAll events with selected values.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findEventById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEventById(eventId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Finds an event by its ID.\nExample :const event = await eventsService.findEventById(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:113\n                        \n                    \n\n\n            \n                \n                        Retrieves a single event by its ID.\nExample :const event = await eventsService.findOne(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found event.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Deletes an event by its ID.\nExample :const message = await eventsService.remove(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nConfirmation message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateEventDto: UpdateEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Updates an existing event.\nExample :const updatedEvent = await eventsService.update(1, updateEventDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the event to update.\n\n\n                                            \n                                        \n                                        \n                                                updateEventDto\n                                            \n                                                            UpdateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing updated event details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated event.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        CACHE_TTL_ONE_HOUR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 360\n                    \n                \n                    \n                        \n                                Defined in src/modules/events/events.service.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { RedisService } from '@database/redis/redis.service';\nimport { Event } from './entities/event.entity';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { UpdateEventDto } from './dto/update-event.dto';\nimport { ConvertUtilsService } from '@utils/services/convert-utils.service';\nimport { EventPricesService } from './event-prices.service';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Service to manage events.\n * @class\n */\n@Injectable()\nexport class EventsService {\n  private static readonly CACHE_TTL_ONE_HOUR: number = 360; // TTL 360 seconds\n\n  constructor(\n    @InjectRepository(Event) private eventRepository: Repository,\n    private readonly redisService: RedisService,\n    private readonly eventPricesService: EventPricesService,\n    private readonly convertUtilsService: ConvertUtilsService,\n    private readonly queryHelper: QueryHelperService\n  ) {}\n\n  /**\n   * Creates a new event.\n   *\n   * @param {CreateEventDto} createEventDto - DTO containing event details.\n   * @returns {Promise} - The created event.\n   *\n   * @throws {ConflictException} If an event with the same title already exists.\n   *\n   * @example\n   * const event = await eventsService.create(createEventDto);\n   */\n  async create(createEventDto: CreateEventDto): Promise {\n    const startDate = this.convertUtilsService.convertDateStringToDate(createEventDto.startDate);\n    const endDate = this.convertUtilsService.convertDateStringToDate(createEventDto.endDate);\n    await this.ensureTitleUnique(createEventDto.title);\n    const event: Event = this.eventRepository.create({\n      ...createEventDto,\n      startDate,\n      endDate\n    });\n    await this.eventRepository.save(event);\n    await this.eventPricesService.createEventPrices(event.eventId, event.basePrice);\n    await this.redisService.clearCacheEvent();\n    return event;\n  }\n\n  /**\n   * Retrieves all event values.\n   *\n   * @returns {Promise} - All events with selected values.\n   *\n   * @example\n   * const events = await eventsService.findAllValues();\n   */\n  async findAllValues(): Promise {\n    return this.eventRepository.find({\n      select: {\n        quantityAvailable: true,\n        quantitySold: true,\n        revenueGenerated: true\n      }\n    });\n  }\n\n  /**\n   * Retrieves events with pagination and filtering.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filtering data.\n   * @returns {Promise} - The filtered events and total count.\n   *\n   * @throws {InternalServerErrorException} If an error occurs while retrieving events.\n   *\n   * @example\n   * const result = await eventsService.findAllFiltered(paginationFilterDto);\n   */\n  async findAllFiltered(\n    paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    const queryOptions = this.queryHelper.buildQueryOptions(paginationFilterDto);\n\n    try {\n      const [events, total] = await this.eventRepository.findAndCount(queryOptions);\n      return { events, total };\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to retrieve events', error.message);\n    }\n  }\n\n  /**\n   * Retrieves a single event by its ID.\n   *\n   * @param {number} id - ID of the event.\n   * @returns {Promise} - The found event.\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @example\n   * const event = await eventsService.findOne(1);\n   */\n  async findOne(id: number): Promise {\n    const event = await this.redisService.fetchCachedData(\n      `event_${id}`,\n      () => this.eventRepository.findOneBy({ eventId: id }),\n      EventsService.CACHE_TTL_ONE_HOUR\n    );\n    if (!event) throw new NotFoundException(`Event with id ${id} not found`);\n    return event;\n  }\n\n  /**\n   * Updates an existing event.\n   *\n   * @param {number} id - ID of the event to update.\n   * @param {UpdateEventDto} updateEventDto - DTO containing updated event details.\n   * @returns {Promise} - The updated event.\n   *\n   * @throws {ConflictException} If an event with the new title already exists.\n   * @throws {NotFoundException} If the event to update is not found.\n   *\n   * @example\n   * const updatedEvent = await eventsService.update(1, updateEventDto);\n   */\n  async update(id: number, updateEventDto: UpdateEventDto): Promise {\n    const event = await this.findOne(id);\n    if (updateEventDto.title && updateEventDto.title !== event.title) {\n      await this.ensureTitleUnique(updateEventDto.title, id);\n    }\n    if (updateEventDto.basePrice !== undefined && updateEventDto.basePrice !== event.basePrice) {\n      await this.eventPricesService.updateEventPrices(event.eventId, updateEventDto.basePrice);\n    }\n\n    Object.assign(event, updateEventDto, { updatedAt: new Date() });\n\n    await this.redisService.clearCacheEvent(id);\n    await this.eventRepository.save(event);\n    return event;\n  }\n\n  /**\n   * Deletes an event by its ID.\n   *\n   * @param {number} id - ID of the event to delete.\n   * @returns {Promise} - Confirmation message.\n   *\n   * @throws {NotFoundException} If the event to delete is not found.\n   *\n   * @example\n   * const message = await eventsService.remove(1);\n   */\n  async remove(id: number): Promise {\n    const event = await this.findOne(id);\n    await this.eventPricesService.deleteEventPrices(id);\n    await this.eventRepository.remove(event);\n    await this.redisService.clearCacheEvent(id);\n    return 'Event deleted successfully.';\n  }\n\n  /**\n   * Ensures that the event title is unique.\n   *\n   * @param {string} title - Title of the event.\n   * @param {number} [excludeId] - Optional ID to exclude from the uniqueness check.\n   * @returns {Promise}\n   *\n   * @throws {ConflictException} If an event with the same title already exists.\n   *\n   * @private\n   *\n   * @example\n   * await eventsService.ensureTitleUnique('New Event');\n   */\n  private async ensureTitleUnique(title: string, excludeId?: number): Promise {\n    const existingEvent = await this.eventRepository.findOneBy({ title });\n    if (existingEvent && existingEvent.eventId !== excludeId) {\n      throw new ConflictException('An event with this title already exists.');\n    }\n  }\n\n  /**\n   * Finds an event by its ID.\n   *\n   * @param {number} eventId - ID of the event.\n   * @returns {Promise} - The found event.\n   *\n   * @throws {NotFoundException} If the event is not found.\n   *\n   * @example\n   * const event = await eventsService.findEventById(1);\n   */\n  async findEventById(eventId: number): Promise {\n    const event = await this.eventRepository.findOneBy({ eventId });\n    if (!event) throw new NotFoundException(`Event with ID ${eventId} not found.`);\n    return event;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/globals-filter/http-exceptions-filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception filter to handle HTTP exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/globals-filter/http-exceptions-filter.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(HttpExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/globals-filter/http-exceptions-filter.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/globals-filter/http-exceptions-filter.ts:33\n                        \n                    \n\n\n            \n                \n                        Method to catch and handle HTTP exceptions.\nExample :throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe caught HTTP exception.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe context for the caught exception.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  BadRequestException,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  Logger\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { NODE_ENV, PROD_ENV } from '@utils/constants/constants.env';\nimport { Request, Response } from 'express';\n\n/**\n * Exception filter to handle HTTP exceptions.\n * @class\n * @implements {ExceptionFilter}\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger: Logger = new Logger(HttpExceptionFilter.name);\n\n  constructor(private configService: ConfigService) {}\n\n  /**\n   * Method to catch and handle HTTP exceptions.\n   *\n   * @param {HttpException} exception - The caught HTTP exception.\n   * @param {ArgumentsHost} host - The context for the caught exception.\n   *\n   * @example\n   * throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n   */\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const isNotProd = this.configService.get(NODE_ENV) !== PROD_ENV;\n\n    let responseMessage = exception.getResponse();\n    let detailedErrors = {};\n\n    // Check if the exception is a BadRequestException and extract detailed errors\n    if (exception instanceof BadRequestException && isNotProd) {\n      detailedErrors = (responseMessage as any).message;\n      responseMessage = 'Validation failed'; // General message\n    }\n\n    // Construct the error response object.\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      message: responseMessage\n    };\n\n    // Include additional debugging information in non-production environments.\n    if (isNotProd) {\n      errorResponse['path'] = request.url;\n      errorResponse['method'] = request.method;\n      errorResponse['stack'] = exception.stack;\n      errorResponse['errorDetails'] = detailedErrors;\n    }\n\n    this.logger.error(\n      `Http Status: ${status}, Exception Message: ${exception.message}, Details: ${JSON.stringify(detailedErrors)}`\n    );\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/id.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for validating an ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/id.dto.ts:20\n                        \n                    \n\n            \n                \n                    The ID to be validated.\nExample :const idDto = new IdDto();\nidDto.id = 1;\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsPositive } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for validating an ID.\n * @class\n */\nexport class IdDto {\n  /**\n   * The ID to be validated.\n   *\n   * @type {number}\n   * @readonly\n   *\n   * @example\n   * const idDto = new IdDto();\n   * idDto.id = 1;\n   */\n  @IsInt()\n  @IsPositive()\n  readonly id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidCredentialsException.html":{"url":"classes/InvalidCredentialsException.html","title":"class - InvalidCredentialsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidCredentialsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/invalid-credentials.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom exception for invalid login credentials.\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/invalid-credentials.exception.ts:8\n                            \n                        \n\n                \n                    \n                            Constructs a new InvalidCredentialsException.\nExample :throw new InvalidCredentialsException();\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * Custom exception for invalid login credentials.\n * @class\n * @extends {HttpException}\n */\nexport class InvalidCredentialsException extends HttpException {\n  /**\n   * Constructs a new InvalidCredentialsException.\n   *\n   * @example\n   * throw new InvalidCredentialsException();\n   */\n\n  // Make it in french\n  constructor() {\n    super('Identifiants invalides', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsCreatorGuard.html":{"url":"guards/IsCreatorGuard.html","title":"guard - IsCreatorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsCreatorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/security/guards/is-creator.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard to check if the current user is the creator of the content.\nExample :\\@UseGuards(IsCreatorGuard)\n\\@Patch(':id')\nupdateContent(@Param('id') id: string, @Body() updateContentDto: UpdateContentDto) {\n  // Update content logic here\n}\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/security/guards/is-creator.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/guards/is-creator.guard.ts:28\n                        \n                    \n\n\n            \n                \n                        Method to determine if the current user can activate the route.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nWhether the user can activate the route.\n\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, NotFoundException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n/**\n * Guard to check if the current user is the creator of the content.\n * @class\n * @implements {CanActivate}\n *\n * @example\n * \\@UseGuards(IsCreatorGuard)\n * \\@Patch(':id')\n * updateContent(@Param('id') id: string, @Body() updateContentDto: UpdateContentDto) {\n *   // Update content logic here\n * }\n */\n@Injectable()\nexport class IsCreatorGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * Method to determine if the current user can activate the route.\n   *\n   * @param {ExecutionContext} context - The execution context.\n   * @returns {boolean} - Whether the user can activate the route.\n   *\n   * @throws {NotFoundException} If the user is not the creator of the content.\n   */\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const contentOwnerId = +request.params.id;\n\n    // Check if the current user ID matches the content owner's ID.\n    const isCreator = user && user.userId === contentOwnerId;\n    if (!isCreator) {\n      throw new NotFoundException(`Content not found or access unauthorized.`);\n    }\n\n    // Optionally add isCreator flag to the request object for further use.\n    request.isCreator = isCreator;\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTTokens.html":{"url":"interfaces/JWTTokens.html","title":"interface - JWTTokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JWTTokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/jwt.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing JWT tokens.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The access token.\nExample :const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Expiration time of the token in seconds (optional).\nExample :const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456', expiresIn: 3600 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The refresh token.\nExample :const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * Subject identifier (usually the user ID).\n   * @type {number}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'user', version: 1 };\n   */\n  sub: number;\n\n  /**\n   * Role of the user.\n   * @type {string}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'admin', version: 1 };\n   */\n  role: string;\n\n  /**\n   * Version of the token.\n   * @type {number}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'user', version: 2 };\n   */\n  version: number;\n}\n\n/**\n * Interface representing JWT tokens.\n *\n * @interface JWTTokens\n */\nexport interface JWTTokens {\n  /**\n   * The access token.\n   * @type {string}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n   */\n  accessToken: string;\n\n  /**\n   * The refresh token.\n   * @type {string}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n   */\n  refreshToken: string;\n\n  /**\n   * Expiration time of the token in seconds (optional).\n   * @type {number}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456', expiresIn: 3600 };\n   */\n  expiresIn?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/jwt.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the payload of a JWT.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Role of the user.\nExample :const payload: JwtPayload = { sub: 1, role: 'admin', version: 1 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Subject identifier (usually the user ID).\nExample :const payload: JwtPayload = { sub: 1, role: 'user', version: 1 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Version of the token.\nExample :const payload: JwtPayload = { sub: 1, role: 'user', version: 2 };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * Subject identifier (usually the user ID).\n   * @type {number}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'user', version: 1 };\n   */\n  sub: number;\n\n  /**\n   * Role of the user.\n   * @type {string}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'admin', version: 1 };\n   */\n  role: string;\n\n  /**\n   * Version of the token.\n   * @type {number}\n   *\n   * @example\n   * const payload: JwtPayload = { sub: 1, role: 'user', version: 2 };\n   */\n  version: number;\n}\n\n/**\n * Interface representing JWT tokens.\n *\n * @interface JWTTokens\n */\nexport interface JWTTokens {\n  /**\n   * The access token.\n   * @type {string}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n   */\n  accessToken: string;\n\n  /**\n   * The refresh token.\n   * @type {string}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456' };\n   */\n  refreshToken: string;\n\n  /**\n   * Expiration time of the token in seconds (optional).\n   * @type {number}\n   *\n   * @example\n   * const tokens: JWTTokens = { accessToken: 'abc123', refreshToken: 'def456', expiresIn: 3600 };\n   */\n  expiresIn?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/KeyValuePairs.html":{"url":"interfaces/KeyValuePairs.html","title":"interface - KeyValuePairs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  KeyValuePairs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/key-value-redis.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing a collection of key-value pairs.\nExample :const data: KeyValuePairs = { key1: 'value1', key2: 42, key3: { nestedKey: 'nestedValue' } };\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/common/interfaces/key-value-redis.interface.ts:8\n                            \n                        \n                \n                    \n                        A key-value pair where the key is a string and the value can be of any type.\nExample :const data: KeyValuePairs = { key1: 'value1', key2: 42, key3: { nestedKey: 'nestedValue' } };\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        export interface KeyValuePairs {\n  /**\n   * A key-value pair where the key is a string and the value can be of any type.\n   * @type {any}\n   *\n   * @example\n   * const data: KeyValuePairs = { key1: 'value1', key2: 42, key3: { nestedKey: 'nestedValue' } };\n   */\n  [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDTO.html":{"url":"classes/LoginDTO.html","title":"class - LoginDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for user login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:21\n                        \n                    \n\n            \n                \n                    Email address of the user.\nThis field is required and must be a valid email address.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:33\n                        \n                    \n\n            \n                \n                    Password of the user.\nThis field is required and must not be empty.\nExample :```html\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for user login.\n *\n * @class\n */\nexport class LoginDTO {\n  /**\n   * Email address of the user.\n   * This field is required and must be a valid email address.\n   * @type {string}\n   * @isNotEmpty\n   * @isEmail\n   *\n   * @example\n   * const dto: LoginDTO = { email: 'john.doe@example.com', password: 'password123' };\n   */\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password of the user.\n   * This field is required and must not be empty.\n   * @type {string}\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: LoginDTO = { email: 'john.doe@example.com', password: 'password123' };\n   */\n  @IsNotEmpty()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationAndFilterDto.html":{"url":"classes/PaginationAndFilterDto.html","title":"class - PaginationAndFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationAndFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for pagination and filtering.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                filterBy\n                            \n                            \n                                    \n                                    Readonly\n                                filterValue\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                offset\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                sortBy\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                sortOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        filterBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:77\n                        \n                    \n\n            \n                \n                    The field to filter by.\nExample :paginationAndFilterDto.filterBy = 'status';\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        filterValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:89\n                        \n                    \n\n            \n                \n                    The value to filter by.\nExample :paginationAndFilterDto.filterValue = 'active';\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:23\n                        \n                    \n\n            \n                \n                    The maximum number of items to return.\nExample :paginationAndFilterDto.limit = 10;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:38\n                        \n                    \n\n            \n                \n                    The number of items to skip.\nExample :paginationAndFilterDto.offset = 20;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:51\n                        \n                    \n\n            \n                \n                    The field to sort by.\nExample :paginationAndFilterDto.sortBy = 'name';\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        sortOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortOrder\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(SortOrder)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination.dto.ts:64\n                        \n                    \n\n            \n                \n                    The order to sort by.\nExample :paginationAndFilterDto.sortOrder = SortOrder.ASC;\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SortOrder } from '@common/enums/sort-order.enum';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsInt, Min, IsString, IsEnum } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for pagination and filtering.\n * @class\n */\nexport class PaginationAndFilterDto {\n  /**\n   * The maximum number of items to return.\n   *\n   * @type {number}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.limit = 10;\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Min(0)\n  readonly limit: number;\n\n  /**\n   * The number of items to skip.\n   *\n   * @type {number}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.offset = 20;\n   */\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  @Min(0)\n  readonly offset: number;\n\n  /**\n   * The field to sort by.\n   *\n   * @type {string}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.sortBy = 'name';\n   */\n  @IsOptional()\n  @IsString()\n  readonly sortBy: string;\n\n  /**\n   * The order to sort by.\n   *\n   * @type {SortOrder}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.sortOrder = SortOrder.ASC;\n   */\n  @IsOptional()\n  @IsEnum(SortOrder)\n  readonly sortOrder: SortOrder;\n\n  /**\n   * The field to filter by.\n   *\n   * @type {string}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.filterBy = 'status';\n   */\n  @IsOptional()\n  @IsString()\n  readonly filterBy: string;\n\n  /**\n   * The value to filter by.\n   *\n   * @type {string | number}\n   * @readonly\n   * @optional\n   * @example\n   * paginationAndFilterDto.filterValue = 'active';\n   */\n  @IsOptional()\n  readonly filterValue: string | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the payload of a JWT.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Role of the user.\nExample :const payload: Payload = { sub: 1, role: UserRole.ADMIN, version: 1 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Subject identifier (usually the user ID).\nExample :const payload: Payload = { sub: 1, role: UserRole.USER, version: 1 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Version of the token.\nExample :const payload: Payload = { sub: 1, role: UserRole.USER, version: 2 };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UserRole } from '@common/enums/user-role.enum';\n\n/**\n * Interface representing the payload of a JWT.\n *\n * @interface Payload\n */\nexport interface Payload {\n  /**\n   * Subject identifier (usually the user ID).\n   * @type {number}\n   *\n   * @example\n   * const payload: Payload = { sub: 1, role: UserRole.USER, version: 1 };\n   */\n  sub: number;\n\n  /**\n   * Role of the user.\n   * @type {UserRole}\n   *\n   * @example\n   * const payload: Payload = { sub: 1, role: UserRole.ADMIN, version: 1 };\n   */\n  role: UserRole;\n\n  /**\n   * Version of the token.\n   * @type {number}\n   *\n   * @example\n   * const payload: Payload = { sub: 1, role: UserRole.USER, version: 2 };\n   */\n  version: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_exports\n\n\n\ncluster_PaymentModule_imports\n\n\n\ncluster_PaymentModule_providers\n\n\n\n\nReservationsModule\n\nReservationsModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nReservationsModule->PaymentModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nPaymentModule -->\n\nTicketsModule->PaymentModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nPaymentModule -->\n\nTransactionsModule->PaymentModule\n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nPaymentModule->PaymentService \n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/libs/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ReservationsModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            TransactionsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '@modules/users/entities/user.entity';\nimport { PaymentService } from './payment.service';\nimport { ReservationsModule } from '@modules/reservations/reservations.module';\nimport { TransactionsModule } from '@modules/transactions/transactions.module';\nimport { TicketsModule } from '@modules/tickets/tickets.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    ReservationsModule,\n    TransactionsModule,\n    TicketsModule\n  ],\n  providers: [PaymentService],\n  exports: [PaymentService]\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaymentResult.html":{"url":"interfaces/PaymentResult.html","title":"interface - PaymentResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaymentResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/payment.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the result of a payment.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            detail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            paymentId\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        detail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        detail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Detailed message about the payment result.\nExample :const paymentResult: PaymentResult = { status: StatusReservation.FAILED, detail: 'Insufficient funds' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paymentId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paymentId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Identifier for the payment (optional).\nExample :const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         StatusReservation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StatusReservation\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Status of the payment.\nExample :const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StatusReservation } from '@common/enums/status-reservation.enum';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\n\n/**\n * Interface representing the result of a payment.\n *\n * @interface PaymentResult\n */\nexport interface PaymentResult {\n  /**\n   * Status of the payment.\n   * @type {StatusReservation}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n   */\n  status: StatusReservation;\n\n  /**\n   * Detailed message about the payment result.\n   * @type {string}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.FAILED, detail: 'Insufficient funds' };\n   */\n  detail: string;\n\n  /**\n   * Identifier for the payment (optional).\n   * @type {number}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n   */\n  paymentId?: number;\n}\n\n/**\n * Interface representing the response after processing a payment.\n *\n * @interface ProcessPaymentResponse\n */\nexport interface ProcessPaymentResponse {\n  /**\n   * Status of the payment process.\n   * @type {StatusReservation}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [] };\n   */\n  status: StatusReservation;\n\n  /**\n   * Detailed message about the payment process result.\n   * @type {string}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.FAILED, detail: 'Payment failed, no reservations made' };\n   */\n  detail: string;\n\n  /**\n   * List of reservations associated with the payment (optional).\n   * @type {Reservation[]}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [reservation1, reservation2] };\n   */\n  reservations?: Reservation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/libs/payment/payment.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle payment processing.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                SUCCESS_RATE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                processPayment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    processPayment(cartTotal: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/libs/payment/payment.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Processes a payment based on the total amount in the cart.\nExample :const paymentResult = await paymentService.processPayment(100);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartTotal\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe total amount in the shopping cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe result of the payment processing.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        SUCCESS_RATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0.8\n                    \n                \n                    \n                        \n                                Defined in src/libs/payment/payment.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PaymentResult } from '@common/interfaces/payment.interface';\nimport { StatusReservation } from '@common/enums/status-reservation.enum';\n\n/**\n * Service to handle payment processing.\n * @class\n */\n@Injectable()\nexport class PaymentService {\n  private readonly SUCCESS_RATE = 0.8; // Probability of payment success\n\n  /**\n   * Processes a payment based on the total amount in the cart.\n   *\n   * @param {number} cartTotal - The total amount in the shopping cart.\n   * @returns {Promise} - The result of the payment processing.\n   *\n   * @example\n   * const paymentResult = await paymentService.processPayment(100);\n   */\n  async processPayment(cartTotal: number): Promise {\n    const random = Math.random(); // Generate a random number between 0 and 1\n\n    // If the cart total is zero, reject the payment\n    if (cartTotal === 0) {\n      return {\n        status: StatusReservation.REJECTED,\n        detail: 'No items found in the cart to process.'\n      };\n    }\n\n    // Approve or reject the payment based on the success rate\n    if (random \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProcessPaymentResponse.html":{"url":"interfaces/ProcessPaymentResponse.html","title":"interface - ProcessPaymentResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProcessPaymentResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/payment.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the response after processing a payment.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            detail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            reservations\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        detail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        detail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Detailed message about the payment process result.\nExample :const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.FAILED, detail: 'Payment failed, no reservations made' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reservations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reservations:         Reservation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Reservation[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of reservations associated with the payment (optional).\nExample :const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [reservation1, reservation2] };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         StatusReservation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StatusReservation\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Status of the payment process.\nExample :const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [] };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StatusReservation } from '@common/enums/status-reservation.enum';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\n\n/**\n * Interface representing the result of a payment.\n *\n * @interface PaymentResult\n */\nexport interface PaymentResult {\n  /**\n   * Status of the payment.\n   * @type {StatusReservation}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n   */\n  status: StatusReservation;\n\n  /**\n   * Detailed message about the payment result.\n   * @type {string}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.FAILED, detail: 'Insufficient funds' };\n   */\n  detail: string;\n\n  /**\n   * Identifier for the payment (optional).\n   * @type {number}\n   *\n   * @example\n   * const paymentResult: PaymentResult = { status: StatusReservation.PAID, detail: 'Payment successful', paymentId: 12345 };\n   */\n  paymentId?: number;\n}\n\n/**\n * Interface representing the response after processing a payment.\n *\n * @interface ProcessPaymentResponse\n */\nexport interface ProcessPaymentResponse {\n  /**\n   * Status of the payment process.\n   * @type {StatusReservation}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [] };\n   */\n  status: StatusReservation;\n\n  /**\n   * Detailed message about the payment process result.\n   * @type {string}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.FAILED, detail: 'Payment failed, no reservations made' };\n   */\n  detail: string;\n\n  /**\n   * List of reservations associated with the payment (optional).\n   * @type {Reservation[]}\n   *\n   * @example\n   * const paymentResponse: ProcessPaymentResponse = { status: StatusReservation.PAID, detail: 'Payment and reservation successful', reservations: [reservation1, reservation2] };\n   */\n  reservations?: Reservation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueryHelperService.html":{"url":"injectables/QueryHelperService.html","title":"injectable - QueryHelperService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueryHelperService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/query/query-helper.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to build query options for database operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildQueryOptions\n                            \n                            \n                                    Private\n                                buildWhereCondition\n                            \n                            \n                                createNestedOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildQueryOptions\n                        \n                    \n                \n            \n            \n                \nbuildQueryOptions(paginationFilterDto: PaginationAndFilterDto, limitPut?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/query/query-helper.service.ts:22\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TypeEntity\n                            \n                        \n                    \n\n            \n                \n                        Constructs query options for pagination, sorting, and filtering.\nExample :const options = queryHelperService.buildQueryOptions(paginationDto, 20);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination, sorting, and filtering data.\n\n\n                                            \n                                        \n                                        \n                                                limitPut\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional limit override.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     FindManyOptions\n\n                        \n                            \n                                \nThe constructed query options.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildWhereCondition\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildWhereCondition(filterBy?: string, filterValue?: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/query/query-helper.service.ts:56\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TypeEntity\n                            \n                        \n                    \n\n            \n                \n                        Constructs the where condition for filtering.\nExample :const where = queryHelperService.buildWhereCondition('name', 'John');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filterBy\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nField to filter by.\n\n\n                                            \n                                        \n                                        \n                                                filterValue\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nValue to filter by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     FindOptionsWhere\n\n                        \n                            \n                                \nThe constructed where condition.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createNestedOrder\n                        \n                    \n                \n            \n            \n                \ncreateNestedOrder(sortBy: string, sortOrder: \"ASC\" | \"DESC\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/query/query-helper.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Creates nested order conditions for sorting.\nExample :const order = queryHelperService.createNestedOrder('address.city', 'ASC');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sortBy\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nField to sort by, can be nested.\n\n\n                                            \n                                        \n                                        \n                                                sortOrder\n                                            \n                                                        \"ASC\" | \"DESC\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOrder direction (ascending or descending).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         object\n\n                        \n                            \n                                \nThe constructed order condition.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { SortOrder } from '@common/enums/sort-order.enum';\nimport { Injectable } from '@nestjs/common';\nimport { FindManyOptions, FindOptionsWhere } from 'typeorm';\n\n/**\n * Service to build query options for database operations.\n * @class\n */\n@Injectable()\nexport class QueryHelperService {\n  /**\n   * Constructs query options for pagination, sorting, and filtering.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination, sorting, and filtering data.\n   * @param {number} [limitPut] - Optional limit override.\n   * @returns {FindManyOptions} - The constructed query options.\n   *\n   * @example\n   * const options = queryHelperService.buildQueryOptions(paginationDto, 20);\n   */\n  buildQueryOptions(\n    paginationFilterDto: PaginationAndFilterDto,\n    limitPut?: number\n  ): FindManyOptions {\n    const {\n      limit = limitPut || 10, // Default limit if not provided\n      offset, // Number of records to skip\n      sortBy, // Field to sort by\n      sortOrder = SortOrder.ASC, // Default sort order\n      filterBy, // Field to filter by\n      filterValue // Value to filter by\n    } = paginationFilterDto;\n\n    const whereCondition = this.buildWhereCondition(filterBy, filterValue);\n    const orderCondition = sortBy ? this.createNestedOrder(sortBy, sortOrder) : {};\n\n    return {\n      where: whereCondition,\n      order: orderCondition,\n      skip: offset,\n      take: limit\n    };\n  }\n\n  /**\n   * Constructs the where condition for filtering.\n   *\n   * @param {string} [filterBy] - Field to filter by.\n   * @param {string | number} [filterValue] - Value to filter by.\n   * @returns {FindOptionsWhere} - The constructed where condition.\n   *\n   * @example\n   * const where = queryHelperService.buildWhereCondition('name', 'John');\n   */\n  private buildWhereCondition(\n    filterBy?: string,\n    filterValue?: string | number\n  ): FindOptionsWhere {\n    let whereCondition: FindOptionsWhere = {};\n\n    if (filterBy && filterValue && filterValue !== 'ALL') {\n      const nestedFields = filterBy.split('.');\n      let currentField = whereCondition;\n      nestedFields.forEach((field, index) => {\n        if (index === nestedFields.length - 1) {\n          currentField[field] = filterValue;\n        } else {\n          currentField[field] = {};\n          currentField = currentField[field];\n        }\n      });\n    }\n    return whereCondition;\n  }\n\n  /**\n   * Creates nested order conditions for sorting.\n   *\n   * @param {string} sortBy - Field to sort by, can be nested.\n   * @param {'ASC' | 'DESC'} sortOrder - Order direction (ascending or descending).\n   * @returns {object} - The constructed order condition.\n   *\n   * @example\n   * const order = queryHelperService.createNestedOrder('address.city', 'ASC');\n   */\n  createNestedOrder(sortBy: string, sortOrder: 'ASC' | 'DESC'): object {\n    const orderParts = sortBy.split('.');\n    const order = {};\n    let currentPart = order;\n    orderParts.forEach((part, index) => {\n      if (index === orderParts.length - 1) {\n        currentPart[part] = sortOrder;\n      } else {\n        currentPart[part] = {};\n        currentPart = currentPart[part];\n      }\n    });\n    return order;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_RedisModule_exports\n\n\n\n\nREDIS_CLIENT \n\nREDIS_CLIENT \n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nREDIS_CLIENT  -->\n\nRedisModule->REDIS_CLIENT \n\n\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/redis/redis.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to set up and configure Redis client and Redis service.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            REDIS_CLIENT\n                        \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RedisService } from './redis.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport Redis from 'ioredis';\n\n/**\n * Module to set up and configure Redis client and Redis service.\n * @module\n */\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    /**\n     * Provides the Redis client instance.\n     *\n     * @remarks\n     * The Redis client is configured using environment variables accessed through ConfigService.\n     *\n     * @example\n     * {\n     *   provide: 'REDIS_CLIENT',\n     *   useFactory: async (configService: ConfigService) =>\n     *     new Redis({\n     *       host: configService.get('REDIS_HOST'),\n     *       port: configService.get('REDIS_PORT'),\n     *       password: configService.get('REDIS_PASSWORD')\n     *     }),\n     *   inject: [ConfigService]\n     * }\n     */\n    {\n      provide: 'REDIS_CLIENT',\n      useFactory: async (configService: ConfigService) =>\n        new Redis({\n          host: configService.get('REDIS_HOST'), // Redis server host\n          port: configService.get('REDIS_PORT'), // Redis server port\n          password: configService.get('REDIS_PASSWORD') // Redis server password\n        }),\n      inject: [ConfigService]\n    },\n    RedisService\n  ],\n  exports: ['REDIS_CLIENT', RedisService]\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/redis/redis.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with Redis for caching purposes.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCacheEvent\n                            \n                            \n                                    Async\n                                del\n                            \n                            \n                                    Async\n                                fetchCachedData\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Private\n                                safeParse\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisClient: Redis)\n                    \n                \n                        \n                            \n                                Defined in src/database/redis/redis.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        redisClient\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Redis client instance injected via dependency injection.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearCacheEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearCacheEvent(eventId?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Clear cache for a specific event or all events.\nExample :await redisService.clearCacheEvent(123);\nawait redisService.clearCacheEvent();\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional event ID to clear specific cache.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                        \n                    del(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Delete a key from Redis.\nExample :await redisService.del('user:1');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to delete from Redis.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nConfirmation message after deleting the key.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        fetchCachedData\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchCachedData(key: string, fetchFn: () => void, TTL: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:109\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Fetch data from Redis cache or execute a function to retrieve data and cache it.\nExample :const data = await redisService.fetchCachedData('user:1', fetchUserFromDb, 3600);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to fetch from cache.\n\n\n                                            \n                                        \n                                        \n                                                fetchFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe function to execute if data is not found in cache.\n\n\n                                            \n                                        \n                                        \n                                                TTL\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTime To Live for the cached data in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe fetched or cached data.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Get a value from Redis by key.\nExample :const value = await redisService.get('user:1');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to retrieve from Redis.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe value associated with the key, or null if not found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        safeParse\n                        \n                    \n                \n            \n            \n                \n                        \n                    safeParse(jsonString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:129\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Safely parse a JSON string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jsonString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JSON string to parse.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \nThe parsed object.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: any, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/redis/redis.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Set a key-value pair in Redis with optional TTL (Time To Live).\nExample :await redisService.set('user:1', { name: 'John' }, 3600);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to set in Redis.\n\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value to set, will be stringified if not a string.\n\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional TTL in seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nConfirmation message after setting the key.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(RedisService.name)\n                    \n                \n                    \n                        \n                                Defined in src/database/redis/redis.service.ts:19\n                        \n                    \n\n            \n                \n                    Logger instance from NestJS.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger, InternalServerErrorException } from '@nestjs/common';\nimport Redis from 'ioredis';\n\n/**\n * Service to interact with Redis for caching purposes.\n * @class\n */\n@Injectable()\nexport class RedisService {\n  /**\n   * Logger instance from NestJS.\n   *\n   * @private\n   * @readonly\n   * @type {Logger}\n   * @memberof RedisService\n   * @default new Logger(RedisService.name)\n   */\n  private readonly logger: Logger = new Logger(RedisService.name);\n\n  /**\n   * @param {Redis} redisClient - The Redis client instance injected via dependency injection.\n   */\n  constructor(@Inject('REDIS_CLIENT') private readonly redisClient: Redis) {}\n\n  /**\n   * Set a key-value pair in Redis with optional TTL (Time To Live).\n   *\n   * @param {string} key - The key to set in Redis.\n   * @param {any} value - The value to set, will be stringified if not a string.\n   * @param {number} [ttl] - Optional TTL in seconds.\n   * @returns {Promise} - Confirmation message after setting the key.\n   *\n   * @throws {Error} If the key is not provided.\n   *\n   * @example\n   * await redisService.set('user:1', { name: 'John' }, 3600);\n   */\n  async set(key: string, value: any, ttl?: number): Promise {\n    if (!key) throw new Error('Key is required');\n    const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n    if (typeof ttl === 'number') {\n      await this.redisClient.set(key, stringValue, 'EX', ttl);\n    } else {\n      await this.redisClient.set(key, stringValue);\n    }\n    return `Data set for key: ${key}`;\n  }\n\n  /**\n   * Get a value from Redis by key.\n   *\n   * @param {string} key - The key to retrieve from Redis.\n   * @returns {Promise} - The value associated with the key, or null if not found.\n   *\n   * @throws {Error} If the key is not provided.\n   *\n   * @example\n   * const value = await redisService.get('user:1');\n   */\n  async get(key: string): Promise {\n    if (!key) throw new Error('Key is required');\n\n    try {\n      const value = await this.redisClient.get(key);\n      if (!value) return null;\n      return value;\n    } catch (error) {\n      this.logger.error(`Error retrieving key ${key} from cache`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a key from Redis.\n   *\n   * @param {string} key - The key to delete from Redis.\n   * @returns {Promise} - Confirmation message after deleting the key.\n   *\n   * @throws {Error} If the key is not provided.\n   *\n   * @example\n   * await redisService.del('user:1');\n   */\n  async del(key: string): Promise {\n    if (!key) throw new Error('Key is required');\n\n    const result = await this.redisClient.del(key);\n    if (!result) {\n      this.logger.warn(`Key not found in cache: ${key}`);\n      return `Key not found: ${key}`;\n    }\n    return `Key deleted: ${key}`;\n  }\n\n  /**\n   * Fetch data from Redis cache or execute a function to retrieve data and cache it.\n   *\n   * @param {string} key - The key to fetch from cache.\n   * @param {() => Promise} fetchFn - The function to execute if data is not found in cache.\n   * @param {number} TTL - Time To Live for the cached data in seconds.\n   * @returns {Promise} - The fetched or cached data.\n   *\n   * @template T\n   *\n   * @example\n   * const data = await redisService.fetchCachedData('user:1', fetchUserFromDb, 3600);\n   */\n  async fetchCachedData(key: string, fetchFn: () => Promise, TTL: number): Promise {\n    let data = await this.get(key);\n    if (!data) {\n      const result = await fetchFn();\n      await this.set(key, JSON.stringify(result), TTL);\n      return result;\n    }\n    return this.safeParse(data);\n  }\n\n  /**\n   * Safely parse a JSON string.\n   *\n   * @param {string} jsonString - The JSON string to parse.\n   * @returns {T} - The parsed object.\n   *\n   * @throws {InternalServerErrorException} If parsing fails.\n   *\n   * @template T\n   */\n  private safeParse(jsonString: string): T {\n    try {\n      return JSON.parse(jsonString) as T;\n    } catch (error) {\n      throw new InternalServerErrorException('Error parsing data');\n    }\n  }\n\n  /**\n   * Clear cache for a specific event or all events.\n   *\n   * @param {number} [eventId] - Optional event ID to clear specific cache.\n   * @returns {Promise}\n   *\n   * @example\n   * await redisService.clearCacheEvent(123);\n   * await redisService.clearCacheEvent();\n   */\n  async clearCacheEvent(eventId?: number): Promise {\n    if (eventId) {\n      await this.del(`event_${eventId}`);\n    }\n    await this.del('events_all');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for refreshing a token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/refresh-token.dto.ts:19\n                        \n                    \n\n            \n                \n                    The refresh token.\nThis field is required and must not be empty.\nExample :const dto: RefreshTokenDto = { refreshToken: 'some-refresh-token' };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for refreshing a token.\n *\n * @class\n */\nexport class RefreshTokenDto {\n  /**\n   * The refresh token.\n   * This field is required and must not be empty.\n   * @type {string}\n   * @isNotEmpty\n   *\n   * @example\n   * const dto: RefreshTokenDto = { refreshToken: 'some-refresh-token' };\n   */\n  @IsNotEmpty()\n  readonly refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStoreService.html":{"url":"injectables/RefreshTokenStoreService.html","title":"injectable - RefreshTokenStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/token/refreshtoken-store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage refresh tokens stored in Redis.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                removeRefreshTokenRedis\n                            \n                            \n                                    Async\n                                storeRefreshTokenInRedis\n                            \n                            \n                                    Async\n                                verifyRefreshTokenInRedis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisService: RedisService, convertUtilsService: ConvertUtilsService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/security/token/refreshtoken-store.service.ts:21\n                            \n                        \n\n                \n                    \n                            Creates an instance of RefreshTokenStoreService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with Redis.\n\n\n                                                        \n                                                \n                                                \n                                                        convertUtilsService\n                                                  \n                                                        \n                                                                        ConvertUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to convert values.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to access configuration variables.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeRefreshTokenRedis\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRefreshTokenRedis(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/refreshtoken-store.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Removes a refresh token from Redis.\nExample :await refreshTokenStoreService.removeRefreshTokenRedis(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeRefreshTokenInRedis\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRefreshTokenInRedis(userId: number, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/refreshtoken-store.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Stores a refresh token in Redis with a TTL.\nExample :await refreshTokenStoreService.storeRefreshTokenInRedis(1, 'refreshToken');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe refresh token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyRefreshTokenInRedis\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyRefreshTokenInRedis(userId: number, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/refreshtoken-store.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Verifies a refresh token in Redis.\nExample :const isValid = await refreshTokenStoreService.verifyRefreshTokenInRedis(1, 'refreshToken');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe refresh token to verify.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nWhether the token is valid.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(RefreshTokenStoreService.name)\n                    \n                \n                    \n                        \n                                Defined in src/security/token/refreshtoken-store.service.ts:21\n                        \n                    \n\n            \n                \n                    Logger instance from NestJS.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { RedisService } from '@database/redis/redis.service';\nimport { ConfigService } from '@nestjs/config';\nimport { ConvertUtilsService } from '@utils/services/convert-utils.service';\n\n/**\n * Service to manage refresh tokens stored in Redis.\n * @class\n */\n@Injectable()\nexport class RefreshTokenStoreService {\n  /**\n   * Logger instance from NestJS.\n   *\n   * @private\n   * @readonly\n   * @type {Logger}\n   * @memberof RefreshTokenStoreService\n   * @default new Logger(RefreshTokenStoreService.name)\n   */\n  private readonly logger: Logger = new Logger(RefreshTokenStoreService.name);\n\n  /**\n   * Creates an instance of RefreshTokenStoreService.\n   *\n   * @constructor\n   * @param {RedisService} redisService - Service to interact with Redis.\n   * @param {ConvertUtilsService} convertUtilsService - Service to convert values.\n   * @param {ConfigService} configService - Service to access configuration variables.\n   */\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly convertUtilsService: ConvertUtilsService,\n    private readonly configService: ConfigService\n  ) {}\n\n  /**\n   * Stores a refresh token in Redis with a TTL.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} token - The refresh token.\n   * @returns {Promise}\n   *\n   * @example\n   * await refreshTokenStoreService.storeRefreshTokenInRedis(1, 'refreshToken');\n   */\n  async storeRefreshTokenInRedis(userId: number, token: string): Promise {\n    const ttl = this.convertUtilsService.convertDaysToSeconds(\n      this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION')\n    );\n    await this.redisService.set(`refresh_token_${userId}`, token, ttl);\n    this.logger.log(`Refresh token stored for user ${userId}`);\n  }\n\n  /**\n   * Verifies a refresh token in Redis.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} token - The refresh token to verify.\n   * @returns {Promise} - Whether the token is valid.\n   *\n   * @example\n   * const isValid = await refreshTokenStoreService.verifyRefreshTokenInRedis(1, 'refreshToken');\n   */\n  async verifyRefreshTokenInRedis(userId: number, token: string): Promise {\n    const storedToken = await this.redisService.get(`refresh_token_${userId}`);\n    return storedToken === token;\n  }\n\n  /**\n   * Removes a refresh token from Redis.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise}\n   *\n   * @example\n   * await refreshTokenStoreService.removeRefreshTokenRedis(1);\n   */\n  async removeRefreshTokenRedis(userId: number): Promise {\n    this.logger.log(`Refresh token for user ${userId} removed from Redis`);\n    await this.redisService.del(`refresh_token_${userId}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Reservation.html":{"url":"entities/Reservation.html","title":"entity - Reservation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Reservation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/entities/reservation.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a reservation.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                cartItem\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                reservationDetails\n                            \n                            \n                                    \n                                reservationId\n                            \n                            \n                                    \n                                    \n                                ticket\n                            \n                            \n                                    \n                                    \n                                    \n                                transaction\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        cartItem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, cartItem => cartItem.reservations)@JoinColumn({name: 'cartItemId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:85\n                        \n                    \n\n            \n                \n                    Cart item associated with the reservation.\nExample :const cartItem = reservation.cartItem;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:110\n                        \n                    \n\n            \n                \n                    Timestamp when the reservation was created.\nExample :const createdAt = reservation.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reservationDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReservationDetails\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, reservationDetails => reservationDetails.reservation)@JoinColumn({name: 'reservationDetailsId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:57\n                        \n                    \n\n            \n                \n                    Detailed information of the reservation.\nExample :const details = reservation.reservationDetails;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:30\n                        \n                    \n\n            \n                \n                    Unique identifier for the reservation.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        ticket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ticket\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, ticket => ticket.reservation)@JoinColumn({name: 'ticketId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:98\n                        \n                    \n\n            \n                \n                    Ticket associated with the reservation.\nExample :const ticket = reservation.ticket;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        transaction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Transaction\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, transaction => transaction.reservation)@JoinColumn({name: 'transactionId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:71\n                        \n                    \n\n            \n                \n                    Transaction associated with the reservation.\nExample :const transaction = reservation.transaction;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:122\n                        \n                    \n\n            \n                \n                    Timestamp when the reservation was last updated.\nExample :const updatedAt = reservation.updatedAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, user => user.reservations)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservations/entities/reservation.entity.ts:44\n                        \n                    \n\n            \n                \n                    User associated with the reservation.\nExample :const user = reservation.user;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\nimport { Ticket } from '@modules/tickets/entities/ticket.entity';\nimport { Transaction } from '@modules/transactions/entities/transaction.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToOne,\n  Index\n} from 'typeorm';\n\n/**\n * Entity representing a reservation.\n *\n * @class\n * @entity\n */\n@Entity('reservations')\nexport class Reservation {\n  /**\n   * Unique identifier for the reservation.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  reservationId: number;\n\n  /**\n   * User associated with the reservation.\n   * @type {User}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const user = reservation.user;\n   */\n  @Index()\n  @ManyToOne(() => User, user => user.reservations)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  /**\n   * Detailed information of the reservation.\n   * @type {ReservationDetails}\n   * @oneToOne\n   * @joinColumn\n   *\n   * @example\n   * const details = reservation.reservationDetails;\n   */\n  @OneToOne(() => ReservationDetails, reservationDetails => reservationDetails.reservation)\n  @JoinColumn({ name: 'reservationDetailsId' })\n  reservationDetails: ReservationDetails;\n\n  /**\n   * Transaction associated with the reservation.\n   * @type {Transaction}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const transaction = reservation.transaction;\n   */\n  @Index()\n  @ManyToOne(() => Transaction, transaction => transaction.reservation)\n  @JoinColumn({ name: 'transactionId' })\n  transaction: Transaction;\n\n  /**\n   * Cart item associated with the reservation.\n   * @type {CartItem}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const cartItem = reservation.cartItem;\n   */\n  @Index()\n  @ManyToOne(() => CartItem, cartItem => cartItem.reservations)\n  @JoinColumn({ name: 'cartItemId' })\n  cartItem: CartItem;\n\n  /**\n   * Ticket associated with the reservation.\n   * @type {Ticket}\n   * @oneToOne\n   * @joinColumn\n   *\n   * @example\n   * const ticket = reservation.ticket;\n   */\n  @OneToOne(() => Ticket, ticket => ticket.reservation)\n  @JoinColumn({ name: 'ticketId' })\n  ticket: Ticket;\n\n  /**\n   * Timestamp when the reservation was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = reservation.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the reservation was last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = reservation.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ReservationDetails.html":{"url":"entities/ReservationDetails.html","title":"entity - ReservationDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ReservationDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservation-details/entities/reservation-details.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing the details of a reservation.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                event\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                priceFormula\n                            \n                            \n                                    \n                                    \n                                    \n                                reservation\n                            \n                            \n                                    \n                                reservationDetailsId\n                            \n                            \n                                    \n                                shortDescription\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:114\n                        \n                    \n\n            \n                \n                    Timestamp when the reservation details were created.\nExample :const createdAt = reservationDetails.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, event => event.reservationsDetails, {nullable: false})@JoinColumn({name: 'eventId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:56\n                        \n                    \n\n            \n                \n                    Event associated with the reservation details.\nExample :const event = reservationDetails.event;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:91\n                        \n                    \n\n            \n                \n                    Price of the reservation.\nExample :const price = reservationDetails.price;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priceFormula\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceFormulaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PriceFormulaEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:67\n                        \n                    \n\n            \n                \n                    Pricing formula for the reservation.\nExample :const priceFormula = reservationDetails.priceFormula;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@OneToOne(undefined, reservation => reservation.reservationDetails)@JoinColumn({name: 'reservationId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:42\n                        \n                    \n\n            \n                \n                    Reservation associated with the reservation details.\nExample :const reservation = reservationDetails.reservation;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationDetailsId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:28\n                        \n                    \n\n            \n                \n                    Unique identifier for the reservation details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shortDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:102\n                        \n                    \n\n            \n                \n                    Short description of the reservation details.\nExample :const description = reservationDetails.shortDescription;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:78\n                        \n                    \n\n            \n                \n                    Title of the reservation details.\nExample :const title = reservationDetails.title;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/reservation-details/entities/reservation-details.entity.ts:126\n                        \n                    \n\n            \n                \n                    Timestamp when the reservation details were last updated.\nExample :const updatedAt = reservationDetails.updatedAt;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { PriceFormulaEnum } from '@common/enums/price-formula.enum';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToOne,\n  Index\n} from 'typeorm';\n\n/**\n * Entity representing the details of a reservation.\n *\n * @class\n * @entity\n */\n@Entity('reservation_details')\nexport class ReservationDetails {\n  /**\n   * Unique identifier for the reservation details.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  reservationDetailsId: number;\n\n  /**\n   * Reservation associated with the reservation details.\n   * @type {Reservation}\n   * @oneToOne\n   * @joinColumn\n   *\n   * @example\n   * const reservation = reservationDetails.reservation;\n   */\n  @Index()\n  @OneToOne(() => Reservation, reservation => reservation.reservationDetails)\n  @JoinColumn({ name: 'reservationId' })\n  reservation: Reservation;\n\n  /**\n   * Event associated with the reservation details.\n   * @type {Event}\n   * @manyToOne\n   * @joinColumn\n   * @nullable false\n   *\n   * @example\n   * const event = reservationDetails.event;\n   */\n  @ManyToOne(() => Event, event => event.reservationsDetails, { nullable: false })\n  @JoinColumn({ name: 'eventId' })\n  event: Event;\n\n  /**\n   * Pricing formula for the reservation.\n   * @type {PriceFormulaEnum}\n   * @column\n   *\n   * @example\n   * const priceFormula = reservationDetails.priceFormula;\n   */\n  @Column({ type: 'enum', enum: PriceFormulaEnum })\n  priceFormula: PriceFormulaEnum;\n\n  /**\n   * Title of the reservation details.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const title = reservationDetails.title;\n   */\n  @Column()\n  title: string;\n\n  /**\n   * Price of the reservation.\n   * @type {number}\n   * @column\n   * @precision 10\n   * @scale 2\n   *\n   * @example\n   * const price = reservationDetails.price;\n   */\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  /**\n   * Short description of the reservation details.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const description = reservationDetails.shortDescription;\n   */\n  @Column('text')\n  shortDescription: string;\n\n  /**\n   * Timestamp when the reservation details were created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = reservationDetails.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the reservation details were last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = reservationDetails.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationDetailsModule.html":{"url":"modules/ReservationDetailsModule.html","title":"module - ReservationDetailsModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationDetailsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationDetailsModule\n\n\n\ncluster_ReservationDetailsModule_imports\n\n\n\ncluster_ReservationDetailsModule_providers\n\n\n\n\nCartItemsModule\n\nCartItemsModule\n\n\n\nReservationDetailsModule\n\nReservationDetailsModule\n\nReservationDetailsModule -->\n\nCartItemsModule->ReservationDetailsModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nReservationDetailsModule -->\n\nEventsModule->ReservationDetailsModule\n\n\n\n\n\nReservationDetailsService\n\nReservationDetailsService\n\nReservationDetailsModule -->\n\nReservationDetailsService->ReservationDetailsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/reservation-details/reservation-details.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage reservation details.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReservationDetailsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartItemsModule\n                        \n                        \n                            EventsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReservationDetailsService } from './reservation-details.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { ReservationDetails } from './entities/reservation-details.entity';\nimport { EventsModule } from '@modules/events/events.module';\nimport { CartItemsModule } from '@modules/cart-items/cart-items.module';\n\n/**\n * Module to manage reservation details.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for Event and ReservationDetails entities\n    TypeOrmModule.forFeature([Event, ReservationDetails]),\n    CartItemsModule, // Import CartItemsModule\n    EventsModule // Import EventsModule\n  ],\n  providers: [\n    // Register ReservationDetailsService as a provider\n    ReservationDetailsService\n  ]\n})\nexport class ReservationDetailsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationDetailsService.html":{"url":"injectables/ReservationDetailsService.html","title":"injectable - ReservationDetailsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationDetailsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservation-details/reservation-details.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage reservation details.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createReservationDetailsFromReservation\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationDetailsRepository: Repository, eventRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/reservation-details/reservation-details.service.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of ReservationDetailsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reservationDetailsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the ReservationDetails entity.\n\n\n                                                        \n                                                \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Event entity.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createReservationDetailsFromReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservationDetailsFromReservation(reservation: Reservation, cartItem: CartItem)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservation-details/reservation-details.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Creates reservation details from a reservation and cart item.\nExample :const reservationDetails = await reservationDetailsService.createReservationDetailsFromReservation(reservation, cartItem);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe reservation entity.\n\n\n                                            \n                                        \n                                        \n                                                cartItem\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart item entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe created reservation details.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservation-details/reservation-details.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Finds a reservation detail by its ID.\nExample :const reservationDetails = await reservationDetailsService.findOne(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the reservation detail.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe found reservation detail.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ReservationDetails } from './entities/reservation-details.entity';\nimport { Repository } from 'typeorm';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { CreateReservationDetailsDto } from './dto/create-reservation-details.dto';\nimport { Event } from '@modules/events/entities/event.entity';\n\n/**\n * Service to manage reservation details.\n * @class\n */\n@Injectable()\nexport class ReservationDetailsService {\n  /**\n   * Creates an instance of ReservationDetailsService.\n   *\n   * @constructor\n   * @param {Repository} reservationDetailsRepository - Repository for the ReservationDetails entity.\n   * @param {Repository} eventRepository - Repository for the Event entity.\n   */\n  constructor(\n    @InjectRepository(ReservationDetails)\n    private reservationDetailsRepository: Repository,\n    @InjectRepository(Event)\n    private eventRepository: Repository\n  ) {}\n\n  /**\n   * Creates reservation details from a reservation and cart item.\n   *\n   * @param {Reservation} reservation - The reservation entity.\n   * @param {CartItem} cartItem - The cart item entity.\n   * @returns {Promise} - The created reservation details.\n   *\n   * @throws {NotFoundException} If the event is not found in the cart item or in the repository.\n   *\n   * @example\n   * const reservationDetails = await reservationDetailsService.createReservationDetailsFromReservation(reservation, cartItem);\n   */\n  async createReservationDetailsFromReservation(\n    reservation: Reservation,\n    cartItem: CartItem\n  ): Promise {\n    if (!cartItem.event) {\n      throw new NotFoundException('Event ID is not found in CartItem');\n    }\n\n    const event = await this.eventRepository.findOne({\n      where: { eventId: cartItem.event.eventId }\n    });\n\n    if (!event) {\n      throw new NotFoundException('Event not found');\n    }\n\n    const createReservationDetailsDto: CreateReservationDetailsDto = {\n      title: event.title,\n      shortDescription: event.shortDescription,\n      priceFormula: cartItem.priceFormula,\n      price: cartItem.price\n    };\n\n    const newReservationDetails = this.reservationDetailsRepository.create({\n      ...createReservationDetailsDto,\n      event: { eventId: cartItem.event.eventId },\n      reservation: { reservationId: reservation.reservationId }\n    });\n\n    return await this.reservationDetailsRepository.save(newReservationDetails);\n  }\n\n  /**\n   * Finds a reservation detail by its ID.\n   *\n   * @param {number} id - ID of the reservation detail.\n   * @returns {Promise} - The found reservation detail.\n   *\n   * @throws {NotFoundException} If the reservation detail is not found.\n   *\n   * @example\n   * const reservationDetails = await reservationDetailsService.findOne(1);\n   */\n  async findOne(id: number): Promise {\n    const reservationDetails = await this.reservationDetailsRepository.findOne({\n      where: { reservationDetailsId: id },\n      relations: ['event', 'reservation']\n    });\n    if (!reservationDetails) {\n      throw new NotFoundException(`Reservation details with id ${id} not found`);\n    }\n    return reservationDetails;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReservationsController.html":{"url":"controllers/ReservationsController.html","title":"controller - ReservationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReservationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/reservations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reservations\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage reservations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createReservations\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findAllAdmin\n                            \n                            \n                                    \n                                findAllData\n                            \n                            \n                                    \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createReservations\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservations(userId: number, cartId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:cartId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Creates reservations for a user based on their cart.\nExample :POST /reservations/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user's cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of created reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, paginationDto: PaginationAndFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(IsCreatorGuard)@Get(':id/find-all')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.controller.ts:56\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations for a user with pagination and filtering.\nExample :GET /reservations/1/find-all?page=1&limit=10&sortBy=date&sortOrder=ASC\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered reservations and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAllAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllAdmin(paginationDto: PaginationAndFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RoleGuard)@Role(UserRole.ADMIN)@Get('find-all-admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.controller.ts:75\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations with pagination for admin.\nExample :GET /reservations/find-all-admin?page=1&limit=10\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAllData\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllData(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('find-all-data/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.controller.ts:89\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations for a user.\nExample :GET /reservations/find-all-data/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.controller.ts:104\n                        \n                    \n\n\n            \n                \n                        Retrieves a single reservation by its ID.\nExample :GET /reservations/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the reservation.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found reservation.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Param, UseGuards, Query } from '@nestjs/common';\nimport { ReservationsService } from './reservations.service';\nimport { UserId } from '@common/decorators/user-id.decorator';\nimport { AccessTokenGuard, IsCreatorGuard, RoleGuard } from '@security/guards';\nimport { Role } from '@common/decorators/role.decorator';\nimport { UserRole } from '@common/enums/user-role.enum';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { Reservation } from './entities/reservation.entity';\n\n/**\n * Controller to manage reservations.\n * @class\n */\n@UseGuards(AccessTokenGuard)\n@Controller('reservations')\nexport class ReservationsController {\n  /**\n   * Creates an instance of ReservationsController.\n   *\n   * @constructor\n   * @param {ReservationsService} reservationsService - Service to manage reservations.\n   */\n  constructor(private readonly reservationsService: ReservationsService) {}\n\n  /**\n   * Creates reservations for a user based on their cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the user's cart.\n   * @returns {Promise} - List of created reservations.\n   *\n   * @example\n   * POST /reservations/1\n   */\n  @Post('/:cartId')\n  async createReservations(\n    @UserId() userId: number,\n    @Param('cartId') cartId: number\n  ): Promise {\n    return this.reservationsService.generateReservation(userId, cartId);\n  }\n\n  /**\n   * Retrieves all reservations for a user with pagination and filtering.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {PaginationAndFilterDto} paginationDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered reservations and total count.\n   *\n   * @example\n   * GET /reservations/1/find-all?page=1&limit=10&sortBy=date&sortOrder=ASC\n   */\n\n  @UseGuards(IsCreatorGuard)\n  @Get(':id/find-all')\n  findAll(\n    @Param('id') userId: number,\n    @Query() paginationDto: PaginationAndFilterDto\n  ): Promise {\n    return this.reservationsService.findAll(userId, paginationDto);\n  }\n\n  /**\n   * Retrieves all reservations with pagination for admin.\n   *\n   * @param {PaginationAndFilterDto} paginationDto - DTO containing pagination data.\n   * @returns {Promise} - List of reservations.\n   *\n   * @example\n   * GET /reservations/find-all-admin?page=1&limit=10\n   */\n  @UseGuards(RoleGuard)\n  @Role(UserRole.ADMIN)\n  @Get('find-all-admin')\n  findAllAdmin(@Query() paginationDto: PaginationAndFilterDto): Promise {\n    return this.reservationsService.findAllAdmin(paginationDto);\n  }\n\n  /**\n   * Retrieves all reservations for a user.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - List of reservations.\n   *\n   * @example\n   * GET /reservations/find-all-data/1\n   */\n  @Get('find-all-data/:userId')\n  findAllData(@Param('userId') userId: number): Promise {\n    return this.reservationsService.findAllData(userId);\n  }\n\n  /**\n   * Retrieves a single reservation by its ID.\n   *\n   * @param {string} id - ID of the reservation.\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - The found reservation.\n   *\n   * @example\n   * GET /reservations/1\n   */\n  @Get(':id')\n  findOne(@Param('id') id: string, @UserId() userId: number): Promise {\n    return this.reservationsService.findOne(+id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationsModule.html":{"url":"modules/ReservationsModule.html","title":"module - ReservationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_providers\n\n\n\ncluster_ReservationsModule_exports\n\n\n\ncluster_ReservationsModule_imports\n\n\n\n\nCartItemsModule\n\nCartItemsModule\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nCartItemsModule->ReservationsModule\n\n\n\n\n\nCartsModule\n\nCartsModule\n\nReservationsModule -->\n\nCartsModule->ReservationsModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nReservationsModule -->\n\nEventsModule->ReservationsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nReservationsModule -->\n\nTransactionsModule->ReservationsModule\n\n\n\n\n\nReservationsProcessorService \n\nReservationsProcessorService \n\nReservationsProcessorService  -->\n\nReservationsModule->ReservationsProcessorService \n\n\n\n\n\nReservationsService \n\nReservationsService \n\nReservationsService  -->\n\nReservationsModule->ReservationsService \n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nReservationsModule -->\n\nQueryHelperService->ReservationsModule\n\n\n\n\n\nReservationDetailsService\n\nReservationDetailsService\n\nReservationsModule -->\n\nReservationDetailsService->ReservationsModule\n\n\n\n\n\nReservationsProcessorService\n\nReservationsProcessorService\n\nReservationsModule -->\n\nReservationsProcessorService->ReservationsModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/reservations/reservations.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage reservations.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueryHelperService\n                        \n                        \n                            ReservationDetailsService\n                        \n                        \n                            ReservationsProcessorService\n                        \n                        \n                            ReservationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReservationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartItemsModule\n                        \n                        \n                            CartsModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            TransactionsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ReservationsProcessorService\n                        \n                        \n                            ReservationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { ReservationsService } from './reservations.service';\nimport { ReservationsController } from './reservations.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Reservation } from './entities/reservation.entity';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\nimport { TicketsModule } from '@modules/tickets/tickets.module';\nimport { EventsModule } from '@modules/events/events.module';\nimport { ReservationsProcessorService } from './reservations-processor.service';\nimport { ReservationDetailsService } from '@modules/reservation-details/reservation-details.service';\nimport { CartsModule } from '@modules/carts/carts.module';\nimport { CartItemsModule } from '@modules/cart-items/cart-items.module';\nimport { TransactionsModule } from '@modules/transactions/transactions.module';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Module to manage reservations.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for Reservation, Event, and ReservationDetails entities\n    TypeOrmModule.forFeature([Reservation, Event, ReservationDetails]),\n    forwardRef(() => TicketsModule), // Import TicketsModule with forward reference\n    EventsModule, // Import EventsModule\n    CartsModule, // Import CartsModule\n    CartItemsModule, // Import CartItemsModule\n    TransactionsModule // Import TransactionsModule\n  ],\n  controllers: [\n    // Register ReservationsController\n    ReservationsController\n  ],\n  providers: [\n    // Register services as providers\n    ReservationsService,\n    ReservationsProcessorService,\n    ReservationDetailsService,\n    QueryHelperService\n  ],\n  exports: [\n    // Export ReservationsService and ReservationsProcessorService\n    ReservationsService,\n    ReservationsProcessorService\n  ]\n})\nexport class ReservationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationsProcessorService.html":{"url":"injectables/ReservationsProcessorService.html","title":"injectable - ReservationsProcessorService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationsProcessorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/reservations-processor.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to process reservations for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                cleanUpAfterPayment\n                            \n                            \n                                    Private\n                                    Async\n                                createReservationsForAllCartItems\n                            \n                            \n                                    Private\n                                    Async\n                                createReservationsForEachCartItem\n                            \n                            \n                                    Private\n                                    Async\n                                finalizeBooking\n                            \n                            \n                                    Private\n                                    Async\n                                initiateReservation\n                            \n                            \n                                    Private\n                                    Async\n                                preventDuplicateReservation\n                            \n                            \n                                    Async\n                                processUserReservation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationRepository: Repository, ticketService: TicketsService, eventSalesService: EventSalesService, transactionService: TransactionsService, usersService: UsersService, cartService: CartsService, cartItemsService: CartItemsService, paymentService: PaymentService, reservationDetailsService: ReservationDetailsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/reservations/reservations-processor.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the ReservationsProcessorService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Reservation entity.\n\n\n                                                        \n                                                \n                                                \n                                                        ticketService\n                                                  \n                                                        \n                                                                        TicketsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage tickets.\n\n\n                                                        \n                                                \n                                                \n                                                        eventSalesService\n                                                  \n                                                        \n                                                                        EventSalesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage event sales.\n\n\n                                                        \n                                                \n                                                \n                                                        transactionService\n                                                  \n                                                        \n                                                                        TransactionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage transactions.\n\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage users.\n\n\n                                                        \n                                                \n                                                \n                                                        cartService\n                                                  \n                                                        \n                                                                        CartsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage carts.\n\n\n                                                        \n                                                \n                                                \n                                                        cartItemsService\n                                                  \n                                                        \n                                                                        CartItemsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage cart items.\n\n\n                                                        \n                                                \n                                                \n                                                        paymentService\n                                                  \n                                                        \n                                                                        PaymentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage payments.\n\n\n                                                        \n                                                \n                                                \n                                                        reservationDetailsService\n                                                  \n                                                        \n                                                                        ReservationDetailsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage reservation details.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        cleanUpAfterPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanUpAfterPayment(cartId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:223\n                        \n                    \n\n\n            \n                \n                        Cleans up after the payment process by removing cart items and deleting the cart.\nExample :await reservationsProcessorService.cleanUpAfterPayment(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the cart.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createReservationsForAllCartItems\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservationsForAllCartItems(cartItems: CartItem[], user: User, transaction: Transaction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Creates reservations for all items in the cart.\nExample :const reservations = await reservationsProcessorService.createReservationsForAllCartItems(cartItems, user, transaction);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartItems\n                                            \n                                                        CartItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of cart items.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                        \n                                                transaction\n                                            \n                                                            Transaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe transaction entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of created reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createReservationsForEachCartItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservationsForEachCartItem(item: CartItem, user: User, transaction: Transaction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Creates reservations for each cart item.\nExample :const reservations = await reservationsProcessorService.createReservationsForEachCartItem(cartItem, user, transaction);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart item entity.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                        \n                                                transaction\n                                            \n                                                            Transaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe transaction entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of created reservations for the cart item.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        finalizeBooking\n                        \n                    \n                \n            \n            \n                \n                        \n                    finalizeBooking(cartItems: CartItem[], reservations: Reservation[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Finalizes the booking process by updating event tickets and revenue.\nExample :await reservationsProcessorService.finalizeBooking(cartItems, reservations);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartItems\n                                            \n                                                        CartItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of cart items.\n\n\n                                            \n                                        \n                                        \n                                                reservations\n                                            \n                                                            Reservation[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of reservations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        initiateReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    initiateReservation(user: User, cartItem: CartItem, transaction: Transaction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Initiates a new reservation.\nExample :const reservation = await reservationsProcessorService.initiateReservation(user, cartItem, transaction);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                        \n                                                cartItem\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart item entity.\n\n\n                                            \n                                        \n                                        \n                                                transaction\n                                            \n                                                            Transaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe transaction entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe initiated reservation.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        preventDuplicateReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    preventDuplicateReservation(item: CartItem, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Prevents duplicate reservations for the same cart item and user.\nExample :await reservationsProcessorService.preventDuplicateReservation(cartItem, user);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cart item entity.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processUserReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    processUserReservation(userId: number, cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations-processor.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Processes a user's reservation based on their cart.\nExample :const reservations = await reservationsProcessorService.processUserReservation(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user's cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of created reservations.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '@modules/users/entities/user.entity';\nimport { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { UsersService } from '@modules/users/users.service';\nimport { CartsService } from '@modules/carts/carts.service';\nimport { CartItemsService } from '@modules/cart-items/cart-items.service';\nimport { Reservation } from './entities/reservation.entity';\nimport { StatusReservation } from '@common/enums/status-reservation.enum';\nimport { TicketsService } from '@modules/tickets/tickets.service';\nimport { PaymentService } from '@libs/payment/payment.service';\nimport { ReservationDetailsService } from '@modules/reservation-details/reservation-details.service';\nimport { Transaction } from '@modules/transactions/entities/transaction.entity';\nimport { TransactionsService } from '@modules/transactions/transactions.service';\nimport { EventSalesService } from '@modules/events/event-sales.service';\n\n/**\n * Service to process reservations for users.\n * @class\n */\n@Injectable()\nexport class ReservationsProcessorService {\n  /**\n   * Constructor for the ReservationsProcessorService.\n   *\n   * @constructor\n   * @param {Repository} reservationRepository - Repository for the Reservation entity.\n   * @param {TicketsService} ticketService - Service to manage tickets.\n   * @param {EventSalesService} eventSalesService - Service to manage event sales.\n   * @param {TransactionsService} transactionService - Service to manage transactions.\n   * @param {UsersService} usersService - Service to manage users.\n   * @param {CartsService} cartService - Service to manage carts.\n   * @param {CartItemsService} cartItemsService - Service to manage cart items.\n   * @param {PaymentService} paymentService - Service to manage payments.\n   * @param {ReservationDetailsService} reservationDetailsService - Service to manage reservation details.\n   */\n  constructor(\n    @InjectRepository(Reservation) private reservationRepository: Repository,\n    private readonly ticketService: TicketsService,\n    private readonly eventSalesService: EventSalesService,\n    private readonly transactionService: TransactionsService,\n    private readonly usersService: UsersService,\n    private readonly cartService: CartsService,\n    private readonly cartItemsService: CartItemsService,\n    private readonly paymentService: PaymentService,\n    private readonly reservationDetailsService: ReservationDetailsService\n  ) {}\n\n  /**\n   * Processes a user's reservation based on their cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the user's cart.\n   * @returns {Promise} - List of created reservations.\n   *\n   * @example\n   * const reservations = await reservationsProcessorService.processUserReservation(1, 1);\n   */\n  async processUserReservation(userId: number, cartId: number): Promise {\n    const user = await this.usersService.verifyUserOneBy(userId);\n    const cartItems = await this.cartItemsService.findAllItemsInCart(userId, cartId);\n    const cartTotalPrice = this.transactionService.calculateCartTotal(cartItems);\n    const paymentResult = await this.paymentService.processPayment(cartTotalPrice);\n\n    const transaction = await this.transactionService.createTransaction(\n      user,\n      cartTotalPrice,\n      paymentResult\n    );\n\n    let reservations = await this.createReservationsForAllCartItems(cartItems, user, transaction);\n\n    if (paymentResult.status === StatusReservation.APPROVED) {\n      await this.finalizeBooking(cartItems, reservations);\n    }\n    await this.cleanUpAfterPayment(cartId, userId);\n    return reservations;\n  }\n\n  /**\n   * Creates reservations for all items in the cart.\n   *\n   * @param {CartItem[]} cartItems - List of cart items.\n   * @param {User} user - The user entity.\n   * @param {Transaction} transaction - The transaction entity.\n   * @returns {Promise} - List of created reservations.\n   *\n   * @private\n   *\n   * @example\n   * const reservations = await reservationsProcessorService.createReservationsForAllCartItems(cartItems, user, transaction);\n   */\n  private async createReservationsForAllCartItems(\n    cartItems: CartItem[],\n    user: User,\n    transaction: Transaction\n  ): Promise {\n    let reservations = [];\n\n    for (const item of cartItems) {\n      reservations.push(...(await this.createReservationsForEachCartItem(item, user, transaction)));\n    }\n    return reservations;\n  }\n\n  /**\n   * Creates reservations for each cart item.\n   *\n   * @param {CartItem} item - The cart item entity.\n   * @param {User} user - The user entity.\n   * @param {Transaction} transaction - The transaction entity.\n   * @returns {Promise} - List of created reservations for the cart item.\n   *\n   * @private\n   *\n   * @example\n   * const reservations = await reservationsProcessorService.createReservationsForEachCartItem(cartItem, user, transaction);\n   */\n  private async createReservationsForEachCartItem(\n    item: CartItem,\n    user: User,\n    transaction: Transaction\n  ): Promise {\n    let reservations = [];\n    await this.preventDuplicateReservation(item, user);\n    for (let i = 0; i } - The initiated reservation.\n   *\n   * @private\n   *\n   * @example\n   * const reservation = await reservationsProcessorService.initiateReservation(user, cartItem, transaction);\n   */\n  private async initiateReservation(\n    user: User,\n    cartItem: CartItem,\n    transaction: Transaction\n  ): Promise {\n    const reservation = this.reservationRepository.create({\n      user,\n      cartItem,\n      transaction\n    });\n    return this.reservationRepository.save(reservation);\n  }\n\n  /**\n   * Finalizes the booking process by updating event tickets and revenue.\n   *\n   * @param {CartItem[]} cartItems - List of cart items.\n   * @param {Reservation[]} reservations - List of reservations.\n   * @returns {Promise}\n   *\n   * @private\n   *\n   * @example\n   * await reservationsProcessorService.finalizeBooking(cartItems, reservations);\n   */\n  private async finalizeBooking(cartItems: CartItem[], reservations: Reservation[]): Promise {\n    const eventIds = new Set(cartItems.map(item => item.event.eventId));\n    for (const eventId of eventIds) {\n      const itemsForEvent = cartItems.filter(item => item.event.eventId === eventId);\n      await this.eventSalesService.processEventTicketsAndRevenue(itemsForEvent);\n    }\n    await this.ticketService.generateTicketsForApprovedReservations(reservations);\n  }\n\n  /**\n   * Prevents duplicate reservations for the same cart item and user.\n   *\n   * @param {CartItem} item - The cart item entity.\n   * @param {User} user - The user entity.\n   * @returns {Promise}\n   *\n   * @throws {Error} If a duplicate reservation is found.\n   *\n   * @private\n   *\n   * @example\n   * await reservationsProcessorService.preventDuplicateReservation(cartItem, user);\n   */\n  private async preventDuplicateReservation(item: CartItem, user: User): Promise {\n    const existingReservation = await this.reservationRepository.findOne({\n      where: { cartItem: item, user }\n    });\n    if (existingReservation) {\n      throw new Error(`Reservation already exists for item with ID ${item.cartItemId}.`);\n    }\n  }\n\n  /**\n   * Cleans up after the payment process by removing cart items and deleting the cart.\n   *\n   * @param {number} cartId - ID of the cart.\n   * @param {number} userId - ID of the user.\n   * @returns {Promise}\n   *\n   * @private\n   *\n   * @example\n   * await reservationsProcessorService.cleanUpAfterPayment(1, 1);\n   */\n  private async cleanUpAfterPayment(cartId: number, userId: number): Promise {\n    await this.cartItemsService.removeAllItemFromCart(userId, cartId);\n    await this.cartService.deleteCart(cartId);\n    await this.cartService.getOrCreateCart(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationsService.html":{"url":"injectables/ReservationsService.html","title":"injectable - ReservationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/reservations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage reservations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllAdmin\n                            \n                            \n                                    Async\n                                findAllData\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                generateReservation\n                            \n                            \n                                    Private\n                                getSelectFieldsFindAll\n                            \n                            \n                                    Private\n                                getSelectFieldsFindAllAdmin\n                            \n                            \n                                    Async\n                                saveReservation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationRepository: Repository, reservationProcessorService: ReservationsProcessorService, queryHelperService: QueryHelperService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/reservations/reservations.service.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of ReservationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Reservation entity.\n\n\n                                                        \n                                                \n                                                \n                                                        reservationProcessorService\n                                                  \n                                                        \n                                                                        ReservationsProcessorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for processing reservations.\n\n\n                                                        \n                                                \n                                                \n                                                        queryHelperService\n                                                  \n                                                        \n                                                                        QueryHelperService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for building query options.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations for a user with pagination and filtering.\nExample :const result = await reservationsService.findAll(1, paginationFilterDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered reservations and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllAdmin(paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations with pagination for admin.\nExample :const reservations = await reservationsService.findAllAdmin(paginationFilterDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllData\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllData(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Retrieves all reservations for a user.\nExample :const reservations = await reservationsService.findAllData(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(reservationId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Finds a reservation by its ID and user ID.\nExample :const reservation = await reservationsService.findOne(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the reservation.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found reservation.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateReservation(userId: number, cartId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Generates reservations for a user based on their cart.\nExample :const reservations = await reservationsService.generateReservation(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                cartId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user's cart.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of created reservations.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSelectFieldsFindAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelectFieldsFindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Gets the fields to select for findAll query.\nExample :const selectFields = reservationsService.getSelectFieldsFindAll();\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                \nThe fields to select.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSelectFieldsFindAllAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelectFieldsFindAllAdmin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:216\n                        \n                    \n\n\n            \n                \n                        Gets the fields to select for findAllAdmin query.\nExample :const selectFields = reservationsService.getSelectFieldsFindAllAdmin();\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                \nThe fields to select for admin view.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveReservation(reservation: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/reservations/reservations.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Saves a reservation to the repository.\nExample :const savedReservation = await reservationsService.saveReservation(reservation);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe reservation entity to save.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe saved reservation.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Reservation } from './entities/reservation.entity';\nimport { ReservationsProcessorService } from './reservations-processor.service';\nimport { DEFAULT_PAGE_SIZE } from '@utils/constants/constants.common';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { QueryHelperService } from '@database/query/query-helper.service';\n\n/**\n * Service to manage reservations.\n * @class\n */\n@Injectable()\nexport class ReservationsService {\n  /**\n   * Creates an instance of ReservationsService.\n   *\n   * @constructor\n   * @param {Repository} reservationRepository - Repository for the Reservation entity.\n   * @param {ReservationsProcessorService} reservationProcessorService - Service for processing reservations.\n   * @param {QueryHelperService} queryHelperService - Service for building query options.\n   */\n  constructor(\n    @InjectRepository(Reservation) private reservationRepository: Repository,\n    private readonly reservationProcessorService: ReservationsProcessorService,\n    private readonly queryHelperService: QueryHelperService\n  ) {}\n\n  /**\n   * Generates reservations for a user based on their cart.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {number} cartId - ID of the user's cart.\n   * @returns {Promise} - List of created reservations.\n   *\n   * @example\n   * const reservations = await reservationsService.generateReservation(1, 1);\n   */\n  async generateReservation(userId: number, cartId: number): Promise {\n    return await this.reservationProcessorService.processUserReservation(userId, cartId);\n  }\n\n  /**\n   * Retrieves all reservations for a user with pagination and filtering.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered reservations and total count.\n   *\n   * @throws {InternalServerErrorException} If an error occurs while retrieving reservations.\n   *\n   * @example\n   * const result = await reservationsService.findAll(1, paginationFilterDto);\n   */\n  async findAll(\n    userId: number,\n    paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    const queryOptions =\n      this.queryHelperService.buildQueryOptions(paginationFilterDto);\n\n    queryOptions.where = { ...queryOptions.where, user: { userId } };\n    queryOptions.relations = [\n      'user',\n      'reservationDetails',\n      'reservationDetails.event',\n      'transaction'\n    ];\n    queryOptions.select = this.getSelectFieldsFindAll();\n\n    try {\n      const [reservations, total] = await this.reservationRepository.findAndCount(queryOptions);\n      return { reservations, total };\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to retrieve reservations.', error);\n    }\n  }\n\n  /**\n   * Retrieves all reservations for a user.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - List of reservations.\n   *\n   * @example\n   * const reservations = await reservationsService.findAllData(1);\n   */\n  async findAllData(userId: number): Promise {\n    return await this.reservationRepository.find({\n      where: { user: { userId } },\n      relations: ['reservationDetails', 'reservationDetails.event', 'transaction'],\n      select: this.getSelectFieldsFindAll()\n    });\n  }\n\n  /**\n   * Retrieves all reservations with pagination for admin.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination data.\n   * @returns {Promise} - List of reservations.\n   *\n   * @throws {NotFoundException} If no reservations are found.\n   *\n   * @example\n   * const reservations = await reservationsService.findAllAdmin(paginationFilterDto);\n   */\n  async findAllAdmin(paginationFilterDto: PaginationAndFilterDto): Promise {\n    const { limit, offset } = paginationFilterDto;\n    const reservations = await this.reservationRepository.find({\n      skip: offset,\n      take: limit ?? DEFAULT_PAGE_SIZE.USER,\n      relations: ['user', 'reservationDetails', 'reservationDetails.event', 'transaction'],\n      select: this.getSelectFieldsFindAllAdmin()\n    });\n\n    if (!reservations.length) {\n      throw new NotFoundException('No reservations found.');\n    }\n\n    return reservations;\n  }\n\n  /**\n   * Finds a reservation by its ID and user ID.\n   *\n   * @param {number} reservationId - ID of the reservation.\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - The found reservation.\n   *\n   * @throws {NotFoundException} If the reservation is not found.\n   *\n   * @example\n   * const reservation = await reservationsService.findOne(1, 1);\n   */\n  async findOne(reservationId: number, userId: number): Promise {\n    const reservation = await this.reservationRepository.findOne({\n      where: { reservationId },\n      relations: ['ticket', 'user'],\n      select: {\n        reservationId: true,\n        ticket: {\n          ticketId: true,\n          qrCode: true\n        },\n        user: {\n          userId: true\n        }\n      }\n    });\n    if (!reservation || reservation.user.userId !== userId) {\n      throw new NotFoundException(`Reservation with ID ${reservationId} not found.`);\n    }\n    return reservation;\n  }\n\n  /**\n   * Saves a reservation to the repository.\n   *\n   * @param {Reservation} reservation - The reservation entity to save.\n   * @returns {Promise} - The saved reservation.\n   *\n   * @example\n   * const savedReservation = await reservationsService.saveReservation(reservation);\n   */\n  async saveReservation(reservation: Reservation): Promise {\n    return await this.reservationRepository.save(reservation);\n  }\n\n  /**\n   * Gets the fields to select for findAll query.\n   *\n   * @returns {object} - The fields to select.\n   *\n   * @private\n   *\n   * @example\n   * const selectFields = reservationsService.getSelectFieldsFindAll();\n   */\n  private getSelectFieldsFindAll(): object {\n    return {\n      reservationId: true,\n      reservationDetails: {\n        title: true,\n        shortDescription: true,\n        price: true,\n        priceFormula: true,\n        event: {\n          eventId: true,\n          categoryType: true,\n          startDate: true\n        }\n      },\n      user: {\n        userId: true,\n        firstName: true,\n        lastName: true\n      },\n      transaction: {\n        statusPayment: true,\n        paymentId: true\n      }\n    };\n  }\n\n  /**\n   * Gets the fields to select for findAllAdmin query.\n   *\n   * @returns {object} - The fields to select for admin view.\n   *\n   * @private\n   *\n   * @example\n   * const selectFields = reservationsService.getSelectFieldsFindAllAdmin();\n   */\n  private getSelectFieldsFindAllAdmin(): object {\n    return {\n      reservationId: true,\n      user: {\n        userId: true,\n        email: true\n      },\n      reservationDetails: {\n        title: true,\n        event: {\n          eventId: true\n        }\n      },\n      transaction: {\n        transactionId: true,\n        statusPayment: true,\n        paymentId: true,\n        totalAmount: true\n      }\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/security/guards/role.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard to check if the user has the required role to access the route.\nExample :\\@UseGuards(RoleGuard)\n\\@Role(UserRole.ADMIN)\n\\@Get('admin')\ngetAdminData() {\n  // Admin route logic here\n}\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/security/guards/role.guard.ts:21\n                            \n                        \n\n                \n                    \n                            Creates an instance of RoleGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe reflector to retrieve metadata.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/guards/role.guard.ts:39\n                        \n                    \n\n\n            \n                \n                        Method to determine if the user can activate the route based on their role.\nExample :const canActivate = roleGuard.canActivate(context);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \nWhether the user can activate the route.\n\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { ROLE_KEY } from '@common/decorators/role.decorator';\nimport { UserRole } from '@common/enums/user-role.enum';\n\n/**\n * Guard to check if the user has the required role to access the route.\n * @class\n * @implements {CanActivate}\n *\n * @example\n * \\@UseGuards(RoleGuard)\n * \\@Role(UserRole.ADMIN)\n * \\@Get('admin')\n * getAdminData() {\n *   // Admin route logic here\n * }\n */\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  /**\n   * Creates an instance of RoleGuard.\n   *\n   * @constructor\n   * @param {Reflector} reflector - The reflector to retrieve metadata.\n   */\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * Method to determine if the user can activate the route based on their role.\n   *\n   * @param {ExecutionContext} context - The execution context.\n   * @returns {boolean | Promise | Observable} - Whether the user can activate the route.\n   *\n   * @example\n   * const canActivate = roleGuard.canActivate(context);\n   */\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    // Retrieve the required role for the route from the metadata.\n    const requiredRole = this.reflector.getAllAndOverride(ROLE_KEY, [\n      context.getHandler(),\n      context.getClass()\n    ]);\n\n    // If no specific role is required, allow access.\n    if (!requiredRole) {\n      return true;\n    }\n\n    // Get the user object from the request and compare roles.\n    const { user } = context.switchToHttp().getRequest();\n    return user.role === requiredRole;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/signup.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for user sign-up.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/signup.dto.ts:69\n                        \n                    \n\n            \n                \n                    Email address of the user.\nThis field is required and must be a valid email address.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(3)@MaxLength(50)@Matches(/^[a-zA-Z-]+$/, {message: 'firstName can only contain letters and hyphens'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/signup.dto.ts:36\n                        \n                    \n\n            \n                \n                    First name of the user.\nThis field is optional, must be a string, and have a length between 3 and 50 characters.\nIt should not contain any numbers or special characters other than hyphens.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(3)@MaxLength(50)@Matches(/^[a-zA-Z-]+$/, {message: 'lastName can only contain letters and hyphens'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/signup.dto.ts:55\n                        \n                    \n\n            \n                \n                    Last name of the user.\nThis field is optional, must be a string, and have a length between 3 and 50 characters.\nIt should not contain any numbers or special characters other than hyphens.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsStrongPassword()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/signup.dto.ts:85\n                        \n                    \n\n            \n                \n                    Password for the user.\nThis field is required, must be a strong password, and have a minimum length of 6 characters.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/signup.dto.ts:97\n                        \n                    \n\n            \n                \n                    Role of the user.\nThis field is optional and must be a valid enum value of UserRole.\nExample :```html\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserRole } from '@common/enums/user-role.enum';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsStrongPassword,\n  Matches,\n  MaxLength,\n  MinLength\n} from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for user sign-up.\n *\n * @class\n */\nexport class SignUpDto {\n  /**\n   * First name of the user.\n   * This field is optional, must be a string, and have a length between 3 and 50 characters.\n   * It should not contain any numbers or special characters other than hyphens.\n   * @type {string}\n   * @isString\n   * @minLength 3\n   * @maxLength 50\n   * @matches /^[a-zA-Z-]+$/\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsString()\n  @MinLength(3)\n  @MaxLength(50)\n  @Matches(/^[a-zA-Z-]+$/, { message: 'firstName can only contain letters and hyphens' })\n  readonly firstName?: string;\n\n  /**\n   * Last name of the user.\n   * This field is optional, must be a string, and have a length between 3 and 50 characters.\n   * It should not contain any numbers or special characters other than hyphens.\n   * @type {string}\n   * @isString\n   * @minLength 3\n   * @maxLength 50\n   * @matches /^[a-zA-Z-]+$/\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsString()\n  @MinLength(3)\n  @MaxLength(50)\n  @Matches(/^[a-zA-Z-]+$/, { message: 'lastName can only contain letters and hyphens' })\n  readonly lastName?: string;\n\n  /**\n   * Email address of the user.\n   * This field is required and must be a valid email address.\n   * @type {string}\n   * @isNotEmpty\n   * @isEmail\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password for the user.\n   * This field is required, must be a strong password, and have a minimum length of 6 characters.\n   * @type {string}\n   * @isNotEmpty\n   * @isStrongPassword\n   * @minLength 6\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @IsStrongPassword()\n  @MinLength(6)\n  readonly password: string;\n\n  /**\n   * Role of the user.\n   * This field is optional and must be a valid enum value of UserRole.\n   * @type {UserRole}\n   * @isOptional\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!', role: UserRole.ADMIN };\n   */\n  @IsOptional()\n  readonly role?: UserRole;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ThrollerModule.html":{"url":"modules/ThrollerModule.html","title":"module - ThrollerModule","body":"\n                   \n\n\n\n\n    Modules\n    ThrollerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ThrollerModule\n\n\n\ncluster_ThrollerModule_imports\n\n\n\n\nThrottler\n\nThrottler\n\n\n\nThrollerModule\n\nThrollerModule\n\nThrollerModule -->\n\nThrottler->ThrollerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/security/throttler/throttler.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            Throttler\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ThrottlerModule as Throttler } from '@nestjs/throttler';\n\n@Module({\n  imports: [\n    Throttler.forRoot([\n      {\n        ttl: 60000,\n        limit: 10\n      }\n    ])\n  ]\n})\nexport class ThrollerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Ticket.html":{"url":"entities/Ticket.html","title":"entity - Ticket","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Ticket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tickets/entities/ticket.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a ticket.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                purchaseKey\n                            \n                            \n                                    \n                                qrCode\n                            \n                            \n                                    \n                                    \n                                    \n                                reservation\n                            \n                            \n                                    \n                                secureKey\n                            \n                            \n                                    \n                                ticketId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purchaseKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/entities/ticket.entity.ts:43\n                        \n                    \n\n            \n                \n                    Unique purchase key for the ticket.\nExample :const purchaseKey = ticket.purchaseKey;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        qrCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/entities/ticket.entity.ts:65\n                        \n                    \n\n            \n                \n                    QR code for the ticket.\nExample :const qrCode = ticket.qrCode;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@OneToOne(undefined, reservation => reservation.ticket)@JoinColumn({name: 'reservationId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/entities/ticket.entity.ts:32\n                        \n                    \n\n            \n                \n                    Reservation associated with the ticket.\nExample :const reservation = ticket.reservation;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        secureKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/entities/ticket.entity.ts:54\n                        \n                    \n\n            \n                \n                    Secure key for the ticket.\nExample :const secureKey = ticket.secureKey;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ticketId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/entities/ticket.entity.ts:18\n                        \n                    \n\n            \n                \n                    Unique identifier for the ticket.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, JoinColumn, OneToOne, Index } from 'typeorm';\n\n/**\n * Entity representing a ticket.\n *\n * @class\n * @entity\n */\n@Entity('tickets')\nexport class Ticket {\n  /**\n   * Unique identifier for the ticket.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn()\n  ticketId: number;\n\n  /**\n   * Reservation associated with the ticket.\n   * @type {Reservation}\n   * @oneToOne\n   * @joinColumn\n   *\n   * @example\n   * const reservation = ticket.reservation;\n   */\n  @Index()\n  @OneToOne(() => Reservation, reservation => reservation.ticket)\n  @JoinColumn({ name: 'reservationId' })\n  reservation: Reservation;\n\n  /**\n   * Unique purchase key for the ticket.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const purchaseKey = ticket.purchaseKey;\n   */\n  @Column({ unique: true })\n  purchaseKey: string;\n\n  /**\n   * Secure key for the ticket.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const secureKey = ticket.secureKey;\n   */\n  @Column()\n  secureKey: string;\n\n  /**\n   * QR code for the ticket.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const qrCode = ticket.qrCode;\n   */\n  @Column()\n  qrCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketsModule.html":{"url":"modules/TicketsModule.html","title":"module - TicketsModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_imports\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nTransactionsModule->TicketsModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tickets/tickets.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for handling tickets.\nThis module is used to create tickets for reservations.\nThis module imports the ReservationsModule to resolve circular dependencies.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TransactionsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { TicketsService } from './tickets.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Ticket } from './entities/ticket.entity';\nimport { ReservationsModule } from '@modules/reservations/reservations.module';\nimport { Transaction } from '@modules/transactions/entities/transaction.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport { ReservationDetailsModule } from '@modules/reservation-details/reservation-details.module';\nimport { TransactionsModule } from '@modules/transactions/transactions.module';\n\n/**\n * Module for handling tickets.\n * This module is used to create tickets for reservations.\n * This module imports the ReservationsModule to resolve circular dependencies.\n */\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Ticket, Transaction, User]),\n    forwardRef(() => ReservationsModule), // Import the ReservationsModule with forwardRef\n    forwardRef(() => ReservationDetailsModule), // Import the ReservationsModule with forwardRef\n    TransactionsModule\n  ],\n  providers: [TicketsService],\n  exports: [TicketsService]\n})\nexport class TicketsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketsService.html":{"url":"injectables/TicketsService.html","title":"injectable - TicketsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TicketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tickets/tickets.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage tickets.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createNewTicket\n                            \n                            \n                                    Async\n                                generateTicketsForApprovedReservations\n                            \n                            \n                                    Private\n                                    Async\n                                generateTicketsForReservation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketRepository: Repository, encryptionService: EncryptionService, usersService: UsersService, reservationService: ReservationsService, transactionService: TransactionsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/tickets/tickets.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for the TicketsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        ticketRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Ticket entity.\n\n\n                                                        \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage encryption.\n\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage users.\n\n\n                                                        \n                                                \n                                                \n                                                        reservationService\n                                                  \n                                                        \n                                                                        ReservationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage reservations.\n\n\n                                                        \n                                                \n                                                \n                                                        transactionService\n                                                  \n                                                        \n                                                                        TransactionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage transactions.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createNewTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    createNewTicket(user: User, reservation: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Creates a new ticket for a reservation.\nExample :const ticket = await ticketsService.createNewTicket(user, reservation);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe reservation entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created ticket.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateTicketsForApprovedReservations\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTicketsForApprovedReservations(reservations: Reservation[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Generates tickets for approved reservations.\nExample :await ticketsService.generateTicketsForApprovedReservations(reservations);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservations\n                                            \n                                                            Reservation[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of reservations to generate tickets for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateTicketsForReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTicketsForReservation(reservationId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Generates tickets for a specific reservation.\nExample :const tickets = await ticketsService.generateTicketsForReservation(1, 1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the reservation.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of generated tickets.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Ticket } from './entities/ticket.entity';\nimport { Repository } from 'typeorm';\nimport { EncryptionService } from '@security/encryption/encryption.service';\nimport { ReservationsService } from '@modules/reservations/reservations.service';\nimport { UsersService } from '@modules/users/users.service';\nimport { User } from '@modules/users/entities/user.entity';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { TransactionsService } from '@modules/transactions/transactions.service';\nimport { StatusReservation } from '@common/enums/status-reservation.enum';\n\n/**\n * Service to manage tickets.\n * @class\n */\n@Injectable()\nexport class TicketsService {\n  /**\n   * Constructor for the TicketsService.\n   *\n   * @constructor\n   * @param {Repository} ticketRepository - Repository for the Ticket entity.\n   * @param {EncryptionService} encryptionService - Service to manage encryption.\n   * @param {UsersService} usersService - Service to manage users.\n   * @param {ReservationsService} reservationService - Service to manage reservations.\n   * @param {TransactionsService} transactionService - Service to manage transactions.\n   */\n  constructor(\n    @InjectRepository(Ticket) private ticketRepository: Repository,\n    private encryptionService: EncryptionService,\n    private usersService: UsersService,\n    @Inject(forwardRef(() => ReservationsService))\n    private reservationService: ReservationsService,\n    private transactionService: TransactionsService\n  ) {}\n\n  /**\n   * Generates tickets for approved reservations.\n   *\n   * @param {Reservation[]} reservations - List of reservations to generate tickets for.\n   * @returns {Promise}\n   *\n   * @example\n   * await ticketsService.generateTicketsForApprovedReservations(reservations);\n   */\n  async generateTicketsForApprovedReservations(reservations: Reservation[]): Promise {\n    for (const reservation of reservations) {\n      const transaction = await this.transactionService.findTransactionByReservationId(\n        reservation.reservationId\n      );\n      if (transaction && transaction.statusPayment === StatusReservation.APPROVED) {\n        await this.generateTicketsForReservation(\n          reservation.reservationId,\n          reservation.user.userId\n        );\n      }\n    }\n  }\n\n  /**\n   * Generates tickets for a specific reservation.\n   *\n   * @param {number} reservationId - ID of the reservation.\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - List of generated tickets.\n   *\n   * @throws {NotFoundException} If the reservation is not found.\n   *\n   * @private\n   *\n   * @example\n   * const tickets = await ticketsService.generateTicketsForReservation(1, 1);\n   */\n  private async generateTicketsForReservation(\n    reservationId: number,\n    userId: number\n  ): Promise {\n    const reservation = await this.reservationService.findOne(reservationId, userId);\n    if (!reservation) throw new NotFoundException('Reservation not found');\n\n    const user = await this.usersService.verifyUserOneBy(userId);\n    const ticket = await this.createNewTicket(user, reservation);\n\n    reservation.ticket = ticket;\n    await this.reservationService.saveReservation(reservation);\n\n    return [ticket];\n  }\n\n  /**\n   * Creates a new ticket for a reservation.\n   *\n   * @param {User} user - The user entity.\n   * @param {Reservation} reservation - The reservation entity.\n   * @returns {Promise} - The created ticket.\n   *\n   * @private\n   *\n   * @example\n   * const ticket = await ticketsService.createNewTicket(user, reservation);\n   */\n  private async createNewTicket(user: User, reservation: Reservation): Promise {\n    const purchaseKey = await this.encryptionService.generatedKeyUuid();\n    const secureKey = await this.encryptionService.generatedSecureKey(user);\n    const qrCode = await this.encryptionService.generatedQRCode(secureKey);\n\n    const ticket = this.ticketRepository.create({\n      reservation,\n      purchaseKey,\n      secureKey,\n      qrCode\n    });\n    return await this.ticketRepository.save(ticket);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenConfig.html":{"url":"interfaces/TokenConfig.html","title":"interface - TokenConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/token.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the configuration for tokens.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessTokenExpiration\n                                        \n                                \n                                \n                                        \n                                            accessTokenSecret\n                                        \n                                \n                                \n                                        \n                                            refreshTokenExpiration\n                                        \n                                \n                                \n                                        \n                                            refreshTokenSecret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessTokenExpiration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessTokenExpiration:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Expiration time for access tokens.\nExample :const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        accessTokenSecret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessTokenSecret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Secret key used to sign access tokens.\nExample :const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshTokenExpiration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshTokenExpiration:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Expiration time for refresh tokens.\nExample :const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshTokenSecret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshTokenSecret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Secret key used to sign refresh tokens.\nExample :const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface TokenConfig {\n  /**\n   * Secret key used to sign access tokens.\n   * @type {string}\n   *\n   * @example\n   * const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n   */\n  accessTokenSecret: string;\n\n  /**\n   * Expiration time for access tokens.\n   * @type {string}\n   *\n   * @example\n   * const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n   */\n  accessTokenExpiration: string;\n\n  /**\n   * Secret key used to sign refresh tokens.\n   * @type {string}\n   *\n   * @example\n   * const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n   */\n  refreshTokenSecret: string;\n\n  /**\n   * Expiration time for refresh tokens.\n   * @type {string}\n   *\n   * @example\n   * const config: TokenConfig = { accessTokenSecret: 'myAccessTokenSecret', accessTokenExpiration: '1h', refreshTokenSecret: 'myRefreshTokenSecret', refreshTokenExpiration: '7d' };\n   */\n  refreshTokenExpiration: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenManagementService.html":{"url":"injectables/TokenManagementService.html","title":"injectable - TokenManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/token/token-management.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage JWT tokens.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createAccessToken\n                            \n                            \n                                createRefreshToken\n                            \n                            \n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/security/token/token-management.service.ts:11\n                            \n                        \n\n                \n                    \n                            Creates an instance of TokenManagementService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to interact with JWT.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to access configuration variables.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createAccessToken\n                        \n                    \n                \n            \n            \n                \ncreateAccessToken(payload: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token-management.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Creates an access token.\nExample :const accessToken = tokenManagementService.createAccessToken({ userId: 1, role: 'user' });\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payload to encode in the token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe created access token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \ncreateRefreshToken(payload: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token-management.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Creates a refresh token.\nExample :const refreshToken = tokenManagementService.createRefreshToken({ userId: 1, role: 'user' });\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payload to encode in the token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nThe created refresh token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyToken\n                        \n                    \n                \n            \n            \n                \nverifyToken(token: string, isAccessToken: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token-management.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Verifies a JWT token.\nExample :const payload = await tokenManagementService.verifyToken(token, true);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe token to verify.\n\n\n                                            \n                                        \n                                        \n                                                isAccessToken\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    \nWhether the token is an access token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe decoded token payload.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Payload } from '@common/interfaces/payload.interface';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\n/**\n * Service to manage JWT tokens.\n * @class\n */\n@Injectable()\nexport class TokenManagementService {\n  /**\n   * Creates an instance of TokenManagementService.\n   *\n   * @constructor\n   * @param {JwtService} jwtService - Service to interact with JWT.\n   * @param {ConfigService} configService - Service to access configuration variables.\n   */\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService\n  ) {}\n\n  /**\n   * Creates an access token.\n   *\n   * @param {Payload} payload - The payload to encode in the token.\n   * @returns {string} - The created access token.\n   *\n   * @example\n   * const accessToken = tokenManagementService.createAccessToken({ userId: 1, role: 'user' });\n   */\n  createAccessToken(payload: Payload): string {\n    return this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION')\n    });\n  }\n\n  /**\n   * Creates a refresh token.\n   *\n   * @param {Payload} payload - The payload to encode in the token.\n   * @returns {string} - The created refresh token.\n   *\n   * @example\n   * const refreshToken = tokenManagementService.createRefreshToken({ userId: 1, role: 'user' });\n   */\n  createRefreshToken(payload: Payload): string {\n    return this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION')\n    });\n  }\n\n  /**\n   * Verifies a JWT token.\n   *\n   * @param {string} token - The token to verify.\n   * @param {boolean} [isAccessToken=false] - Whether the token is an access token.\n   * @returns {Promise} - The decoded token payload.\n   *\n   * @example\n   * const payload = await tokenManagementService.verifyToken(token, true);\n   */\n  verifyToken(token: string, isAccessToken: boolean = false): Promise {\n    const secretKey = isAccessToken\n      ? this.configService.get('JWT_ACCESS_TOKEN_SECRET')\n      : this.configService.get('JWT_REFRESH_TOKEN_SECRET');\n    return this.jwtService.verifyAsync(token, { secret: secretKey });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenService.html":{"url":"injectables/TokenService.html","title":"injectable - TokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/security/token/token.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage JWT tokens and token-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createPayload\n                            \n                            \n                                    Private\n                                errorResponse\n                            \n                            \n                                    Async\n                                generateAccessTokenFromRefreshToken\n                            \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                validateAndExtractFromRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, tokenManagementService: TokenManagementService, cookieService: CookieService, configService: ConfigService, refreshTokenStoreService: RefreshTokenStoreService)\n                    \n                \n                        \n                            \n                                Defined in src/security/token/token.service.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of TokenService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage users.\n\n\n                                                        \n                                                \n                                                \n                                                        tokenManagementService\n                                                  \n                                                        \n                                                                        TokenManagementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage JWT tokens.\n\n\n                                                        \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                        CookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage cookies.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to access configuration variables.\n\n\n                                                        \n                                                \n                                                \n                                                        refreshTokenStoreService\n                                                  \n                                                        \n                                                                        RefreshTokenStoreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage refresh tokens.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createPayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPayload(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Creates a payload for JWT tokens.\nExample :const payload = tokenService.createPayload(user);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Payload\n\n                        \n                            \n                                \nThe payload for the JWT token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    errorResponse(res: Response, message: string, status: HttpStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Sends an error response.\nExample :const response = tokenService.errorResponse(res, 'Error message', HttpStatus.BAD_REQUEST);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nError message.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                        HttpStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP status code.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Response\n\n                        \n                            \n                                \nThe error response.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateAccessTokenFromRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessTokenFromRefreshToken(req: Request, res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Generates a new access token using the provided refresh token.\nExample :const response = await tokenService.generateAccessTokenFromRefreshToken(req, res);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP request object.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe response with the new access token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Generates access and refresh tokens for a user and stores the refresh token in Redis.\nExample :const tokens = await tokenService.getTokens(user);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe generated JWT tokens.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req: Request, res: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Refreshes the access and refresh tokens using the provided refresh token.\nExample :const response = await tokenService.refreshToken(req, res);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP request object.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nHTTP response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe response with new tokens.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateAndExtractFromRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateAndExtractFromRefreshToken(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/security/token/token.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Validates a refresh token and extracts the payload.\nExample :const { payload, userId } = await tokenService.validateAndExtractFromRefreshToken(refreshToken);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe refresh token to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe extracted payload and user ID.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(TokenService.name)\n                    \n                \n                    \n                        \n                                Defined in src/security/token/token.service.ts:27\n                        \n                    \n\n            \n                \n                    Logger instance from NestJS.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JWTTokens } from '@common/interfaces/jwt.interface';\nimport { User } from '@modules/users/entities/user.entity';\nimport { Payload } from '@common/interfaces/payload.interface';\nimport { Request, Response } from 'express';\nimport { TokenManagementService } from './token-management.service';\nimport { UsersService } from '@modules/users/users.service';\nimport { CookieService } from '@security/cookie/cookie.service';\nimport { RefreshTokenStoreService } from './refreshtoken-store.service';\n\n/**\n * Service to manage JWT tokens and token-related operations.\n * @class\n */\n@Injectable()\nexport class TokenService {\n  /**\n   * Logger instance from NestJS.\n   *\n   * @private\n   * @readonly\n   * @type {Logger}\n   * @memberof TokenService\n   * @default new Logger(TokenService.name)\n   */\n  private readonly logger: Logger = new Logger(TokenService.name);\n\n  /**\n   * Creates an instance of TokenService.\n   *\n   * @constructor\n   * @param {UsersService} usersService - Service to manage users.\n   * @param {TokenManagementService} tokenManagementService - Service to manage JWT tokens.\n   * @param {CookieService} cookieService - Service to manage cookies.\n   * @param {ConfigService} configService - Service to access configuration variables.\n   * @param {RefreshTokenStoreService} refreshTokenStoreService - Service to manage refresh tokens.\n   */\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly tokenManagementService: TokenManagementService,\n    private readonly cookieService: CookieService,\n    private readonly configService: ConfigService,\n    private readonly refreshTokenStoreService: RefreshTokenStoreService\n  ) {}\n\n  /**\n   * Generates access and refresh tokens for a user and stores the refresh token in Redis.\n   *\n   * @param {User} user - The user entity.\n   * @returns {Promise} - The generated JWT tokens.\n   *\n   * @example\n   * const tokens = await tokenService.getTokens(user);\n   */\n  async getTokens(user: User): Promise {\n    const payload = this.createPayload(user);\n    const accessToken = this.tokenManagementService.createAccessToken(payload);\n    const refreshToken = this.tokenManagementService.createRefreshToken(payload);\n\n    await this.refreshTokenStoreService.storeRefreshTokenInRedis(user.userId, refreshToken);\n\n    this.logger.log(`Access token created for user ${user.userId}`);\n    this.logger.log(`Refresh token created and stored in Redis for user ${user.userId}`);\n\n    return { accessToken, refreshToken };\n  }\n\n  /**\n   * Creates a payload for JWT tokens.\n   *\n   * @param {User} user - The user entity.\n   * @returns {Payload} - The payload for the JWT token.\n   *\n   * @example\n   * const payload = tokenService.createPayload(user);\n   */\n  private createPayload(user: User): Payload {\n    return { sub: user.userId, role: user.role, version: user.tokenVersion };\n  }\n\n  /**\n   * Refreshes the access and refresh tokens using the provided refresh token.\n   *\n   * @param {Request} req - HTTP request object.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise} - The response with new tokens.\n   *\n   * @example\n   * const response = await tokenService.refreshToken(req, res);\n   */\n  async refreshToken(req: Request, res: Response): Promise {\n    const oldRefreshToken = this.cookieService.extractRefreshTokenCookie(req);\n    if (!oldRefreshToken) {\n      return this.errorResponse(\n        res,\n        'No refresh token provided. Please login again.',\n        HttpStatus.UNAUTHORIZED\n      );\n    }\n    try {\n      const { userId } = await this.validateAndExtractFromRefreshToken(oldRefreshToken);\n      const user = await this.usersService.verifyUserOneBy(userId);\n      await this.refreshTokenStoreService.removeRefreshTokenRedis(userId);\n\n      const { accessToken, refreshToken } = await this.getTokens(user);\n\n      await this.refreshTokenStoreService.storeRefreshTokenInRedis(userId, refreshToken);\n      this.cookieService.setRefreshTokenCookie(res, refreshToken);\n\n      this.logger.log(`Tokens refreshed for user ${userId}`);\n      return res.status(HttpStatus.OK).json({ accessToken, refreshToken, userId });\n    } catch (error) {\n      return this.errorResponse(res, error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  /**\n   * Generates a new access token using the provided refresh token.\n   *\n   * @param {Request} req - HTTP request object.\n   * @param {Response} res - HTTP response object.\n   * @returns {Promise} - The response with the new access token.\n   *\n   * @example\n   * const response = await tokenService.generateAccessTokenFromRefreshToken(req, res);\n   */\n  async generateAccessTokenFromRefreshToken(req: Request, res: Response): Promise {\n    const refreshTokenFromCookie = this.cookieService.extractRefreshTokenCookie(req);\n    if (!refreshTokenFromCookie) {\n      return this.errorResponse(\n        res,\n        'No refresh token provided. Please login again.',\n        HttpStatus.UNAUTHORIZED\n      );\n    }\n    try {\n      const { payload, userId } =\n        await this.validateAndExtractFromRefreshToken(refreshTokenFromCookie);\n\n      const newAccessToken = this.tokenManagementService.createAccessToken({\n        sub: userId,\n        role: payload.role,\n        version: payload.version\n      });\n\n      return res.status(HttpStatus.OK).json({\n        accessToken: newAccessToken,\n        userId,\n        expiresIn: this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION')\n      });\n    } catch (error) {\n      return this.errorResponse(\n        res,\n        'Failed to generate access token due to internal error. Please try again later.',\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  /**\n   * Validates a refresh token and extracts the payload.\n   *\n   * @param {string} refreshToken - The refresh token to validate.\n   * @returns {Promise} - The extracted payload and user ID.\n   *\n   * @throws {UnauthorizedException} If the token is invalid or expired.\n   *\n   * @example\n   * const { payload, userId } = await tokenService.validateAndExtractFromRefreshToken(refreshToken);\n   */\n  async validateAndExtractFromRefreshToken(\n    refreshToken: string\n  ): Promise {\n    try {\n      const payload = await this.tokenManagementService.verifyToken(refreshToken);\n      const userId = payload.sub;\n      if (!(await this.refreshTokenStoreService.verifyRefreshTokenInRedis(userId, refreshToken))) {\n        throw new UnauthorizedException('Invalid or expired refresh token.');\n      }\n      return { payload, userId };\n    } catch (error) {\n      this.logger.error(`Token validation failed: ${error.message}`);\n      throw new UnauthorizedException('Failed to validate token.');\n    }\n  }\n\n  /**\n   * Sends an error response.\n   *\n   * @param {Response} res - HTTP response object.\n   * @param {string} message - Error message.\n   * @param {HttpStatus} status - HTTP status code.\n   * @returns {Response} - The error response.\n   *\n   * @example\n   * const response = tokenService.errorResponse(res, 'Error message', HttpStatus.BAD_REQUEST);\n   */\n  private errorResponse(res: Response, message: string, status: HttpStatus): Response {\n    this.logger.error(message);\n    return res.status(status).json({\n      message: message,\n      actionRequired: 'Please login again.'\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Transaction.html":{"url":"entities/Transaction.html","title":"entity - Transaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Transaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/entities/transaction.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a transaction.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                paymentId\n                            \n                            \n                                    \n                                reservation\n                            \n                            \n                                    \n                                statusPayment\n                            \n                            \n                                    \n                                totalAmount\n                            \n                            \n                                    \n                                transactionId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:98\n                        \n                    \n\n            \n                \n                    Timestamp when the transaction was created.\nExample :const createdAt = transaction.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paymentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:75\n                        \n                    \n\n            \n                \n                    Payment identifier for the transaction.\nExample :const paymentId = transaction.paymentId;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.transaction)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:53\n                        \n                    \n\n            \n                \n                    Reservations associated with the transaction.\nExample :const reservations = transaction.reservations;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusPayment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StatusReservation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:64\n                        \n                    \n\n            \n                \n                    Status of the payment for the transaction.\nExample :const statusPayment = transaction.statusPayment;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:86\n                        \n                    \n\n            \n                \n                    Total amount of the transaction.\nExample :const totalAmount = transaction.totalAmount;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        transactionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:28\n                        \n                    \n\n            \n                \n                    Unique identifier for the transaction.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:110\n                        \n                    \n\n            \n                \n                    Timestamp when the transaction was last updated.\nExample :const updatedAt = transaction.updatedAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, user => user.transactions)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:42\n                        \n                    \n\n            \n                \n                    User associated with the transaction.\nExample :const user = transaction.user;\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { StatusReservation } from '@common/enums/status-reservation.enum';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n  Index\n} from 'typeorm';\n\n/**\n * Entity representing a transaction.\n *\n * @class\n * @entity\n */\n@Entity('transactions')\nexport class Transaction {\n  /**\n   * Unique identifier for the transaction.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  transactionId: number;\n\n  /**\n   * User associated with the transaction.\n   * @type {User}\n   * @manyToOne\n   * @joinColumn\n   *\n   * @example\n   * const user = transaction.user;\n   */\n  @Index()\n  @ManyToOne(() => User, user => user.transactions)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  /**\n   * Reservations associated with the transaction.\n   * @type {Reservation[]}\n   * @oneToMany\n   *\n   * @example\n   * const reservations = transaction.reservations;\n   */\n  @OneToMany(() => Reservation, reservation => reservation.transaction)\n  reservation: Reservation[];\n\n  /**\n   * Status of the payment for the transaction.\n   * @type {StatusReservation}\n   * @column\n   *\n   * @example\n   * const statusPayment = transaction.statusPayment;\n   */\n  @Column({ type: 'varchar' })\n  statusPayment: StatusReservation;\n\n  /**\n   * Payment identifier for the transaction.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const paymentId = transaction.paymentId;\n   */\n  @Column()\n  paymentId: number;\n\n  /**\n   * Total amount of the transaction.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const totalAmount = transaction.totalAmount;\n   */\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  totalAmount: number;\n\n  /**\n   * Timestamp when the transaction was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = transaction.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the transaction was last updated.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const updatedAt = transaction.updatedAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TransactionsController.html":{"url":"controllers/TransactionsController.html","title":"controller - TransactionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TransactionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/transactions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                transactions\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage transactions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, paginationDto: PaginationAndFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(IsCreatorGuard)@Get(':id/find-all')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Retrieves all transactions for a user with pagination and filtering.\nExample :GET /transactions/1/find-all?page=1&limit=10&sortBy=createdAt&sortOrder=ASC\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered transactions and total count.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards, Query } from '@nestjs/common';\nimport { AccessTokenGuard, IsCreatorGuard } from '@security/guards';\nimport { TransactionsService } from './transactions.service';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { Transaction } from './entities/transaction.entity';\n\n/**\n * Controller to manage transactions.\n * @class\n */\n@UseGuards(AccessTokenGuard)\n@Controller('transactions')\nexport class TransactionsController {\n  constructor(private readonly transactionsService: TransactionsService) {}\n\n  /**\n   * Retrieves all transactions for a user with pagination and filtering.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {PaginationAndFilterDto} paginationDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered transactions and total count.\n   *\n   * @example\n   * GET /transactions/1/find-all?page=1&limit=10&sortBy=createdAt&sortOrder=ASC\n   */\n  @UseGuards(IsCreatorGuard)\n  @Get(':id/find-all')\n  findAll(\n    @Param('id') userId: number,\n    @Query() paginationDto: PaginationAndFilterDto\n  ): Promise {\n    return this.transactionsService.findAll(userId, paginationDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nTransactionsService \n\nTransactionsService \n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nTransactionsModule -->\n\nQueryHelperService->TransactionsModule\n\n\n\n\n\nReservationDetailsService\n\nReservationDetailsService\n\nTransactionsModule -->\n\nReservationDetailsService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/transactions/transactions.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage transactions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueryHelperService\n                        \n                        \n                            ReservationDetailsService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TransactionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Transaction } from './entities/transaction.entity';\nimport { ReservationDetailsService } from '@modules/reservation-details/reservation-details.service';\nimport { Event } from '@modules/events/entities/event.entity';\nimport { ReservationDetails } from '@modules/reservation-details/entities/reservation-details.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport { TicketsModule } from '@modules/tickets/tickets.module';\nimport { ReservationsModule } from '@modules/reservations/reservations.module';\nimport { QueryHelperService } from '@database/query/query-helper.service';\nimport { TransactionsController } from './transactions.controller';\n\n/**\n * Module to manage transactions.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for Transaction, Event, ReservationDetails, and User entities\n    TypeOrmModule.forFeature([Transaction, Event, ReservationDetails, User]),\n    forwardRef(() => ReservationsModule), // Import ReservationsModule with forward reference\n    forwardRef(() => TicketsModule) // Import TicketsModule with forward reference\n  ],\n  providers: [\n    // Register TransactionsService, ReservationDetailsService, and QueryHelperService as providers\n    TransactionsService,\n    ReservationDetailsService,\n    QueryHelperService\n  ],\n  controllers: [\n    // Register TransactionsController\n    TransactionsController\n  ],\n  exports: [\n    // Export TransactionsService\n    TransactionsService\n  ]\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/transactions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage transactions.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculateCartTotal\n                            \n                            \n                                    Async\n                                createTransaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findTransactionByReservationId\n                            \n                            \n                                    Private\n                                getSelectFieldsFindAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transactionRepository: Repository, userRepository: Repository, queryHelperService: QueryHelperService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/transactions/transactions.service.ts:32\n                            \n                        \n\n                \n                    \n                            Creates an instance of TransactionsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        transactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the Transaction entity.\n\n\n                                                        \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the User entity.\n\n\n                                                        \n                                                \n                                                \n                                                        queryHelperService\n                                                  \n                                                        \n                                                                        QueryHelperService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to build query options.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        calculateCartTotal\n                        \n                    \n                \n            \n            \n                \ncalculateCartTotal(cartItems: CartItem[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Calculates the total amount for the items in the cart.\nExample :const total = transactionsService.calculateCartTotal(cartItems);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cartItems\n                                            \n                                                        CartItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nList of cart items.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \nThe total amount.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransaction(user: User, total: number, paymentResult: PaymentResult)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Creates a new transaction.\nExample :const transaction = await transactionsService.createTransaction(user, 100, paymentResult);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity.\n\n\n                                            \n                                        \n                                        \n                                                total\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe total amount of the transaction.\n\n\n                                            \n                                        \n                                        \n                                                paymentResult\n                                            \n                                                            PaymentResult\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payment result.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe created transaction.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Retrieves all transactions for a user with pagination and filtering.\nExample :const result = await transactionsService.findAll(1, paginationFilterDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered transactions and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findTransactionByReservationId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findTransactionByReservationId(reservationId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Finds a transaction by reservation ID.\nExample :const transaction = await transactionsService.findTransactionByReservationId(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reservationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the reservation.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found transaction.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSelectFieldsFindAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelectFieldsFindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/transactions/transactions.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Gets the fields to select for the findAll query.\nExample :const selectFields = transactionsService.getSelectFieldsFindAll();\n\n                        \n                            Returns :         object\n\n                        \n                            \n                                \nThe fields to select.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(TransactionsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/transactions.service.ts:32\n                        \n                    \n\n            \n                \n                    Logger instance.\nExample :private readonly logger = new Logger(TransactionsService.name);\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  NotFoundException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Transaction } from './entities/transaction.entity';\nimport { Repository } from 'typeorm';\nimport { User } from '@modules/users/entities/user.entity';\nimport { PaymentResult } from '@common/interfaces/payment.interface';\nimport { CartItem } from '@modules/cart-items/entities/cartitems.entity';\nimport { QueryHelperService } from '@database/query/query-helper.service';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\n\n/**\n * Service to manage transactions.\n * @class\n */\n@Injectable()\nexport class TransactionsService {\n  /**\n   * Logger instance.\n   *\n   * @private\n   * @memberof TransactionsService\n   * @type {Logger}\n   *\n   * @example\n   * private readonly logger = new Logger(TransactionsService.name);\n   */\n  private readonly logger: Logger = new Logger(TransactionsService.name);\n\n  /**\n   * Creates an instance of TransactionsService.\n   *\n   * @constructor\n   * @param {Repository} transactionRepository - Repository for the Transaction entity.\n   * @param {Repository} userRepository - Repository for the User entity.\n   * @param {QueryHelperService} queryHelperService - Service to build query options.\n   */\n  constructor(\n    @InjectRepository(Transaction) private transactionRepository: Repository,\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private readonly queryHelperService: QueryHelperService\n  ) {}\n\n  /**\n   * Creates a new transaction.\n   *\n   * @param {User} user - The user entity.\n   * @param {number} total - The total amount of the transaction.\n   * @param {PaymentResult} paymentResult - The payment result.\n   * @returns {Promise} - The created transaction.\n   *\n   * @example\n   * const transaction = await transactionsService.createTransaction(user, 100, paymentResult);\n   */\n  async createTransaction(\n    user: User,\n    total: number,\n    paymentResult: PaymentResult\n  ): Promise {\n    const transaction = this.transactionRepository.create({\n      user,\n      paymentId: Math.floor(Math.random() * 1000000),\n      totalAmount: total,\n      statusPayment: paymentResult.status\n    });\n    const savedTransaction = await this.transactionRepository.save(transaction);\n    if (paymentResult.status === 'APPROVED') {\n      await this.userRepository.update(user.userId, {\n        transactionsCount: user.transactionsCount + 1,\n        totalSpent: user.totalSpent + total\n      });\n    } else {\n      await this.userRepository.update(user.userId, {\n        transactionsCount: user.transactionsCount + 1\n      });\n    }\n\n    return savedTransaction;\n  }\n\n  /**\n   * Finds a transaction by reservation ID.\n   *\n   * @param {number} reservationId - ID of the reservation.\n   * @returns {Promise} - The found transaction.\n   *\n   * @throws {NotFoundException} If the transaction is not found.\n   *\n   * @example\n   * const transaction = await transactionsService.findTransactionByReservationId(1);\n   */\n  async findTransactionByReservationId(reservationId: number): Promise {\n    const transaction = await this.transactionRepository.findOne({\n      where: { reservation: { reservationId } },\n      relations: ['reservation']\n    });\n\n    if (!transaction) {\n      throw new NotFoundException(`Transaction with reservation ID ${reservationId} not found.`);\n    }\n\n    return transaction;\n  }\n\n  /**\n   * Retrieves all transactions for a user with pagination and filtering.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered transactions and total count.\n   *\n   * @throws {InternalServerErrorException} If an error occurs while retrieving transactions.\n   *\n   * @example\n   * const result = await transactionsService.findAll(1, paginationFilterDto);\n   */\n  async findAll(\n    userId: number,\n    paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    const queryOptions = this.queryHelperService.buildQueryOptions(\n      paginationFilterDto,\n      5\n    );\n\n    queryOptions.where = { ...queryOptions.where, user: { userId } };\n    queryOptions.relations = [\n      'user',\n      'reservation',\n      'reservation.ticket',\n      'reservation.reservationDetails',\n      'reservation.reservationDetails.event'\n    ];\n\n    queryOptions.select = this.getSelectFieldsFindAll();\n    if (paginationFilterDto.sortBy) {\n      queryOptions.order = {\n        [paginationFilterDto.sortBy]: paginationFilterDto.sortOrder.toUpperCase() // 'ASC' or 'DESC'\n      };\n    } else {\n      queryOptions.order = {\n        createdAt: 'DESC'\n      };\n    }\n    try {\n      const [transactions, total] = await this.transactionRepository.findAndCount(queryOptions);\n      return { transactions, total };\n    } catch (error) {\n      this.logger.error(`Failed to retrieve transactions. Error: ${error.message}`, error.stack);\n      throw new InternalServerErrorException('Failed to retrieve transactions.', error.message);\n    }\n  }\n\n  /**\n   * Calculates the total amount for the items in the cart.\n   *\n   * @param {CartItem[]} cartItems - List of cart items.\n   * @returns {number} - The total amount.\n   *\n   * @example\n   * const total = transactionsService.calculateCartTotal(cartItems);\n   */\n  calculateCartTotal(cartItems: CartItem[]): number {\n    return cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  }\n\n  /**\n   * Gets the fields to select for the findAll query.\n   *\n   * @returns {object} - The fields to select.\n   *\n   * @private\n   *\n   * @example\n   * const selectFields = transactionsService.getSelectFieldsFindAll();\n   */\n  private getSelectFieldsFindAll(): object {\n    return {\n      transactionId: true,\n      statusPayment: true,\n      totalAmount: true,\n      createdAt: true,\n      user: {\n        userId: true,\n        firstName: true,\n        lastName: true\n      },\n      reservation: {\n        reservationId: true,\n        transaction: {\n          transactionId: true,\n          statusPayment: true\n        },\n        ticket: {\n          ticketId: true,\n          purchaseKey: true,\n          secureKey: true,\n          qrCode: true\n        },\n        reservationDetails: {\n          title: true,\n          shortDescription: true,\n          price: true,\n          priceFormula: true,\n          event: {\n            eventId: true,\n            categoryType: true,\n            startDate: true\n          }\n        }\n      }\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCartItemDto.html":{"url":"classes/UpdateCartItemDto.html","title":"class - UpdateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cart-items/dto/update-cart-item.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a cart item.\nExtends CreateCartItemDto with all properties optional.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateCartItemDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCartItemDto } from './create-cart-item.dto';\n\n/**\n * Data Transfer Object (DTO) for updating a cart item.\n * Extends CreateCartItemDto with all properties optional.\n *\n * @class\n */\nexport class UpdateCartItemDto extends PartialType(CreateCartItemDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEventDto.html":{"url":"classes/UpdateEventDto.html","title":"class - UpdateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/dto/update-event.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for updating an event.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateEventDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateEventDto } from './create-event.dto';\n\n/**\n * Data transfer object for updating an event.\n *\n * @export UpdateEventDto\n * @class UpdateEventDto\n * @extends {PartialType(CreateEventDto)}\n */\nexport class UpdateEventDto extends PartialType(CreateEventDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDTO.html":{"url":"classes/UpdatePasswordDTO.html","title":"class - UpdatePasswordDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-password.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a user's password.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(6)@IsStrongPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/update-password.dto.ts:36\n                        \n                    \n\n            \n                \n                    The user's new password.\nThis field is required and must be a strong password.\nExample :const dto: UpdatePasswordDTO = { oldPassword: 'OldPassword123!', newPassword: 'NewStrongPassword123!' };\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/update-password.dto.ts:21\n                        \n                    \n\n            \n                \n                    The user's old password.\nThis field is required and must be a non-empty string.\nExample :const dto: UpdatePasswordDTO = { oldPassword: 'OldPassword123!', newPassword: 'NewStrongPassword123!' };\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsStrongPassword, MinLength } from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for updating a user's password.\n *\n * @class\n */\nexport class UpdatePasswordDTO {\n  /**\n   * The user's old password.\n   * This field is required and must be a non-empty string.\n   * @type {string}\n   * @isNotEmpty\n   * @isString\n   *\n   * @example\n   * const dto: UpdatePasswordDTO = { oldPassword: 'OldPassword123!', newPassword: 'NewStrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @IsString()\n  readonly oldPassword: string;\n\n  /**\n   * The user's new password.\n   * This field is required and must be a strong password.\n   * @type {string}\n   * @isNotEmpty\n   * @isStrongPassword\n   *\n   * @example\n   * const dto: UpdatePasswordDTO = { oldPassword: 'OldPassword123!', newPassword: 'NewStrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @MinLength(6)\n  @IsStrongPassword()\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateReservationDetailsDto.html":{"url":"classes/UpdateReservationDetailsDto.html","title":"class - UpdateReservationDetailsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateReservationDetailsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservation-details/dto/update-reservation-details.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating reservation details.\nExtends CreateReservationDetailsDto with all properties optional.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateReservationDetailsDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateReservationDetailsDto } from './create-reservation-details.dto';\n\n/**\n * Data Transfer Object (DTO) for updating reservation details.\n * Extends CreateReservationDetailsDto with all properties optional.\n *\n * @class\n */\nexport class UpdateReservationDetailsDto extends PartialType(CreateReservationDetailsDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateReservationDto.html":{"url":"classes/UpdateReservationDto.html","title":"class - UpdateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/reservations/dto/update-reservation.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a reservation.\nExtends CreateReservationDto with all properties optional.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateReservationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateReservationDto } from './create-reservation.dto';\n\n/**\n * Data Transfer Object (DTO) for updating a reservation.\n * Extends CreateReservationDto with all properties optional.\n *\n * @class\n */\nexport class UpdateReservationDto extends PartialType(CreateReservationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTransactionDto.html":{"url":"classes/UpdateTransactionDto.html","title":"class - UpdateTransactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTransactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/dto/update-transaction.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateTransactionDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTransactionDto } from './create-transaction.dto';\n\nexport class UpdateTransactionDto extends PartialType(CreateTransactionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a user.\nExtends CreateUserDto with all properties optional.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.dto.ts:71\n                        \n                    \n\n            \n                \n                    Email address of the user.\nThis field is required and must be a valid email address.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(50)@Matches(/^[a-zA-Z-]+$/, {message: 'firstName can only contain letters and hyphens'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    First name of the user.\nThis field is optional, must be a string, and have a length between 3 and 50 characters.\nIt should not contain any numbers or special characters other than hyphens.\nExample :```html\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(50)@Matches(/^[a-zA-Z-]+$/, {message: 'lastName can only contain letters and hyphens'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.dto.ts:56\n                        \n                    \n\n            \n                \n                    Last name of the user.\nThis field is optional, must be a string, and have a length between 3 and 50 characters.\nIt should not contain any numbers or special characters other than hyphens.\nExample :```html\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength\n} from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for updating a user.\n * Extends CreateUserDto with all properties optional.\n *\n * @class\n */\nexport class UpdateUserDto {\n  /**\n   * First name of the user.\n   * This field is optional, must be a string, and have a length between 3 and 50 characters.\n   * It should not contain any numbers or special characters other than hyphens.\n   * @type {string}\n   * @isString\n   * @minLength 3\n   * @maxLength 50\n   * @matches /^[a-zA-Z-]+$/\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(50)\n  @Matches(/^[a-zA-Z-]+$/, { message: 'firstName can only contain letters and hyphens' })\n  readonly firstName?: string;\n\n  /**\n   * Last name of the user.\n   * This field is optional, must be a string, and have a length between 3 and 50 characters.\n   * It should not contain any numbers or special characters other than hyphens.\n   * @type {string}\n   * @isString\n   * @minLength 3\n   * @maxLength 50\n   * @matches /^[a-zA-Z-]+$/\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(50)\n  @Matches(/^[a-zA-Z-]+$/, { message: 'lastName can only contain letters and hyphens' })\n  readonly lastName?: string;\n\n  /**\n   * Email address of the user.\n   * This field is required and must be a valid email address.\n   * @type {string}\n   * @isNotEmpty\n   * @isEmail\n   *\n   * @example\n   * const dto: SignUpDto = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', password: 'StrongPassword123!' };\n   */\n  @IsNotEmpty()\n  @IsOptional()\n  @IsEmail()\n  readonly email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accountKey\n                            \n                            \n                                    \n                                cart\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastLogin\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                reservations\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                tokenVersion\n                            \n                            \n                                    \n                                totalSpent\n                            \n                            \n                                    \n                                transactions\n                            \n                            \n                                    \n                                transactionsCount\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accountKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:113\n                        \n                    \n\n            \n                \n                    Unique account key for the user.\nExample :const accountKey = user.accountKey;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cart\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, cart => cart.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    Shopping cart associated with the user.\nExample :const cart = user.cart;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:185\n                        \n                    \n\n            \n                \n                    Timestamp when the user was created.\nExample :const createdAt = user.createdAt;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:66\n                        \n                    \n\n            \n                \n                    Email address of the user.\nExample :const email = user.email;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:77\n                        \n                    \n\n            \n                \n                    First name of the user.\nExample :const firstName = user.firstName;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:151\n                        \n                    \n\n            \n                \n                    Indicates whether the user is active.\nExample :const isActive = user.isActive;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastLogin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:197\n                        \n                    \n\n            \n                \n                    Timestamp when the user last logged in.\nExample :const lastLogin = user.lastLogin;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:88\n                        \n                    \n\n            \n                \n                    Last name of the user.\nExample :const lastName = user.lastName;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column({type: 'varchar', nullable: false, name: 'passwordHash'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:102\n                        \n                    \n\n            \n                \n                    Password hash for the user.\nThis field is excluded from responses.\nExample :const password = user.password;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:44\n                        \n                    \n\n            \n                \n                    Reservations made by the user.\nExample :const reservations = user.reservations;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:125\n                        \n                    \n\n            \n                \n                    Role of the user.\nExample :const role = user.role;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tokenVersion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column({type: 'int', default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:140\n                        \n                    \n\n            \n                \n                    Version of the token for the user.\nThis field is excluded from responses.\nExample :const tokenVersion = user.tokenVersion;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalSpent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:173\n                        \n                    \n\n            \n                \n                    Total amount spent by the user.\nExample :const totalSpent = user.totalSpent;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        transactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Transaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, transaction => transaction.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    Transactions made by the user.\nExample :const transactions = user.transactions;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        transactionsCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:162\n                        \n                    \n\n            \n                \n                    Number of transactions made by the user.\nExample :const transactionsCount = user.transactionsCount;\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('increment')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:22\n                        \n                    \n\n            \n                \n                    Unique identifier for the user.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, OneToOne, OneToMany } from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { UserRole } from '@common/enums/user-role.enum';\nimport { Cart } from '@modules/carts/entities/cart.entity';\nimport { Reservation } from '@modules/reservations/entities/reservation.entity';\nimport { Transaction } from '@modules/transactions/entities/transaction.entity';\n\n/**\n * Entity representing a user.\n *\n * @class\n * @entity\n */\n@Entity('users')\nexport class User {\n  /**\n   * Unique identifier for the user.\n   * @type {number}\n   * @primaryGeneratedColumn\n   */\n  @PrimaryGeneratedColumn('increment')\n  userId: number;\n\n  /**\n   * Shopping cart associated with the user.\n   * @type {Cart}\n   * @oneToOne\n   *\n   * @example\n   * const cart = user.cart;\n   */\n  @OneToOne(() => Cart, cart => cart.user)\n  cart: Cart;\n\n  /**\n   * Reservations made by the user.\n   * @type {Reservation[]}\n   * @oneToMany\n   *\n   * @example\n   * const reservations = user.reservations;\n   */\n  @OneToMany(() => Reservation, reservation => reservation.user)\n  reservations: Reservation[];\n\n  /**\n   * Transactions made by the user.\n   * @type {Transaction[]}\n   * @oneToMany\n   *\n   * @example\n   * const transactions = user.transactions;\n   */\n  @OneToMany(() => Transaction, transaction => transaction.user)\n  transactions: Transaction[];\n\n  /**\n   * Email address of the user.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const email = user.email;\n   */\n  @Column({ type: 'varchar', nullable: false, unique: true })\n  email: string;\n\n  /**\n   * First name of the user.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const firstName = user.firstName;\n   */\n  @Column({ type: 'varchar' })\n  firstName: string;\n\n  /**\n   * Last name of the user.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const lastName = user.lastName;\n   */\n  @Column({ type: 'varchar' })\n  lastName: string;\n\n  /**\n   * Password hash for the user.\n   * This field is excluded from responses.\n   * @type {string}\n   * @exclude\n   * @column\n   *\n   * @example\n   * const password = user.password;\n   */\n  @Exclude()\n  @Column({ type: 'varchar', nullable: false, name: 'passwordHash' })\n  password: string;\n\n  /**\n   * Unique account key for the user.\n   * @type {string}\n   * @column\n   *\n   * @example\n   * const accountKey = user.accountKey;\n   */\n  @Column({ unique: true })\n  accountKey: string;\n\n  /**\n   * Role of the user.\n   * @type {UserRole}\n   * @column\n   * @default UserRole.USER\n   *\n   * @example\n   * const role = user.role;\n   */\n  @Column({ type: 'varchar', default: UserRole.USER })\n  role: UserRole;\n\n  /**\n   * Version of the token for the user.\n   * This field is excluded from responses.\n   * @type {number}\n   * @exclude\n   * @column\n   * @default 1\n   *\n   * @example\n   * const tokenVersion = user.tokenVersion;\n   */\n  @Exclude()\n  @Column({ type: 'int', default: 1 })\n  tokenVersion: number;\n\n  /**\n   * Indicates whether the user is active.\n   * @type {boolean}\n   * @column\n   *\n   * @example\n   * const isActive = user.isActive;\n   */\n  @Column()\n  isActive: boolean;\n\n  /**\n   * Number of transactions made by the user.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const transactionsCount = user.transactionsCount;\n   */\n  @Column()\n  transactionsCount: number;\n\n  /**\n   * Total amount spent by the user.\n   * @type {number}\n   * @column\n   *\n   * @example\n   * const totalSpent = user.totalSpent;\n   */\n  @Column()\n  totalSpent: number;\n\n  /**\n   * Timestamp when the user was created.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const createdAt = user.createdAt;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  /**\n   * Timestamp when the user last logged in.\n   * @type {Date}\n   * @column\n   * @default CURRENT_TIMESTAMP\n   *\n   * @example\n   * const lastLogin = user.lastLogin;\n   */\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  lastLogin: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller to manage users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findAllValues\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                makeInactive\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(UserRole.ADMIN)@UseGuards(RoleGuard)@Get('get-all')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with pagination and filtering. Only accessible by admins.\nExample :GET /users/get-all?page=1&limit=10&sortBy=createdAt&sortOrder=ASC\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered users and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAllValues\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllValues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(UserRole.ADMIN)@UseGuards(RoleGuard)@Get('get-all-values')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves all users. Only accessible by admins.\nExample :GET /users/get-all-values\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of all users.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(IsCreatorGuard)@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by ID. Only accessible by the user or admins.\nExample :GET /users/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        makeInactive\n                        \n                    \n                \n            \n            \n                \n                        \n                    makeInactive(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(IsCreatorGuard)@Patch('make-inactive/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:104\n                        \n                    \n\n\n            \n                \n                        Deactivates a user by setting their isActive flag to false. Only accessible by the user or admins.\nExample :PATCH /users/make-inactive/1\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user to deactivate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(IsCreatorGuard)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:89\n                        \n                    \n\n\n            \n                \n                        Updates a user's information. Only accessible by the user or admins.\nExample :PATCH /users/1\n{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"User\"\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing updated user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated user.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Body, Patch, Param, UseGuards, Query } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { Role } from '@common/decorators/role.decorator';\nimport { UpdateUserDto } from './dto';\nimport { AccessTokenGuard, IsCreatorGuard, RoleGuard } from '@security/guards';\nimport { UserRole } from '@common/enums/user-role.enum';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\nimport { User } from './entities/user.entity';\n\n/**\n * Controller to manage users.\n * @class\n */\n@UseGuards(AccessTokenGuard)\n@Controller('users')\nexport class UsersController {\n  /**\n   * Creates an instance of UsersController.\n   *\n   * @constructor\n   * @param {UsersService} usersService - Service to manage users.\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves all users with pagination and filtering. Only accessible by admins.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered users and total count.\n   *\n   * @example\n   * GET /users/get-all?page=1&limit=10&sortBy=createdAt&sortOrder=ASC\n   */\n  @Role(UserRole.ADMIN)\n  @UseGuards(RoleGuard)\n  @Get('get-all')\n  findAll(\n    @Query() paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    return this.usersService.findAll(paginationFilterDto);\n  }\n\n  /**\n   * Retrieves all users. Only accessible by admins.\n   *\n   * @returns {Promise} - List of all users.\n   *\n   * @example\n   * GET /users/get-all-values\n   */\n  @Role(UserRole.ADMIN)\n  @UseGuards(RoleGuard)\n  @Get('get-all-values')\n  findAllValues(): Promise {\n    return this.usersService.findAllValues();\n  }\n\n  /**\n   * Retrieves a single user by ID. Only accessible by the user or admins.\n   *\n   * @param {string} id - ID of the user.\n   * @returns {Promise} - The found user.\n   *\n   * @example\n   * GET /users/1\n   */\n  @UseGuards(IsCreatorGuard)\n  @Get(':id')\n  findOne(@Param('id') id: string): Promise {\n    return this.usersService.findOne(+id);\n  }\n\n  /**\n   * Updates a user's information. Only accessible by the user or admins.\n   *\n   * @param {string} id - ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - DTO containing updated user information.\n   * @returns {Promise} - The updated user.\n   *\n   * @example\n   * PATCH /users/1\n   * {\n   *   \"firstName\": \"Updated\",\n   *   \"lastName\": \"User\"\n   * }\n   */\n  @UseGuards(IsCreatorGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto): Promise {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  /**\n   * Deactivates a user by setting their isActive flag to false. Only accessible by the user or admins.\n   *\n   * @param {string} id - ID of the user to deactivate.\n   * @returns {Promise}\n   *\n   * @example\n   * PATCH /users/make-inactive/1\n   */\n  @UseGuards(IsCreatorGuard)\n  @Patch('make-inactive/:id')\n  makeInactive(@Param('id') id: string): Promise {\n    return this.usersService.removeUserActive(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAccessTokenStrategy->UsersModule\n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nUsersModule -->\n\nQueryHelperService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to manage users.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            QueryHelperService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Transaction } from '@modules/transactions/entities/transaction.entity';\nimport { QueryHelperService } from '@database/query/query-helper.service';\nimport { AccessTokenStrategy } from '@security/strategies/access-token.strategy';\n\n/**\n * Module to manage users.\n *\n * @module\n */\n@Module({\n  imports: [\n    // Import TypeOrmModule for User and Transaction entities\n    TypeOrmModule.forFeature([User, Transaction])\n  ],\n  controllers: [\n    // Register UsersController\n    UsersController\n  ],\n  providers: [\n    // Register UsersService, QueryHelperService, and AccessTokenStrategy as providers\n    UsersService,\n    QueryHelperService,\n    AccessTokenStrategy\n  ]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to manage users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllValues\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                removeUserActive\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                verifyUserOneBy\n                            \n                            \n                                    Async\n                                verifyUserOneRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, queryHelper: QueryHelperService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            Creates an instance of UsersService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for the User entity.\n\n\n                                                        \n                                                \n                                                \n                                                        queryHelper\n                                                  \n                                                        \n                                                                        QueryHelperService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to build query options.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationFilterDto: PaginationAndFilterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with pagination and filtering.\nExample :const result = await usersService.findAll(paginationFilterDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationFilterDto\n                                            \n                                                            PaginationAndFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing pagination and filter data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe filtered users and total count.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllValues\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllValues()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Retrieves all users.\nExample :const users = await usersService.findAllValues();\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nList of all users.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Finds a user by ID.\nExample :const user = await usersService.findOne(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe found user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeUserActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUserActive(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Deactivates a user by setting their isActive flag to false.\nExample :await usersService.removeUserActive(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user to deactivate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Updates a user's information.\nExample :const updatedUser = await usersService.update(1, updateUserDto);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing updated user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyUserOneBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyUserOneBy(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:126\n                        \n                    \n\n\n            \n                \n                        Verifies a user exists by their ID.\nExample :const user = await usersService.verifyUserOneBy(1);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe verified user.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyUserOneRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyUserOneRelation(userId: number, relations: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Verifies a user exists by their ID and loads specified relations.\nExample :const user = await usersService.verifyUserOneRelation(1, 'profile');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user.\n\n\n                                            \n                                        \n                                        \n                                                relations\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRelations to load.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe verified user with relations loaded.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateUserDto } from './dto';\nimport { QueryHelperService } from '@database/query/query-helper.service';\nimport { PaginationAndFilterDto } from '@common/dto/pagination.dto';\n\n/**\n * Service to manage users.\n * @class\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Creates an instance of UsersService.\n   *\n   * @constructor\n   * @param {Repository} usersRepository - Repository for the User entity.\n   * @param {QueryHelperService} queryHelper - Service to build query options.\n   */\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private readonly queryHelper: QueryHelperService\n  ) {}\n\n  /**\n   * Retrieves all users with pagination and filtering.\n   *\n   * @param {PaginationAndFilterDto} paginationFilterDto - DTO containing pagination and filter data.\n   * @returns {Promise} - The filtered users and total count.\n   *\n   * @throws {InternalServerErrorException} If an error occurs while retrieving users.\n   *\n   * @example\n   * const result = await usersService.findAll(paginationFilterDto);\n   */\n  async findAll(\n    paginationFilterDto: PaginationAndFilterDto\n  ): Promise {\n    const queryOptions = this.queryHelper.buildQueryOptions(paginationFilterDto);\n\n    try {\n      const [users, total] = await this.usersRepository.findAndCount(queryOptions);\n      return { users, total };\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to retrieve users', error.message);\n    }\n  }\n\n  /**\n   * Retrieves all users.\n   *\n   * @returns {Promise} - List of all users.\n   *\n   * @example\n   * const users = await usersService.findAllValues();\n   */\n  async findAllValues(): Promise {\n    return this.usersRepository.find();\n  }\n\n  /**\n   * Finds a user by ID.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - The found user.\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * const user = await usersService.findOne(1);\n   */\n  async findOne(userId: number): Promise {\n    const user = await this.verifyUserOneBy(userId);\n    return user;\n  }\n\n  /**\n   * Updates a user's information.\n   *\n   * @param {number} userId - ID of the user to update.\n   * @param {UpdateUserDto} updateUserDto - DTO containing updated user information.\n   * @returns {Promise} - The updated user.\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * const updatedUser = await usersService.update(1, updateUserDto);\n   */\n  async update(userId: number, updateUserDto: UpdateUserDto): Promise {\n    const user = await this.verifyUserOneBy(userId);\n    Object.assign(user, updateUserDto);\n    return this.usersRepository.save(user);\n  }\n\n  /**\n   * Deactivates a user by setting their isActive flag to false.\n   *\n   * @param {number} userId - ID of the user to deactivate.\n   * @returns {Promise}\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * await usersService.removeUserActive(1);\n   */\n  async removeUserActive(userId: number): Promise {\n    const user = await this.verifyUserOneBy(userId);\n    user.isActive = false;\n    await this.usersRepository.save(user);\n  }\n\n  /**\n   * Verifies a user exists by their ID.\n   *\n   * @param {number} userId - ID of the user.\n   * @returns {Promise} - The verified user.\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * const user = await usersService.verifyUserOneBy(1);\n   */\n  async verifyUserOneBy(userId: number): Promise {\n    const user = await this.usersRepository.findOneBy({ userId });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${userId} not found.`);\n    }\n    return user;\n  }\n\n  /**\n   * Verifies a user exists by their ID and loads specified relations.\n   *\n   * @param {number} userId - ID of the user.\n   * @param {string} relations - Relations to load.\n   * @returns {Promise} - The verified user with relations loaded.\n   *\n   * @throws {NotFoundException} If the user is not found.\n   *\n   * @example\n   * const user = await usersService.verifyUserOneRelation(1, 'profile');\n   */\n  async verifyUserOneRelation(userId: number, relations: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { userId },\n      relations: [relations]\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${userId} not found.`);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WinstonLoggerService.html":{"url":"injectables/WinstonLoggerService.html","title":"injectable - WinstonLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WinstonLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/logger/winston.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle logging using Winston.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/logger/winston.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Logs a message at the debug level.\nExample :winstonLoggerService.debug('This is a debug message');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to log.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/logger/winston.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Logs a message at the error level.\nExample :winstonLoggerService.error('This is an error message', 'Error stack trace');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to log.\n\n\n                                            \n                                        \n                                        \n                                                trace\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe stack trace.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/logger/winston.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Logs a message at the info level.\nExample :winstonLoggerService.log('This is an info message');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to log.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/logger/winston.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Logs a message at the verbose level.\nExample :winstonLoggerService.verbose('This is a verbose message');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to log.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/logger/winston.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Logs a message at the warn level.\nExample :winstonLoggerService.warn('This is a warning message');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to log.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LoggerService } from '@nestjs/common';\nimport { logger } from './winston.config'; // Import your winston logger setup\n\n/**\n * Service to handle logging using Winston.\n * @class\n * @implements {LoggerService}\n */\n@Injectable()\nexport class WinstonLoggerService implements LoggerService {\n  /**\n   * Logs a message at the info level.\n   *\n   * @param {string} message - The message to log.\n   *\n   * @example\n   * winstonLoggerService.log('This is an info message');\n   */\n  log(message: string) {\n    logger.info(message);\n  }\n\n  /**\n   * Logs a message at the error level.\n   *\n   * @param {string} message - The message to log.\n   * @param {string} trace - The stack trace.\n   *\n   * @example\n   * winstonLoggerService.error('This is an error message', 'Error stack trace');\n   */\n  error(message: string, trace: string) {\n    logger.error(message, { trace });\n  }\n\n  /**\n   * Logs a message at the warn level.\n   *\n   * @param {string} message - The message to log.\n   *\n   * @example\n   * winstonLoggerService.warn('This is a warning message');\n   */\n  warn(message: string) {\n    logger.warn(message);\n  }\n\n  /**\n   * Logs a message at the debug level.\n   *\n   * @param {string} message - The message to log.\n   *\n   * @example\n   * winstonLoggerService.debug('This is a debug message');\n   */\n  debug(message: string) {\n    logger.debug(message);\n  }\n\n  /**\n   * Logs a message at the verbose level.\n   *\n   * @param {string} message - The message to log.\n   *\n   * @example\n   * winstonLoggerService.verbose('This is a verbose message');\n   */\n  verbose(message: string) {\n    logger.verbose(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/common/decorators/role.decorator.ts\n            \n            variable\n            Role\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/role.decorator.ts\n            \n            variable\n            ROLE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/user-id.decorator.ts\n            \n            variable\n            UserId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/dto/id.dto.ts\n            \n            class\n            IdDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/dto/pagination.dto.ts\n            \n            class\n            PaginationAndFilterDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/common/exceptions/invalid-credentials.exception.ts\n            \n            class\n            InvalidCredentialsException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/globals-filter/http-exceptions-filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/jwt.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/jwt.interface.ts\n            \n            interface\n            JWTTokens\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/key-value-redis.interface.ts\n            \n            interface\n            KeyValuePairs\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/interfaces/payload.interface.ts\n            \n            interface\n            Payload\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/payment.interface.ts\n            \n            interface\n            PaymentResult\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/payment.interface.ts\n            \n            interface\n            ProcessPaymentResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/token.interface.ts\n            \n            interface\n            TokenConfig\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/common/logger/winston.config.ts\n            \n            variable\n            commonFormat\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/logger/winston.config.ts\n            \n            variable\n            consoleFormat\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/logger/winston.config.ts\n            \n            variable\n            level\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/logger/winston.config.ts\n            \n            variable\n            levels\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/logger/winston.config.ts\n            \n            variable\n            logger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/logger/winston.service.ts\n            \n            injectable\n            WinstonLoggerService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/database/migration-runner.ts\n            \n            function\n            runMigrations\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1711085051379-CreateTableUsers.ts\n            \n            class\n            CreateTableUsers1711085051379\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712572717258-CreateTableEvents.ts\n            \n            class\n            CreateTableEvents1712572717258\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712642603000-CreateTableEventPrices.ts\n            \n            class\n            CreateTableEventPrices1712642603715\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712661221574-CreateTableCarts.ts\n            \n            class\n            CreateTableCarts1712661221574\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712661230450-CreateTableCartItems.ts\n            \n            class\n            CreateTableCartItems1712661230450\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712661230451-CreateTableReservations.ts\n            \n            class\n            CreateTableReservations1712661230451\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712661230452-CreateTableTransactions.ts\n            \n            class\n            CreateTableTransactions1712661230452\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712717719010-CreateTableTickets.ts\n            \n            class\n            CreateTableTickets1712717719010\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712751776641-CreateTableReservationDetails.ts\n            \n            class\n            CreateTableReservationDetails1712751776641\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1712751780000-AddForeignKey.ts\n            \n            class\n            AddForeignKeyConstraints1712751780000\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/database/query/query-helper.service.ts\n            \n            injectable\n            QueryHelperService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/database/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/database/typeorm-cli.config.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/libs/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/login.dto.ts\n            \n            class\n            LoginDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/signup.dto.ts\n            \n            class\n            SignUpDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-password.dto.ts\n            \n            class\n            UpdatePasswordDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/cart-items/cart-items.controller.ts\n            \n            controller\n            CartItemsController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/cart-items/cart-items.service.ts\n            \n            injectable\n            CartItemsService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/modules/cart-items/dto/create-cart-item.dto.ts\n            \n            class\n            CreateCartItemDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/cart-items/dto/update-cart-item.dto.ts\n            \n            class\n            UpdateCartItemDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/cart-items/entities/cartitems.entity.ts\n            \n            entity\n            CartItem\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/carts/carts.service.ts\n            \n            injectable\n            CartsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/carts/entities/cart.entity.ts\n            \n            entity\n            Cart\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/dto/create-event.dto.ts\n            \n            class\n            CreateEventDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/events/dto/update-event.dto.ts\n            \n            class\n            UpdateEventDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/entities/event-price.entity.ts\n            \n            entity\n            EventPrice\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/entities/event.entity.ts\n            \n            entity\n            Event\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/event-prices.service.ts\n            \n            injectable\n            EventPricesService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/modules/events/event-sales.service.ts\n            \n            injectable\n            EventSalesService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/modules/events/events.controller.ts\n            \n            controller\n            EventsController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/events/events.service.ts\n            \n            injectable\n            EventsService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/modules/reservation-details/dto/create-reservation-details.dto.ts\n            \n            class\n            CreateReservationDetailsDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/modules/reservation-details/dto/update-reservation-details.dto.ts\n            \n            class\n            UpdateReservationDetailsDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/reservation-details/entities/reservation-details.entity.ts\n            \n            entity\n            ReservationDetails\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/reservation-details/reservation-details.service.ts\n            \n            injectable\n            ReservationDetailsService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/reservations/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/reservations/dto/update-reservation.dto.ts\n            \n            class\n            UpdateReservationDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/reservations/entities/reservation.entity.ts\n            \n            entity\n            Reservation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/reservations/reservations-processor.service.ts\n            \n            injectable\n            ReservationsProcessorService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/reservations/reservations.controller.ts\n            \n            controller\n            ReservationsController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/reservations/reservations.service.ts\n            \n            injectable\n            ReservationsService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/modules/tickets/entities/ticket.entity.ts\n            \n            entity\n            Ticket\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/tickets/tickets.service.ts\n            \n            injectable\n            TicketsService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/transactions/dto/create-transaction.dto.ts\n            \n            class\n            CreateTransactionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/transactions/dto/update-transaction.dto.ts\n            \n            class\n            UpdateTransactionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/transactions/entities/transaction.entity.ts\n            \n            entity\n            Transaction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/transactions/transactions.controller.ts\n            \n            controller\n            TransactionsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/security/cookie/cookie.service.ts\n            \n            injectable\n            CookieService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/security/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/security/guards/access-token.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/security/guards/is-creator.guard.ts\n            \n            guard\n            IsCreatorGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/security/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/security/strategies/access-token.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/security/token/refreshtoken-store.service.ts\n            \n            injectable\n            RefreshTokenStoreService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/security/token/token-management.service.ts\n            \n            injectable\n            TokenManagementService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/security/token/token.service.ts\n            \n            injectable\n            TokenService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.common.ts\n            \n            variable\n            DEFAULT_PAGE_SIZE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.common.ts\n            \n            variable\n            PRICES_FORMULA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.env.ts\n            \n            variable\n            DEV_ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.env.ts\n            \n            variable\n            NODE_ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.env.ts\n            \n            variable\n            PROD_ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            createEnumType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            DOES_ENUM_CATEGORY_TYPE_EXIST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            DOES_ENUM_PRICE_FORMULE_TYPE_EXIST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            DOES_ENUM_STATUS_RESERVATION_EXIST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            DOES_ENUM_USER_ROLE_EXIST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/constants/constants.migrationdb.ts\n            \n            variable\n            ENUM_TYPES_DB\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/services/convert-utils.service.ts\n            \n            injectable\n            ConvertUtilsService\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.7\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.7\n        \n            @nestjs/event-emitter : ^2.0.4\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.3.7\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/throttler : ^5.1.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            argon2 : ^0.40.1\n        \n            cache-manager-redis-store : ^3.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            csrf-csrf : ^3.0.4\n        \n            dotenv : ^16.4.5\n        \n            express-rate-limit : ^7.2.0\n        \n            helmet : ^7.1.0\n        \n            ioredis : ^5.3.2\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.11.5\n        \n            qrcode : ^1.5.3\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^9.0.1\n        \n            winston : ^3.13.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategoryEventTypeEnum   (src/.../category-type.enum.ts)\n                        \n                        \n                            PriceFormulaEnum   (src/.../price-formula.enum.ts)\n                        \n                        \n                            SortOrder   (src/.../sort-order.enum.ts)\n                        \n                        \n                            StatusReservation   (src/.../status-reservation.enum.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/category-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CategoryEventTypeEnum\n                    \n                \n                    \n                        \n                            Enumeration for different types of event categories.\n\n                        \n                    \n                        \n                            \n                                 ARCHERY\n                            \n                        \n                        \n                            \n                                Value : ARCHERY\n                            \n                        \n                        \n                            \n                                 ATHLETICS\n                            \n                        \n                        \n                            \n                                Value : ATHLETICS\n                            \n                        \n                        \n                            \n                                 BADMINTON\n                            \n                        \n                        \n                            \n                                Value : BADMINTON\n                            \n                        \n                        \n                            \n                                 BASKETBALL\n                            \n                        \n                        \n                            \n                                Value : BASKETBALL\n                            \n                        \n                        \n                            \n                                 BOXING\n                            \n                        \n                        \n                            \n                                Value : BOXING\n                            \n                        \n                        \n                            \n                                 CANOE_KAYAK\n                            \n                        \n                        \n                            \n                                Value : CANOE_KAYAK\n                            \n                        \n                        \n                            \n                                 CYCLING\n                            \n                        \n                        \n                            \n                                Value : CYCLING\n                            \n                        \n                        \n                            \n                                 DIVING\n                            \n                        \n                        \n                            \n                                Value : DIVING\n                            \n                        \n                        \n                            \n                                 FENCING\n                            \n                        \n                        \n                            \n                                Value : FENCING\n                            \n                        \n                        \n                            \n                                 FOOTBALL\n                            \n                        \n                        \n                            \n                                Value : FOOTBALL\n                            \n                        \n                        \n                            \n                                 GYMNASTICS\n                            \n                        \n                        \n                            \n                                Value : GYMNASTICS\n                            \n                        \n                        \n                            \n                                 HANDBALL\n                            \n                        \n                        \n                            \n                                Value : HANDBALL\n                            \n                        \n                        \n                            \n                                 ROWING\n                            \n                        \n                        \n                            \n                                Value : ROWING\n                            \n                        \n                        \n                            \n                                 SAILING\n                            \n                        \n                        \n                            \n                                Value : SAILING\n                            \n                        \n                        \n                            \n                                 SWIMMING\n                            \n                        \n                        \n                            \n                                Value : SWIMMING\n                            \n                        \n                        \n                            \n                                 TABLE_TENNIS\n                            \n                        \n                        \n                            \n                                Value : TABLE_TENNIS\n                            \n                        \n                        \n                            \n                                 TENNIS\n                            \n                        \n                        \n                            \n                                Value : TENNIS\n                            \n                        \n                        \n                            \n                                 VOLLEYBALL\n                            \n                        \n                        \n                            \n                                Value : VOLLEYBALL\n                            \n                        \n                        \n                            \n                                 WEIGHTLIFTING\n                            \n                        \n                        \n                            \n                                Value : WEIGHTLIFTING\n                            \n                        \n                        \n                            \n                                 KARATE\n                            \n                        \n                        \n                            \n                                Value : KARATE\n                            \n                        \n            \n        \n\n    src/common/enums/price-formula.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PriceFormulaEnum\n                    \n                \n                    \n                        \n                            Enumeration for different pricing formulas.\n\n                        \n                    \n                        \n                            \n                                 SOLO\n                            \n                        \n                        \n                            \n                                Value : SOLO\n                            \n                        \n                        \n                            \n                                 DUO\n                            \n                        \n                        \n                            \n                                Value : DUO\n                            \n                        \n                        \n                            \n                                 FAMILY\n                            \n                        \n                        \n                            \n                                Value : FAMILY\n                            \n                        \n            \n        \n\n    src/common/enums/sort-order.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        SortOrder\n                    \n                \n                    \n                        \n                            Enumeration for sort order options.\n\n                        \n                    \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/common/enums/status-reservation.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        StatusReservation\n                    \n                \n                    \n                        \n                            Enumeration for reservation status options.\n\n                        \n                    \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : APPROVED\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : REJECTED\n                            \n                        \n            \n        \n\n    src/common/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                    \n                        \n                            Enumeration for user roles.\n\n                        \n                    \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            runMigrations   (src/.../migration-runner.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        The bootstrap function to set up and start the NestJS application.\n\n\n                \n            \n        \n    \n    src/database/migration-runner.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        runMigrations\n                        \n                    \n                \n            \n            \n                \nrunMigrations()\n                \n            \n\n\n\n\n            \n                \n                        Runs database migrations using TypeORM.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n    NEST-JO\n\n\n    Streamlining Development and Orchestration!\n\n\n    \n    \n    \n    \n\n\n    \n\n\n\n\n  Table of Contents\n\n\n Overview\n Features\n Repository Structure\n Modules\n Getting Started\n Installation\n Usage\n Tests\n\n\n Project Roadmap\n Contributing\n License\n Acknowledgments\n\n\nOverview\nNest-JO is a comprehensive open-source project built with NestJS that offers a robust and efficient solution for orchestrating Docker deployments within a NestJS project structure. The projects core functionalities revolve around optimizing the TypeScript build, defining Docker services for NestJS, PostgreSQL, and Redis in both development and production environments, and streamlining the deployment workflow. With detailed configuration files such as tsconfig.build.json, docker-compose.yml, docker-compose.override.yml, Dockerfile, nest-cli.json, and docker-compose.prod.yml, Nest-JO ensures seamless network connections, data storage management, and orchestrated deployment processes. By utilizing these components, Nest-JO provides developers with a valuable toolset to enhance project maintenance, configuration setup, and overall development efficiency.\n\nFeatures\n\n\n\n\nFeature\nDescription\n\n\n\n\n⚙️\nArchitecture\nNest-JO project follows a modular and scalable architecture using NestJS framework. It utilizes Docker for containerization and services are defined in docker-compose files for easy deployment.\n\n\n🔩\nCode Quality\nThe codebase maintains good quality with TypeScript, linting rules, and formatting with Prettier. Consistent coding style is ensured using ESLint.\n\n\n📄\nDocumentation\nExtensive documentation with project setup instructions, API endpoints, and architecture overview. API endpoints are documented using Swagger.\n\n\n🔌\nIntegrations\nIntegrates various dependencies like TypeORM for database operations, Passport for authentication, and Redis for cache management. External libraries enhance functionality such as Qrcode generation.\n\n\n🧩\nModularity\nHighly modular codebase with components, services, and controllers organized logically for easy maintenance and reusability. Dependency Injection pattern is followed for loose coupling.\n\n\n🧪\nTesting\nTesting frameworks like Jest and Supertest are used for unit and integration testing. Tests are written for ensuring code reliability and functionality.\n\n\n⚡️\nPerformance\nEfficient resource usage with optimized TypeScript build configuration. NestJS architecture ensures high performance and speed in handling requests.\n\n\n🛡️\nSecurity\nSecurity measures include the use of Passport for JWT authentication, Argon2 for password hashing, and Helmet middleware for setting security-related HTTP headers.\n\n\n📦\nDependencies\nKey dependencies include TypeORM for ORM, NestJS packages for building APIs, Passport for authentication strategies, and Redis for caching.\n\n\n🚀\nScalability\nScalable design with NestJS architecture supporting horizontal scaling. Services in docker-compose can be easily scaled up with additional instances. Database and cache are managed for scalability.\n\n\n\n\nRepository Structure\nExample :└── nest-jo/\n    ├── Dockerfile\n    ├── Makefile\n    ├── README.md\n    ├── docker-compose.override.yml\n    ├── docker-compose.prod.yml\n    ├── docker-compose.yml\n    ├── nest-cli.json\n    ├── package.json\n    ├── src\n    │   ├── app.module.ts\n    │   ├── common\n    │   ├── database\n    │   ├── libs\n    │   ├── main.ts\n    │   ├── modules\n    │   ├── security\n    │   ├── type.d.ts\n    │   └── utils\n    ├── test\n    │   ├── app.e2e-spec.ts\n    │   └── jest-e2e.json\n    ├── tsconfig.build.json\n    └── tsconfig.json\nModules\n.\n\n\n\n\nFile\nSummary\n\n\n\n\ntsconfig.build.json\nOptimize TypeScript build by excluding unnecessary files for compilation in the repositorys architecture.\n\n\ndocker-compose.yml\nDefines services for NestJS server, PostgreSQL database, and Redis cache in the Docker Compose file. Establishes network connections and persistent volumes for data storage. Facilitates orchestrated deployment within the NestJS project structure.\n\n\ndocker-compose.override.yml\nDefines development Docker services for NEST-JO project. It configures server, PostgreSQL, and Redis containers with environment variables for local development. Ports, images, and commands are specified for seamless deployment and testing.\n\n\nDockerfile\nOrchestrates multiple build stages to create a production-ready image for the NestJS application. Utilizes pnpm for dependency management and separates build and production environments. Sets up the node user and defines the entry point for the container.\n\n\nnest-cli.json\nDefines source root and compiler options for the NestJS schematics collection. Enables deleting the output directory to streamline project maintenance and configuration setup. Essential for organizing and optimizing the development workflow in the repository architecture.\n\n\ndocker-compose.prod.yml\nDefines Docker services for a production setup of the NestJS app, Postgres, and Redis. Configures environment variables, container settings, volumes, and network for each service. Promotes scalability and reliability of the application through containerization.\n\n\ntsconfig.json\nEnables TypeScript path mapping for the repositorys modular structure, facilitating cleaner imports and project organization by defining aliases to key directories like common, modules, security, database, libs, and utils.\n\n\npackage.json\nOrchestrates project build, linting, testing, and migrations. Implements runtime and development server control with various modes. Manages the applications code and structure based on defined scripts and dependencies listed in the package.json file.\n\n\nMakefile\nFacilitates creating, running, and reverting database migrations. Executes unit and end-to-end tests. Connects to Redis CLI. Manages Docker containers for development and production environments. Key commands include migrate-create, migrate-run, test, e2e, redis-cli, dev, and prod.\n\n\n\n\n\nsrc\n\n\n\n\nFile\nSummary\n\n\n\n\nmain.ts\nInitializes the NestJS application with custom logging and CORS settings from the configuration service. Runs database migrations, applies global pipes, filters, and interceptors, and listens on a specified port. Logs the environment mode based on settings.\n\n\ntype.d.ts\nExtends Express Request interface to hold User data, enabling recognition of attached user objects in TypeScript.\n\n\napp.module.ts\nDefines the applications core module structure by importing various modules for essential functionalities like configuration, databases, authentication, user management, event handling, and more. Orchestrates the integration of these modules to build a robust and comprehensive application foundation.\n\n\n\n\n\nsrc.libs.payment\n\n\n\n\nFile\nSummary\n\n\n\n\npayment.module.ts\nDefines payment functionality for the application by orchestrating data imports, and communication between user, reservations, transactions, and ticket modules. Integrates ORM for user entity and exports payment service for module interaction within the system.\n\n\npayment.service.spec.ts\nTests the processPayment method in PaymentService to ensure correct handling of payment scenarios based on cart total. Validates approval, rejection, and failure outcomes using predefined success and pending rates.\n\n\npayment.service.ts\nHandles payment processing with a configurable success rate. Proactively determines payment approval based on cart total. Ensures secure and efficient payment interactions within the repositorys architecture.\n\n\n\n\n\nsrc.common.enums\n\n\n\n\nFile\nSummary\n\n\n\n\nsort-order.enum.ts\nASC and DESC. Crucial for consistent sorting in the repositorys architecture.\n\n\nuser-role.enum.ts\nDefines user roles as an enum with USER and ADMIN roles. This file's critical feature is providing a structured way to manage different user roles within the Nest-jo repository's architecture.\n\n\nstatus-reservation.enum.ts\nAPPROVED and REJECTED. Enhances clarity and consistency across modules in the repository's architecture.\n\n\ncategory-type.enum.ts\nDefines event categories for the Olympics using an enum. Categorizes sports like Archery, Athletics, and more. Enhances code readability and maintainability in the Nest-jo repositorys architecture.\n\n\nprice-formula.enum.ts\nDefines pricing formula enums for solo, duo, and family scenarios within the repositorys common structure. Allows consistent usage and reference of pricing formulas throughout the project.\n\n\n\n\n\nsrc.common.decorators\n\n\n\n\nFile\nSummary\n\n\n\n\nuser-id.decorator.ts\nExtracts user ID from request object via custom decorator for easy usage in route handlers within the NestJS open-source projects common module.\n\n\nrole.decorator.ts\nDefines route handler role access based on specified user roles for authorization within the NestJS architecture. Integrates with RoleGuard to manage access control.\n\n\n\n\n\nsrc.common.exceptions\n\n\n\n\nFile\nSummary\n\n\n\n\ninvalid-credentials.exception.ts\nDefines custom exception InvalidCredentialsException for unauthorized login attempts in a NestJS project. Maintains clear separation of concerns within the repositorys architecture by encapsulating and signaling invalid credential errors.\n\n\n\n\n\nsrc.common.globals-filter\n\n\n\n\nFile\nSummary\n\n\n\n\nhttp-exceptions-filter.spec.ts\nImplements error handling and logging based on environment for HTTP exceptions. Parses and formats error responses dynamically. Enriches logs with detailed exception data. Enhances user experience by providing tailored error messages in both development and production environments.\n\n\nhttp-exceptions-filter.ts\nHandles and customizes HTTP exceptions by providing detailed error messages and additional debugging information, as per the applications environment.\n\n\n\n\n\nsrc.common.dto\n\n\n\n\nFile\nSummary\n\n\n\n\npagination.dto.ts\nDefines pagination and filtering options for data retrieval, ensuring robust input validation. Supports setting limits, offsets, sorting, filtering by field and value. Enhances maintainability and readability of data manipulation processes within the repository architecture.\n\n\nid.dto.ts\nValidates and sanitizes ID inputs for the repositorys API endpoints by ensuring they are positive integers. Located in the src/common/dto' directory, this IdDto class utilizes class-validator for data integrity.\n\n\n\n\n\nsrc.common.interfaces\n\n\n\n\nFile\nSummary\n\n\n\n\ntoken.interface.ts\nDefines token configuration structure for access and refresh tokens, including secret keys and expiration times. Enforces consistent token handling and settings across the Nest.js repositorys authentication and security modules.\n\n\npayment.interface.ts\nDefines payment result and process structures for reservation system, enhancing payment handling. It integrates with reservation entities, ensuring smooth payment processing and status updates.\n\n\nkey-value-redis.interface.ts\nDefines a structure for key-value pairs with flexibility in data types. Essential for handling various types of data in the Redis interface within the repositorys architecture.\n\n\npayload.interface.ts\nDefines JWT payload interface with user ID, role, and token version in the common module to enforce consistent token structure across the application.\n\n\njwt.interface.ts\nDefines interfaces for JWT payload and tokens with sub, role, version, accessToken, refreshToken, and optional expiresIn fields. Crucial for managing authentication and authorization within the NestJS projects security layer.\n\n\n\n\n\nsrc.common.logger\n\n\n\n\nFile\nSummary\n\n\n\n\nwinston.config.ts\nDefines logging levels and formats, configures Winston logger with file transports, and adds console transport for non-production environments. Achieves centralized logging configuration for the parent repositorys services to maintain consistency and facilitate debugging across different environments.\n\n\nwinston.service.ts\nEnables logging with Winston in the NestJS app. Implements various log levels like info, error, warn, debug, and verbose. The service interacts with the winston.config for logging setup.\n\n\n\n\n\nsrc.modules\n\n\n\n\nFile\nSummary\n\n\n\n\ncommom.module.ts\nDefines a global module with common services. Imports and exports essential services like user management, encryption, payment processing, and Redis operations. Facilitates sharing critical functionalities across the application.\n\n\n\n\n\nsrc.modules.reservation-details\n\n\n\n\nFile\nSummary\n\n\n\n\nreservation-details.module.ts\nDefines ReservationDetailsModule with TypeORM entities Event and ReservationDetails. Imports CartItemsModule and EventsModule. Registers ReservationDetailsService as a provider. Manages reservation details in the NestJS projects layered architecture.\n\n\nreservation-details.service.ts\nManages reservation details by creating details from a reservation and cart item, ensuring event existence. It provides functionality to find a reservation detail by ID, handling exceptions if not found.\n\n\nreservation-details.service.spec.ts\nImplements service to create and retrieve reservation details, verifying event existence and handling exceptions. Interacts with repositories for ReservationDetails and Event entities, ensuring seamless data manipulation within the NestJS architecture.\n\n\n\n\n\nsrc.modules.reservation-details.entities\n\n\n\n\nFile\nSummary\n\n\n\n\nreservation-details.entity.ts\nDefines ReservationDetails entity with associations to Reservation and Event, storing pricing, title, and timestamps. Maintains relations between different modules, enhancing the parent repositorys data structure.\n\n\n\n\n\nsrc.modules.reservation-details.dto\n\n\n\n\nFile\nSummary\n\n\n\n\ncreate-reservation-details.dto.ts\nDefines DTO for reservation details with validation rules, ensuring accurate creation. Matches parent repositorys architecture by organizing under modules. Facilitates error-free reservation data input, adhering to specified constraints.\n\n\nupdate-reservation-details.dto.ts\nEnhances UpdateReservationDetailsDto by extending CreateReservationDetailsDto with optional properties, supporting dynamic reservation details updates.\n\n\n\n\n\nsrc.modules.users\n\n\n\n\nFile\nSummary\n\n\n\n\nusers.controller.spec.ts\nFind all users with pagination, return all user values, get a single user by ID, update user details, and deactivate a user. Verifies service interactions and error handling for various scenarios in the context of user management.\n\n\nusers.module.ts\nDefines a module to manage users and their transactions, importing necessary components such as TypeORM entities and user-related services. Registrations include UsersController, UsersService, QueryHelperService, and AccessTokenStrategy.\n\n\nusers.service.ts\nManages user data in the NestJS application. Retrieves, updates, and deactivates users with error handling. Utilizes repositories and query services for efficient user operations.\n\n\nusers.service.spec.ts\nImplements user-related services for user management, including finding, updating, and removing users. Validates user details and handles errors like user not found.\n\n\nusers.controller.ts\nManages user data access and modification, enforcing role-based and creator-specific permissions. Implements CRUD functionality for admin and individual users. Key features include pagination, user retrieval by ID, updating user details, and deactivation.\n\n\n\n\n\nsrc.modules.users.entities\n\n\n\n\nFile\nSummary\n\n\n\n\nuser.entity.ts\nDefines user entity with properties like email, name, role, and timestamps for a NestJS e-commerce application. Establishes relationships with a shopping cart, reservations, and transactions. Increments transactions count and tracks total spent while maintaining user activity status.\n\n\n\n\n\nsrc.modules.users.dto\n\n\n\n\nFile\nSummary\n\n\n\n\nupdate-user.dto.ts\nDefines DTO for updating a user by extending the properties of creating a user with optional fields.\n\n\nindex.ts\nExports user data transfer objects for creating and updating users in the NestJS project. It centralizes DTO handling for user-related operations within the repositorys modular architecture.\n\n\ncreate-user.dto.ts\nDefines a data structure for creating users with specified fields and validation rules. Maps user details like first name, last name, email, password, and role to ensure data integrity within the users module of the repository.\n\n\n\n\n\nsrc.modules.cart-items\n\n\n\n\nFile\nSummary\n\n\n\n\ncart-items.module.ts\nDefines a module for managing cart items in the Nest.js repository. Imports entities and services, links with related modules, and exports the CartItemsService for use in other parts of the application.\n\n\ncart-items.service.ts\nManages cart items in a shopping app by handling addition, retrieval, updating, and removal operations. It ensures item availability, calculates prices, and interacts with related entities like carts and events.\n\n\ncart-items.controller.ts\nManages cart items by facilitating item addition, retrieval, update, and removal within specific user carts. Utilizes DTOs for data manipulation and guards access with an AccessTokenGuard for security.\n\n\ncart-items.service.spec.ts\nAdding, finding, updating, and removing items from a cart. Ensure cart item existence and availability while managing quantities and prices using cart and event repositories.\n\n\ncart-items.controller.spec.ts\nImplements cart item CRUD operations securely & efficiently using PriceFormulaEnum for pricing. Handles adding, retrieving, updating, and removing items from the cart, throwing specific exceptions for scenarios like non-existing items or unauthorized access.\n\n\n\n\n\nsrc.modules.cart-items.entities\n\n\n\n\nFile\nSummary\n\n\n\n\ncartitems.entity.ts\nDefines a data model for shopping cart items linking to carts, events, and reservations. Tracks pricing, quantity, and timestamps. Supports the parent repositorys e-commerce architecture for managing cart items efficiently.\n\n\n\n\n\nsrc.modules.cart-items.dto\n\n\n\n\nFile\nSummary\n\n\n\n\ncreate-cart-item.dto.ts\nDefines a data transfer object for cart item creation. Validates user ID (optional), event ID, quantity, and price formula using class-validator. Integrates with the parent repositorys cart items module architecture.\n\n\nupdate-cart-item.dto.ts\nEnriches cart item data transfer object with optional properties, ensuring flexibility for updating cart items seamlessly within the repositorys modular architecture.\n\n\n\n\n\nsrc.modules.reservations\n\n\n\n\nFile\nSummary\n\n\n\n\nreservations-processor.service.spec.ts\nVerifies users, processes payments, creates reservations, and finalizes bookings. Manages cart items, transactions, users, and reservations within the NestJS architecture.\n\n\nreservations.controller.spec.ts\nImplements tests for Reservation Controller with actions like create, find all, and find one, ensuring proper reservation handling with different user roles.\n\n\nreservations.service.spec.ts\nTests ReservationsService interactions in src/modules/reservations. Ensures accurate reservation generation, retrieval, saving. Facilitates admin access with filtering capabilities. Invalid cases trigger exceptions for robust error handling in the repository.\n\n\nreservations-processor.service.ts\nProcesses user reservations, handling cart operations, payments, and finalizing bookings. Manages reservation creation for cart items, prevents duplicates, and cleans up post-payment. Integrates with various services for a comprehensive booking system.\n\n\nreservations.service.ts\nManages reservations, including generating, retrieving, finding, saving, and listing with query options. Provides functionalities for users and admin views. Follows a defined structure within the Nest.js repository for efficient reservation handling.\n\n\nreservations.module.ts\nDefines a module managing reservations, handling database entities and inter-module dependencies. Registers controllers, services, and providers while exporting key services for broader application use.\n\n\nreservations.controller.ts\nManages reservations for users by creating, retrieving, and listing them based on user roles. Provides endpoints for user and admin actions with pagination and filtering. Introduces necessary guards and decorators for security and role-based access control in the Nest.js architecture.\n\n\n\n\n\nsrc.modules.reservations.entities\n\n\n\n\nFile\nSummary\n\n\n\n\nreservation.entity.ts\nDefines Reservation entity linking User, ReservationDetails, Transaction, CartItem, and Ticket. Manages reservation info with timestamps. Supports relational mapping in the repositorys modular architecture.\n\n\n\n\n\nsrc.modules.reservations.dto\n\n\n\n\nFile\nSummary\n\n\n\n\ncreate-reservation.dto.ts\nDefines DTO for reservation creation with validated user, cart item ID, total price, and payment ID. Enhances reliability and data integrity in the reservation module.\n\n\nupdate-reservation.dto.ts\nDefines an update reservation DTO by extending the create reservation DTO with optional properties.\n\n\n\n\n\nsrc.modules.events\n\n\n\n\nFile\nSummary\n\n\n\n\nevents.controller.ts\nManages event creation, retrieval, update, and deletion with access control. Handles price calculations, event filtering, and value retrieval. Key features include admin-exclusive operations, security guards, and data manipulation through service methods.\n\n\nevent-prices.service.ts\nCreates prices from base price, retrieves prices by formula, updates prices with new base price, and deletes all prices related to an event. Ensures events exist before price operations.\n\n\nevents.service.spec.ts\nImplements event creation, retrieval, update, and deletion with necessary validations and operations, such as fetching from cache, error handling, and database interaction. Manages event data using NestJS, TypeORM, Redis, and utilities for efficient event management within the repositorys architecture.\n\n\nevents.service.ts\nManages events creation, retrieval, update, and deletion with caching and validation. Filters events with pagination and handles uniqueness constraints, maintaining data integrity and performance in the repositorys event-centric architecture.\n\n\nevents.module.ts\nDefines and structures an events module handling event entities, prices, and sales in NestJS using TypeORM. It registers controllers, services, and providers for managing event-related operations within the applications architecture.\n\n\nevent-sales.service.ts\nManages event sales revenue by processing cart items, deducting ticket quantities, and updating event revenue. Facilitates efficient revenue tracking and ticket management within the parent repositorys event module.\n\n\nevents.controller.spec.ts\nValidates, creates, updates, finds, and removes events in the application. Uses services for event operations and DTOs for data transfer. Tests controller functionality in event handling with various scenarios.\n\n\nevent-sales.service.spec.ts\nTests service methods to manage event ticket sales. Mocks data handling and revenue updates. Validates ticket availability and triggers exceptions as needed. Key for ensuring accurate event ticketing within the repositorys broader architecture.\n\n\nevent-prices.service.spec.ts\nImplements CRUD operations for event prices. Manages creating, updating, retrieving, and deleting prices for events with various price formulas. Ensures valid event checks and handling of not found exceptions for events and prices.\n\n\n\n\n\nsrc.modules.events.entities\n\n\n\n\nFile\nSummary\n\n\n\n\nevent-price.entity.ts\nDefines event price entity with relationships and properties for pricing details. Central to managing event pricing within the architecture, connecting events and price formulas.\n\n\nevent.entity.ts\nDefines Event entity with title, descriptions, pricing, dates, quantities, revenues, associated entities, and timestamps. Manages event details and relationships within the Nest-jo repositorys modular architecture.\n\n\n\n\n\nsrc.modules.events.dto\n\n\n\n\nFile\nSummary\n\n\n\n\nupdate-event.dto.ts\nDefines UpdateEventDto class extending PartialType(CreateEventDto) for event updates, enhancing readability and maintainability in the repositorys event module structure.\n\n\ncreate-event.dto.ts\nTitle, descriptions, prices, quantity, dates, and category type. Enforces data integrity and consistency for event inputs.\n\n\n\n\n\nsrc.modules.tickets\n\n\n\n\nFile\nSummary\n\n\n\n\ntickets.service.ts\nManages ticket generation for approved reservations by creating new tickets with encrypted details, ensuring user and reservation integrity.\n\n\ntickets.module.ts\nImplements a module for ticket management within the Nest-JO repository. Handles ticket creation, importing related modules, and resolving circular dependencies. Key features include Ticket service providers, TypeORM module integration, and cross-module exports.\n\n\ntickets.service.spec.ts\nImplements ticket generation logic for approved reservations.-Validates reservations and users.-Creates new tickets with secure keys and QR codes.-Ensures data integrity and exception handling.\n\n\n\n\n\nsrc.modules.tickets.entities\n\n\n\n\nFile\nSummary\n\n\n\n\nticket.entity.ts\nDefines Ticket entity relationships with Reservation for a Nest.js application. Handles ticket information like purchaseKey, secureKey, and qrCode. Central to managing ticket reservations.\n\n\n\n\n\nsrc.modules.transactions\n\n\n\n\nFile\nSummary\n\n\n\n\ntransactions.controller.spec.ts\nTests the TransactionsController to ensure it returns user transactions correctly.Mocks service responses and verifies expected outcomes.\n\n\ntransactions.module.ts\nDefines a module for managing transactions by importing TypeORM entities Transaction, Event, ReservationDetails, and User. Utilizes forward referencing for ReservationsModule and TicketsModule. Registers TransactionsService, ReservationDetailsService, QueryHelperService, and TransactionsController as providers. Exports TransactionsService.\n\n\ntransactions.service.ts\nManages transactions within the repositorys architecture, creating, finding, and retrieving transactions with user-specific filtering. Calculates total cart amounts. Implements structured data selection. Aids in secure and efficient transaction processing.\n\n\ntransactions.service.spec.ts\nTests createTransaction, findTransactionByReservationId, calculateCartTotal, and findAll in TransactionsService ensure successful transaction creation, retrieval, cart total calculation, and error handling, respectively. This service interacts with repositories and helper services for managing user transactions effectively.\n\n\ntransactions.controller.ts\nManages user transactions with pagination and filtering capabilities. Utilizes access token security. Supports retrieval of filtered transactions and total count for a specified user ID.\n\n\n\n\n\nsrc.modules.transactions.entities\n\n\n\n\nFile\nSummary\n\n\n\n\ntransaction.entity.ts\nDefines transaction entity structure with user association, reservations, payment status, identifier, total amount, creation & update timestamps. Enhances repositorys modular architecture for handling transactional data within a Nest.js application.\n\n\n\n\n\nsrc.modules.transactions.dto\n\n\n\n\nFile\nSummary\n\n\n\n\ncreate-transaction.dto.ts\nDefines data structure for creating transactions within the transactions module. Key element integrating transaction functionality into the repository's architecture.\n\n\nupdate-transaction.dto.ts\nExtends CreateTransactionDto for partial updates-Enhances @nestjs/swagger with Swagger API docs\n\n\n\n\n\nsrc.modules.carts\n\n\n\n\nFile\nSummary\n\n\n\n\ncarts.service.ts\nFinds, creates, verifies, saves, and deletes carts in a Nest.js project. Handles cart operations efficiently, ensuring data integrity and user satisfaction.\n\n\ncarts.service.spec.ts\nImplements cart-related operations ensuring cart existence, verification, creation, and deletion, maintaining cart data integrity. Uses TypeORM for database interaction. Aligns with the repositorys modular architecture for scalable and maintainable codebase.\n\n\ncarts.module.ts\nDefines a module managing carts in the Nest-JO repository. Imports TypeOrmModule for Cart entity, provides CartsService as a provider, and exports CartsService for use in other modules.\n\n\n\n\n\nsrc.modules.carts.entities\n\n\n\n\nFile\nSummary\n\n\n\n\ncart.entity.ts\nDefine shopping cart structure with user association and item details for NestJS e-commerce app. Utilizes TypeORM to manage cart entity, user linkage, cart items, and creation/update timestamps.\n\n\n\n\n\nsrc.database\n\n\n\n\nFile\nSummary\n\n\n\n\ntypeorm-cli.config.ts\nDefines TypeORM configuration for PostgreSQL data source. Retrieves database connection details from environment variables. Specifies database connection settings like host, port, username, password, and database name. Sets entity and migration file paths for database schema synchronization.\n\n\nmigration-runner.ts\nExecutes database migrations using TypeORM. Logs actions, initializes datasource, and runs migrations. Handles failures gracefully by exiting with error status. Vital for ensuring database schema consistency in the nest-jo repository architecture.\n\n\ndatabase.module.ts\nEstablishes database connectivity with TypeORM using dynamic environment-based configuration for a PostgreSQL database. Enables seamless integration through async setup, ensuring secure and adaptable connections.\n\n\n\n\n\nsrc.database.redis\n\n\n\n\nFile\nSummary\n\n\n\n\nredis.service.ts\nHandles Redis caching in the repository by storing, retrieving, and deleting data using a reliable Redis client. It also includes methods to fetch and cache data from a source while ensuring safe JSON parsing and event-based cache clearance.\n\n\nredis.module.ts\nEstablishes and configures Redis client and service by leveraging environment variables. Allows access to Redis functionalities across the application.\n\n\nredis.service.spec.ts\nTests Redis interactions ensuring set, get, and delete operations function correctly, handling edge cases and errors. Implements caching with TTL support and safe JSON parsing for efficient data storage and retrieval.\n\n\n\n\n\nsrc.database.migrations\n\n\n\n\nFile\nSummary\n\n\n\n\n1712751776641-CreateTableReservationDetails.ts\nDefines a database migration to create a reservation_details table, managing detailed reservation info with event references and pricing details. Ensures table and enum type existence before creation or deletion using TypeORM.\n\n\n1712661230450-CreateTableCartItems.ts\nCreates cart_items table to store cart item details, including pricing data and references. Safely handles table creation and enum type existence checks. Reversible migration for managing cart items in the app's database schema.\n\n\n1712661230451-CreateTableReservations.ts\nDefines migration to create reservations table in the database. Adds columns for user, cart item, transaction, details, and ticket references. Executes up method to create table if not existed; down method drops table if present.\n\n\n1712717719010-CreateTableTickets.ts\nCreates ticket table with reservation and security details. Manages ticket data storage and relations within the apps database schema. Handles table creation if it doesnt exist and table removal during migration.\n\n\n1712572717258-CreateTableEvents.ts\nCreates events table schema in the database with columns for event details. Ensures category_type_enum exists. Supports managing event information.\n\n\n1711085051379-CreateTableUsers.ts\nImplements migration for creating users table in the database within nest-jo repository structure. Adds columns for user details like email, password, role, and more. Handles table creation and deletion based on existing conditions.\n\n\n1712661230452-CreateTableTransactions.ts\nCreates a transactions table in the database for storing transaction details, including user references and payment status, to facilitate transaction management within the application. The migration checks if the table already exists before creating it and includes necessary columns for data storage.\n\n\n1712661221574-CreateTableCarts.ts\nCreates a table cart storing shopping cart info, user references, creation/update timestamps. Checks existence before creation. Revert removes the cart table.\n\n\n1712642603000-CreateTableEventPrices.ts\nImplements migration for event_prices table setup in the schema. Adds columns for event pricing. Checks and creates table if not existing. Reverts changes by dropping the table if necessary.\n\n\n1712751780000-AddForeignKey.ts\nImplements foreign key constraints in reservations and tickets tables. Adds and drops constraints to ensure data integrity within the NestJS projects database architecture.\n\n\n\n\n\nsrc.database.migrations-test\n\n\n\n\nFile\nSummary\n\n\n\n\nadd-foreign-key-constraints.migration.spec.ts\nImplements migration for adding foreign key constraints between tables reservations, tickets, users, and transactions. The code ensures data integrity by defining relationships in the database schema.\n\n\ncreate-table-cart-items.migration.spec.ts\nVerifies if cart_items table exists; creates it if not. Drops cart_items table if needed. Uses constants in a test for migration. Migrates database schema with TypeORM.\n\n\ncreate-table-reservation-details.migration.spec.ts\nVerifies creation necessity for reservation_details table in DB. Ensures migration logic correctly handles existence check. Resides in src/database/migrations-test within the nest-jo repository.\n\n\ncreate-table-reservations.migration.spec.ts\nImplements migrations for creating and dropping the reservations table using TypeORM and Jest for testing. The code ensures proper setup and teardown of the reservations entity within the database schema in the NestJS application.\n\n\ncreate-table-events.migration.spec.ts\nImplements migration logic for creating and dropping the events table based on its existence using TypeORM in the nest-jo repository.\n\n\ncreate-table-event-prices.migration.spec.ts\nVerifies and creates event_prices table if absent, avoiding duplicates. Drops event_prices table on reversal. Integrates migration utilities for database schema management in NestJS project structure.\n\n\ncreate-table-tickets.migration.spec.ts\nVerifies and creates a tickets table in the database if necessary. Handles migration tasks, ensuring the table existence before execution. Enhances database structure integrity for the NestJS project.\n\n\ncreate-table-transactions.migration.spec.ts\nValidates and executes migrations to create or drop a transactions table in the database. Handles table creation based on existence status. Implements up and down migration methods with corresponding behavior checks.\n\n\ncreate-table-carts.migration.spec.ts\nImplements migration tests for creating and dropping a cart table based on existing table check. Verifies up method creates or skips table creation, down method drops cart table.\n\n\ncreate-table-users.migration.spec.ts\nImplements migration logic for creating and dropping a database table. Verifies table existence before creating it. Enhances data integrity during database schema changes.\n\n\n\n\n\nsrc.database.query\n\n\n\n\nFile\nSummary\n\n\n\n\nquery-helper.service.spec.ts\nImplements query building with functional tests for pagination and filtering logic using NestJS. The service constructs query options, where conditions, and nested order clauses based on specified criteria. This enhances database interaction for various data retrieval operations in the project.\n\n\nquery-helper.service.ts\nGenerates query options for database operations by handling pagination, sorting, and filtering based on provided DTO. Implements functions to build where conditions for filtering and create nested order conditions for sorting, enhancing overall database query flexibility within the repositorys architecture.\n\n\n\n\n\nsrc.utils.constants\n\n\n\n\nFile\nSummary\n\n\n\n\nconstants.env.ts\nDefines constants for environment variables in the NestJS application. Specifies values for different environments, aiding code clarity and organization within the projects architecture.\n\n\nconstants.common.ts\nDefines price formulas and default page sizes with multipliers for different entities, enhancing readability and maintainability.\n\n\nconstants.migrationdb.ts\nPrice formule, user role, reservation status, and sports categories if they dont exist. Supports dynamic creation based on predefined values to ensure database integrity and consistency.\n\n\n\n\n\nsrc.utils.services\n\n\n\n\nFile\nSummary\n\n\n\n\nconvert-utils.service.spec.ts\nTests conversion functions for converting days to seconds and date strings to Date objects within the NestJS application. The service ensures accurate conversions and proper handling of invalid inputs, supporting robust functionality within the architecture.\n\n\nconvert-utils.service.ts\nEnables utility conversions for durations and dates within the repositorys architecture. Converts duration strings to seconds and date strings to Date objects for seamless data manipulation.\n\n\n\n\n\nsrc.security.encryption\n\n\n\n\nFile\nSummary\n\n\n\n\nencryption.service.ts\nHandles encryption tasks by hashing passwords with Argon2, verifying passwords, generating UUIDs, creating secure keys for users, and generating QR codes from secure keys. Integrated into the architecture for secure user data encryption and key generation.\n\n\nencryption.service.spec.ts\nImplements encryption functionality using Argon2 for securely hashing and verifying passwords in the context of the repositorys security module. The code ensures password protection through hash generation and validation.\n\n\n\n\n\nsrc.security.guards\n\n\n\n\nFile\nSummary\n\n\n\n\nis-creator.guard.ts\nValidates user as content creator, enabling safe content updates. Guards route access, prevents unauthorized modifications. Utilizes reflection for dynamic checks within the NestJS architecture.\n\n\nindex.ts\nExports various security guards, including RoleGuard, IsCreatorGuard, and AccessTokenGuard, crucial for enforcing access control and authorization rules within the NestJS application. Integrated into the security module to enhance overall API security and maintain system integrity.\n\n\nrole.guard.spec.ts\nImplements RoleGuard testing for access control based on user roles. Validates allowing or denying access scenarios, ensuring the correct permissions are enforced within the Nest.js applications security architecture.\n\n\nrole.guard.ts\nImplements RoleGuard ensuring route access based on user role metadata. Retrieves required role from Reflectors, compares with user role from the request, allowing access if matched. Vital component for route authorization within the repositorys architecture.\n\n\nis-creator.guard.spec.ts\nVerifies content creator status with IsCreatorGuard. Tests if user is the creator for certain content. Uses execution context to authenticate and respond accordingly.\n\n\naccess-token.guard.ts\nSafeguard routes with JWT access tokens using the AccessTokenGuard to enforce authentication in the nest-jo repositorys security architecture.\n\n\n\n\n\nsrc.security.cookie\n\n\n\n\nFile\nSummary\n\n\n\n\ncookie.service.spec.ts\nTests CookieService methods for handling refresh token cookies, ensuring correct extraction, setting based on configurations, and clearing. Dependencies mocked for controlled testing environment.\n\n\ncookie.service.ts\nManages HTTP cookies by extracting, setting, and clearing refresh tokens securely based on configuration settings. Its functions ensure proper handling of cookies for user authentication within NestJS applications under specified environments.\n\n\n\n\n\nsrc.security.token\n\n\n\n\nFile\nSummary\n\n\n\n\ntoken-management.service.spec.ts\nCreates access and refresh tokens, and verifies them using JWT and configurations. Key features include token generation based on user roles and token expiration, enhancing security within the NestJS architecture.\n\n\ntoken.service.ts\nManages JWT tokens for user authentication, allowing token generation, refresh, and validation with Redis. Handles token creation, refreshing, and error responses for access control.\n\n\nrefreshtoken-store.service.spec.ts\nImplements RefreshTokenStoreService to manage refresh tokens in Redis. Tests storing, verifying, and removing tokens. Dependencies on RedisService, ConfigService, and ConvertUtilsService. Part of the security module in the NestJS project structure.\n\n\nrefreshtoken-store.service.ts\nStore, verify, and remove operations. Dependencies include Redis service, conversion utilities, and configuration variables. Key features are storing tokens with TTL and verifying token validity.\n\n\ntoken-management.service.ts\nManages JWT tokens by creating access and refresh tokens, verifying token authenticity, leveraging JWT service, and configuration settings from the parent repository.\n\n\ntoken.service.spec.ts\nTests token generation, refresh, validation, and cookie handling. Manages token services and Redis storage. Validates and extracts JWT tokens. Key for user authentication and authorization flows in the NestJS project structure.\n\n\n\n\n\nsrc.security.throttler\n\n\n\n\nFile\nSummary\n\n\n\n\nthrottler.module.ts\nEnables rate limiting using Throttler in NestJS. Implements a module with a 10 requests per minute limit with a 1-minute TTL. Integrated as a crucial component for managing traffic and enhancing security within the NestJS architecture.\n\n\n\n\n\nsrc.security.auth\n\n\n\n\nFile\nSummary\n\n\n\n\nauth.controller.ts\nRegister, log in, update password, generate access tokens, refresh tokens, log out, and delete user. Implements necessary routes and guards for user-related actions within the projects architecture.\n\n\nauth.controller.spec.ts\nCreate, login, updatePassword, getRefreshToken, refreshToken, logout ensuring correct service method calls & parameter passing. Enhances code quality and robustness in authentication functionalities for the NestJS-based project.\n\n\nauth.service.spec.ts\nTests authentication and user functions. Handles signup, login, password update, and logout. Mocks repository methods and services for user actions, enhancing security and error handling in the NestJS application.\n\n\nauth.service.ts\nManages user authentication and operations, enabling user registration, logins, password updates, logouts, and deletions. Utilizes encryption, token generation, and user repositories to handle user-related tasks securely and efficiently.\n\n\nauth.module.ts\nDefines authentication module with services and controllers. Integrates TypeORM for User entity, CartsModule, and CommonModule. Registers AuthService, TokenService, CookieService, JwtService, TokenManagementService, and RefreshTokenStoreService as providers.\n\n\n\n\n\nsrc.security.auth.dto\n\n\n\n\nFile\nSummary\n\n\n\n\nsignup.dto.ts\nDefines SignUpDto schema specifying user data fields validation rules like first name, last name, email, password, and role. Ensures data quality and integrity for user sign-up within the Nest-JO repositorys security module.\n\n\nlogin.dto.ts\nDefines a strict DTO for user login within the security module, enforcing valid email and non-empty password fields using class-validator.\n\n\nrefresh-token.dto.ts\nDefines RefreshTokenDto class validating a non-empty string refreshToken for token refreshing in the Nest.js projects security module.\n\n\nupdate-password.dto.ts\nDefines DTO for updating user passwords with validation rules ensuring strong security. Situated in the security module, aligns with the repositorys modular architecture.\n\n\n\n\n\nsrc.security.auth.strategies\n\n\n\n\nFile\nSummary\n\n\n\n\naccess-token.strategy.spec.ts\nTests access token validation strategy for user authentication using JWT tokens. Validates user, handles user not found, and ensures token version match. Key components include User entity, Repository, and ConfigService for token validation.\n\n\naccess-token.strategy.ts\nValidates JWT access tokens for user authentication using Passport, ensuring tokens are valid and not expired. Retrieves user details from the database based on the JWT payload, throwing an unauthorized exception if the token is invalid.\n\n\n\n\n\ntest\n\n\n\n\nFile\nSummary\n\n\n\n\napp.e2e-spec.ts\nTests the NestJS applications root endpoint using supertest, validating it returns Hello World!' with a 200 status code. Integrates with the AppModule for testing setup.\n\n\njest-e2e.json\nDefines end-to-end test configuration for NestJS repository. Sets file extensions, directory, test environment, file matching regex, and transforms TypeScript with ts-jest to ensure seamless test execution.\n\n\n\n\n\n\nGetting Started\nSystem Requirements:\n\nTypeScript: version x.y.z\n\nInstallation\nFrom source\n\n\n\nClone the nest-jo repository:\n\nExample :$ git clone https://github.com/Binary-Blade/nest-jo\nChange to the project directory:\n\nExample :$ cd nest-jo\nInstall the dependencies:\n\nExample :$ npm install\nUsage\nFrom source\n\n\nRun nest-jo using the command below:\nExample :$ npm run build && node dist/main.js\nTests\n\nRun the test suite using the command below:\nExample :$ npm test\n\nProject Roadmap\n\n ► INSERT-TASK-1\n ► INSERT-TASK-2\n ► ...\n\n\nContributing\nContributions are welcome! Here are several ways you can contribute:\n\nReport Issues: Submit bugs found or log feature requests for the nest-jo project.\nSubmit Pull Requests: Review open PRs, and submit your own PRs.\nJoin the Discussions: Share your insights, provide feedback, or ask questions.\n\n\nContributing Guidelines\n\n\nFork the Repository: Start by forking the project repository to your github account.\nClone Locally: Clone the forked repository to your local machine using a git client.Example :git clone https://github.com/Binary-Blade/nest-jo\nCreate a New Branch: Always work on a new branch, giving it a descriptive name.Example :git checkout -b new-feature-x\nMake Your Changes: Develop and test your changes locally.\nCommit Your Changes: Commit with a clear message describing your updates.Example :git commit -m 'Implemented new feature x.'\nPush to github: Push the changes to your forked repository.Example :git push origin new-feature-x\nSubmit a Pull Request: Create a PR against the original project repository. Clearly describe the changes and their motivations.\nReview: Once your PR is reviewed and approved, it will be merged into the main branch. Congratulations on your contribution!\n\n\nContributor Graph\n\n\n   \n      \n   \n\n\n\n\nLicense\nThis project is protected under the SELECT-A-LICENSE License. For more details, refer to the LICENSE file.\n\nAcknowledgments\n\nList any resources, contributors, inspiration, etc. here.\n\nReturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CartItemsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationDetailsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ThrollerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CartItemsModule\n\n\n\ncluster_CartItemsModule_exports\n\n\n\ncluster_CartItemsModule_providers\n\n\n\ncluster_CartsModule\n\n\n\ncluster_CartsModule_exports\n\n\n\ncluster_CartsModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_ReservationDetailsModule\n\n\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_exports\n\n\n\ncluster_ReservationsModule_providers\n\n\n\ncluster_ThrollerModule\n\n\n\ncluster_ThrollerModule_imports\n\n\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCartItemsModule\n\nCartItemsModule\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nCartItemsModule->ReservationsModule\n\n\n\nAppModule -->\n\nCartItemsModule->AppModule\n\n\n\n\n\nCartItemsService \n\nCartItemsService \n\nCartItemsService  -->\n\nCartItemsModule->CartItemsService \n\n\n\n\n\nReservationDetailsModule\n\nReservationDetailsModule\n\nReservationDetailsModule -->\n\nCartItemsModule->ReservationDetailsModule\n\n\n\n\n\nCartsModule\n\nCartsModule\n\nAuthModule -->\n\nCartsModule->AuthModule\n\n\n\nCartItemsModule -->\n\nCartsModule->CartItemsModule\n\n\n\nReservationsModule -->\n\nCartsModule->ReservationsModule\n\n\n\nAppModule -->\n\nCartsModule->AppModule\n\n\n\n\n\nCartsService \n\nCartsService \n\nCartsService  -->\n\nCartsModule->CartsService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nCartItemsModule -->\n\nEventsModule->CartItemsModule\n\n\n\nReservationsModule -->\n\nEventsModule->ReservationsModule\n\n\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nEventPricesService \n\nEventPricesService \n\nEventPricesService  -->\n\nEventsModule->EventPricesService \n\n\n\n\n\nEventSalesService \n\nEventSalesService \n\nEventSalesService  -->\n\nEventsModule->EventSalesService \n\n\n\n\n\nEventsService \n\nEventsService \n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\nReservationDetailsModule -->\n\nEventsModule->ReservationDetailsModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nPaymentModule->PaymentService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nCommonModule -->\n\nRedisModule->CommonModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nREDIS_CLIENT \n\nREDIS_CLIENT \n\nREDIS_CLIENT  -->\n\nRedisModule->REDIS_CLIENT \n\n\n\nPaymentModule -->\n\nReservationsModule->PaymentModule\n\n\n\nAppModule -->\n\nReservationsModule->AppModule\n\n\n\n\n\nReservationsProcessorService \n\nReservationsProcessorService \n\nReservationsProcessorService  -->\n\nReservationsModule->ReservationsProcessorService \n\n\n\n\n\nReservationsService \n\nReservationsService \n\nReservationsService  -->\n\nReservationsModule->ReservationsService \n\n\n\n\n\nThrollerModule\n\nThrollerModule\n\nAppModule -->\n\nThrollerModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nPaymentModule -->\n\nTicketsModule->PaymentModule\n\n\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nPaymentModule -->\n\nTransactionsModule->PaymentModule\n\n\n\nReservationsModule -->\n\nTransactionsModule->ReservationsModule\n\n\n\nTicketsModule -->\n\nTransactionsModule->TicketsModule\n\n\n\nAppModule -->\n\nTransactionsModule->AppModule\n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\n\n\nConvertUtilsService \n\nConvertUtilsService \n\nConvertUtilsService  -->\n\nCommonModule->ConvertUtilsService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCommonModule->EncryptionService \n\n\n\nPaymentService  -->\n\nCommonModule->PaymentService \n\n\n\nRedisService  -->\n\nCommonModule->RedisService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nCommonModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCookieService\n\nCookieService\n\nAuthModule -->\n\nCookieService->AuthModule\n\n\n\n\n\nRefreshTokenStoreService\n\nRefreshTokenStoreService\n\nAuthModule -->\n\nRefreshTokenStoreService->AuthModule\n\n\n\n\n\nTokenManagementService\n\nTokenManagementService\n\nAuthModule -->\n\nTokenManagementService->AuthModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\n\n\nCartItemsService\n\nCartItemsService\n\nCartItemsModule -->\n\nCartItemsService->CartItemsModule\n\n\n\n\n\nReservationDetailsService\n\nReservationDetailsService\n\nCartItemsModule -->\n\nReservationDetailsService->CartItemsModule\n\n\n\nReservationsModule -->\n\nReservationDetailsService->ReservationsModule\n\n\n\nTransactionsModule -->\n\nReservationDetailsService->TransactionsModule\n\n\n\nReservationDetailsModule -->\n\nReservationDetailsService->ReservationDetailsModule\n\n\n\n\n\nCartsService\n\nCartsService\n\nCartsModule -->\n\nCartsService->CartsModule\n\n\n\n\n\nConvertUtilsService\n\nConvertUtilsService\n\nCommonModule -->\n\nConvertUtilsService->CommonModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCommonModule -->\n\nEncryptionService->CommonModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\nCommonModule -->\n\nPaymentService->CommonModule\n\n\n\n\n\nQueryHelperService\n\nQueryHelperService\n\nEventsModule -->\n\nQueryHelperService->EventsModule\n\n\n\nReservationsModule -->\n\nQueryHelperService->ReservationsModule\n\n\n\nTransactionsModule -->\n\nQueryHelperService->TransactionsModule\n\n\n\nUsersModule -->\n\nQueryHelperService->UsersModule\n\n\n\nCommonModule -->\n\nQueryHelperService->CommonModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\nCommonModule -->\n\nRedisService->CommonModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\nCommonModule -->\n\nUsersService->CommonModule\n\n\n\n\n\nEventPricesService\n\nEventPricesService\n\nEventsModule -->\n\nEventPricesService->EventsModule\n\n\n\n\n\nEventSalesService\n\nEventSalesService\n\nEventsModule -->\n\nEventSalesService->EventsModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nReservationsProcessorService\n\nReservationsProcessorService\n\nReservationsModule -->\n\nReservationsProcessorService->ReservationsModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\nThrottler\n\nThrottler\n\nThrollerModule -->\n\nThrottler->ThrollerModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nUsersModule -->\n\nAccessTokenStrategy->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    29 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            commonFormat   (src/.../winston.config.ts)\n                        \n                        \n                            configService   (src/.../typeorm-cli.config.ts)\n                        \n                        \n                            consoleFormat   (src/.../winston.config.ts)\n                        \n                        \n                            createEnumType   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            DEFAULT_PAGE_SIZE   (src/.../constants.common.ts)\n                        \n                        \n                            DEV_ENV   (src/.../constants.env.ts)\n                        \n                        \n                            DOES_ENUM_CATEGORY_TYPE_EXIST   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            DOES_ENUM_PRICE_FORMULE_TYPE_EXIST   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            DOES_ENUM_STATUS_RESERVATION_EXIST   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            DOES_ENUM_USER_ROLE_EXIST   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            ENUM_TYPES_DB   (src/.../constants.migrationdb.ts)\n                        \n                        \n                            level   (src/.../winston.config.ts)\n                        \n                        \n                            levels   (src/.../winston.config.ts)\n                        \n                        \n                            logger   (src/.../winston.config.ts)\n                        \n                        \n                            NODE_ENV   (src/.../constants.env.ts)\n                        \n                        \n                            PRICES_FORMULA   (src/.../constants.common.ts)\n                        \n                        \n                            PROD_ENV   (src/.../constants.env.ts)\n                        \n                        \n                            Role   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLE_KEY   (src/.../role.decorator.ts)\n                        \n                        \n                            UserId   (src/.../user-id.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/logger/winston.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        commonFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :     winston.Logform.Format\n\n                    \n                \n                \n                    \n                        Default value : winston.format.combine(\n  winston.format.timestamp({ format: 'YY-MM-DD HH:mm:ss' }),\n  winston.format.errors({ stack: true }), // Print stack trace\n  winston.format.splat()\n)\n                    \n                \n\n            \n                \n                    Common format for all logs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        consoleFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :     winston.Logform.Format\n\n                    \n                \n                \n                    \n                        Default value : winston.format.combine(\n  commonFormat,\n  winston.format.colorize(), // Colorize part of the message\n  winston.format.printf(({ level, message, timestamp }) => {\n    return `${timestamp} ${level}: ${message}`;\n  })\n)\n                    \n                \n\n            \n                \n                    Console-specific log format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): string => {\n  const env = process.env.NODE_ENV || DEV_ENV;\n  const isDevelopment = env === DEV_ENV;\n  return isDevelopment ? 'debug' : 'warn';\n}\n                    \n                \n\n            \n                \n                    Determines the logging level based on the environment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        levels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  error: 0,\n  warn: 1,\n  info: 2,\n  http: 3,\n  debug: 4\n}\n                    \n                \n\n            \n                \n                    Logging levels for different types of messages.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : winston.createLogger({\n  level: level(),\n  levels,\n  defaultMeta: { service: 'user-service' },\n  transports: [\n    new winston.transports.File({\n      filename: 'error.log',\n      level: 'error',\n      format: winston.format.combine(commonFormat, winston.format.json()) // Use JSON format for files\n    }),\n    new winston.transports.File({\n      filename: 'combined.log',\n      format: winston.format.combine(commonFormat, winston.format.json()) // Consistent with error log format\n    })\n  ]\n})\n                    \n                \n\n            \n                \n                    Winston logger configuration.\n\n                \n            \n\n        \n    \n\n    src/database/typeorm-cli.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n\n    src/utils/constants/constants.migrationdb.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createEnumType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (typeName: string, values: string[]): string => `\nDO $$\nBEGIN\n    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = '${typeName}') THEN\n        CREATE TYPE \"${typeName}\" AS ENUM(${values.map(value => `'${value}'`).join(', ')});\n    END IF;\nEND\n$$;\n`\n                    \n                \n\n            \n                \n                    Generates SQL for creating an enum type if it does not already exist.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOES_ENUM_CATEGORY_TYPE_EXIST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : createEnumType(\n  'category_type_enum',\n  ENUM_TYPES_DB.category_type\n)\n                    \n                \n\n            \n                \n                    SQL command to check and create the category_type_enum if it does not exist.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOES_ENUM_PRICE_FORMULE_TYPE_EXIST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : createEnumType(\n  'type_price_formule_enum',\n  ENUM_TYPES_DB.type_price_formule\n)\n                    \n                \n\n            \n                \n                    SQL command to check and create the type_price_formule_enum if it does not exist.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOES_ENUM_STATUS_RESERVATION_EXIST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : createEnumType(\n  'status_reservation_enum',\n  ENUM_TYPES_DB.status_reservation\n)\n                    \n                \n\n            \n                \n                    SQL command to check and create the status_reservation_enum if it does not exist.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOES_ENUM_USER_ROLE_EXIST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : createEnumType(\n  'user_role_enum',\n  ENUM_TYPES_DB.user_role\n)\n                    \n                \n\n            \n                \n                    SQL command to check and create the user_role_enum if it does not exist.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENUM_TYPES_DB\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  type_price_formule: ['SOLO', 'DUO', 'FAMILY'],\n  user_role: ['USER', 'ADMIN'],\n  status_reservation: ['APPROVED', 'REJECTED', 'CANCELLED'],\n  category_type: [\n    'ARCHERY',\n    'ATHLETICS',\n    'BADMINTON',\n    'BASKETBALL',\n    'BOXING',\n    'CANOE_KAYAK',\n    'CYCLING',\n    'DIVING',\n    'FENCING',\n    'FOOTBALL',\n    'GYMNASTICS',\n    'HANDBALL',\n    'ROWING',\n    'SAILING',\n    'SWIMMING',\n    'TABLE_TENNIS',\n    'TENNIS',\n    'VOLLEYBALL',\n    'WEIGHTLIFTING',\n    'KARATE'\n  ]\n}\n                    \n                \n\n            \n                \n                    Database enum types with their possible values.\n\n                \n            \n\n        \n    \n\n    src/utils/constants/constants.common.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_PAGE_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Readonly>\n\n                    \n                \n                \n                    \n                        Default value : {\n  USER: 8,\n  RESERVATION: 12,\n  EVENT: 8\n} as const satisfies Record\n                    \n                \n\n            \n                \n                    Default page size constants for different entities.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRICES_FORMULA\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReadonlyArray\n\n                    \n                \n                \n                    \n                        Default value : [\n  { type: PriceFormulaEnum.SOLO, multiplier: 1 },\n  { type: PriceFormulaEnum.DUO, multiplier: 1.3 },\n  { type: PriceFormulaEnum.FAMILY, multiplier: 1.8 }\n] as const\n                    \n                \n\n            \n                \n                    Array of price formulas with their respective multipliers.\n\n                \n            \n\n        \n    \n\n    src/utils/constants/constants.env.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEV_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'development'\n                    \n                \n\n            \n                \n                    Value for the development environment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NODE_ENV'\n                    \n                \n\n            \n                \n                    Environment variable for the node environment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PROD_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n            \n                \n                    Value for the production environment.\n\n                \n            \n\n        \n    \n\n    src/common/decorators/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: UserRole): MethodDecorator => SetMetadata(ROLE_KEY, role)\n                    \n                \n\n            \n                \n                    Decorator to set the role metadata on a route handler.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'role'\n                    \n                \n\n            \n                \n                    Key used to store role metadata.\n\n                \n            \n\n        \n    \n\n    src/common/decorators/user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_: unknown, ctx: ExecutionContext): number => {\n  const request = ctx.switchToHttp().getRequest();\n  return request.user?.userId;\n})\n                    \n                \n\n            \n                \n                    Custom decorator to extract the user ID from the request object.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
